// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#include "dota_gcmessages_client_chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invited_account_id_(0u){}
struct CMsgClientToGCPrivateChatInviteDefaultTypeInternal {
  constexpr CMsgClientToGCPrivateChatInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatInviteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCPrivateChatInviteDefaultTypeInternal _CMsgClientToGCPrivateChatInvite_default_instance_;
constexpr CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , kick_account_id_(0u){}
struct CMsgClientToGCPrivateChatKickDefaultTypeInternal {
  constexpr CMsgClientToGCPrivateChatKickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatKickDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCPrivateChatKickDefaultTypeInternal _CMsgClientToGCPrivateChatKick_default_instance_;
constexpr CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , promote_account_id_(0u){}
struct CMsgClientToGCPrivateChatPromoteDefaultTypeInternal {
  constexpr CMsgClientToGCPrivateChatPromoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatPromoteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatPromote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCPrivateChatPromoteDefaultTypeInternal _CMsgClientToGCPrivateChatPromote_default_instance_;
constexpr CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , demote_account_id_(0u){}
struct CMsgClientToGCPrivateChatDemoteDefaultTypeInternal {
  constexpr CMsgClientToGCPrivateChatDemoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatDemoteDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatDemote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCPrivateChatDemoteDefaultTypeInternal _CMsgClientToGCPrivateChatDemote_default_instance_;
constexpr CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CMsgGCToClientPrivateChatResponseDefaultTypeInternal {
  constexpr CMsgGCToClientPrivateChatResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPrivateChatResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPrivateChatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPrivateChatResponseDefaultTypeInternal _CMsgGCToClientPrivateChatResponse_default_instance_;
constexpr CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal {
  constexpr CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCPrivateChatInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal _CMsgClientToGCPrivateChatInfoRequest_default_instance_;
constexpr CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , status_(0u){}
struct CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal {
  constexpr CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal() {}
  union {
    CMsgGCToClientPrivateChatInfoResponse_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_;
constexpr CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , private_chat_channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , creator_(0u)
  , creation_date_(0u){}
struct CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal {
  constexpr CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPrivateChatInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal _CMsgGCToClientPrivateChatInfoResponse_default_instance_;
constexpr CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_type_(0)

  , silent_rejection_(false){}
struct CMsgDOTAJoinChatChannelDefaultTypeInternal {
  constexpr CMsgDOTAJoinChatChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAJoinChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAJoinChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAJoinChatChannelDefaultTypeInternal _CMsgDOTAJoinChatChannel_default_instance_;
constexpr CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTALeaveChatChannelDefaultTypeInternal {
  constexpr CMsgDOTALeaveChatChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaveChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaveChatChannelDefaultTypeInternal _CMsgDOTALeaveChatChannel_default_instance_;
constexpr CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u){}
struct CMsgGCChatReportPublicSpamDefaultTypeInternal {
  constexpr CMsgGCChatReportPublicSpamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCChatReportPublicSpamDefaultTypeInternal() {}
  union {
    CMsgGCChatReportPublicSpam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCChatReportPublicSpamDefaultTypeInternal _CMsgGCChatReportPublicSpam_default_instance_;
constexpr CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ignored_account_id_(0u){}
struct CMsgDOTAClientIgnoredUserDefaultTypeInternal {
  constexpr CMsgDOTAClientIgnoredUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAClientIgnoredUserDefaultTypeInternal() {}
  union {
    CMsgDOTAClientIgnoredUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAClientIgnoredUserDefaultTypeInternal _CMsgDOTAClientIgnoredUser_default_instance_;
constexpr CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , duration_(0u){}
struct CMsgDOTAChatModeratorBanDefaultTypeInternal {
  constexpr CMsgDOTAChatModeratorBanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatModeratorBanDefaultTypeInternal() {}
  union {
    CMsgDOTAChatModeratorBan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatModeratorBanDefaultTypeInternal _CMsgDOTAChatModeratorBan_default_instance_;
constexpr CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roll_min_(0)
  , roll_max_(0)
  , result_(0){}
struct CMsgDOTAChatMessage_DiceRollDefaultTypeInternal {
  constexpr CMsgDOTAChatMessage_DiceRollDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_DiceRollDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_DiceRoll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatMessage_DiceRollDefaultTypeInternal _CMsgDOTAChatMessage_DiceRoll_default_instance_;
constexpr CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : question_id_(0u)
  , answer_index_(0u)
  , party_questions_correct_(0u)
  , party_questions_viewed_(0u)
  , party_trivia_points_(0u){}
struct CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal {
  constexpr CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage_TriviaAnswered _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
constexpr CMsgDOTAChatMessage::CMsgDOTAChatMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suggest_invite_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , share_lobby_passkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , suggest_pick_hero_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dice_roll_(nullptr)
  , trivia_answer_(nullptr)
  , channel_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , timestamp_(0u)
  , suggest_invite_account_id_(0u)
  , fantasy_draft_owner_account_id_(0u)
  , fantasy_draft_player_account_id_(0u)
  , event_id_(0u)
  , event_points_(0u)
  , share_profile_account_id_(0u)
  , share_party_id_(PROTOBUF_ULONGLONG(0))
  , share_lobby_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u)
  , suggest_invite_to_lobby_(false)
  , coin_flip_(false)
  , legacy_battle_cup_victory_(false)
  , started_finding_match_(false)
  , share_lobby_custom_game_id_(PROTOBUF_ULONGLONG(0))
  , private_chat_channel_id_(0u)
  , status_(0u)
  , badge_level_(0u)
  , suggest_pick_hero_id_(0u)
  , battle_cup_streak_(0u)
  , suggest_ban_hero_id_(0u)
  , requested_ability_id_(0u)
  , chat_flags_(0u)
  , ctrl_is_down_(false)
  , favorite_team_id_(0u)
  , favorite_team_quality_(0u)
  , player_id_(-1){}
struct CMsgDOTAChatMessageDefaultTypeInternal {
  constexpr CMsgDOTAChatMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatMessageDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatMessageDefaultTypeInternal _CMsgDOTAChatMessage_default_instance_;
constexpr CMsgDOTAChatMember::CMsgDOTAChatMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u)
  , status_(0u){}
struct CMsgDOTAChatMemberDefaultTypeInternal {
  constexpr CMsgDOTAChatMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatMemberDefaultTypeInternal() {}
  union {
    CMsgDOTAChatMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatMemberDefaultTypeInternal _CMsgDOTAChatMember_default_instance_;
constexpr CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , welcome_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_(0u)
  , max_members_(0u)
  , channel_id_(PROTOBUF_ULONGLONG(0))
  , channel_type_(0)

  , result_(0)

  , gc_initiated_join_(false)
  , channel_user_id_(0u)
  , special_privileges_(0)
{}
struct CMsgDOTAJoinChatChannelResponseDefaultTypeInternal {
  constexpr CMsgDOTAJoinChatChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAJoinChatChannelResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAJoinChatChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAJoinChatChannelResponseDefaultTypeInternal _CMsgDOTAJoinChatChannelResponse_default_instance_;
constexpr CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAChatChannelFullUpdateDefaultTypeInternal {
  constexpr CMsgDOTAChatChannelFullUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatChannelFullUpdateDefaultTypeInternal() {}
  union {
    CMsgDOTAChatChannelFullUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatChannelFullUpdateDefaultTypeInternal _CMsgDOTAChatChannelFullUpdate_default_instance_;
constexpr CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_id_(PROTOBUF_ULONGLONG(0))
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u)
  , status_(0u){}
struct CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal {
  constexpr CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAOtherJoinedChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal _CMsgDOTAOtherJoinedChatChannel_default_instance_;
constexpr CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(PROTOBUF_ULONGLONG(0))
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u){}
struct CMsgDOTAOtherLeftChatChannelDefaultTypeInternal {
  constexpr CMsgDOTAOtherLeftChatChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAOtherLeftChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAOtherLeftChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAOtherLeftChatChannelDefaultTypeInternal _CMsgDOTAOtherLeftChatChannel_default_instance_;
constexpr CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u)
  , status_(0u){}
struct CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal {
  constexpr CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal() {}
  union {
    CMsgDOTAChatChannelMemberUpdate_JoinedMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_;
constexpr CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_steam_ids_()
  , joined_members_()
  , channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal {
  constexpr CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal() {}
  union {
    CMsgDOTAChatChannelMemberUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal _CMsgDOTAChatChannelMemberUpdate_default_instance_;
constexpr CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgDOTARequestChatChannelListDefaultTypeInternal {
  constexpr CMsgDOTARequestChatChannelListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARequestChatChannelListDefaultTypeInternal _CMsgDOTARequestChatChannelList_default_instance_;
constexpr CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_members_(0u)
  , channel_type_(0)
{}
struct CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal {
  constexpr CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelListResponse_ChatChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
constexpr CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_(){}
struct CMsgDOTARequestChatChannelListResponseDefaultTypeInternal {
  constexpr CMsgDOTARequestChatChannelListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARequestChatChannelListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTARequestChatChannelListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARequestChatChannelListResponseDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_default_instance_;
constexpr CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAChatGetUserListDefaultTypeInternal {
  constexpr CMsgDOTAChatGetUserListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetUserListDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetUserList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatGetUserListDefaultTypeInternal _CMsgDOTAChatGetUserList_default_instance_;
constexpr CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , channel_user_id_(0u)
  , status_(0u){}
struct CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal {
  constexpr CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetUserListResponse_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
constexpr CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , channel_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAChatGetUserListResponseDefaultTypeInternal {
  constexpr CMsgDOTAChatGetUserListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetUserListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetUserListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatGetUserListResponseDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_default_instance_;
constexpr CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_type_(0)
{}
struct CMsgDOTAChatGetMemberCountDefaultTypeInternal {
  constexpr CMsgDOTAChatGetMemberCountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetMemberCountDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetMemberCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatGetMemberCountDefaultTypeInternal _CMsgDOTAChatGetMemberCount_default_instance_;
constexpr CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_type_(0)

  , member_count_(0u){}
struct CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal {
  constexpr CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAChatGetMemberCountResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal _CMsgDOTAChatGetMemberCountResponse_default_instance_;
constexpr CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_latitude_(0)
  , max_latitude_(0)
  , min_longitude_(0)
  , max_longitude_(0){}
struct CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal {
  constexpr CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal() {}
  union {
    CMsgDOTAChatRegionsEnabled_Region _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
constexpr CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_regions_()
  , enable_all_regions_(false){}
struct CMsgDOTAChatRegionsEnabledDefaultTypeInternal {
  constexpr CMsgDOTAChatRegionsEnabledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAChatRegionsEnabledDefaultTypeInternal() {}
  union {
    CMsgDOTAChatRegionsEnabled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAChatRegionsEnabledDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[33];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInvite, invited_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatKick, kick_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatPromote, promote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatDemote, demote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatResponse, username_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCPrivateChatInfoRequest, private_chat_channel_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse_Member, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse_Member, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse_Member, status_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, creator_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPrivateChatInfoResponse, creation_date_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannel, silent_rejection_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveChatChannel, channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCChatReportPublicSpam, channel_user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClientIgnoredUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClientIgnoredUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClientIgnoredUser, ignored_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatModeratorBan, duration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, roll_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, roll_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_DiceRoll, result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, question_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, answer_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, party_questions_correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, party_questions_viewed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage_TriviaAnswered, party_trivia_points_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, text_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_invite_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_invite_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, fantasy_draft_owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, fantasy_draft_player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_invite_to_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, coin_flip_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, share_profile_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, dice_roll_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, share_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, share_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, share_lobby_custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, share_lobby_passkey_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, private_chat_channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, legacy_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, battle_cup_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, badge_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_pick_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_pick_hero_role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, suggest_ban_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, trivia_answer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, chat_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, started_finding_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, ctrl_is_down_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, favorite_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMessage, favorite_team_quality_),
  8,
  7,
  0,
  1,
  9,
  10,
  2,
  11,
  12,
  13,
  19,
  14,
  20,
  35,
  15,
  18,
  5,
  16,
  17,
  23,
  3,
  24,
  25,
  21,
  28,
  26,
  27,
  4,
  29,
  6,
  30,
  31,
  22,
  32,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatMember, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, max_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, gc_initiated_join_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, welcome_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAJoinChatChannelResponse, special_privileges_),
  2,
  0,
  4,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelFullUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelFullUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelFullUpdate, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelFullUpdate, members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherJoinedChatChannel, status_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAOtherLeftChatChannel, channel_user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate_JoinedMember, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate, left_steam_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatChannelMemberUpdate, joined_members_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, num_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_type_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARequestChatChannelListResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserList, channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse_Member, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetUserListResponse, members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCount, channel_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, channel_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, channel_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatGetMemberCountResponse, member_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, min_latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, max_latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, min_longitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled_Region, max_longitude_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, enable_all_regions_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAChatRegionsEnabled, enabled_regions_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgClientToGCPrivateChatInvite)},
  { 9, 16, sizeof(::CMsgClientToGCPrivateChatKick)},
  { 18, 25, sizeof(::CMsgClientToGCPrivateChatPromote)},
  { 27, 34, sizeof(::CMsgClientToGCPrivateChatDemote)},
  { 36, 44, sizeof(::CMsgGCToClientPrivateChatResponse)},
  { 47, 53, sizeof(::CMsgClientToGCPrivateChatInfoRequest)},
  { 54, 62, sizeof(::CMsgGCToClientPrivateChatInfoResponse_Member)},
  { 65, 74, sizeof(::CMsgGCToClientPrivateChatInfoResponse)},
  { 78, 86, sizeof(::CMsgDOTAJoinChatChannel)},
  { 89, 95, sizeof(::CMsgDOTALeaveChatChannel)},
  { 96, 103, sizeof(::CMsgGCChatReportPublicSpam)},
  { 105, 111, sizeof(::CMsgDOTAClientIgnoredUser)},
  { 112, 120, sizeof(::CMsgDOTAChatModeratorBan)},
  { 123, 131, sizeof(::CMsgDOTAChatMessage_DiceRoll)},
  { 134, 144, sizeof(::CMsgDOTAChatMessage_TriviaAnswered)},
  { 149, 190, sizeof(::CMsgDOTAChatMessage)},
  { 226, 235, sizeof(::CMsgDOTAChatMember)},
  { 239, 255, sizeof(::CMsgDOTAJoinChatChannelResponse)},
  { 266, 273, sizeof(::CMsgDOTAChatChannelFullUpdate)},
  { 275, 285, sizeof(::CMsgDOTAOtherJoinedChatChannel)},
  { 290, 298, sizeof(::CMsgDOTAOtherLeftChatChannel)},
  { 301, 310, sizeof(::CMsgDOTAChatChannelMemberUpdate_JoinedMember)},
  { 314, 322, sizeof(::CMsgDOTAChatChannelMemberUpdate)},
  { 325, -1, sizeof(::CMsgDOTARequestChatChannelList)},
  { 330, 338, sizeof(::CMsgDOTARequestChatChannelListResponse_ChatChannel)},
  { 341, -1, sizeof(::CMsgDOTARequestChatChannelListResponse)},
  { 347, 353, sizeof(::CMsgDOTAChatGetUserList)},
  { 354, 363, sizeof(::CMsgDOTAChatGetUserListResponse_Member)},
  { 367, 374, sizeof(::CMsgDOTAChatGetUserListResponse)},
  { 376, 383, sizeof(::CMsgDOTAChatGetMemberCount)},
  { 385, 393, sizeof(::CMsgDOTAChatGetMemberCountResponse)},
  { 396, 405, sizeof(::CMsgDOTAChatRegionsEnabled_Region)},
  { 409, 416, sizeof(::CMsgDOTAChatRegionsEnabled)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCPrivateChatInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCPrivateChatKick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCPrivateChatPromote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCPrivateChatDemote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPrivateChatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCPrivateChatInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPrivateChatInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAJoinChatChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaveChatChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCChatReportPublicSpam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAClientIgnoredUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatModeratorBan_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatMessage_DiceRoll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAJoinChatChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatChannelFullUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAOtherJoinedChatChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAOtherLeftChatChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatChannelMemberUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARequestChatChannelList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARequestChatChannelListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatGetUserList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatGetUserListResponse_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatGetUserListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatGetMemberCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatGetMemberCountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatRegionsEnabled_Region_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAChatRegionsEnabled_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!dota_gcmessages_client_chat.proto\032\027dot"
  "a_shared_enums.proto\"`\n\037CMsgClientToGCPr"
  "ivateChatInvite\022!\n\031private_chat_channel_"
  "name\030\001 \001(\t\022\032\n\022invited_account_id\030\002 \001(\r\"["
  "\n\035CMsgClientToGCPrivateChatKick\022!\n\031priva"
  "te_chat_channel_name\030\001 \001(\t\022\027\n\017kick_accou"
  "nt_id\030\002 \001(\r\"a\n CMsgClientToGCPrivateChat"
  "Promote\022!\n\031private_chat_channel_name\030\001 \001"
  "(\t\022\032\n\022promote_account_id\030\002 \001(\r\"_\n\037CMsgCl"
  "ientToGCPrivateChatDemote\022!\n\031private_cha"
  "t_channel_name\030\001 \001(\t\022\031\n\021demote_account_i"
  "d\030\002 \001(\r\"\275\004\n!CMsgGCToClientPrivateChatRes"
  "ponse\022!\n\031private_chat_channel_name\030\001 \001(\t"
  "\022B\n\006result\030\002 \001(\0162).CMsgGCToClientPrivate"
  "ChatResponse.Result:\007SUCCESS\022\020\n\010username"
  "\030\003 \001(\t\"\236\003\n\006Result\022\013\n\007SUCCESS\020\000\022\031\n\025FAILUR"
  "E_CREATION_LOCK\020\001\022\033\n\027FAILURE_SQL_TRANSAC"
  "TION\020\002\022\024\n\020FAILURE_SDO_LOAD\020\003\022\031\n\025FAILURE_"
  "NO_PERMISSION\020\004\022\032\n\026FAILURE_ALREADY_MEMBE"
  "R\020\005\022\030\n\024FAILURE_NOT_A_MEMBER\020\007\022\037\n\033FAILURE"
  "_NO_REMAINING_ADMINS\020\010\022\023\n\017FAILURE_NO_ROO"
  "M\020\t\022!\n\035FAILURE_CREATION_RATE_LIMITED\020\n\022 "
  "\n\034FAILURE_UNKNOWN_CHANNEL_NAME\020\013\022\030\n\024FAIL"
  "URE_UNKNOWN_USER\020\014\022\031\n\025FAILURE_UNKNOWN_ER"
  "ROR\020\r\022\035\n\031FAILURE_CANNOT_KICK_ADMIN\020\016\022\031\n\025"
  "FAILURE_ALREADY_ADMIN\020\017\"I\n$CMsgClientToG"
  "CPrivateChatInfoRequest\022!\n\031private_chat_"
  "channel_name\030\001 \001(\t\"\356\001\n%CMsgGCToClientPri"
  "vateChatInfoResponse\022!\n\031private_chat_cha"
  "nnel_name\030\001 \001(\t\022>\n\007members\030\002 \003(\0132-.CMsgG"
  "CToClientPrivateChatInfoResponse.Member\022"
  "\017\n\007creator\030\003 \001(\r\022\025\n\rcreation_date\030\004 \001(\r\032"
  ":\n\006Member\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 "
  "\001(\t\022\016\n\006status\030\003 \001(\r\"\221\001\n\027CMsgDOTAJoinChat"
  "Channel\022\024\n\014channel_name\030\002 \001(\t\022F\n\014channel"
  "_type\030\004 \001(\0162\026.DOTAChatChannelType_t:\030DOT"
  "AChannelType_Regional\022\030\n\020silent_rejectio"
  "n\030\005 \001(\010\".\n\030CMsgDOTALeaveChatChannel\022\022\n\nc"
  "hannel_id\030\001 \001(\004\"I\n\032CMsgGCChatReportPubli"
  "cSpam\022\022\n\nchannel_id\030\001 \001(\004\022\027\n\017channel_use"
  "r_id\030\002 \001(\r\"7\n\031CMsgDOTAClientIgnoredUser\022"
  "\032\n\022ignored_account_id\030\001 \001(\r\"T\n\030CMsgDOTAC"
  "hatModeratorBan\022\022\n\nchannel_id\030\001 \001(\004\022\022\n\na"
  "ccount_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\"\355\t\n\023CM"
  "sgDOTAChatMessage\022\022\n\naccount_id\030\001 \001(\r\022\022\n"
  "\nchannel_id\030\002 \001(\004\022\024\n\014persona_name\030\003 \001(\t\022"
  "\014\n\004text\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\r\022!\n\031sugg"
  "est_invite_account_id\030\006 \001(\r\022\033\n\023suggest_i"
  "nvite_name\030\007 \001(\t\022&\n\036fantasy_draft_owner_"
  "account_id\030\010 \001(\r\022\'\n\037fantasy_draft_player"
  "_account_id\030\t \001(\r\022\020\n\010event_id\030\n \001(\r\022\037\n\027s"
  "uggest_invite_to_lobby\030\013 \001(\010\022\024\n\014event_po"
  "ints\030\014 \001(\r\022\021\n\tcoin_flip\030\r \001(\010\022\025\n\tplayer_"
  "id\030\016 \001(\005:\002-1\022 \n\030share_profile_account_id"
  "\030\017 \001(\r\022\027\n\017channel_user_id\030\020 \001(\r\0220\n\tdice_"
  "roll\030\021 \001(\0132\035.CMsgDOTAChatMessage.DiceRol"
  "l\022\026\n\016share_party_id\030\022 \001(\004\022\026\n\016share_lobby"
  "_id\030\023 \001(\004\022\"\n\032share_lobby_custom_game_id\030"
  "\024 \001(\004\022\033\n\023share_lobby_passkey\030\025 \001(\t\022\037\n\027pr"
  "ivate_chat_channel_id\030\026 \001(\r\022\016\n\006status\030\027 "
  "\001(\r\022!\n\031legacy_battle_cup_victory\030\030 \001(\010\022\031"
  "\n\021battle_cup_streak\030\035 \001(\r\022\023\n\013badge_level"
  "\030\031 \001(\r\022\034\n\024suggest_pick_hero_id\030\032 \001(\r\022\036\n\026"
  "suggest_pick_hero_role\030\033 \001(\t\022\033\n\023suggest_"
  "ban_hero_id\030\036 \001(\r\022:\n\rtrivia_answer\030  \001(\013"
  "2#.CMsgDOTAChatMessage.TriviaAnswered\022\034\n"
  "\024requested_ability_id\030! \001(\r\022\022\n\nchat_flag"
  "s\030\" \001(\r\022\035\n\025started_finding_match\030# \001(\010\022\024"
  "\n\014ctrl_is_down\030$ \001(\010\022\030\n\020favorite_team_id"
  "\030% \001(\r\022\035\n\025favorite_team_quality\030& \001(\r\032>\n"
  "\010DiceRoll\022\020\n\010roll_min\030\001 \001(\005\022\020\n\010roll_max\030"
  "\002 \001(\005\022\016\n\006result\030\003 \001(\005\032\231\001\n\016TriviaAnswered"
  "\022\023\n\013question_id\030\001 \001(\r\022\024\n\014answer_index\030\002 "
  "\001(\r\022\037\n\027party_questions_correct\030\003 \001(\r\022\036\n\026"
  "party_questions_viewed\030\004 \001(\r\022\033\n\023party_tr"
  "ivia_points\030\005 \001(\r\"e\n\022CMsgDOTAChatMember\022"
  "\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022"
  "\027\n\017channel_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r"
  "\"\312\007\n\037CMsgDOTAJoinChatChannelResponse\022\020\n\010"
  "response\030\001 \001(\r\022\024\n\014channel_name\030\002 \001(\t\022\022\n\n"
  "channel_id\030\003 \001(\006\022\023\n\013max_members\030\004 \001(\r\022$\n"
  "\007members\030\005 \003(\0132\023.CMsgDOTAChatMember\022F\n\014c"
  "hannel_type\030\006 \001(\0162\026.DOTAChatChannelType_"
  "t:\030DOTAChannelType_Regional\022E\n\006result\030\007 "
  "\001(\0162\'.CMsgDOTAJoinChatChannelResponse.Re"
  "sult:\014JOIN_SUCCESS\022\031\n\021gc_initiated_join\030"
  "\010 \001(\010\022\027\n\017channel_user_id\030\t \001(\r\022\027\n\017welcom"
  "e_message\030\n \001(\t\022R\n\022special_privileges\030\013 "
  "\001(\0162\027.EChatSpecialPrivileges:\035k_EChatSpe"
  "cialPrivileges_None\"\377\003\n\006Result\022\020\n\014JOIN_S"
  "UCCESS\020\000\022\030\n\024INVALID_CHANNEL_TYPE\020\001\022\025\n\021AC"
  "COUNT_NOT_FOUND\020\002\022\016\n\nACH_FAILED\020\003\022\035\n\031USE"
  "R_IN_TOO_MANY_CHANNELS\020\004\022\027\n\023RATE_LIMIT_E"
  "XCEEDED\020\005\022\020\n\014CHANNEL_FULL\020\006\022\033\n\027CHANNEL_F"
  "ULL_OVERFLOWED\020\007\022\026\n\022FAILED_TO_ADD_USER\020\010"
  "\022\031\n\025CHANNEL_TYPE_DISABLED\020\t\022\036\n\032PRIVATE_C"
  "HAT_CREATE_FAILED\020\n\022\036\n\032PRIVATE_CHAT_NO_P"
  "ERMISSION\020\013\022#\n\037PRIVATE_CHAT_CREATE_LOCK_"
  "FAILED\020\014\022\027\n\023PRIVATE_CHAT_KICKED\020\r\022\024\n\020USE"
  "R_NOT_ALLOWED\020\016\022$\n ENSURE_SPECIAL_PRIVIL"
  "EGES_FAILED\020\017\022 \n\034NEW_PLAYER_USER_NOT_ELI"
  "GIBLE\020\020\022\020\n\014SILENT_ERROR\020\021\022\032\n\026NEW_PLAYER_"
  "USER_BANNED\020\022\"Y\n\035CMsgDOTAChatChannelFull"
  "Update\022\022\n\nchannel_id\030\001 \001(\006\022$\n\007members\030\002 "
  "\003(\0132\023.CMsgDOTAChatMember\"\205\001\n\036CMsgDOTAOth"
  "erJoinedChatChannel\022\022\n\nchannel_id\030\001 \001(\006\022"
  "\024\n\014persona_name\030\002 \001(\t\022\020\n\010steam_id\030\003 \001(\006\022"
  "\027\n\017channel_user_id\030\004 \001(\r\022\016\n\006status\030\005 \001(\r"
  "\"]\n\034CMsgDOTAOtherLeftChatChannel\022\022\n\nchan"
  "nel_id\030\001 \001(\006\022\020\n\010steam_id\030\002 \001(\006\022\027\n\017channe"
  "l_user_id\030\003 \001(\r\"\365\001\n\037CMsgDOTAChatChannelM"
  "emberUpdate\022\022\n\nchannel_id\030\001 \001(\006\022\026\n\016left_"
  "steam_ids\030\002 \003(\006\022E\n\016joined_members\030\003 \003(\0132"
  "-.CMsgDOTAChatChannelMemberUpdate.Joined"
  "Member\032_\n\014JoinedMember\022\020\n\010steam_id\030\001 \001(\006"
  "\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017channel_user_i"
  "d\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\" \n\036CMsgDOTAReque"
  "stChatChannelList\"\362\001\n&CMsgDOTARequestCha"
  "tChannelListResponse\022E\n\010channels\030\001 \003(\01323"
  ".CMsgDOTARequestChatChannelListResponse."
  "ChatChannel\032\200\001\n\013ChatChannel\022\024\n\014channel_n"
  "ame\030\001 \001(\t\022\023\n\013num_members\030\002 \001(\r\022F\n\014channe"
  "l_type\030\003 \001(\0162\026.DOTAChatChannelType_t:\030DO"
  "TAChannelType_Regional\"-\n\027CMsgDOTAChatGe"
  "tUserList\022\022\n\nchannel_id\030\001 \001(\006\"\312\001\n\037CMsgDO"
  "TAChatGetUserListResponse\022\022\n\nchannel_id\030"
  "\001 \001(\006\0228\n\007members\030\002 \003(\0132\'.CMsgDOTAChatGet"
  "UserListResponse.Member\032Y\n\006Member\022\020\n\010ste"
  "am_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017cha"
  "nnel_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\"z\n\032CM"
  "sgDOTAChatGetMemberCount\022\024\n\014channel_name"
  "\030\001 \001(\t\022F\n\014channel_type\030\002 \001(\0162\026.DOTAChatC"
  "hannelType_t:\030DOTAChannelType_Regional\"\230"
  "\001\n\"CMsgDOTAChatGetMemberCountResponse\022\024\n"
  "\014channel_name\030\001 \001(\t\022F\n\014channel_type\030\002 \001("
  "\0162\026.DOTAChatChannelType_t:\030DOTAChannelTy"
  "pe_Regional\022\024\n\014member_count\030\003 \001(\r\"\331\001\n\032CM"
  "sgDOTAChatRegionsEnabled\022\032\n\022enable_all_r"
  "egions\030\001 \001(\010\022;\n\017enabled_regions\030\002 \003(\0132\"."
  "CMsgDOTAChatRegionsEnabled.Region\032b\n\006Reg"
  "ion\022\024\n\014min_latitude\030\001 \001(\002\022\024\n\014max_latitud"
  "e\030\002 \001(\002\022\025\n\rmin_longitude\030\003 \001(\002\022\025\n\rmax_lo"
  "ngitude\030\004 \001(\002B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto = {
  false, false, 5700, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto, "dota_gcmessages_client_chat.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_deps, 1, 33,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fchat_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[0];
}
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::SUCCESS;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_LOCK;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SQL_TRANSACTION;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SDO_LOAD;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_PERMISSION;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_MEMBER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NOT_A_MEMBER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_REMAINING_ADMINS;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_ROOM;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_RATE_LIMITED;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_CHANNEL_NAME;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_USER;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_ERROR;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CANNOT_KICK_ADMIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_ADMIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MIN;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MAX;
constexpr int CMsgGCToClientPrivateChatResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[1];
}
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::JOIN_SUCCESS;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::INVALID_CHANNEL_TYPE;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACCOUNT_NOT_FOUND;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACH_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_IN_TOO_MANY_CHANNELS;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::RATE_LIMIT_EXCEEDED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL_OVERFLOWED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::FAILED_TO_ADD_USER;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_TYPE_DISABLED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_NO_PERMISSION;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_LOCK_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_KICKED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_NOT_ALLOWED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ENSURE_SPECIAL_PRIVILEGES_FAILED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::NEW_PLAYER_USER_NOT_ELIGIBLE;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::SILENT_ERROR;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::NEW_PLAYER_USER_BANNED;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MIN;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MAX;
constexpr int CMsgDOTAJoinChatChannelResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CMsgClientToGCPrivateChatInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatInvite>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invited_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatInvite)
}
CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  invited_account_id_ = from.invited_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatInvite)
}

void CMsgClientToGCPrivateChatInvite::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invited_account_id_ = 0u;
}

CMsgClientToGCPrivateChatInvite::~CMsgClientToGCPrivateChatInvite() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCPrivateChatInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInvite::ArenaDtor(void* object) {
  CMsgClientToGCPrivateChatInvite* _this = reinterpret_cast< CMsgClientToGCPrivateChatInvite* >(object);
  (void)_this;
}
void CMsgClientToGCPrivateChatInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCPrivateChatInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  invited_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 invited_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_invited_account_id(&has_bits);
          invited_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCPrivateChatInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invited_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatInvite)
  return target;
}

size_t CMsgClientToGCPrivateChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 invited_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_invited_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCPrivateChatInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCPrivateChatInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCPrivateChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      invited_account_id_ = from.invited_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInvite::InternalSwap(CMsgClientToGCPrivateChatInvite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(invited_account_id_, other->invited_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCPrivateChatKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatKick>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kick_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatKick)
}
CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  kick_account_id_ = from.kick_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatKick)
}

void CMsgClientToGCPrivateChatKick::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
kick_account_id_ = 0u;
}

CMsgClientToGCPrivateChatKick::~CMsgClientToGCPrivateChatKick() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatKick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCPrivateChatKick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatKick::ArenaDtor(void* object) {
  CMsgClientToGCPrivateChatKick* _this = reinterpret_cast< CMsgClientToGCPrivateChatKick* >(object);
  (void)_this;
}
void CMsgClientToGCPrivateChatKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCPrivateChatKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  kick_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatKick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCPrivateChatKick.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kick_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kick_account_id(&has_bits);
          kick_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCPrivateChatKick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatKick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kick_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatKick)
  return target;
}

size_t CMsgClientToGCPrivateChatKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatKick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 kick_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kick_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatKick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCPrivateChatKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCPrivateChatKick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCPrivateChatKick)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      kick_account_id_ = from.kick_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatKick::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatKick::InternalSwap(CMsgClientToGCPrivateChatKick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(kick_account_id_, other->kick_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatKick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCPrivateChatPromote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatPromote>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_promote_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatPromote)
}
CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  promote_account_id_ = from.promote_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatPromote)
}

void CMsgClientToGCPrivateChatPromote::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
promote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatPromote::~CMsgClientToGCPrivateChatPromote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatPromote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCPrivateChatPromote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatPromote::ArenaDtor(void* object) {
  CMsgClientToGCPrivateChatPromote* _this = reinterpret_cast< CMsgClientToGCPrivateChatPromote* >(object);
  (void)_this;
}
void CMsgClientToGCPrivateChatPromote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCPrivateChatPromote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatPromote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  promote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatPromote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 promote_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_promote_account_id(&has_bits);
          promote_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCPrivateChatPromote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatPromote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_promote_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatPromote)
  return target;
}

size_t CMsgClientToGCPrivateChatPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatPromote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 promote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_promote_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatPromote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCPrivateChatPromote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCPrivateChatPromote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCPrivateChatPromote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      promote_account_id_ = from.promote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatPromote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatPromote::InternalSwap(CMsgClientToGCPrivateChatPromote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(promote_account_id_, other->promote_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatPromote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCPrivateChatDemote::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatDemote>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_demote_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatDemote)
}
CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  demote_account_id_ = from.demote_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatDemote)
}

void CMsgClientToGCPrivateChatDemote::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
demote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatDemote::~CMsgClientToGCPrivateChatDemote() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatDemote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCPrivateChatDemote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatDemote::ArenaDtor(void* object) {
  CMsgClientToGCPrivateChatDemote* _this = reinterpret_cast< CMsgClientToGCPrivateChatDemote* >(object);
  (void)_this;
}
void CMsgClientToGCPrivateChatDemote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCPrivateChatDemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatDemote::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatDemote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  demote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatDemote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 demote_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_demote_account_id(&has_bits);
          demote_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCPrivateChatDemote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatDemote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_demote_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatDemote)
  return target;
}

size_t CMsgClientToGCPrivateChatDemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatDemote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 demote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_demote_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatDemote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCPrivateChatDemote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCPrivateChatDemote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCPrivateChatDemote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      demote_account_id_ = from.demote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatDemote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatDemote::InternalSwap(CMsgClientToGCPrivateChatDemote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(demote_account_id_, other->demote_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatDemote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPrivateChatResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPrivateChatResponse>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPrivateChatResponse)
}
CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_username()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatResponse)
}

void CMsgGCToClientPrivateChatResponse::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CMsgGCToClientPrivateChatResponse::~CMsgGCToClientPrivateChatResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPrivateChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatResponse::ArenaDtor(void* object) {
  CMsgGCToClientPrivateChatResponse* _this = reinterpret_cast< CMsgGCToClientPrivateChatResponse* >(object);
  (void)_this;
}
void CMsgGCToClientPrivateChatResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPrivateChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPrivateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPrivateChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_chat_channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmpty();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPrivateChatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCToClientPrivateChatResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCToClientPrivateChatResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPrivateChatResponse.username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPrivateChatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatResponse.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPrivateChatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional string username = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPrivateChatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPrivateChatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPrivateChatResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatResponse::InternalSwap(CMsgGCToClientPrivateChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPrivateChatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCPrivateChatInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCPrivateChatInfoRequest>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCPrivateChatInfoRequest)
}
CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCPrivateChatInfoRequest)
}

void CMsgClientToGCPrivateChatInfoRequest::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCPrivateChatInfoRequest::~CMsgClientToGCPrivateChatInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCPrivateChatInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCPrivateChatInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInfoRequest::ArenaDtor(void* object) {
  CMsgClientToGCPrivateChatInfoRequest* _this = reinterpret_cast< CMsgClientToGCPrivateChatInfoRequest* >(object);
  (void)_this;
}
void CMsgClientToGCPrivateChatInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCPrivateChatInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCPrivateChatInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCPrivateChatInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCPrivateChatInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCPrivateChatInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCPrivateChatInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCPrivateChatInfoRequest)
  return target;
}

size_t CMsgClientToGCPrivateChatInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCPrivateChatInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string private_chat_channel_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_private_chat_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCPrivateChatInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCPrivateChatInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCPrivateChatInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_private_chat_channel_name()) {
    _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
  }
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInfoRequest::InternalSwap(CMsgClientToGCPrivateChatInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCPrivateChatInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPrivateChatInfoResponse_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPrivateChatInfoResponse_Member>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPrivateChatInfoResponse.Member)
}
CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatInfoResponse.Member)
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
}

CMsgGCToClientPrivateChatInfoResponse_Member::~CMsgGCToClientPrivateChatInfoResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatInfoResponse.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse_Member::ArenaDtor(void* object) {
  CMsgGCToClientPrivateChatInfoResponse_Member* _this = reinterpret_cast< CMsgGCToClientPrivateChatInfoResponse_Member* >(object);
  (void)_this;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPrivateChatInfoResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPrivateChatInfoResponse_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPrivateChatInfoResponse.Member.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPrivateChatInfoResponse_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatInfoResponse.Member.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatInfoResponse.Member)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPrivateChatInfoResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPrivateChatInfoResponse.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPrivateChatInfoResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::InternalSwap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, status_)
      + sizeof(CMsgGCToClientPrivateChatInfoResponse_Member::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPrivateChatInfoResponse_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPrivateChatInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPrivateChatInfoResponse>()._has_bits_);
  static void set_has_private_chat_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_creation_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPrivateChatInfoResponse)
}
CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_chat_channel_name()) {
    private_chat_channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_chat_channel_name(), 
      GetArena());
  }
  ::memcpy(&creator_, &from.creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_date_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPrivateChatInfoResponse)
}

void CMsgGCToClientPrivateChatInfoResponse::SharedCtor() {
private_chat_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&creation_date_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
}

CMsgGCToClientPrivateChatInfoResponse::~CMsgGCToClientPrivateChatInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPrivateChatInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPrivateChatInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_chat_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse::ArenaDtor(void* object) {
  CMsgGCToClientPrivateChatInfoResponse* _this = reinterpret_cast< CMsgGCToClientPrivateChatInfoResponse* >(object);
  (void)_this;
}
void CMsgGCToClientPrivateChatInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPrivateChatInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPrivateChatInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPrivateChatInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_date_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPrivateChatInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_private_chat_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 creator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_creator(&has_bits);
          creator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creation_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_creation_date(&has_bits);
          creation_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPrivateChatInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPrivateChatInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_private_chat_channel_name().data(), static_cast<int>(this->_internal_private_chat_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_private_chat_channel_name(), target);
  }

  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // optional uint32 creator = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_creator(), target);
  }

  // optional uint32 creation_date = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creation_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPrivateChatInfoResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPrivateChatInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_private_chat_channel_name());
    }

    // optional uint32 creator = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creator());
    }

    // optional uint32 creation_date = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creation_date());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPrivateChatInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPrivateChatInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPrivateChatInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_chat_channel_name(from._internal_private_chat_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_date_ = from.creation_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse::InternalSwap(CMsgGCToClientPrivateChatInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creation_date_)
      + sizeof(CMsgGCToClientPrivateChatInfoResponse::creation_date_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creator_)>(
          reinterpret_cast<char*>(&creator_),
          reinterpret_cast<char*>(&other->creator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPrivateChatInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAJoinChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAJoinChatChannel>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_silent_rejection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAJoinChatChannel)
}
CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  ::memcpy(&channel_type_, &from.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&silent_rejection_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(silent_rejection_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannel)
}

void CMsgDOTAJoinChatChannel::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&silent_rejection_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(silent_rejection_));
}

CMsgDOTAJoinChatChannel::~CMsgDOTAJoinChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAJoinChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannel::ArenaDtor(void* object) {
  CMsgDOTAJoinChatChannel* _this = reinterpret_cast< CMsgDOTAJoinChatChannel* >(object);
  (void)_this;
}
void CMsgDOTAJoinChatChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAJoinChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAJoinChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAJoinChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&silent_rejection_) -
        reinterpret_cast<char*>(&channel_type_)) + sizeof(silent_rejection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAJoinChatChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAJoinChatChannel.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool silent_rejection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_silent_rejection(&has_bits);
          silent_rejection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAJoinChatChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannel.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channel_type(), target);
  }

  // optional bool silent_rejection = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_silent_rejection(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannel)
  return target;
}

size_t CMsgDOTAJoinChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAJoinChatChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional bool silent_rejection = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAJoinChatChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAJoinChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAJoinChatChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAJoinChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannel::MergeFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      silent_rejection_ = from.silent_rejection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAJoinChatChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannel::CopyFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannel::InternalSwap(CMsgDOTAJoinChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannel, silent_rejection_)
      + sizeof(CMsgDOTAJoinChatChannel::silent_rejection_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannel, channel_type_)>(
          reinterpret_cast<char*>(&channel_type_),
          reinterpret_cast<char*>(&other->channel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAJoinChatChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaveChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveChatChannel>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveChatChannel)
}
CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveChatChannel)
}

void CMsgDOTALeaveChatChannel::SharedCtor() {
channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTALeaveChatChannel::~CMsgDOTALeaveChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveChatChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaveChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaveChatChannel::ArenaDtor(void* object) {
  CMsgDOTALeaveChatChannel* _this = reinterpret_cast< CMsgDOTALeaveChatChannel* >(object);
  (void)_this;
}
void CMsgDOTALeaveChatChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaveChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaveChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveChatChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaveChatChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveChatChannel)
  return target;
}

size_t CMsgDOTALeaveChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveChatChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveChatChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveChatChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaveChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaveChatChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaveChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveChatChannel::MergeFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CMsgDOTALeaveChatChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveChatChannel::CopyFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveChatChannel::InternalSwap(CMsgDOTALeaveChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveChatChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCChatReportPublicSpam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCChatReportPublicSpam>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCChatReportPublicSpam)
}
CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCChatReportPublicSpam)
}

void CMsgGCChatReportPublicSpam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
}

CMsgGCChatReportPublicSpam::~CMsgGCChatReportPublicSpam() {
  // @@protoc_insertion_point(destructor:CMsgGCChatReportPublicSpam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCChatReportPublicSpam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCChatReportPublicSpam::ArenaDtor(void* object) {
  CMsgGCChatReportPublicSpam* _this = reinterpret_cast< CMsgGCChatReportPublicSpam* >(object);
  (void)_this;
}
void CMsgGCChatReportPublicSpam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCChatReportPublicSpam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCChatReportPublicSpam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCChatReportPublicSpam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_user_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCChatReportPublicSpam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCChatReportPublicSpam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCChatReportPublicSpam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channel_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCChatReportPublicSpam)
  return target;
}

size_t CMsgGCChatReportPublicSpam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCChatReportPublicSpam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_id());
    }

    // optional uint32 channel_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCChatReportPublicSpam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChatReportPublicSpam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCChatReportPublicSpam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCChatReportPublicSpam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCChatReportPublicSpam)
    MergeFrom(*source);
  }
}

void CMsgGCChatReportPublicSpam::MergeFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChatReportPublicSpam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChatReportPublicSpam::CopyFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChatReportPublicSpam::IsInitialized() const {
  return true;
}

void CMsgGCChatReportPublicSpam::InternalSwap(CMsgGCChatReportPublicSpam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_user_id_)
      + sizeof(CMsgGCChatReportPublicSpam::channel_user_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCChatReportPublicSpam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAClientIgnoredUser::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAClientIgnoredUser>()._has_bits_);
  static void set_has_ignored_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAClientIgnoredUser)
}
CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ignored_account_id_ = from.ignored_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAClientIgnoredUser)
}

void CMsgDOTAClientIgnoredUser::SharedCtor() {
ignored_account_id_ = 0u;
}

CMsgDOTAClientIgnoredUser::~CMsgDOTAClientIgnoredUser() {
  // @@protoc_insertion_point(destructor:CMsgDOTAClientIgnoredUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAClientIgnoredUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAClientIgnoredUser::ArenaDtor(void* object) {
  CMsgDOTAClientIgnoredUser* _this = reinterpret_cast< CMsgDOTAClientIgnoredUser* >(object);
  (void)_this;
}
void CMsgDOTAClientIgnoredUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAClientIgnoredUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAClientIgnoredUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAClientIgnoredUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAClientIgnoredUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ignored_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignored_account_id(&has_bits);
          ignored_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAClientIgnoredUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAClientIgnoredUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignored_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ignored_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAClientIgnoredUser)
  return target;
}

size_t CMsgDOTAClientIgnoredUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAClientIgnoredUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ignored_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ignored_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClientIgnoredUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAClientIgnoredUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAClientIgnoredUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAClientIgnoredUser)
    MergeFrom(*source);
  }
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ignored_account_id()) {
    _internal_set_ignored_account_id(from._internal_ignored_account_id());
  }
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClientIgnoredUser::IsInitialized() const {
  return true;
}

void CMsgDOTAClientIgnoredUser::InternalSwap(CMsgDOTAClientIgnoredUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignored_account_id_, other->ignored_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAClientIgnoredUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatModeratorBan::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatModeratorBan>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatModeratorBan)
}
CMsgDOTAChatModeratorBan::CMsgDOTAChatModeratorBan(const CMsgDOTAChatModeratorBan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatModeratorBan)
}

void CMsgDOTAChatModeratorBan::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(duration_));
}

CMsgDOTAChatModeratorBan::~CMsgDOTAChatModeratorBan() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatModeratorBan)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatModeratorBan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatModeratorBan::ArenaDtor(void* object) {
  CMsgDOTAChatModeratorBan* _this = reinterpret_cast< CMsgDOTAChatModeratorBan* >(object);
  (void)_this;
}
void CMsgDOTAChatModeratorBan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatModeratorBan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatModeratorBan::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatModeratorBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatModeratorBan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatModeratorBan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatModeratorBan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatModeratorBan)
  return target;
}

size_t CMsgDOTAChatModeratorBan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatModeratorBan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatModeratorBan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatModeratorBan)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatModeratorBan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatModeratorBan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatModeratorBan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatModeratorBan)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatModeratorBan::MergeFrom(const CMsgDOTAChatModeratorBan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatModeratorBan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatModeratorBan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatModeratorBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatModeratorBan::CopyFrom(const CMsgDOTAChatModeratorBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatModeratorBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatModeratorBan::IsInitialized() const {
  return true;
}

void CMsgDOTAChatModeratorBan::InternalSwap(CMsgDOTAChatModeratorBan* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatModeratorBan, duration_)
      + sizeof(CMsgDOTAChatModeratorBan::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatModeratorBan, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatModeratorBan::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatMessage_DiceRoll::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_DiceRoll>()._has_bits_);
  static void set_has_roll_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roll_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.DiceRoll)
}
CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_min_, &from.roll_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.DiceRoll)
}

void CMsgDOTAChatMessage_DiceRoll::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
}

CMsgDOTAChatMessage_DiceRoll::~CMsgDOTAChatMessage_DiceRoll() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.DiceRoll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatMessage_DiceRoll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatMessage_DiceRoll::ArenaDtor(void* object) {
  CMsgDOTAChatMessage_DiceRoll* _this = reinterpret_cast< CMsgDOTAChatMessage_DiceRoll* >(object);
  (void)_this;
}
void CMsgDOTAChatMessage_DiceRoll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatMessage_DiceRoll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatMessage_DiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.DiceRoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roll_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_DiceRoll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 roll_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_roll_min(&has_bits);
          roll_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roll_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_roll_max(&has_bits);
          roll_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatMessage_DiceRoll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.DiceRoll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roll_min(), target);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_roll_max(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.DiceRoll)
  return target;
}

size_t CMsgDOTAChatMessage_DiceRoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.DiceRoll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 roll_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roll_min());
    }

    // optional int32 roll_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roll_max());
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_DiceRoll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatMessage_DiceRoll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatMessage.DiceRoll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatMessage.DiceRoll)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_max_ = from.roll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_DiceRoll::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_DiceRoll::InternalSwap(CMsgDOTAChatMessage_DiceRoll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, result_)
      + sizeof(CMsgDOTAChatMessage_DiceRoll::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, roll_min_)>(
          reinterpret_cast<char*>(&roll_min_),
          reinterpret_cast<char*>(&other->roll_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_DiceRoll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatMessage_TriviaAnswered::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage_TriviaAnswered>()._has_bits_);
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_answer_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_party_questions_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_party_questions_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_party_trivia_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage.TriviaAnswered)
}
CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_trivia_points_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage.TriviaAnswered)
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&question_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&party_trivia_points_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
}

CMsgDOTAChatMessage_TriviaAnswered::~CMsgDOTAChatMessage_TriviaAnswered() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage.TriviaAnswered)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatMessage_TriviaAnswered::ArenaDtor(void* object) {
  CMsgDOTAChatMessage_TriviaAnswered* _this = reinterpret_cast< CMsgDOTAChatMessage_TriviaAnswered* >(object);
  (void)_this;
}
void CMsgDOTAChatMessage_TriviaAnswered::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatMessage_TriviaAnswered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatMessage_TriviaAnswered::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage.TriviaAnswered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&question_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_trivia_points_) -
        reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage_TriviaAnswered::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 question_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_question_id(&has_bits);
          question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 answer_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_answer_index(&has_bits);
          answer_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_questions_correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_party_questions_correct(&has_bits);
          party_questions_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_questions_viewed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_party_questions_viewed(&has_bits);
          party_questions_viewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_trivia_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_party_trivia_points(&has_bits);
          party_trivia_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatMessage_TriviaAnswered::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage.TriviaAnswered)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_question_id(), target);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_answer_index(), target);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_party_questions_correct(), target);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_party_questions_viewed(), target);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_party_trivia_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage.TriviaAnswered)
  return target;
}

size_t CMsgDOTAChatMessage_TriviaAnswered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage.TriviaAnswered)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 question_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_id());
    }

    // optional uint32 answer_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_answer_index());
    }

    // optional uint32 party_questions_correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_questions_correct());
    }

    // optional uint32 party_questions_viewed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_questions_viewed());
    }

    // optional uint32 party_trivia_points = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_trivia_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_TriviaAnswered* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatMessage_TriviaAnswered>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatMessage.TriviaAnswered)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatMessage.TriviaAnswered)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      answer_index_ = from.answer_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_questions_correct_ = from.party_questions_correct_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_questions_viewed_ = from.party_questions_viewed_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_trivia_points_ = from.party_trivia_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_TriviaAnswered::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_TriviaAnswered::InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, party_trivia_points_)
      + sizeof(CMsgDOTAChatMessage_TriviaAnswered::party_trivia_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, question_id_)>(
          reinterpret_cast<char*>(&question_id_),
          reinterpret_cast<char*>(&other->question_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage_TriviaAnswered::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMessage>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_suggest_invite_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_suggest_invite_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fantasy_draft_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fantasy_draft_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_suggest_invite_to_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_coin_flip(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_share_profile_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::CMsgDOTAChatMessage_DiceRoll& dice_roll(const CMsgDOTAChatMessage* msg);
  static void set_has_dice_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_share_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_share_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_share_lobby_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_share_lobby_passkey(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_private_chat_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_legacy_battle_cup_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_battle_cup_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_badge_level(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_suggest_pick_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_suggest_pick_hero_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_suggest_ban_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::CMsgDOTAChatMessage_TriviaAnswered& trivia_answer(const CMsgDOTAChatMessage* msg);
  static void set_has_trivia_answer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_requested_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_chat_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_started_finding_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ctrl_is_down(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_favorite_team_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_favorite_team_quality(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

const ::CMsgDOTAChatMessage_DiceRoll&
CMsgDOTAChatMessage::_Internal::dice_roll(const CMsgDOTAChatMessage* msg) {
  return *msg->dice_roll_;
}
const ::CMsgDOTAChatMessage_TriviaAnswered&
CMsgDOTAChatMessage::_Internal::trivia_answer(const CMsgDOTAChatMessage* msg) {
  return *msg->trivia_answer_;
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMessage)
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  suggest_invite_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suggest_invite_name()) {
    suggest_invite_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suggest_invite_name(), 
      GetArena());
  }
  share_lobby_passkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_share_lobby_passkey()) {
    share_lobby_passkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_share_lobby_passkey(), 
      GetArena());
  }
  suggest_pick_hero_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_suggest_pick_hero_role()) {
    suggest_pick_hero_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_suggest_pick_hero_role(), 
      GetArena());
  }
  if (from._internal_has_dice_roll()) {
    dice_roll_ = new ::CMsgDOTAChatMessage_DiceRoll(*from.dice_roll_);
  } else {
    dice_roll_ = nullptr;
  }
  if (from._internal_has_trivia_answer()) {
    trivia_answer_ = new ::CMsgDOTAChatMessage_TriviaAnswered(*from.trivia_answer_);
  } else {
    trivia_answer_ = nullptr;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMessage)
}

void CMsgDOTAChatMessage::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suggest_invite_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
share_lobby_passkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
suggest_pick_hero_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dice_roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_quality_) -
    reinterpret_cast<char*>(&dice_roll_)) + sizeof(favorite_team_quality_));
player_id_ = -1;
}

CMsgDOTAChatMessage::~CMsgDOTAChatMessage() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suggest_invite_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  share_lobby_passkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suggest_pick_hero_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dice_roll_;
  if (this != internal_default_instance()) delete trivia_answer_;
}

void CMsgDOTAChatMessage::ArenaDtor(void* object) {
  CMsgDOTAChatMessage* _this = reinterpret_cast< CMsgDOTAChatMessage* >(object);
  (void)_this;
}
void CMsgDOTAChatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      suggest_invite_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      share_lobby_passkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      suggest_pick_hero_role_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dice_roll_ != nullptr);
      dice_roll_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(trivia_answer_ != nullptr);
      trivia_answer_->Clear();
    }
  }
  channel_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&share_profile_account_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(share_profile_account_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&share_party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&share_lobby_custom_game_id_) -
        reinterpret_cast<char*>(&share_party_id_)) + sizeof(share_lobby_custom_game_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&private_chat_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_flags_) -
        reinterpret_cast<char*>(&private_chat_channel_id_)) + sizeof(chat_flags_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ctrl_is_down_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorite_team_quality_) -
        reinterpret_cast<char*>(&ctrl_is_down_)) + sizeof(favorite_team_quality_));
    player_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_channel_id(&_has_bits_);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMessage.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMessage.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timestamp(&_has_bits_);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suggest_invite_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_suggest_invite_account_id(&_has_bits_);
          suggest_invite_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suggest_invite_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_suggest_invite_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMessage.suggest_invite_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fantasy_draft_owner_account_id(&_has_bits_);
          fantasy_draft_owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fantasy_draft_player_account_id(&_has_bits_);
          fantasy_draft_player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_event_id(&_has_bits_);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suggest_invite_to_lobby = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_suggest_invite_to_lobby(&_has_bits_);
          suggest_invite_to_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_points = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_event_points(&_has_bits_);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool coin_flip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_coin_flip(&_has_bits_);
          coin_flip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 14 [default = -1];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_player_id(&_has_bits_);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 share_profile_account_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_share_profile_account_id(&_has_bits_);
          share_profile_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_channel_user_id(&_has_bits_);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_dice_roll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 share_party_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_share_party_id(&_has_bits_);
          share_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 share_lobby_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_share_lobby_id(&_has_bits_);
          share_lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 share_lobby_custom_game_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_share_lobby_custom_game_id(&_has_bits_);
          share_lobby_custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string share_lobby_passkey = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_share_lobby_passkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMessage.share_lobby_passkey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 private_chat_channel_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_private_chat_channel_id(&_has_bits_);
          private_chat_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_status(&_has_bits_);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool legacy_battle_cup_victory = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_legacy_battle_cup_victory(&_has_bits_);
          legacy_battle_cup_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_level = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_badge_level(&_has_bits_);
          badge_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suggest_pick_hero_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_suggest_pick_hero_id(&_has_bits_);
          suggest_pick_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string suggest_pick_hero_role = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_suggest_pick_hero_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMessage.suggest_pick_hero_role");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 battle_cup_streak = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_battle_cup_streak(&_has_bits_);
          battle_cup_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 suggest_ban_hero_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_suggest_ban_hero_id(&_has_bits_);
          suggest_ban_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_trivia_answer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 requested_ability_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_requested_ability_id(&_has_bits_);
          requested_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chat_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_chat_flags(&_has_bits_);
          chat_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool started_finding_match = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_started_finding_match(&_has_bits_);
          started_finding_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ctrl_is_down = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ctrl_is_down(&_has_bits_);
          ctrl_is_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorite_team_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_favorite_team_id(&_has_bits_);
          favorite_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorite_team_quality = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_favorite_team_quality(&_has_bits_);
          favorite_team_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.persona_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_suggest_invite_account_id(), target);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggest_invite_name().data(), static_cast<int>(this->_internal_suggest_invite_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.suggest_invite_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_suggest_invite_name(), target);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fantasy_draft_owner_account_id(), target);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fantasy_draft_player_account_id(), target);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_event_id(), target);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_suggest_invite_to_lobby(), target);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_event_points(), target);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_coin_flip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_player_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_share_profile_account_id(), target);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_channel_user_id(), target);
  }

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::dice_roll(this), target, stream);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_share_party_id(), target);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_share_lobby_id(), target);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_share_lobby_custom_game_id(), target);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_share_lobby_passkey().data(), static_cast<int>(this->_internal_share_lobby_passkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.share_lobby_passkey");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_share_lobby_passkey(), target);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_private_chat_channel_id(), target);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_status(), target);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_legacy_battle_cup_victory(), target);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_badge_level(), target);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_suggest_pick_hero_id(), target);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_suggest_pick_hero_role().data(), static_cast<int>(this->_internal_suggest_pick_hero_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMessage.suggest_pick_hero_role");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_suggest_pick_hero_role(), target);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_battle_cup_streak(), target);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_suggest_ban_hero_id(), target);
  }

  // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::trivia_answer(this), target, stream);
  }

  // optional uint32 requested_ability_id = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_requested_ability_id(), target);
  }

  // optional uint32 chat_flags = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_chat_flags(), target);
  }

  // optional bool started_finding_match = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_started_finding_match(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool ctrl_is_down = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_ctrl_is_down(), target);
  }

  // optional uint32 favorite_team_id = 37;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_favorite_team_id(), target);
  }

  // optional uint32 favorite_team_quality = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_favorite_team_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMessage)
  return target;
}

size_t CMsgDOTAChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string suggest_invite_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggest_invite_name());
    }

    // optional string share_lobby_passkey = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_share_lobby_passkey());
    }

    // optional string suggest_pick_hero_role = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_suggest_pick_hero_role());
    }

    // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dice_roll_);
    }

    // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trivia_answer_);
    }

    // optional uint64 channel_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_channel_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 suggest_invite_account_id = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suggest_invite_account_id());
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_draft_owner_account_id());
    }

    // optional uint32 fantasy_draft_player_account_id = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_draft_player_account_id());
    }

    // optional uint32 event_id = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 event_points = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_points());
    }

    // optional uint32 share_profile_account_id = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_share_profile_account_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 share_party_id = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_share_party_id());
    }

    // optional uint64 share_lobby_id = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_share_lobby_id());
    }

    // optional uint32 channel_user_id = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional bool suggest_invite_to_lobby = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool coin_flip = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool legacy_battle_cup_victory = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool started_finding_match = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint64 share_lobby_custom_game_id = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_share_lobby_custom_game_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 private_chat_channel_id = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_private_chat_channel_id());
    }

    // optional uint32 status = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

    // optional uint32 badge_level = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_level());
    }

    // optional uint32 suggest_pick_hero_id = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suggest_pick_hero_id());
    }

    // optional uint32 battle_cup_streak = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_battle_cup_streak());
    }

    // optional uint32 suggest_ban_hero_id = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suggest_ban_hero_id());
    }

    // optional uint32 requested_ability_id = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_requested_ability_id());
    }

    // optional uint32 chat_flags = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_flags());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool ctrl_is_down = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional uint32 favorite_team_id = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorite_team_id());
    }

    // optional uint32 favorite_team_quality = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorite_team_quality());
    }

    // optional int32 player_id = 14 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatMessage)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage::MergeFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_suggest_invite_name(from._internal_suggest_invite_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_share_lobby_passkey(from._internal_share_lobby_passkey());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_suggest_pick_hero_role(from._internal_suggest_pick_hero_role());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dice_roll()->::CMsgDOTAChatMessage_DiceRoll::MergeFrom(from._internal_dice_roll());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_trivia_answer()->::CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(from._internal_trivia_answer());
    }
    if (cached_has_bits & 0x00000080u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      suggest_invite_account_id_ = from.suggest_invite_account_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      fantasy_draft_owner_account_id_ = from.fantasy_draft_owner_account_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      fantasy_draft_player_account_id_ = from.fantasy_draft_player_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00008000u) {
      share_profile_account_id_ = from.share_profile_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      share_party_id_ = from.share_party_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      share_lobby_id_ = from.share_lobby_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      suggest_invite_to_lobby_ = from.suggest_invite_to_lobby_;
    }
    if (cached_has_bits & 0x00100000u) {
      coin_flip_ = from.coin_flip_;
    }
    if (cached_has_bits & 0x00200000u) {
      legacy_battle_cup_victory_ = from.legacy_battle_cup_victory_;
    }
    if (cached_has_bits & 0x00400000u) {
      started_finding_match_ = from.started_finding_match_;
    }
    if (cached_has_bits & 0x00800000u) {
      share_lobby_custom_game_id_ = from.share_lobby_custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      private_chat_channel_id_ = from.private_chat_channel_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x04000000u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      suggest_pick_hero_id_ = from.suggest_pick_hero_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      battle_cup_streak_ = from.battle_cup_streak_;
    }
    if (cached_has_bits & 0x20000000u) {
      suggest_ban_hero_id_ = from.suggest_ban_hero_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      requested_ability_id_ = from.requested_ability_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      chat_flags_ = from.chat_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ctrl_is_down_ = from.ctrl_is_down_;
    }
    if (cached_has_bits & 0x00000002u) {
      favorite_team_id_ = from.favorite_team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      favorite_team_quality_ = from.favorite_team_quality_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage::CopyFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage::InternalSwap(CMsgDOTAChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suggest_invite_name_.Swap(&other->suggest_invite_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  share_lobby_passkey_.Swap(&other->share_lobby_passkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suggest_pick_hero_role_.Swap(&other->suggest_pick_hero_role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage, favorite_team_quality_)
      + sizeof(CMsgDOTAChatMessage::favorite_team_quality_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMessage, dice_roll_)>(
          reinterpret_cast<char*>(&dice_roll_),
          reinterpret_cast<char*>(&other->dice_roll_));
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatMember>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatMember::CMsgDOTAChatMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatMember)
}
CMsgDOTAChatMember::CMsgDOTAChatMember(const CMsgDOTAChatMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatMember)
}

void CMsgDOTAChatMember::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatMember::~CMsgDOTAChatMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatMember::ArenaDtor(void* object) {
  CMsgDOTAChatMember* _this = reinterpret_cast< CMsgDOTAChatMember* >(object);
  (void)_this;
}
void CMsgDOTAChatMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatMember.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatMember.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatMember)
  return target;
}

size_t CMsgDOTAChatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMember::MergeFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMember::CopyFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMember::InternalSwap(CMsgDOTAChatMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMember, status_)
      + sizeof(CMsgDOTAChatMember::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatMember, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAJoinChatChannelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAJoinChatChannelResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_members(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gc_initiated_join(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_welcome_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_special_privileges(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAJoinChatChannelResponse)
}
CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  welcome_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_welcome_message()) {
    welcome_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_welcome_message(), 
      GetArena());
  }
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&special_privileges_) -
    reinterpret_cast<char*>(&response_)) + sizeof(special_privileges_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAJoinChatChannelResponse)
}

void CMsgDOTAJoinChatChannelResponse::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
welcome_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&special_privileges_) -
    reinterpret_cast<char*>(&response_)) + sizeof(special_privileges_));
}

CMsgDOTAJoinChatChannelResponse::~CMsgDOTAJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAJoinChatChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAJoinChatChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  welcome_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannelResponse::ArenaDtor(void* object) {
  CMsgDOTAJoinChatChannelResponse* _this = reinterpret_cast< CMsgDOTAJoinChatChannelResponse* >(object);
  (void)_this;
}
void CMsgDOTAJoinChatChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAJoinChatChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAJoinChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAJoinChatChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      welcome_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_initiated_join_) -
        reinterpret_cast<char*>(&response_)) + sizeof(gc_initiated_join_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&channel_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&special_privileges_) -
        reinterpret_cast<char*>(&channel_user_id_)) + sizeof(special_privileges_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAJoinChatChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string channel_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAJoinChatChannelResponse.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 channel_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_members(&has_bits);
          max_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatMember members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAJoinChatChannelResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAJoinChatChannelResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool gc_initiated_join = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gc_initiated_join(&has_bits);
          gc_initiated_join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string welcome_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_welcome_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAJoinChatChannelResponse.welcome_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EChatSpecialPrivileges_IsValid(val))) {
            _internal_set_special_privileges(static_cast<::EChatSpecialPrivileges>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAJoinChatChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAJoinChatChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannelResponse.channel_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_members(), target);
  }

  // repeated .CMsgDOTAChatMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_members(i), target, stream);
  }

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_channel_type(), target);
  }

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_result(), target);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_gc_initiated_join(), target);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_channel_user_id(), target);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_welcome_message().data(), static_cast<int>(this->_internal_welcome_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAJoinChatChannelResponse.welcome_message");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_welcome_message(), target);
  }

  // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_special_privileges(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAJoinChatChannelResponse)
  return target;
}

size_t CMsgDOTAJoinChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAJoinChatChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatMember members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional string welcome_message = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_welcome_message());
    }

    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_response());
    }

    // optional uint32 max_members = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_members());
    }

    // optional fixed64 channel_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional bool gc_initiated_join = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 channel_user_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_special_privileges());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAJoinChatChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAJoinChatChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAJoinChatChannelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_welcome_message(from._internal_welcome_message());
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      gc_initiated_join_ = from.gc_initiated_join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      special_privileges_ = from.special_privileges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannelResponse::InternalSwap(CMsgDOTAJoinChatChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  welcome_message_.Swap(&other->welcome_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, special_privileges_)
      + sizeof(CMsgDOTAJoinChatChannelResponse::special_privileges_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAJoinChatChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatChannelFullUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatChannelFullUpdate>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatChannelFullUpdate)
}
CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelFullUpdate)
}

void CMsgDOTAChatChannelFullUpdate::SharedCtor() {
channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatChannelFullUpdate::~CMsgDOTAChatChannelFullUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelFullUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatChannelFullUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatChannelFullUpdate::ArenaDtor(void* object) {
  CMsgDOTAChatChannelFullUpdate* _this = reinterpret_cast< CMsgDOTAChatChannelFullUpdate* >(object);
  (void)_this;
}
void CMsgDOTAChatChannelFullUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatChannelFullUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatChannelFullUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatChannelFullUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatChannelFullUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatChannelFullUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelFullUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // repeated .CMsgDOTAChatMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelFullUpdate)
  return target;
}

size_t CMsgDOTAChatChannelFullUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatChannelFullUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelFullUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatChannelFullUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatChannelFullUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatChannelFullUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelFullUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelFullUpdate::InternalSwap(CMsgDOTAChatChannelFullUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatChannelFullUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAOtherJoinedChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAOtherJoinedChatChannel>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAOtherJoinedChatChannel)
}
CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherJoinedChatChannel)
}

void CMsgDOTAOtherJoinedChatChannel::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
}

CMsgDOTAOtherJoinedChatChannel::~CMsgDOTAOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherJoinedChatChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAOtherJoinedChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAOtherJoinedChatChannel::ArenaDtor(void* object) {
  CMsgDOTAOtherJoinedChatChannel* _this = reinterpret_cast< CMsgDOTAOtherJoinedChatChannel* >(object);
  (void)_this;
}
void CMsgDOTAOtherJoinedChatChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAOtherJoinedChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAOtherJoinedChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAOtherJoinedChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAOtherJoinedChatChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAOtherJoinedChatChannel.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAOtherJoinedChatChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherJoinedChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAOtherJoinedChatChannel.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id(), target);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherJoinedChatChannel)
  return target;
}

size_t CMsgDOTAOtherJoinedChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAOtherJoinedChatChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional uint32 status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherJoinedChatChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAOtherJoinedChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAOtherJoinedChatChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAOtherJoinedChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherJoinedChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherJoinedChatChannel::InternalSwap(CMsgDOTAOtherJoinedChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, status_)
      + sizeof(CMsgDOTAOtherJoinedChatChannel::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAOtherJoinedChatChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAOtherLeftChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAOtherLeftChatChannel>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAOtherLeftChatChannel)
}
CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAOtherLeftChatChannel)
}

void CMsgDOTAOtherLeftChatChannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
}

CMsgDOTAOtherLeftChatChannel::~CMsgDOTAOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAOtherLeftChatChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAOtherLeftChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAOtherLeftChatChannel::ArenaDtor(void* object) {
  CMsgDOTAOtherLeftChatChannel* _this = reinterpret_cast< CMsgDOTAOtherLeftChatChannel* >(object);
  (void)_this;
}
void CMsgDOTAOtherLeftChatChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAOtherLeftChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAOtherLeftChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAOtherLeftChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_user_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAOtherLeftChatChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAOtherLeftChatChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAOtherLeftChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAOtherLeftChatChannel)
  return target;
}

size_t CMsgDOTAOtherLeftChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAOtherLeftChatChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherLeftChatChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAOtherLeftChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAOtherLeftChatChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAOtherLeftChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherLeftChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherLeftChatChannel::InternalSwap(CMsgDOTAOtherLeftChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_user_id_)
      + sizeof(CMsgDOTAOtherLeftChatChannel::channel_user_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAOtherLeftChatChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatChannelMemberUpdate_JoinedMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatChannelMemberUpdate_JoinedMember>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}
CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember::~CMsgDOTAChatChannelMemberUpdate_JoinedMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::ArenaDtor(void* object) {
  CMsgDOTAChatChannelMemberUpdate_JoinedMember* _this = reinterpret_cast< CMsgDOTAChatChannelMemberUpdate_JoinedMember* >(object);
  (void)_this;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatChannelMemberUpdate_JoinedMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatChannelMemberUpdate_JoinedMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate_JoinedMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate_JoinedMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatChannelMemberUpdate_JoinedMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::InternalSwap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, status_)
      + sizeof(CMsgDOTAChatChannelMemberUpdate_JoinedMember::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatChannelMemberUpdate_JoinedMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatChannelMemberUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatChannelMemberUpdate>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  left_steam_ids_(arena),
  joined_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatChannelMemberUpdate)
}
CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      left_steam_ids_(from.left_steam_ids_),
      joined_members_(from.joined_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatChannelMemberUpdate)
}

void CMsgDOTAChatChannelMemberUpdate::SharedCtor() {
channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatChannelMemberUpdate::~CMsgDOTAChatChannelMemberUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatChannelMemberUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatChannelMemberUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatChannelMemberUpdate::ArenaDtor(void* object) {
  CMsgDOTAChatChannelMemberUpdate* _this = reinterpret_cast< CMsgDOTAChatChannelMemberUpdate* >(object);
  (void)_this;
}
void CMsgDOTAChatChannelMemberUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatChannelMemberUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatChannelMemberUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatChannelMemberUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_steam_ids_.Clear();
  joined_members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatChannelMemberUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 left_steam_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_left_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_left_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joined_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatChannelMemberUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatChannelMemberUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // repeated fixed64 left_steam_ids = 2;
  for (int i = 0, n = this->_internal_left_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_left_steam_ids(i), target);
  }

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joined_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_joined_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatChannelMemberUpdate)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatChannelMemberUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 left_steam_ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_left_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_left_steam_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  total_size += 1UL * this->_internal_joined_members_size();
  for (const auto& msg : this->joined_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatChannelMemberUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatChannelMemberUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatChannelMemberUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_steam_ids_.MergeFrom(from.left_steam_ids_);
  joined_members_.MergeFrom(from.joined_members_);
  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate::InternalSwap(CMsgDOTAChatChannelMemberUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_steam_ids_.InternalSwap(&other->left_steam_ids_);
  joined_members_.InternalSwap(&other->joined_members_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatChannelMemberUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARequestChatChannelList::_Internal {
 public:
};

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelList)
}
CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelList)
}

void CMsgDOTARequestChatChannelList::SharedCtor() {
}

CMsgDOTARequestChatChannelList::~CMsgDOTARequestChatChannelList() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARequestChatChannelList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARequestChatChannelList::ArenaDtor(void* object) {
  CMsgDOTARequestChatChannelList* _this = reinterpret_cast< CMsgDOTARequestChatChannelList* >(object);
  (void)_this;
}
void CMsgDOTARequestChatChannelList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARequestChatChannelList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARequestChatChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARequestChatChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARequestChatChannelList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARequestChatChannelList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelList)
  return target;
}

size_t CMsgDOTARequestChatChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARequestChatChannelList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARequestChatChannelList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARequestChatChannelList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARequestChatChannelList)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelList::MergeFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTARequestChatChannelList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelList::CopyFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelList::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelList::InternalSwap(CMsgDOTARequestChatChannelList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARequestChatChannelListResponse_ChatChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARequestChatChannelListResponse_ChatChannel>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_members(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}
CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  ::memcpy(&num_members_, &from.num_members_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_members_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::~CMsgDOTARequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::ArenaDtor(void* object) {
  CMsgDOTARequestChatChannelListResponse_ChatChannel* _this = reinterpret_cast< CMsgDOTARequestChatChannelListResponse_ChatChannel* >(object);
  (void)_this;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&num_members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_type_) -
        reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_members(&has_bits);
          num_members_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_members(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse_ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional uint32 num_members = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_members());
    }

    // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse_ChatChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARequestChatChannelListResponse_ChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARequestChatChannelListResponse.ChatChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARequestChatChannelListResponse.ChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_type_)
      + sizeof(CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, num_members_)>(
          reinterpret_cast<char*>(&num_members_),
          reinterpret_cast<char*>(&other->num_members_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARequestChatChannelListResponse::_Internal {
 public:
};

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARequestChatChannelListResponse)
}
CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARequestChatChannelListResponse)
}

void CMsgDOTARequestChatChannelListResponse::SharedCtor() {
}

CMsgDOTARequestChatChannelListResponse::~CMsgDOTARequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARequestChatChannelListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARequestChatChannelListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARequestChatChannelListResponse::ArenaDtor(void* object) {
  CMsgDOTARequestChatChannelListResponse* _this = reinterpret_cast< CMsgDOTARequestChatChannelListResponse* >(object);
  (void)_this;
}
void CMsgDOTARequestChatChannelListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARequestChatChannelListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARequestChatChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARequestChatChannelListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARequestChatChannelListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARequestChatChannelListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARequestChatChannelListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARequestChatChannelListResponse)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARequestChatChannelListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARequestChatChannelListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARequestChatChannelListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARequestChatChannelListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse::InternalSwap(CMsgDOTARequestChatChannelListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARequestChatChannelListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatGetUserList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetUserList>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetUserList)
}
CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserList)
}

void CMsgDOTAChatGetUserList::SharedCtor() {
channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatGetUserList::~CMsgDOTAChatGetUserList() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatGetUserList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatGetUserList::ArenaDtor(void* object) {
  CMsgDOTAChatGetUserList* _this = reinterpret_cast< CMsgDOTAChatGetUserList* >(object);
  (void)_this;
}
void CMsgDOTAChatGetUserList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatGetUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatGetUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetUserList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatGetUserList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserList)
  return target;
}

size_t CMsgDOTAChatGetUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetUserList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatGetUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatGetUserList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatGetUserList)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserList::MergeFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CMsgDOTAChatGetUserList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserList::CopyFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserList::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserList::InternalSwap(CMsgDOTAChatGetUserList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetUserList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatGetUserListResponse_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetUserListResponse_Member>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetUserListResponse.Member)
}
CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse.Member)
}

void CMsgDOTAChatGetUserListResponse_Member::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatGetUserListResponse_Member::~CMsgDOTAChatGetUserListResponse_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatGetUserListResponse_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetUserListResponse_Member::ArenaDtor(void* object) {
  CMsgDOTAChatGetUserListResponse_Member* _this = reinterpret_cast< CMsgDOTAChatGetUserListResponse_Member* >(object);
  (void)_this;
}
void CMsgDOTAChatGetUserListResponse_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatGetUserListResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatGetUserListResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetUserListResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetUserListResponse_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatGetUserListResponse.Member.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 channel_user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_channel_user_id(&has_bits);
          channel_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatGetUserListResponse_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetUserListResponse.Member.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse.Member)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetUserListResponse.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatGetUserListResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatGetUserListResponse.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatGetUserListResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse_Member::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse_Member::InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, status_)
      + sizeof(CMsgDOTAChatGetUserListResponse_Member::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetUserListResponse_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatGetUserListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetUserListResponse>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetUserListResponse)
}
CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetUserListResponse)
}

void CMsgDOTAChatGetUserListResponse::SharedCtor() {
channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatGetUserListResponse::~CMsgDOTAChatGetUserListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetUserListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatGetUserListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatGetUserListResponse::ArenaDtor(void* object) {
  CMsgDOTAChatGetUserListResponse* _this = reinterpret_cast< CMsgDOTAChatGetUserListResponse* >(object);
  (void)_this;
}
void CMsgDOTAChatGetUserListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatGetUserListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatGetUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetUserListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetUserListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatGetUserListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetUserListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_channel_id(), target);
  }

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetUserListResponse)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetUserListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatGetUserListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatGetUserListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatGetUserListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse::InternalSwap(CMsgDOTAChatGetUserListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetUserListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatGetMemberCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetMemberCount>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetMemberCount)
}
CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCount)
}

void CMsgDOTAChatGetMemberCount::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_type_ = 0;
}

CMsgDOTAChatGetMemberCount::~CMsgDOTAChatGetMemberCount() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatGetMemberCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCount::ArenaDtor(void* object) {
  CMsgDOTAChatGetMemberCount* _this = reinterpret_cast< CMsgDOTAChatGetMemberCount* >(object);
  (void)_this;
}
void CMsgDOTAChatGetMemberCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatGetMemberCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatGetMemberCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetMemberCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmpty();
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetMemberCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatGetMemberCount.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatGetMemberCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetMemberCount.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCount)
  return target;
}

size_t CMsgDOTAChatGetMemberCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetMemberCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatGetMemberCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatGetMemberCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatGetMemberCount)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCount::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCount::InternalSwap(CMsgDOTAChatGetMemberCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetMemberCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatGetMemberCountResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatGetMemberCountResponse>()._has_bits_);
  static void set_has_channel_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatGetMemberCountResponse)
}
CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_name()) {
    channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_name(), 
      GetArena());
  }
  ::memcpy(&channel_type_, &from.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatGetMemberCountResponse)
}

void CMsgDOTAChatGetMemberCountResponse::SharedCtor() {
channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
}

CMsgDOTAChatGetMemberCountResponse::~CMsgDOTAChatGetMemberCountResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatGetMemberCountResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatGetMemberCountResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCountResponse::ArenaDtor(void* object) {
  CMsgDOTAChatGetMemberCountResponse* _this = reinterpret_cast< CMsgDOTAChatGetMemberCountResponse* >(object);
  (void)_this;
}
void CMsgDOTAChatGetMemberCountResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatGetMemberCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatGetMemberCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatGetMemberCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatGetMemberCountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAChatGetMemberCountResponse.channel_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAChatChannelType_t_IsValid(val))) {
            _internal_set_channel_type(static_cast<::DOTAChatChannelType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatGetMemberCountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatGetMemberCountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_channel_name().data(), static_cast<int>(this->_internal_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAChatGetMemberCountResponse.channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_name(), target);
  }

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_channel_type(), target);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_member_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatGetMemberCountResponse)
  return target;
}

size_t CMsgDOTAChatGetMemberCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatGetMemberCountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_channel_name());
    }

    // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

    // optional uint32 member_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_member_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatGetMemberCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatGetMemberCountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatGetMemberCountResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_channel_name(from._internal_channel_name());
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCountResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCountResponse::InternalSwap(CMsgDOTAChatGetMemberCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, member_count_)
      + sizeof(CMsgDOTAChatGetMemberCountResponse::member_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, channel_type_)>(
          reinterpret_cast<char*>(&channel_type_),
          reinterpret_cast<char*>(&other->channel_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatGetMemberCountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatRegionsEnabled_Region::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatRegionsEnabled_Region>()._has_bits_);
  static void set_has_min_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatRegionsEnabled.Region)
}
CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_latitude_, &from.min_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled.Region)
}

void CMsgDOTAChatRegionsEnabled_Region::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
}

CMsgDOTAChatRegionsEnabled_Region::~CMsgDOTAChatRegionsEnabled_Region() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled.Region)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatRegionsEnabled_Region::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatRegionsEnabled_Region::ArenaDtor(void* object) {
  CMsgDOTAChatRegionsEnabled_Region* _this = reinterpret_cast< CMsgDOTAChatRegionsEnabled_Region* >(object);
  (void)_this;
}
void CMsgDOTAChatRegionsEnabled_Region::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatRegionsEnabled_Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatRegionsEnabled_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatRegionsEnabled.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&min_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_longitude_) -
        reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatRegionsEnabled_Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float min_latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_min_latitude(&has_bits);
          min_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_max_latitude(&has_bits);
          max_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_min_longitude(&has_bits);
          min_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_longitude(&has_bits);
          max_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatRegionsEnabled_Region::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_min_latitude(), target);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_latitude(), target);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_longitude(), target);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled.Region)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatRegionsEnabled.Region)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_longitude = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled_Region* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatRegionsEnabled_Region>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatRegionsEnabled.Region)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatRegionsEnabled.Region)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      min_latitude_ = from.min_latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_latitude_ = from.max_latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_longitude_ = from.min_longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_longitude_ = from.max_longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled_Region::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled_Region::InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, max_longitude_)
      + sizeof(CMsgDOTAChatRegionsEnabled_Region::max_longitude_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, min_latitude_)>(
          reinterpret_cast<char*>(&min_latitude_),
          reinterpret_cast<char*>(&other->min_latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatRegionsEnabled_Region::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAChatRegionsEnabled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAChatRegionsEnabled>()._has_bits_);
  static void set_has_enable_all_regions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  enabled_regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAChatRegionsEnabled)
}
CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      enabled_regions_(from.enabled_regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enable_all_regions_ = from.enable_all_regions_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAChatRegionsEnabled)
}

void CMsgDOTAChatRegionsEnabled::SharedCtor() {
enable_all_regions_ = false;
}

CMsgDOTAChatRegionsEnabled::~CMsgDOTAChatRegionsEnabled() {
  // @@protoc_insertion_point(destructor:CMsgDOTAChatRegionsEnabled)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAChatRegionsEnabled::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAChatRegionsEnabled::ArenaDtor(void* object) {
  CMsgDOTAChatRegionsEnabled* _this = reinterpret_cast< CMsgDOTAChatRegionsEnabled* >(object);
  (void)_this;
}
void CMsgDOTAChatRegionsEnabled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAChatRegionsEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAChatRegionsEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAChatRegionsEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_regions_.Clear();
  enable_all_regions_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAChatRegionsEnabled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool enable_all_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_all_regions(&has_bits);
          enable_all_regions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enabled_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAChatRegionsEnabled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAChatRegionsEnabled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_all_regions(), target);
  }

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enabled_regions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_enabled_regions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAChatRegionsEnabled)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAChatRegionsEnabled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  total_size += 1UL * this->_internal_enabled_regions_size();
  for (const auto& msg : this->enabled_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool enable_all_regions = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAChatRegionsEnabled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAChatRegionsEnabled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAChatRegionsEnabled)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_regions_.MergeFrom(from.enabled_regions_);
  if (from._internal_has_enable_all_regions()) {
    _internal_set_enable_all_regions(from._internal_enable_all_regions());
  }
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled::InternalSwap(CMsgDOTAChatRegionsEnabled* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enabled_regions_.InternalSwap(&other->enabled_regions_);
  swap(enable_all_regions_, other->enable_all_regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAChatRegionsEnabled::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatInvite* Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatKick* Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatPromote* Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatPromote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatPromote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatDemote* Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatDemote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatDemote >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPrivateChatResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientPrivateChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPrivateChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCPrivateChatInfoRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCPrivateChatInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCPrivateChatInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPrivateChatInfoResponse_Member* Arena::CreateMaybeMessage< ::CMsgGCToClientPrivateChatInfoResponse_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPrivateChatInfoResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPrivateChatInfoResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientPrivateChatInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPrivateChatInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAJoinChatChannel* Arena::CreateMaybeMessage< ::CMsgDOTAJoinChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAJoinChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveChatChannel* Arena::CreateMaybeMessage< ::CMsgDOTALeaveChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCChatReportPublicSpam* Arena::CreateMaybeMessage< ::CMsgGCChatReportPublicSpam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCChatReportPublicSpam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAClientIgnoredUser* Arena::CreateMaybeMessage< ::CMsgDOTAClientIgnoredUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAClientIgnoredUser >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatModeratorBan* Arena::CreateMaybeMessage< ::CMsgDOTAChatModeratorBan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatModeratorBan >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_DiceRoll* Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_DiceRoll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_DiceRoll >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage_TriviaAnswered* Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage_TriviaAnswered >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage_TriviaAnswered >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMessage* Arena::CreateMaybeMessage< ::CMsgDOTAChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatMember* Arena::CreateMaybeMessage< ::CMsgDOTAChatMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAJoinChatChannelResponse* Arena::CreateMaybeMessage< ::CMsgDOTAJoinChatChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAJoinChatChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatChannelFullUpdate* Arena::CreateMaybeMessage< ::CMsgDOTAChatChannelFullUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatChannelFullUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAOtherJoinedChatChannel* Arena::CreateMaybeMessage< ::CMsgDOTAOtherJoinedChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAOtherJoinedChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAOtherLeftChatChannel* Arena::CreateMaybeMessage< ::CMsgDOTAOtherLeftChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAOtherLeftChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatChannelMemberUpdate_JoinedMember* Arena::CreateMaybeMessage< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatChannelMemberUpdate_JoinedMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatChannelMemberUpdate* Arena::CreateMaybeMessage< ::CMsgDOTAChatChannelMemberUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatChannelMemberUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelList* Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelListResponse_ChatChannel* Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARequestChatChannelListResponse* Arena::CreateMaybeMessage< ::CMsgDOTARequestChatChannelListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARequestChatChannelListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetUserList* Arena::CreateMaybeMessage< ::CMsgDOTAChatGetUserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetUserListResponse_Member* Arena::CreateMaybeMessage< ::CMsgDOTAChatGetUserListResponse_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetUserListResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetUserListResponse* Arena::CreateMaybeMessage< ::CMsgDOTAChatGetUserListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetUserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetMemberCount* Arena::CreateMaybeMessage< ::CMsgDOTAChatGetMemberCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetMemberCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatGetMemberCountResponse* Arena::CreateMaybeMessage< ::CMsgDOTAChatGetMemberCountResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatGetMemberCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatRegionsEnabled_Region* Arena::CreateMaybeMessage< ::CMsgDOTAChatRegionsEnabled_Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatRegionsEnabled_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAChatRegionsEnabled* Arena::CreateMaybeMessage< ::CMsgDOTAChatRegionsEnabled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAChatRegionsEnabled >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
