// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(int index);
class CLobbyBroadcastChannelInfo;
struct CLobbyBroadcastChannelInfoDefaultTypeInternal;
extern CLobbyBroadcastChannelInfoDefaultTypeInternal _CLobbyBroadcastChannelInfo_default_instance_;
class CLobbyGuildChallenge;
struct CLobbyGuildChallengeDefaultTypeInternal;
extern CLobbyGuildChallengeDefaultTypeInternal _CLobbyGuildChallenge_default_instance_;
class CLobbyGuildDetails;
struct CLobbyGuildDetailsDefaultTypeInternal;
extern CLobbyGuildDetailsDefaultTypeInternal _CLobbyGuildDetails_default_instance_;
class CLobbyTeamDetails;
struct CLobbyTeamDetailsDefaultTypeInternal;
extern CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetails;
struct CLobbyTimedRewardDetailsDefaultTypeInternal;
extern CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
class CMsgLeaverState;
struct CMsgLeaverStateDefaultTypeInternal;
extern CMsgLeaverStateDefaultTypeInternal _CMsgLeaverState_default_instance_;
class CMsgLobbyCoachFriendRequest;
struct CMsgLobbyCoachFriendRequestDefaultTypeInternal;
extern CMsgLobbyCoachFriendRequestDefaultTypeInternal _CMsgLobbyCoachFriendRequest_default_instance_;
class CMsgLobbyEventGameDetails;
struct CMsgLobbyEventGameDetailsDefaultTypeInternal;
extern CMsgLobbyEventGameDetailsDefaultTypeInternal _CMsgLobbyEventGameDetails_default_instance_;
class CMsgLobbyPlaytestDetails;
struct CMsgLobbyPlaytestDetailsDefaultTypeInternal;
extern CMsgLobbyPlaytestDetailsDefaultTypeInternal _CMsgLobbyPlaytestDetails_default_instance_;
class CMsgMatchMatchmakingStats;
struct CMsgMatchMatchmakingStatsDefaultTypeInternal;
extern CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
class CMsgPartyReadyCheckAcknowledge;
struct CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal;
extern CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal _CMsgPartyReadyCheckAcknowledge_default_instance_;
class CMsgPartyReadyCheckRequest;
struct CMsgPartyReadyCheckRequestDefaultTypeInternal;
extern CMsgPartyReadyCheckRequestDefaultTypeInternal _CMsgPartyReadyCheckRequest_default_instance_;
class CMsgPartyReadyCheckResponse;
struct CMsgPartyReadyCheckResponseDefaultTypeInternal;
extern CMsgPartyReadyCheckResponseDefaultTypeInternal _CMsgPartyReadyCheckResponse_default_instance_;
class CMsgReadyCheckStatus;
struct CMsgReadyCheckStatusDefaultTypeInternal;
extern CMsgReadyCheckStatusDefaultTypeInternal _CMsgReadyCheckStatus_default_instance_;
class CMsgReadyCheckStatus_ReadyMember;
struct CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal;
extern CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal _CMsgReadyCheckStatus_ReadyMember_default_instance_;
class CMvpData;
struct CMvpDataDefaultTypeInternal;
extern CMvpDataDefaultTypeInternal _CMvpData_default_instance_;
class CMvpData_MvpDatum;
struct CMvpData_MvpDatumDefaultTypeInternal;
extern CMvpData_MvpDatumDefaultTypeInternal _CMvpData_MvpDatum_default_instance_;
class CMvpData_MvpDatum_MvpAccolade;
struct CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal;
extern CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal _CMvpData_MvpDatum_MvpAccolade_default_instance_;
class CSODOTALobby;
struct CSODOTALobbyDefaultTypeInternal;
extern CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
class CSODOTALobbyInvite;
struct CSODOTALobbyInviteDefaultTypeInternal;
extern CSODOTALobbyInviteDefaultTypeInternal _CSODOTALobbyInvite_default_instance_;
class CSODOTALobbyInvite_LobbyMember;
struct CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal;
extern CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal _CSODOTALobbyInvite_LobbyMember_default_instance_;
class CSODOTALobbyMember;
struct CSODOTALobbyMemberDefaultTypeInternal;
extern CSODOTALobbyMemberDefaultTypeInternal _CSODOTALobbyMember_default_instance_;
class CSODOTALobby_CExtraMsg;
struct CSODOTALobby_CExtraMsgDefaultTypeInternal;
extern CSODOTALobby_CExtraMsgDefaultTypeInternal _CSODOTALobby_CExtraMsg_default_instance_;
class CSODOTAParty;
struct CSODOTAPartyDefaultTypeInternal;
extern CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
class CSODOTAPartyInvite;
struct CSODOTAPartyInviteDefaultTypeInternal;
extern CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
class CSODOTAPartyInvite_PartyMember;
struct CSODOTAPartyInvite_PartyMemberDefaultTypeInternal;
extern CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyMember;
struct CSODOTAPartyMemberDefaultTypeInternal;
extern CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CLobbyBroadcastChannelInfo* Arena::CreateMaybeMessage<::CLobbyBroadcastChannelInfo>(Arena*);
template<> ::CLobbyGuildChallenge* Arena::CreateMaybeMessage<::CLobbyGuildChallenge>(Arena*);
template<> ::CLobbyGuildDetails* Arena::CreateMaybeMessage<::CLobbyGuildDetails>(Arena*);
template<> ::CLobbyTeamDetails* Arena::CreateMaybeMessage<::CLobbyTeamDetails>(Arena*);
template<> ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage<::CLobbyTimedRewardDetails>(Arena*);
template<> ::CMsgLeaverState* Arena::CreateMaybeMessage<::CMsgLeaverState>(Arena*);
template<> ::CMsgLobbyCoachFriendRequest* Arena::CreateMaybeMessage<::CMsgLobbyCoachFriendRequest>(Arena*);
template<> ::CMsgLobbyEventGameDetails* Arena::CreateMaybeMessage<::CMsgLobbyEventGameDetails>(Arena*);
template<> ::CMsgLobbyPlaytestDetails* Arena::CreateMaybeMessage<::CMsgLobbyPlaytestDetails>(Arena*);
template<> ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage<::CMsgMatchMatchmakingStats>(Arena*);
template<> ::CMsgPartyReadyCheckAcknowledge* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckAcknowledge>(Arena*);
template<> ::CMsgPartyReadyCheckRequest* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckRequest>(Arena*);
template<> ::CMsgPartyReadyCheckResponse* Arena::CreateMaybeMessage<::CMsgPartyReadyCheckResponse>(Arena*);
template<> ::CMsgReadyCheckStatus* Arena::CreateMaybeMessage<::CMsgReadyCheckStatus>(Arena*);
template<> ::CMsgReadyCheckStatus_ReadyMember* Arena::CreateMaybeMessage<::CMsgReadyCheckStatus_ReadyMember>(Arena*);
template<> ::CMvpData* Arena::CreateMaybeMessage<::CMvpData>(Arena*);
template<> ::CMvpData_MvpDatum* Arena::CreateMaybeMessage<::CMvpData_MvpDatum>(Arena*);
template<> ::CMvpData_MvpDatum_MvpAccolade* Arena::CreateMaybeMessage<::CMvpData_MvpDatum_MvpAccolade>(Arena*);
template<> ::CSODOTALobby* Arena::CreateMaybeMessage<::CSODOTALobby>(Arena*);
template<> ::CSODOTALobbyInvite* Arena::CreateMaybeMessage<::CSODOTALobbyInvite>(Arena*);
template<> ::CSODOTALobbyInvite_LobbyMember* Arena::CreateMaybeMessage<::CSODOTALobbyInvite_LobbyMember>(Arena*);
template<> ::CSODOTALobbyMember* Arena::CreateMaybeMessage<::CSODOTALobbyMember>(Arena*);
template<> ::CSODOTALobby_CExtraMsg* Arena::CreateMaybeMessage<::CSODOTALobby_CExtraMsg>(Arena*);
template<> ::CSODOTAParty* Arena::CreateMaybeMessage<::CSODOTAParty>(Arena*);
template<> ::CSODOTAPartyInvite* Arena::CreateMaybeMessage<::CSODOTAPartyInvite>(Arena*);
template<> ::CSODOTAPartyInvite_PartyMember* Arena::CreateMaybeMessage<::CSODOTAPartyInvite_PartyMember>(Arena*);
template<> ::CSODOTAPartyMember* Arena::CreateMaybeMessage<::CSODOTAPartyMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CSODOTAParty_State : int {
  CSODOTAParty_State_UI = 0,
  CSODOTAParty_State_FINDING_MATCH = 1,
  CSODOTAParty_State_IN_MATCH = 2
};
bool CSODOTAParty_State_IsValid(int value);
constexpr CSODOTAParty_State CSODOTAParty_State_State_MIN = CSODOTAParty_State_UI;
constexpr CSODOTAParty_State CSODOTAParty_State_State_MAX = CSODOTAParty_State_IN_MATCH;
constexpr int CSODOTAParty_State_State_ARRAYSIZE = CSODOTAParty_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTAParty_State_descriptor();
template<typename T>
inline const std::string& CSODOTAParty_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTAParty_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTAParty_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTAParty_State_descriptor(), enum_t_value);
}
inline bool CSODOTAParty_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTAParty_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTAParty_State>(
    CSODOTAParty_State_descriptor(), name, value);
}
enum CSODOTALobby_State : int {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
constexpr CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
constexpr CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
constexpr int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_State_descriptor();
template<typename T>
inline const std::string& CSODOTALobby_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTALobby_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTALobby_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), enum_t_value);
}
inline bool CSODOTALobby_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTALobby_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType : int {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH = 5,
  CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH = 6,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7,
  CSODOTALobby_LobbyType_CASUAL_1V1_MATCH = 8,
  CSODOTALobby_LobbyType_WEEKEND_TOURNEY = 9,
  CSODOTALobby_LobbyType_LOCAL_BOT_MATCH = 10,
  CSODOTALobby_LobbyType_SPECTATOR = 11,
  CSODOTALobby_LobbyType_EVENT_MATCH = 12,
  CSODOTALobby_LobbyType_GAUNTLET = 13,
  CSODOTALobby_LobbyType_NEW_PLAYER_POOL = 14
};
bool CSODOTALobby_LobbyType_IsValid(int value);
constexpr CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
constexpr CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_NEW_PLAYER_POOL;
constexpr int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
template<typename T>
inline const std::string& CSODOTALobby_LobbyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTALobby_LobbyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTALobby_LobbyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), enum_t_value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTALobby_LobbyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType : int {
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills = 1,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_deaths = 2,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_assists = 3,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_net_worth = 5,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_item_value = 6,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_support_gold_spent = 7,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_wards_placed = 8,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_dewards = 9,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_camps_stacked = 10,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_last_hits = 11,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_denies = 12,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Killing_Sprees = 13,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Godlike = 14,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Towers_Destroyed = 15,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_SunstrikeKills = 16,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_Culls = 17,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_BattleHungerKills = 18,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LowHealthKills = 19,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_TornadoKills = 20,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_DoubleStuns = 21,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_WarcryAssists = 22,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_CleaveDoubleKills = 23,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_TeleportInterrupts = 24,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_MultiChrono = 25,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_ChronoKills = 26,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_MultiShocks = 27,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_RoshanKills = 28,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_FingerKills = 29,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_SmokedHeroKills = 32,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_HeroesRevealedWithDust = 33,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_ReincarnationKills = 34,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Skywrath_FlareKills = 35,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_SplitEarthStuns = 36,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MaxStunArrows = 37,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits = 38,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerCrits = 39,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_Earthbinds = 40,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bloodseeker_RuptureKills = 41,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_LeashedEnemies = 42,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_FountainGlimpses = 43,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_SpellsStolen = 44,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_UltimatesStolen = 45,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_EnemiesDoomed = 46,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_Purifications = 47,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_AlliesRepelled = 48,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_EnemiesRepelled = 49,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FiveHeroFatalBonds = 50,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies = 51,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_CrystalNovas = 52,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_DoubleHeroTorrents = 53,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_TripleHeroGhostShips = 54,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_EnemiesEnsnared = 55,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_TripleHeroRipTides = 56,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lycan_KillsDuringShapeshift = 57,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_DismemberKills = 58,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_EnemyHeroesHooked = 59,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_HookKills = 60,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked = 61,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_EnemiesSilenced = 62,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_MultiHeroSilences = 63,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_SilencedKills = 64,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_FrostArrowKills = 65,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_KillsInDragonForm = 66,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_BreatheFireKills = 67,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_SplashKills = 68,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_CaskStuns = 69,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MaledictKills = 70,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts = 71,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_DeathWardKills = 72,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThunderStrikeKills = 73,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_HeroesGlimpsed = 74,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FreezingFieldKills = 75,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_EnemiesPetrified = 77,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FatalBondsKills = 78,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_GolemKills = 79,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunches = 80,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_SnowballStuns = 81,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureStuns = 82,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_3HeroEchoslams = 83,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_BurrowstrikeStuns = 84,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_EpicenterKills = 85,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_AncientSealKills = 86,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_ConcussiveShotKills = 87,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_LucentBeamKills = 88,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_EclipseKills = 89,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_IlluminateKills = 90,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns = 91,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled = 92,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LegionCommander_DuelsWon = 93,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarKills = 94,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarMultiKills = 95,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_FocusFireBuildings = 96,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_PowershotKills = 97,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerLastHits = 98,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills = 99,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_CryptSwarmKills = 100,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismBuildingKills = 101,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned = 102,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_MultiHeroSilences = 103,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilKills = 104,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilHealed = 105,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_AphoticShieldKills = 106,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostTripleKills = 107,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostMultiKills = 108,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostBounces = 109,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EnragedKills = 110,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EarthshockKills = 111,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeKills = 112,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_DragonSlaveKills = 113,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeArrayStuns = 114,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Barracks_Destroyed = 115,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_MeldKills = 116,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_HeroesSlowed = 117,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_AssassinationKills = 118,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_HeadshotStuns = 119,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_SmashStuns = 120,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_GripSilences = 121,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_ShackleKills = 122,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_HexKills = 123,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_EnemiesStomped = 124,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_DoubleEdgeKills = 125,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_ReturnKills = 126,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_EnemiesChained = 127,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills = 128,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Puck_OrbKills = 129,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_VengefulSpirit_EnemiesStunned = 130,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_RageKills = 131,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_OpenWoundsKills = 132,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_InfestKills = 133,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_SpiritKills = 134,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_GoodStomps = 135,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_RocketKills = 136,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_BlindRocketKills = 137,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_BallKills = 138,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_DoubleRemnantKills = 139,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_VortexKills = 140,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_DoubleMissileKills = 141,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_LaserKills = 142,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_SuicideKills = 143,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_LandMineKills = 144,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_StatisTrapStuns = 145,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_RemoteMineKills = 146,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_TripleRazeKills = 147,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_RequiemMultiKills = 148,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_QRazeKills = 149,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_WRazeKills = 150,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_ERazeKills = 151,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FatesEdictKills = 152,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FalsePromiseSaves = 153,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Juggernaut_OmnislashKills = 154,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_SkeletonHeroKills = 157,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns = 158,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShallowGraveSaves = 159,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_PoisonTouchKills = 160,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeManMeks = 161,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_PoisonAttackKills = 162,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_CorrosiveSkinKills = 163,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeHeroVeils = 164,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_KillsDuringViperStrike = 165,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SolarCrestKills = 166,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tiny_TreeThrowKills = 167,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_BackstabKills = 168,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns = 169,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Terrorblade_MetamorphosisKills = 170,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_GreatFingerKills = 171,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims = 172,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_ThreeManManaVoids = 173,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_TempestDoubleKills = 174,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_SparkWraithKills = 175,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_BrainSapKills = 176,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_FiendsGripKills = 177,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_TripleHeroFlamebreaks = 178,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_DoubleHeroLassoes = 179,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit = 180,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks = 181,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_TripleHeroNasalGoo = 182,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_SpiderlingHeroKills = 183,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_KillsInsideWeb = 184,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Centaur_ThreeHeroStampede = 185,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ChaosKnight_RealityRiftKills = 186,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Chen_KillsWithPenitence = 187,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas = 188,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields = 189,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShadowWaveKills = 190,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_SiphonKills = 191,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls = 192,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm = 193,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_InfernalBladeBurnKills = 194,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills = 195,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_RemnantKills = 196,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_SleightOfFistKills = 197,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos = 198,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_ThreeManBlackHoles = 199,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation = 200,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon = 201,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_HomingMissileKills = 202,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_RocketBarrageKills = 203,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_KillsDuringLifeBreak = 204,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_BurningSpearKills = 205,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroIceWall = 206,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroEMP = 207,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast = 208,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroChaosMeteor = 209,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_MultiHeroDualBreath = 210,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_IcePathMacropyreCombos = 211,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_PulseNovaKills = 212,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm = 213,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath = 214,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_PoofKills = 215,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_MultiHeroEarthbinds = 216,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_NighttimeKills = 217,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Morphling_KillsDuringReplicate = 218,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_FireblastKills = 219,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_IgniteKills = 220,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DominatingKillStreaks = 221,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_MegaKillStreaks = 222,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Alchemist_AghanimsGiven = 223,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VeilsLeadingToKills = 224,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DustLeadingToKills = 225,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns = 226,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Weaver_ShukuchiKills = 227,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_ShackleFocusFireKills = 228,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills = 229,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunchKills = 230,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tinker_MultiHeroLasers = 231,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades = 232,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_KillsDuringGodsStrength = 233,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sniper_ThreeHeroShrapnels = 234,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_KillsDuringShadowDance = 235,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks = 236,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills = 237,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade = 238,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Razor_EyeOfTheStormKills = 239,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pugna_LifeDrainKills = 240,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills = 241,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Oracle_MultiHeroFortunesEnd = 242,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_PurificationKills = 243,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear = 244,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_ThreeHeroFatalBonds = 245,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_TricksOfTheTradeKills = 246,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_AftershockHits10 = 247,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_5HeroEchoslams = 248,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeHeroKills = 249,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeHeroStuns = 250,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureMultiStuns = 251,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_TotemKills = 252,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_SwashbuckleKills = 253,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Furion_EnemyHeroesTrapped = 254,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_HeartpiercerKills = 255,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_MultiHeroStoneGaze = 256,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_SplitShotKills = 257,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MultiHeroStarstorm = 258,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_KillsFromMoonlightShadow = 259,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroSkewers = 260,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroReversePolarity = 261,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave = 262,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_MultiHeroSong = 263,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_AlliesHealedBySong = 264,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_MultiHeroRoar = 265,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_BattleCryKills = 266,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WinterWyvern_ThreeHeroCurses = 267,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell = 268,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_EnemiesKilledInArena = 269,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_MultiHeroGodsRebuke = 270,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_GodsRebukeKills = 271,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_LizardBlobsKills = 272,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_TwoHeroCookieStuns = 273,
  CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Custom_KillStreak = 274
};
bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(int value);
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MIN = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Custom_KillStreak;
constexpr int CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_ARRAYSIZE = CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
template<typename T>
inline const std::string& CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor(), enum_t_value);
}
inline bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>(
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor(), name, value);
}
enum ELaneSelection : int {
  k_ELaneSelection_SAFELANE = 0,
  k_ELaneSelection_OFFLANE = 1,
  k_ELaneSelection_MIDLANE = 2,
  k_ELaneSelection_SUPPORT_SOFT = 3,
  k_ELaneSelection_SUPPORT_HARD = 4
};
bool ELaneSelection_IsValid(int value);
constexpr ELaneSelection ELaneSelection_MIN = k_ELaneSelection_SAFELANE;
constexpr ELaneSelection ELaneSelection_MAX = k_ELaneSelection_SUPPORT_HARD;
constexpr int ELaneSelection_ARRAYSIZE = ELaneSelection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelection_descriptor();
template<typename T>
inline const std::string& ELaneSelection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELaneSelection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELaneSelection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELaneSelection_descriptor(), enum_t_value);
}
inline bool ELaneSelection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELaneSelection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELaneSelection>(
    ELaneSelection_descriptor(), name, value);
}
enum ELaneSelectionFlags : int {
  k_ELaneSelectionFlags_None = 0,
  k_ELaneSelectionFlags_SAFELANE = 1,
  k_ELaneSelectionFlags_OFFLANE = 2,
  k_ELaneSelectionFlags_MIDLANE = 4,
  k_ELaneSelectionFlags_CORE = 7,
  k_ELaneSelectionFlags_SUPPORT_SOFT = 8,
  k_ELaneSelectionFlags_SUPPORT_HARD = 16,
  k_ELaneSelectionFlags_SUPPORT = 24,
  k_ELaneSelectionFlags_ALL = 31
};
bool ELaneSelectionFlags_IsValid(int value);
constexpr ELaneSelectionFlags ELaneSelectionFlags_MIN = k_ELaneSelectionFlags_None;
constexpr ELaneSelectionFlags ELaneSelectionFlags_MAX = k_ELaneSelectionFlags_ALL;
constexpr int ELaneSelectionFlags_ARRAYSIZE = ELaneSelectionFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelectionFlags_descriptor();
template<typename T>
inline const std::string& ELaneSelectionFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELaneSelectionFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELaneSelectionFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELaneSelectionFlags_descriptor(), enum_t_value);
}
inline bool ELaneSelectionFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELaneSelectionFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELaneSelectionFlags>(
    ELaneSelectionFlags_descriptor(), name, value);
}
enum EPartyMatchmakingFlags : int {
  k_EPartyMatchmakingFlags_None = 0,
  k_EPartyMatchmakingFlags_LargeRankSpread = 1
};
bool EPartyMatchmakingFlags_IsValid(int value);
constexpr EPartyMatchmakingFlags EPartyMatchmakingFlags_MIN = k_EPartyMatchmakingFlags_None;
constexpr EPartyMatchmakingFlags EPartyMatchmakingFlags_MAX = k_EPartyMatchmakingFlags_LargeRankSpread;
constexpr int EPartyMatchmakingFlags_ARRAYSIZE = EPartyMatchmakingFlags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartyMatchmakingFlags_descriptor();
template<typename T>
inline const std::string& EPartyMatchmakingFlags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPartyMatchmakingFlags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPartyMatchmakingFlags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPartyMatchmakingFlags_descriptor(), enum_t_value);
}
inline bool EPartyMatchmakingFlags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPartyMatchmakingFlags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPartyMatchmakingFlags>(
    EPartyMatchmakingFlags_descriptor(), name, value);
}
enum EHighPriorityMMState : int {
  k_EHighPriorityMM_Unknown = 0,
  k_EHighPriorityMM_MissingMMData = 1,
  k_EHighPriorityMM_ResourceMissing = 2,
  k_EHighPriorityMM_ManuallyDisabled = 3,
  k_EHighPriorityMM_Min_Enabled = 64,
  k_EHighPriorityMM_AllRolesSelected = 65,
  k_EHighPriorityMM_UsingResource = 66,
  k_EHighPriorityMM_FiveStack = 67,
  k_EHighPriorityMM_HighDemand = 68
};
bool EHighPriorityMMState_IsValid(int value);
constexpr EHighPriorityMMState EHighPriorityMMState_MIN = k_EHighPriorityMM_Unknown;
constexpr EHighPriorityMMState EHighPriorityMMState_MAX = k_EHighPriorityMM_HighDemand;
constexpr int EHighPriorityMMState_ARRAYSIZE = EHighPriorityMMState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHighPriorityMMState_descriptor();
template<typename T>
inline const std::string& EHighPriorityMMState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EHighPriorityMMState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EHighPriorityMMState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EHighPriorityMMState_descriptor(), enum_t_value);
}
inline bool EHighPriorityMMState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EHighPriorityMMState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EHighPriorityMMState>(
    EHighPriorityMMState_descriptor(), name, value);
}
enum ELobbyMemberCoachRequestState : int {
  k_eLobbyMemberCoachRequestState_None = 0,
  k_eLobbyMemberCoachRequestState_Accepted = 1,
  k_eLobbyMemberCoachRequestState_Rejected = 2
};
bool ELobbyMemberCoachRequestState_IsValid(int value);
constexpr ELobbyMemberCoachRequestState ELobbyMemberCoachRequestState_MIN = k_eLobbyMemberCoachRequestState_None;
constexpr ELobbyMemberCoachRequestState ELobbyMemberCoachRequestState_MAX = k_eLobbyMemberCoachRequestState_Rejected;
constexpr int ELobbyMemberCoachRequestState_ARRAYSIZE = ELobbyMemberCoachRequestState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyMemberCoachRequestState_descriptor();
template<typename T>
inline const std::string& ELobbyMemberCoachRequestState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELobbyMemberCoachRequestState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELobbyMemberCoachRequestState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELobbyMemberCoachRequestState_descriptor(), enum_t_value);
}
inline bool ELobbyMemberCoachRequestState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELobbyMemberCoachRequestState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELobbyMemberCoachRequestState>(
    ELobbyMemberCoachRequestState_descriptor(), name, value);
}
enum LobbyDotaTVDelay : int {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2,
  LobbyDotaTV_900 = 3
};
bool LobbyDotaTVDelay_IsValid(int value);
constexpr LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
constexpr LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_900;
constexpr int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaTVDelay_descriptor();
template<typename T>
inline const std::string& LobbyDotaTVDelay_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LobbyDotaTVDelay>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LobbyDotaTVDelay_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), enum_t_value);
}
inline bool LobbyDotaTVDelay_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LobbyDotaTVDelay* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum LobbyDotaPauseSetting : int {
  LobbyDotaPauseSetting_Unlimited = 0,
  LobbyDotaPauseSetting_Limited = 1,
  LobbyDotaPauseSetting_Disabled = 2
};
bool LobbyDotaPauseSetting_IsValid(int value);
constexpr LobbyDotaPauseSetting LobbyDotaPauseSetting_MIN = LobbyDotaPauseSetting_Unlimited;
constexpr LobbyDotaPauseSetting LobbyDotaPauseSetting_MAX = LobbyDotaPauseSetting_Disabled;
constexpr int LobbyDotaPauseSetting_ARRAYSIZE = LobbyDotaPauseSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaPauseSetting_descriptor();
template<typename T>
inline const std::string& LobbyDotaPauseSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LobbyDotaPauseSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LobbyDotaPauseSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LobbyDotaPauseSetting_descriptor(), enum_t_value);
}
inline bool LobbyDotaPauseSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LobbyDotaPauseSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LobbyDotaPauseSetting>(
    LobbyDotaPauseSetting_descriptor(), name, value);
}
enum EReadyCheckStatus : int {
  k_EReadyCheckStatus_Unknown = 0,
  k_EReadyCheckStatus_NotReady = 1,
  k_EReadyCheckStatus_Ready = 2
};
bool EReadyCheckStatus_IsValid(int value);
constexpr EReadyCheckStatus EReadyCheckStatus_MIN = k_EReadyCheckStatus_Unknown;
constexpr EReadyCheckStatus EReadyCheckStatus_MAX = k_EReadyCheckStatus_Ready;
constexpr int EReadyCheckStatus_ARRAYSIZE = EReadyCheckStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckStatus_descriptor();
template<typename T>
inline const std::string& EReadyCheckStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EReadyCheckStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EReadyCheckStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EReadyCheckStatus_descriptor(), enum_t_value);
}
inline bool EReadyCheckStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EReadyCheckStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EReadyCheckStatus>(
    EReadyCheckStatus_descriptor(), name, value);
}
enum EReadyCheckRequestResult : int {
  k_EReadyCheckRequestResult_Success = 0,
  k_EReadyCheckRequestResult_AlreadyInProgress = 1,
  k_EReadyCheckRequestResult_NotInParty = 2,
  k_EReadyCheckRequestResult_SendError = 3,
  k_EReadyCheckRequestResult_UnknownError = 4
};
bool EReadyCheckRequestResult_IsValid(int value);
constexpr EReadyCheckRequestResult EReadyCheckRequestResult_MIN = k_EReadyCheckRequestResult_Success;
constexpr EReadyCheckRequestResult EReadyCheckRequestResult_MAX = k_EReadyCheckRequestResult_UnknownError;
constexpr int EReadyCheckRequestResult_ARRAYSIZE = EReadyCheckRequestResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckRequestResult_descriptor();
template<typename T>
inline const std::string& EReadyCheckRequestResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EReadyCheckRequestResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EReadyCheckRequestResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EReadyCheckRequestResult_descriptor(), enum_t_value);
}
inline bool EReadyCheckRequestResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EReadyCheckRequestResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EReadyCheckRequestResult>(
    EReadyCheckRequestResult_descriptor(), name, value);
}
enum EMatchBehaviorScoreVariance : int {
  k_EMatchBehaviorScoreVariance_Invalid = 0,
  k_EMatchBehaviorScoreVariance_Low = 1,
  k_EMatchBehaviorScoreVariance_Medium = 2,
  k_EMatchBehaviorScoreVariance_High = 3
};
bool EMatchBehaviorScoreVariance_IsValid(int value);
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MIN = k_EMatchBehaviorScoreVariance_Invalid;
constexpr EMatchBehaviorScoreVariance EMatchBehaviorScoreVariance_MAX = k_EMatchBehaviorScoreVariance_High;
constexpr int EMatchBehaviorScoreVariance_ARRAYSIZE = EMatchBehaviorScoreVariance_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor();
template<typename T>
inline const std::string& EMatchBehaviorScoreVariance_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EMatchBehaviorScoreVariance>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EMatchBehaviorScoreVariance_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EMatchBehaviorScoreVariance_descriptor(), enum_t_value);
}
inline bool EMatchBehaviorScoreVariance_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EMatchBehaviorScoreVariance* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EMatchBehaviorScoreVariance>(
    EMatchBehaviorScoreVariance_descriptor(), name, value);
}
// ===================================================================

class CSODOTAPartyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyMember) */ {
 public:
  inline CSODOTAPartyMember() : CSODOTAPartyMember(nullptr) {}
  virtual ~CSODOTAPartyMember();
  explicit constexpr CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyMember(const CSODOTAPartyMember& from);
  CSODOTAPartyMember(CSODOTAPartyMember&& from) noexcept
    : CSODOTAPartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyMember& operator=(const CSODOTAPartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyMember& operator=(CSODOTAPartyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTAPartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyMember*>(
               &_CSODOTAPartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSODOTAPartyMember& a, CSODOTAPartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyMember* New() const final {
    return CreateMaybeMessage<CSODOTAPartyMember>(nullptr);
  }

  CSODOTAPartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTAPartyMember& from);
  void MergeFrom(const CSODOTAPartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyMember";
  }
  protected:
  explicit CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionPingCodesFieldNumber = 4,
    kRegionPingTimesFieldNumber = 5,
    kRegionPingFailedBitmaskFieldNumber = 6,
    kTourneySkillLevelFieldNumber = 7,
    kTourneyBuyinFieldNumber = 8,
    kTourneyPreventUntilFieldNumber = 9,
    kIsCoachFieldNumber = 2,
    kIsPlusSubscriberFieldNumber = 10,
    kMmDataValidFieldNumber = 13,
    kHighPriorityDisabledFieldNumber = 14,
    kLaneSelectionFlagsFieldNumber = 11,
    kHasHpResourceFieldNumber = 15,
    kJoinedFromPartyfinderFieldNumber = 12,
    kIsSteamChinaFieldNumber = 16,
  };
  // repeated uint32 region_ping_codes = 4 [packed = true];
  int region_ping_codes_size() const;
  private:
  int _internal_region_ping_codes_size() const;
  public:
  void clear_region_ping_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_ping_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_region_ping_codes() const;
  void _internal_add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_region_ping_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 region_ping_codes(int index) const;
  void set_region_ping_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      region_ping_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_region_ping_codes();

  // repeated uint32 region_ping_times = 5 [packed = true];
  int region_ping_times_size() const;
  private:
  int _internal_region_ping_times_size() const;
  public:
  void clear_region_ping_times();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_ping_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_region_ping_times() const;
  void _internal_add_region_ping_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_region_ping_times();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 region_ping_times(int index) const;
  void set_region_ping_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_region_ping_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      region_ping_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_region_ping_times();

  // optional uint32 region_ping_failed_bitmask = 6;
  bool has_region_ping_failed_bitmask() const;
  private:
  bool _internal_has_region_ping_failed_bitmask() const;
  public:
  void clear_region_ping_failed_bitmask();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_ping_failed_bitmask() const;
  void set_region_ping_failed_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_ping_failed_bitmask() const;
  void _internal_set_region_ping_failed_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_skill_level = 7;
  bool has_tourney_skill_level() const;
  private:
  bool _internal_has_tourney_skill_level() const;
  public:
  void clear_tourney_skill_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_skill_level() const;
  void set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_skill_level() const;
  void _internal_set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_buyin = 8;
  bool has_tourney_buyin() const;
  private:
  bool _internal_has_tourney_buyin() const;
  public:
  void clear_tourney_buyin();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_buyin() const;
  void set_tourney_buyin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_buyin() const;
  void _internal_set_tourney_buyin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_prevent_until = 9;
  bool has_tourney_prevent_until() const;
  private:
  bool _internal_has_tourney_prevent_until() const;
  public:
  void clear_tourney_prevent_until();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_prevent_until() const;
  void set_tourney_prevent_until(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_prevent_until() const;
  void _internal_set_tourney_prevent_until(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_coach = 2;
  bool has_is_coach() const;
  private:
  bool _internal_has_is_coach() const;
  public:
  void clear_is_coach();
  bool is_coach() const;
  void set_is_coach(bool value);
  private:
  bool _internal_is_coach() const;
  void _internal_set_is_coach(bool value);
  public:

  // optional bool is_plus_subscriber = 10;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional bool mm_data_valid = 13;
  bool has_mm_data_valid() const;
  private:
  bool _internal_has_mm_data_valid() const;
  public:
  void clear_mm_data_valid();
  bool mm_data_valid() const;
  void set_mm_data_valid(bool value);
  private:
  bool _internal_mm_data_valid() const;
  void _internal_set_mm_data_valid(bool value);
  public:

  // optional bool high_priority_disabled = 14;
  bool has_high_priority_disabled() const;
  private:
  bool _internal_has_high_priority_disabled() const;
  public:
  void clear_high_priority_disabled();
  bool high_priority_disabled() const;
  void set_high_priority_disabled(bool value);
  private:
  bool _internal_high_priority_disabled() const;
  void _internal_set_high_priority_disabled(bool value);
  public:

  // optional uint32 lane_selection_flags = 11;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool has_hp_resource = 15;
  bool has_has_hp_resource() const;
  private:
  bool _internal_has_has_hp_resource() const;
  public:
  void clear_has_hp_resource();
  bool has_hp_resource() const;
  void set_has_hp_resource(bool value);
  private:
  bool _internal_has_hp_resource() const;
  void _internal_set_has_hp_resource(bool value);
  public:

  // optional bool joined_from_partyfinder = 12;
  bool has_joined_from_partyfinder() const;
  private:
  bool _internal_has_joined_from_partyfinder() const;
  public:
  void clear_joined_from_partyfinder();
  bool joined_from_partyfinder() const;
  void set_joined_from_partyfinder(bool value);
  private:
  bool _internal_joined_from_partyfinder() const;
  void _internal_set_joined_from_partyfinder(bool value);
  public:

  // optional bool is_steam_china = 16;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > region_ping_codes_;
  mutable std::atomic<int> _region_ping_codes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > region_ping_times_;
  mutable std::atomic<int> _region_ping_times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_ping_failed_bitmask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_skill_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_buyin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_prevent_until_;
  bool is_coach_;
  bool is_plus_subscriber_;
  bool mm_data_valid_;
  bool high_priority_disabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  bool has_hp_resource_;
  bool joined_from_partyfinder_;
  bool is_steam_china_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAParty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAParty) */ {
 public:
  inline CSODOTAParty() : CSODOTAParty(nullptr) {}
  virtual ~CSODOTAParty();
  explicit constexpr CSODOTAParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAParty(const CSODOTAParty& from);
  CSODOTAParty(CSODOTAParty&& from) noexcept
    : CSODOTAParty() {
    *this = ::std::move(from);
  }

  inline CSODOTAParty& operator=(const CSODOTAParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAParty& operator=(CSODOTAParty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTAParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAParty* internal_default_instance() {
    return reinterpret_cast<const CSODOTAParty*>(
               &_CSODOTAParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSODOTAParty& a, CSODOTAParty& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAParty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAParty* New() const final {
    return CreateMaybeMessage<CSODOTAParty>(nullptr);
  }

  CSODOTAParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAParty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTAParty& from);
  void MergeFrom(const CSODOTAParty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAParty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAParty";
  }
  protected:
  explicit CSODOTAParty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSODOTAParty_State State;
  static constexpr State UI =
    CSODOTAParty_State_UI;
  static constexpr State FINDING_MATCH =
    CSODOTAParty_State_FINDING_MATCH;
  static constexpr State IN_MATCH =
    CSODOTAParty_State_IN_MATCH;
  static inline bool State_IsValid(int value) {
    return CSODOTAParty_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CSODOTAParty_State_State_MIN;
  static constexpr State State_MAX =
    CSODOTAParty_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CSODOTAParty_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CSODOTAParty_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CSODOTAParty_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CSODOTAParty_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMemberIdsFieldNumber = 3,
    kMembersFieldNumber = 29,
    kSentInvitesFieldNumber = 41,
    kRecvInvitesFieldNumber = 42,
    kTeamNameFieldNumber = 51,
    kReadyCheckFieldNumber = 62,
    kPartyIdFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kGameModesFieldNumber = 4,
    kStateFieldNumber = 6,
    kEffectiveStartedMatchmakingTimeFieldNumber = 7,
    kMatchgroupsFieldNumber = 11,
    kLowPriorityAccountIdFieldNumber = 19,
    kMatchTypeFieldNumber = 21,
    kBotDifficultyFieldNumber = 22,
    kTeamIdFieldNumber = 23,
    kMatchDisabledUntilDateFieldNumber = 24,
    kMatchDisabledAccountIdFieldNumber = 25,
    kMatchmakingMaxRangeMinutesFieldNumber = 26,
    kMatchlanguagesFieldNumber = 27,
    kRawStartedMatchmakingTimeFieldNumber = 32,
    kAttemptStartTimeFieldNumber = 33,
    kAttemptNumFieldNumber = 34,
    kLowPriorityGamesRemainingFieldNumber = 35,
    kAccountFlagsFieldNumber = 43,
    kRegionSelectFlagsFieldNumber = 44,
    kExclusiveTournamentIdFieldNumber = 45,
    kTourneyDivisionIdFieldNumber = 47,
    kTourneyScheduleTimeFieldNumber = 48,
    kTourneySkillLevelFieldNumber = 49,
    kTeamUiLogoFieldNumber = 52,
    kTourneyBracketRoundFieldNumber = 50,
    kTourneyQueueDeadlineTimeFieldNumber = 54,
    kLaneSelectionsEnabledFieldNumber = 69,
    kIsSteamChinaFieldNumber = 71,
    kTeamBaseLogoFieldNumber = 53,
    kTourneyQueueDeadlineStateFieldNumber = 55,
    kPartyBuilderSlotsToFillFieldNumber = 56,
    kPartyBuilderMatchGroupsFieldNumber = 57,
    kOpenForJoinRequestsFieldNumber = 40,
    kSoloQueueFieldNumber = 59,
    kIsChallengeMatchFieldNumber = 65,
    kPartySearchBeaconActiveFieldNumber = 66,
    kPartyBuilderStartTimeFieldNumber = 58,
    kBotScriptIndexFieldNumber = 60,
    kSteamClanAccountIdFieldNumber = 61,
    kCustomGameDisabledUntilDateFieldNumber = 63,
    kCustomGameDisabledAccountIdFieldNumber = 64,
    kMatchmakingFlagsFieldNumber = 67,
    kHighPriorityStateFieldNumber = 68,
    kCustomGameDifficultyMaskFieldNumber = 70,
  };
  // repeated fixed64 member_ids = 3;
  int member_ids_size() const;
  private:
  int _internal_member_ids_size() const;
  public:
  void clear_member_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_member_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_member_ids() const;
  void _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_member_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 member_ids(int index) const;
  void set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      member_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_member_ids();

  // repeated .CSODOTAPartyMember members = 29;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTAPartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >*
      mutable_members();
  private:
  const ::CSODOTAPartyMember& _internal_members(int index) const;
  ::CSODOTAPartyMember* _internal_add_members();
  public:
  const ::CSODOTAPartyMember& members(int index) const;
  ::CSODOTAPartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >&
      members() const;

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  int sent_invites_size() const;
  private:
  int _internal_sent_invites_size() const;
  public:
  void clear_sent_invites();
  ::CSODOTAPartyInvite* mutable_sent_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_sent_invites();
  private:
  const ::CSODOTAPartyInvite& _internal_sent_invites(int index) const;
  ::CSODOTAPartyInvite* _internal_add_sent_invites();
  public:
  const ::CSODOTAPartyInvite& sent_invites(int index) const;
  ::CSODOTAPartyInvite* add_sent_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
      sent_invites() const;

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  int recv_invites_size() const;
  private:
  int _internal_recv_invites_size() const;
  public:
  void clear_recv_invites();
  ::CSODOTAPartyInvite* mutable_recv_invites(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
      mutable_recv_invites();
  private:
  const ::CSODOTAPartyInvite& _internal_recv_invites(int index) const;
  ::CSODOTAPartyInvite* _internal_add_recv_invites();
  public:
  const ::CSODOTAPartyInvite& recv_invites(int index) const;
  ::CSODOTAPartyInvite* add_recv_invites();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
      recv_invites() const;

  // optional string team_name = 51;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional .CMsgReadyCheckStatus ready_check = 62;
  bool has_ready_check() const;
  private:
  bool _internal_has_ready_check() const;
  public:
  void clear_ready_check();
  const ::CMsgReadyCheckStatus& ready_check() const;
  ::CMsgReadyCheckStatus* release_ready_check();
  ::CMsgReadyCheckStatus* mutable_ready_check();
  void set_allocated_ready_check(::CMsgReadyCheckStatus* ready_check);
  private:
  const ::CMsgReadyCheckStatus& _internal_ready_check() const;
  ::CMsgReadyCheckStatus* _internal_mutable_ready_check();
  public:
  void unsafe_arena_set_allocated_ready_check(
      ::CMsgReadyCheckStatus* ready_check);
  ::CMsgReadyCheckStatus* unsafe_arena_release_ready_check();

  // optional uint64 party_id = 1 [(.key_field) = true];
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 leader_id = 2;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 game_modes = 4;
  bool has_game_modes() const;
  private:
  bool _internal_has_game_modes() const;
  public:
  void clear_game_modes();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_modes() const;
  void set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_modes() const;
  void _internal_set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CSODOTAParty.State state = 6 [default = UI];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CSODOTAParty_State state() const;
  void set_state(::CSODOTAParty_State value);
  private:
  ::CSODOTAParty_State _internal_state() const;
  void _internal_set_state(::CSODOTAParty_State value);
  public:

  // optional uint32 effective_started_matchmaking_time = 7;
  bool has_effective_started_matchmaking_time() const;
  private:
  bool _internal_has_effective_started_matchmaking_time() const;
  public:
  void clear_effective_started_matchmaking_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 effective_started_matchmaking_time() const;
  void set_effective_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_effective_started_matchmaking_time() const;
  void _internal_set_effective_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matchgroups = 11;
  bool has_matchgroups() const;
  private:
  bool _internal_has_matchgroups() const;
  public:
  void clear_matchgroups();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups() const;
  void set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchgroups() const;
  void _internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 low_priority_account_id = 19;
  bool has_low_priority_account_id() const;
  private:
  bool _internal_has_low_priority_account_id() const;
  public:
  void clear_low_priority_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 low_priority_account_id() const;
  void set_low_priority_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_low_priority_account_id() const;
  void _internal_set_low_priority_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty() const;
  private:
  bool _internal_has_bot_difficulty() const;
  public:
  void clear_bot_difficulty();
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty() const;
  void _internal_set_bot_difficulty(::DOTABotDifficulty value);
  public:

  // optional uint32 team_id = 23;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 match_disabled_until_date = 24;
  bool has_match_disabled_until_date() const;
  private:
  bool _internal_has_match_disabled_until_date() const;
  public:
  void clear_match_disabled_until_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 match_disabled_until_date() const;
  void set_match_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_match_disabled_until_date() const;
  void _internal_set_match_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 match_disabled_account_id = 25;
  bool has_match_disabled_account_id() const;
  private:
  bool _internal_has_match_disabled_account_id() const;
  public:
  void clear_match_disabled_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 match_disabled_account_id() const;
  void set_match_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_match_disabled_account_id() const;
  void _internal_set_match_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matchmaking_max_range_minutes = 26;
  bool has_matchmaking_max_range_minutes() const;
  private:
  bool _internal_has_matchmaking_max_range_minutes() const;
  public:
  void clear_matchmaking_max_range_minutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchmaking_max_range_minutes() const;
  void set_matchmaking_max_range_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchmaking_max_range_minutes() const;
  void _internal_set_matchmaking_max_range_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matchlanguages = 27;
  bool has_matchlanguages() const;
  private:
  bool _internal_has_matchlanguages() const;
  public:
  void clear_matchlanguages();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchlanguages() const;
  void set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchlanguages() const;
  void _internal_set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 raw_started_matchmaking_time = 32;
  bool has_raw_started_matchmaking_time() const;
  private:
  bool _internal_has_raw_started_matchmaking_time() const;
  public:
  void clear_raw_started_matchmaking_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_started_matchmaking_time() const;
  void set_raw_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_raw_started_matchmaking_time() const;
  void _internal_set_raw_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 attempt_start_time = 33;
  bool has_attempt_start_time() const;
  private:
  bool _internal_has_attempt_start_time() const;
  public:
  void clear_attempt_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_start_time() const;
  void set_attempt_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attempt_start_time() const;
  void _internal_set_attempt_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 attempt_num = 34;
  bool has_attempt_num() const;
  private:
  bool _internal_has_attempt_num() const;
  public:
  void clear_attempt_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_num() const;
  void set_attempt_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attempt_num() const;
  void _internal_set_attempt_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 low_priority_games_remaining = 35;
  bool has_low_priority_games_remaining() const;
  private:
  bool _internal_has_low_priority_games_remaining() const;
  public:
  void clear_low_priority_games_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 low_priority_games_remaining() const;
  void set_low_priority_games_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_low_priority_games_remaining() const;
  void _internal_set_low_priority_games_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_flags = 43;
  bool has_account_flags() const;
  private:
  bool _internal_has_account_flags() const;
  public:
  void clear_account_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags() const;
  void set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_flags() const;
  void _internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 region_select_flags = 44;
  bool has_region_select_flags() const;
  private:
  bool _internal_has_region_select_flags() const;
  public:
  void clear_region_select_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_select_flags() const;
  void set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_select_flags() const;
  void _internal_set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 exclusive_tournament_id = 45;
  bool has_exclusive_tournament_id() const;
  private:
  bool _internal_has_exclusive_tournament_id() const;
  public:
  void clear_exclusive_tournament_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 exclusive_tournament_id() const;
  void set_exclusive_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exclusive_tournament_id() const;
  void _internal_set_exclusive_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_division_id = 47;
  bool has_tourney_division_id() const;
  private:
  bool _internal_has_tourney_division_id() const;
  public:
  void clear_tourney_division_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_division_id() const;
  void set_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_division_id() const;
  void _internal_set_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_schedule_time = 48;
  bool has_tourney_schedule_time() const;
  private:
  bool _internal_has_tourney_schedule_time() const;
  public:
  void clear_tourney_schedule_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_schedule_time() const;
  void set_tourney_schedule_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_schedule_time() const;
  void _internal_set_tourney_schedule_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_skill_level = 49;
  bool has_tourney_skill_level() const;
  private:
  bool _internal_has_tourney_skill_level() const;
  public:
  void clear_tourney_skill_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_skill_level() const;
  void set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_skill_level() const;
  void _internal_set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 team_ui_logo = 52;
  bool has_team_ui_logo() const;
  private:
  bool _internal_has_team_ui_logo() const;
  public:
  void clear_team_ui_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_ui_logo() const;
  void set_team_ui_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_ui_logo() const;
  void _internal_set_team_ui_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tourney_bracket_round = 50;
  bool has_tourney_bracket_round() const;
  private:
  bool _internal_has_tourney_bracket_round() const;
  public:
  void clear_tourney_bracket_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_bracket_round() const;
  void set_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_bracket_round() const;
  void _internal_set_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tourney_queue_deadline_time = 54;
  bool has_tourney_queue_deadline_time() const;
  private:
  bool _internal_has_tourney_queue_deadline_time() const;
  public:
  void clear_tourney_queue_deadline_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_queue_deadline_time() const;
  void set_tourney_queue_deadline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tourney_queue_deadline_time() const;
  void _internal_set_tourney_queue_deadline_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool lane_selections_enabled = 69;
  bool has_lane_selections_enabled() const;
  private:
  bool _internal_has_lane_selections_enabled() const;
  public:
  void clear_lane_selections_enabled();
  bool lane_selections_enabled() const;
  void set_lane_selections_enabled(bool value);
  private:
  bool _internal_lane_selections_enabled() const;
  void _internal_set_lane_selections_enabled(bool value);
  public:

  // optional bool is_steam_china = 71;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // optional uint64 team_base_logo = 53;
  bool has_team_base_logo() const;
  private:
  bool _internal_has_team_base_logo() const;
  public:
  void clear_team_base_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_base_logo() const;
  void set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_base_logo() const;
  void _internal_set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  bool has_tourney_queue_deadline_state() const;
  private:
  bool _internal_has_tourney_queue_deadline_state() const;
  public:
  void clear_tourney_queue_deadline_state();
  ::ETourneyQueueDeadlineState tourney_queue_deadline_state() const;
  void set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value);
  private:
  ::ETourneyQueueDeadlineState _internal_tourney_queue_deadline_state() const;
  void _internal_set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value);
  public:

  // optional uint32 party_builder_slots_to_fill = 56;
  bool has_party_builder_slots_to_fill() const;
  private:
  bool _internal_has_party_builder_slots_to_fill() const;
  public:
  void clear_party_builder_slots_to_fill();
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_slots_to_fill() const;
  void set_party_builder_slots_to_fill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_party_builder_slots_to_fill() const;
  void _internal_set_party_builder_slots_to_fill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 party_builder_match_groups = 57;
  bool has_party_builder_match_groups() const;
  private:
  bool _internal_has_party_builder_match_groups() const;
  public:
  void clear_party_builder_match_groups();
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_match_groups() const;
  void set_party_builder_match_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_party_builder_match_groups() const;
  void _internal_set_party_builder_match_groups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool open_for_join_requests = 40;
  bool has_open_for_join_requests() const;
  private:
  bool _internal_has_open_for_join_requests() const;
  public:
  void clear_open_for_join_requests();
  bool open_for_join_requests() const;
  void set_open_for_join_requests(bool value);
  private:
  bool _internal_open_for_join_requests() const;
  void _internal_set_open_for_join_requests(bool value);
  public:

  // optional bool solo_queue = 59;
  bool has_solo_queue() const;
  private:
  bool _internal_has_solo_queue() const;
  public:
  void clear_solo_queue();
  bool solo_queue() const;
  void set_solo_queue(bool value);
  private:
  bool _internal_solo_queue() const;
  void _internal_set_solo_queue(bool value);
  public:

  // optional bool is_challenge_match = 65;
  bool has_is_challenge_match() const;
  private:
  bool _internal_has_is_challenge_match() const;
  public:
  void clear_is_challenge_match();
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);
  private:
  bool _internal_is_challenge_match() const;
  void _internal_set_is_challenge_match(bool value);
  public:

  // optional bool party_search_beacon_active = 66;
  bool has_party_search_beacon_active() const;
  private:
  bool _internal_has_party_search_beacon_active() const;
  public:
  void clear_party_search_beacon_active();
  bool party_search_beacon_active() const;
  void set_party_search_beacon_active(bool value);
  private:
  bool _internal_party_search_beacon_active() const;
  void _internal_set_party_search_beacon_active(bool value);
  public:

  // optional uint32 party_builder_start_time = 58;
  bool has_party_builder_start_time() const;
  private:
  bool _internal_has_party_builder_start_time() const;
  public:
  void clear_party_builder_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_start_time() const;
  void set_party_builder_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_party_builder_start_time() const;
  void _internal_set_party_builder_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bot_script_index = 60;
  bool has_bot_script_index() const;
  private:
  bool _internal_has_bot_script_index() const;
  public:
  void clear_bot_script_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_script_index() const;
  void set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bot_script_index() const;
  void _internal_set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 steam_clan_account_id = 61;
  bool has_steam_clan_account_id() const;
  private:
  bool _internal_has_steam_clan_account_id() const;
  public:
  void clear_steam_clan_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 steam_clan_account_id() const;
  void set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steam_clan_account_id() const;
  void _internal_set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_game_disabled_until_date = 63;
  bool has_custom_game_disabled_until_date() const;
  private:
  bool _internal_has_custom_game_disabled_until_date() const;
  public:
  void clear_custom_game_disabled_until_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_disabled_until_date() const;
  void set_custom_game_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_disabled_until_date() const;
  void _internal_set_custom_game_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_game_disabled_account_id = 64;
  bool has_custom_game_disabled_account_id() const;
  private:
  bool _internal_has_custom_game_disabled_account_id() const;
  public:
  void clear_custom_game_disabled_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_disabled_account_id() const;
  void set_custom_game_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_disabled_account_id() const;
  void _internal_set_custom_game_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matchmaking_flags = 67;
  bool has_matchmaking_flags() const;
  private:
  bool _internal_has_matchmaking_flags() const;
  public:
  void clear_matchmaking_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchmaking_flags() const;
  void set_matchmaking_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchmaking_flags() const;
  void _internal_set_matchmaking_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
  bool has_high_priority_state() const;
  private:
  bool _internal_has_high_priority_state() const;
  public:
  void clear_high_priority_state();
  ::EHighPriorityMMState high_priority_state() const;
  void set_high_priority_state(::EHighPriorityMMState value);
  private:
  ::EHighPriorityMMState _internal_high_priority_state() const;
  void _internal_set_high_priority_state(::EHighPriorityMMState value);
  public:

  // optional uint32 custom_game_difficulty_mask = 70;
  bool has_custom_game_difficulty_mask() const;
  private:
  bool _internal_has_custom_game_difficulty_mask() const;
  public:
  void clear_custom_game_difficulty_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_difficulty_mask() const;
  void set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_difficulty_mask() const;
  void _internal_set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > member_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite > sent_invites_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite > recv_invites_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::CMsgReadyCheckStatus* ready_check_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_modes_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 effective_started_matchmaking_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 low_priority_account_id_;
  int match_type_;
  int bot_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 match_disabled_until_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 match_disabled_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchmaking_max_range_minutes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchlanguages_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raw_started_matchmaking_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 low_priority_games_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_select_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exclusive_tournament_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_division_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_schedule_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_skill_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_ui_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_bracket_round_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tourney_queue_deadline_time_;
  bool lane_selections_enabled_;
  bool is_steam_china_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_base_logo_;
  int tourney_queue_deadline_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_slots_to_fill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_match_groups_;
  bool open_for_join_requests_;
  bool solo_queue_;
  bool is_challenge_match_;
  bool party_search_beacon_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 party_builder_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_script_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steam_clan_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_disabled_until_date_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_disabled_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchmaking_flags_;
  int high_priority_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_difficulty_mask_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite_PartyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite.PartyMember) */ {
 public:
  inline CSODOTAPartyInvite_PartyMember() : CSODOTAPartyInvite_PartyMember(nullptr) {}
  virtual ~CSODOTAPartyInvite_PartyMember();
  explicit constexpr CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from);
  CSODOTAPartyInvite_PartyMember(CSODOTAPartyInvite_PartyMember&& from) noexcept
    : CSODOTAPartyInvite_PartyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite_PartyMember& operator=(const CSODOTAPartyInvite_PartyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyInvite_PartyMember& operator=(CSODOTAPartyInvite_PartyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTAPartyInvite_PartyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyInvite_PartyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite_PartyMember*>(
               &_CSODOTAPartyInvite_PartyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSODOTAPartyInvite_PartyMember& a, CSODOTAPartyInvite_PartyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyInvite_PartyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyInvite_PartyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite_PartyMember* New() const final {
    return CreateMaybeMessage<CSODOTAPartyInvite_PartyMember>(nullptr);
  }

  CSODOTAPartyInvite_PartyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite_PartyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTAPartyInvite_PartyMember& from);
  void MergeFrom(const CSODOTAPartyInvite_PartyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite_PartyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyInvite.PartyMember";
  }
  protected:
  explicit CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSteamIdFieldNumber = 2,
    kIsCoachFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool is_coach = 4;
  bool has_is_coach() const;
  private:
  bool _internal_has_is_coach() const;
  public:
  void clear_is_coach();
  bool is_coach() const;
  void set_is_coach(bool value);
  private:
  bool _internal_is_coach() const;
  void _internal_set_is_coach(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite.PartyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  bool is_coach_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAPartyInvite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAPartyInvite) */ {
 public:
  inline CSODOTAPartyInvite() : CSODOTAPartyInvite(nullptr) {}
  virtual ~CSODOTAPartyInvite();
  explicit constexpr CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAPartyInvite(const CSODOTAPartyInvite& from);
  CSODOTAPartyInvite(CSODOTAPartyInvite&& from) noexcept
    : CSODOTAPartyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTAPartyInvite& operator=(const CSODOTAPartyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAPartyInvite& operator=(CSODOTAPartyInvite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTAPartyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAPartyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTAPartyInvite*>(
               &_CSODOTAPartyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSODOTAPartyInvite& a, CSODOTAPartyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAPartyInvite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAPartyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTAPartyInvite* New() const final {
    return CreateMaybeMessage<CSODOTAPartyInvite>(nullptr);
  }

  CSODOTAPartyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTAPartyInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTAPartyInvite& from);
  void MergeFrom(const CSODOTAPartyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAPartyInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAPartyInvite";
  }
  protected:
  explicit CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSODOTAPartyInvite_PartyMember PartyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kSenderNameFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kTeamIdFieldNumber = 5,
    kLowPriorityStatusFieldNumber = 6,
    kAsCoachFieldNumber = 7,
    kInviteGidFieldNumber = 8,
  };
  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTAPartyInvite_PartyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
      mutable_members();
  private:
  const ::CSODOTAPartyInvite_PartyMember& _internal_members(int index) const;
  ::CSODOTAPartyInvite_PartyMember* _internal_add_members();
  public:
  const ::CSODOTAPartyInvite_PartyMember& members(int index) const;
  ::CSODOTAPartyInvite_PartyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool low_priority_status = 6;
  bool has_low_priority_status() const;
  private:
  bool _internal_has_low_priority_status() const;
  public:
  void clear_low_priority_status();
  bool low_priority_status() const;
  void set_low_priority_status(bool value);
  private:
  bool _internal_low_priority_status() const;
  void _internal_set_low_priority_status(bool value);
  public:

  // optional bool as_coach = 7;
  bool has_as_coach() const;
  private:
  bool _internal_has_as_coach() const;
  public:
  void clear_as_coach();
  bool as_coach() const;
  void set_as_coach(bool value);
  private:
  bool _internal_as_coach() const;
  void _internal_set_as_coach(bool value);
  public:

  // optional fixed64 invite_gid = 8;
  bool has_invite_gid() const;
  private:
  bool _internal_has_invite_gid() const;
  public:
  void clear_invite_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 invite_gid() const;
  void set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invite_gid() const;
  void _internal_set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTAPartyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  bool low_priority_status_;
  bool as_coach_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invite_gid_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite_LobbyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyInvite.LobbyMember) */ {
 public:
  inline CSODOTALobbyInvite_LobbyMember() : CSODOTALobbyInvite_LobbyMember(nullptr) {}
  virtual ~CSODOTALobbyInvite_LobbyMember();
  explicit constexpr CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from);
  CSODOTALobbyInvite_LobbyMember(CSODOTALobbyInvite_LobbyMember&& from) noexcept
    : CSODOTALobbyInvite_LobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite_LobbyMember& operator=(const CSODOTALobbyInvite_LobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyInvite_LobbyMember& operator=(CSODOTALobbyInvite_LobbyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTALobbyInvite_LobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyInvite_LobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite_LobbyMember*>(
               &_CSODOTALobbyInvite_LobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSODOTALobbyInvite_LobbyMember& a, CSODOTALobbyInvite_LobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyInvite_LobbyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyInvite_LobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyInvite_LobbyMember* New() const final {
    return CreateMaybeMessage<CSODOTALobbyInvite_LobbyMember>(nullptr);
  }

  CSODOTALobbyInvite_LobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite_LobbyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTALobbyInvite_LobbyMember& from);
  void MergeFrom(const CSODOTALobbyInvite_LobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite_LobbyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyInvite.LobbyMember";
  }
  protected:
  explicit CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSteamIdFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite.LobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyInvite) */ {
 public:
  inline CSODOTALobbyInvite() : CSODOTALobbyInvite(nullptr) {}
  virtual ~CSODOTALobbyInvite();
  explicit constexpr CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyInvite(const CSODOTALobbyInvite& from);
  CSODOTALobbyInvite(CSODOTALobbyInvite&& from) noexcept
    : CSODOTALobbyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite& operator=(const CSODOTALobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyInvite& operator=(CSODOTALobbyInvite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTALobbyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite*>(
               &_CSODOTALobbyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSODOTALobbyInvite& a, CSODOTALobbyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyInvite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyInvite* New() const final {
    return CreateMaybeMessage<CSODOTALobbyInvite>(nullptr);
  }

  CSODOTALobbyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTALobbyInvite& from);
  void MergeFrom(const CSODOTALobbyInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyInvite";
  }
  protected:
  explicit CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSODOTALobbyInvite_LobbyMember LobbyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kSenderNameFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kCustomGameIdFieldNumber = 5,
    kInviteGidFieldNumber = 6,
    kCustomGameCrcFieldNumber = 7,
    kCustomGameTimestampFieldNumber = 8,
  };
  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTALobbyInvite_LobbyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
      mutable_members();
  private:
  const ::CSODOTALobbyInvite_LobbyMember& _internal_members(int index) const;
  ::CSODOTALobbyInvite_LobbyMember* _internal_add_members();
  public:
  const ::CSODOTALobbyInvite_LobbyMember& members(int index) const;
  ::CSODOTALobbyInvite_LobbyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  void set_sender_name(const std::string& value);
  void set_sender_name(std::string&& value);
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  std::string* mutable_sender_name();
  std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 custom_game_id = 5;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 invite_gid = 6;
  bool has_invite_gid() const;
  private:
  bool _internal_has_invite_gid() const;
  public:
  void clear_invite_gid();
  ::PROTOBUF_NAMESPACE_ID::uint64 invite_gid() const;
  void set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invite_gid() const;
  void _internal_set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 custom_game_crc = 7;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc() const;
  void set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 custom_game_timestamp = 8;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sender_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 invite_gid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaverState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverState) */ {
 public:
  inline CMsgLeaverState() : CMsgLeaverState(nullptr) {}
  virtual ~CMsgLeaverState();
  explicit constexpr CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeaverState(const CMsgLeaverState& from);
  CMsgLeaverState(CMsgLeaverState&& from) noexcept
    : CMsgLeaverState() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverState& operator=(const CMsgLeaverState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeaverState& operator=(CMsgLeaverState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLeaverState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeaverState* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverState*>(
               &_CMsgLeaverState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgLeaverState& a, CMsgLeaverState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeaverState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeaverState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLeaverState* New() const final {
    return CreateMaybeMessage<CMsgLeaverState>(nullptr);
  }

  CMsgLeaverState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLeaverState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLeaverState& from);
  void MergeFrom(const CMsgLeaverState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaverState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeaverState";
  }
  protected:
  explicit CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyStateFieldNumber = 1,
    kGameStateFieldNumber = 2,
    kLeaverDetectedFieldNumber = 3,
    kFirstBloodHappenedFieldNumber = 4,
    kDiscardMatchResultsFieldNumber = 5,
    kMassDisconnectFieldNumber = 6,
  };
  // optional uint32 lobby_state = 1;
  bool has_lobby_state() const;
  private:
  bool _internal_has_lobby_state() const;
  public:
  void clear_lobby_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_state() const;
  void set_lobby_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_state() const;
  void _internal_set_lobby_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional bool leaver_detected = 3;
  bool has_leaver_detected() const;
  private:
  bool _internal_has_leaver_detected() const;
  public:
  void clear_leaver_detected();
  bool leaver_detected() const;
  void set_leaver_detected(bool value);
  private:
  bool _internal_leaver_detected() const;
  void _internal_set_leaver_detected(bool value);
  public:

  // optional bool first_blood_happened = 4;
  bool has_first_blood_happened() const;
  private:
  bool _internal_has_first_blood_happened() const;
  public:
  void clear_first_blood_happened();
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);
  private:
  bool _internal_first_blood_happened() const;
  void _internal_set_first_blood_happened(bool value);
  public:

  // optional bool discard_match_results = 5;
  bool has_discard_match_results() const;
  private:
  bool _internal_has_discard_match_results() const;
  public:
  void clear_discard_match_results();
  bool discard_match_results() const;
  void set_discard_match_results(bool value);
  private:
  bool _internal_discard_match_results() const;
  void _internal_set_discard_match_results(bool value);
  public:

  // optional bool mass_disconnect = 6;
  bool has_mass_disconnect() const;
  private:
  bool _internal_has_mass_disconnect() const;
  public:
  void clear_mass_disconnect();
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);
  private:
  bool _internal_mass_disconnect() const;
  void _internal_set_mass_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeaverState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_state_;
  int game_state_;
  bool leaver_detected_;
  bool first_blood_happened_;
  bool discard_match_results_;
  bool mass_disconnect_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyCoachFriendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyCoachFriendRequest) */ {
 public:
  inline CMsgLobbyCoachFriendRequest() : CMsgLobbyCoachFriendRequest(nullptr) {}
  virtual ~CMsgLobbyCoachFriendRequest();
  explicit constexpr CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyCoachFriendRequest(const CMsgLobbyCoachFriendRequest& from);
  CMsgLobbyCoachFriendRequest(CMsgLobbyCoachFriendRequest&& from) noexcept
    : CMsgLobbyCoachFriendRequest() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyCoachFriendRequest& operator=(const CMsgLobbyCoachFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyCoachFriendRequest& operator=(CMsgLobbyCoachFriendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyCoachFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyCoachFriendRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyCoachFriendRequest*>(
               &_CMsgLobbyCoachFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgLobbyCoachFriendRequest& a, CMsgLobbyCoachFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyCoachFriendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyCoachFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyCoachFriendRequest* New() const final {
    return CreateMaybeMessage<CMsgLobbyCoachFriendRequest>(nullptr);
  }

  CMsgLobbyCoachFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyCoachFriendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyCoachFriendRequest& from);
  void MergeFrom(const CMsgLobbyCoachFriendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyCoachFriendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyCoachFriendRequest";
  }
  protected:
  explicit CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoachAccountIdFieldNumber = 1,
    kPlayerAccountIdFieldNumber = 2,
    kRequestStateFieldNumber = 3,
  };
  // optional uint32 coach_account_id = 1;
  bool has_coach_account_id() const;
  private:
  bool _internal_has_coach_account_id() const;
  public:
  void clear_coach_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 coach_account_id() const;
  void set_coach_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coach_account_id() const;
  void _internal_set_coach_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
  bool has_request_state() const;
  private:
  bool _internal_has_request_state() const;
  public:
  void clear_request_state();
  ::ELobbyMemberCoachRequestState request_state() const;
  void set_request_state(::ELobbyMemberCoachRequestState value);
  private:
  ::ELobbyMemberCoachRequestState _internal_request_state() const;
  void _internal_set_request_state(::ELobbyMemberCoachRequestState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyCoachFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coach_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  int request_state_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyMember) */ {
 public:
  inline CSODOTALobbyMember() : CSODOTALobbyMember(nullptr) {}
  virtual ~CSODOTALobbyMember();
  explicit constexpr CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyMember(const CSODOTALobbyMember& from);
  CSODOTALobbyMember(CSODOTALobbyMember&& from) noexcept
    : CSODOTALobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyMember& operator=(const CSODOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyMember& operator=(CSODOTALobbyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTALobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyMember*>(
               &_CSODOTALobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSODOTALobbyMember& a, CSODOTALobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobbyMember* New() const final {
    return CreateMaybeMessage<CSODOTALobbyMember>(nullptr);
  }

  CSODOTALobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobbyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTALobbyMember& from);
  void MergeFrom(const CSODOTALobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyMember";
  }
  protected:
  explicit CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledHeroIdFieldNumber = 20,
    kEnabledHeroIdFieldNumber = 22,
    kCustomGameProductIdsFieldNumber = 31,
    kDisabledRandomHeroBitsFieldNumber = 41,
    kPendingAwardsFieldNumber = 44,
    kPendingAwardsOnVictoryFieldNumber = 45,
    kCoachedAccountIdsFieldNumber = 53,
    kNameFieldNumber = 6,
    kPwrdCyberCafeNameFieldNumber = 25,
    kIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kTeamFieldNumber = 3,
    kSlotFieldNumber = 7,
    kMetaLevelFieldNumber = 13,
    kPartyIdFieldNumber = 12,
    kMetaXpFieldNumber = 14,
    kMetaXpAwardedFieldNumber = 15,
    kLeaverStatusFieldNumber = 16,
    kPwrdCyberCafeIdFieldNumber = 24,
    kLeaverActionsFieldNumber = 28,
    kRankChangeFieldNumber = 29,
    kFavoriteTeamPackedFieldNumber = 35,
    kSearchMatchTypeFieldNumber = 33,
    kCameramanFieldNumber = 30,
    kIsPlusSubscriberFieldNumber = 36,
    kRankTierUpdatedFieldNumber = 37,
    kCanEarnRewardsFieldNumber = 39,
    kLaneSelectionFlagsFieldNumber = 38,
    kCoachRatingFieldNumber = 42,
    kRankMmrBoostTypeFieldNumber = 46,
    kQueuePointAdjustmentFieldNumber = 47,
    kRankTierFieldNumber = 48,
    kWasMvpLastGameFieldNumber = 43,
    kIsSteamChinaFieldNumber = 54,
    kTitleFieldNumber = 50,
    kGuildIdFieldNumber = 51,
    kReportsAvailableFieldNumber = 52,
    kLiveSpectatorAccountIdFieldNumber = 55,
    kLiveSpectatorTeamFieldNumber = 40,
    kChannelFieldNumber = 17,
    kCoachTeamFieldNumber = 23,
  };
  // repeated uint32 disabled_hero_id = 20;
  int disabled_hero_id_size() const;
  private:
  int _internal_disabled_hero_id_size() const;
  public:
  void clear_disabled_hero_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_disabled_hero_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_disabled_hero_id() const;
  void _internal_add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_disabled_hero_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 disabled_hero_id(int index) const;
  void set_disabled_hero_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      disabled_hero_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_disabled_hero_id();

  // repeated uint32 enabled_hero_id = 22;
  int enabled_hero_id_size() const;
  private:
  int _internal_enabled_hero_id_size() const;
  public:
  void clear_enabled_hero_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enabled_hero_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_enabled_hero_id() const;
  void _internal_add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_enabled_hero_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 enabled_hero_id(int index) const;
  void set_enabled_hero_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      enabled_hero_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_enabled_hero_id();

  // repeated uint32 custom_game_product_ids = 31;
  int custom_game_product_ids_size() const;
  private:
  int _internal_custom_game_product_ids_size() const;
  public:
  void clear_custom_game_product_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_product_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_custom_game_product_ids() const;
  void _internal_add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_custom_game_product_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_product_ids(int index) const;
  void set_custom_game_product_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      custom_game_product_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_custom_game_product_ids();

  // repeated fixed32 disabled_random_hero_bits = 41;
  int disabled_random_hero_bits_size() const;
  private:
  int _internal_disabled_random_hero_bits_size() const;
  public:
  void clear_disabled_random_hero_bits();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_disabled_random_hero_bits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_disabled_random_hero_bits() const;
  void _internal_add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_disabled_random_hero_bits();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 disabled_random_hero_bits(int index) const;
  void set_disabled_random_hero_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      disabled_random_hero_bits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_disabled_random_hero_bits();

  // repeated .CMsgPendingEventAward pending_awards = 44;
  int pending_awards_size() const;
  private:
  int _internal_pending_awards_size() const;
  public:
  void clear_pending_awards();
  ::CMsgPendingEventAward* mutable_pending_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
      mutable_pending_awards();
  private:
  const ::CMsgPendingEventAward& _internal_pending_awards(int index) const;
  ::CMsgPendingEventAward* _internal_add_pending_awards();
  public:
  const ::CMsgPendingEventAward& pending_awards(int index) const;
  ::CMsgPendingEventAward* add_pending_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
      pending_awards() const;

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  int pending_awards_on_victory_size() const;
  private:
  int _internal_pending_awards_on_victory_size() const;
  public:
  void clear_pending_awards_on_victory();
  ::CMsgPendingEventAward* mutable_pending_awards_on_victory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
      mutable_pending_awards_on_victory();
  private:
  const ::CMsgPendingEventAward& _internal_pending_awards_on_victory(int index) const;
  ::CMsgPendingEventAward* _internal_add_pending_awards_on_victory();
  public:
  const ::CMsgPendingEventAward& pending_awards_on_victory(int index) const;
  ::CMsgPendingEventAward* add_pending_awards_on_victory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
      pending_awards_on_victory() const;

  // repeated uint32 coached_account_ids = 53;
  int coached_account_ids_size() const;
  private:
  int _internal_coached_account_ids_size() const;
  public:
  void clear_coached_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coached_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_coached_account_ids() const;
  void _internal_add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_coached_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 coached_account_ids(int index) const;
  void set_coached_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      coached_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_coached_account_ids();

  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string pwrd_cyber_cafe_name = 25;
  bool has_pwrd_cyber_cafe_name() const;
  private:
  bool _internal_has_pwrd_cyber_cafe_name() const;
  public:
  void clear_pwrd_cyber_cafe_name();
  const std::string& pwrd_cyber_cafe_name() const;
  void set_pwrd_cyber_cafe_name(const std::string& value);
  void set_pwrd_cyber_cafe_name(std::string&& value);
  void set_pwrd_cyber_cafe_name(const char* value);
  void set_pwrd_cyber_cafe_name(const char* value, size_t size);
  std::string* mutable_pwrd_cyber_cafe_name();
  std::string* release_pwrd_cyber_cafe_name();
  void set_allocated_pwrd_cyber_cafe_name(std::string* pwrd_cyber_cafe_name);
  private:
  const std::string& _internal_pwrd_cyber_cafe_name() const;
  void _internal_set_pwrd_cyber_cafe_name(const std::string& value);
  std::string* _internal_mutable_pwrd_cyber_cafe_name();
  public:

  // optional fixed64 id = 1 [(.key_field) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id() const;
  void set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_id() const;
  void _internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team() const;
  void _internal_set_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 slot = 7;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 meta_level = 13;
  bool has_meta_level() const;
  private:
  bool _internal_has_meta_level() const;
  public:
  void clear_meta_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_level() const;
  void set_meta_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meta_level() const;
  void _internal_set_meta_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 party_id = 12;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id() const;
  void set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_party_id() const;
  void _internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 meta_xp = 14;
  bool has_meta_xp() const;
  private:
  bool _internal_has_meta_xp() const;
  public:
  void clear_meta_xp();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_xp() const;
  void set_meta_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meta_xp() const;
  void _internal_set_meta_xp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 meta_xp_awarded = 15;
  bool has_meta_xp_awarded() const;
  private:
  bool _internal_has_meta_xp_awarded() const;
  public:
  void clear_meta_xp_awarded();
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_xp_awarded() const;
  void set_meta_xp_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meta_xp_awarded() const;
  void _internal_set_meta_xp_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  bool has_leaver_status() const;
  private:
  bool _internal_has_leaver_status() const;
  public:
  void clear_leaver_status();
  ::DOTALeaverStatus_t leaver_status() const;
  void set_leaver_status(::DOTALeaverStatus_t value);
  private:
  ::DOTALeaverStatus_t _internal_leaver_status() const;
  void _internal_set_leaver_status(::DOTALeaverStatus_t value);
  public:

  // optional uint32 pwrd_cyber_cafe_id = 24;
  bool has_pwrd_cyber_cafe_id() const;
  private:
  bool _internal_has_pwrd_cyber_cafe_id() const;
  public:
  void clear_pwrd_cyber_cafe_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 pwrd_cyber_cafe_id() const;
  void set_pwrd_cyber_cafe_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pwrd_cyber_cafe_id() const;
  void _internal_set_pwrd_cyber_cafe_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 leaver_actions = 28;
  bool has_leaver_actions() const;
  private:
  bool _internal_has_leaver_actions() const;
  public:
  void clear_leaver_actions();
  ::PROTOBUF_NAMESPACE_ID::uint32 leaver_actions() const;
  void set_leaver_actions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leaver_actions() const;
  void _internal_set_leaver_actions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 rank_change = 29;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  ::PROTOBUF_NAMESPACE_ID::int32 rank_change() const;
  void set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank_change() const;
  void _internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 favorite_team_packed = 35;
  bool has_favorite_team_packed() const;
  private:
  bool _internal_has_favorite_team_packed() const;
  public:
  void clear_favorite_team_packed();
  ::PROTOBUF_NAMESPACE_ID::uint64 favorite_team_packed() const;
  void set_favorite_team_packed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_favorite_team_packed() const;
  void _internal_set_favorite_team_packed(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  bool has_search_match_type() const;
  private:
  bool _internal_has_search_match_type() const;
  public:
  void clear_search_match_type();
  ::MatchType search_match_type() const;
  void set_search_match_type(::MatchType value);
  private:
  ::MatchType _internal_search_match_type() const;
  void _internal_set_search_match_type(::MatchType value);
  public:

  // optional bool cameraman = 30;
  bool has_cameraman() const;
  private:
  bool _internal_has_cameraman() const;
  public:
  void clear_cameraman();
  bool cameraman() const;
  void set_cameraman(bool value);
  private:
  bool _internal_cameraman() const;
  void _internal_set_cameraman(bool value);
  public:

  // optional bool is_plus_subscriber = 36;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional bool rank_tier_updated = 37;
  bool has_rank_tier_updated() const;
  private:
  bool _internal_has_rank_tier_updated() const;
  public:
  void clear_rank_tier_updated();
  bool rank_tier_updated() const;
  void set_rank_tier_updated(bool value);
  private:
  bool _internal_rank_tier_updated() const;
  void _internal_set_rank_tier_updated(bool value);
  public:

  // optional bool can_earn_rewards = 39;
  bool has_can_earn_rewards() const;
  private:
  bool _internal_has_can_earn_rewards() const;
  public:
  void clear_can_earn_rewards();
  bool can_earn_rewards() const;
  void set_can_earn_rewards(bool value);
  private:
  bool _internal_can_earn_rewards() const;
  void _internal_set_can_earn_rewards(bool value);
  public:

  // optional uint32 lane_selection_flags = 38;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 coach_rating = 42;
  bool has_coach_rating() const;
  private:
  bool _internal_has_coach_rating() const;
  public:
  void clear_coach_rating();
  ::PROTOBUF_NAMESPACE_ID::uint32 coach_rating() const;
  void set_coach_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coach_rating() const;
  void _internal_set_coach_rating(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  bool has_rank_mmr_boost_type() const;
  private:
  bool _internal_has_rank_mmr_boost_type() const;
  public:
  void clear_rank_mmr_boost_type();
  ::EDOTAMMRBoostType rank_mmr_boost_type() const;
  void set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  private:
  ::EDOTAMMRBoostType _internal_rank_mmr_boost_type() const;
  void _internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  public:

  // optional sint32 queue_point_adjustment = 47;
  bool has_queue_point_adjustment() const;
  private:
  bool _internal_has_queue_point_adjustment() const;
  public:
  void clear_queue_point_adjustment();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_point_adjustment() const;
  void set_queue_point_adjustment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_point_adjustment() const;
  void _internal_set_queue_point_adjustment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 rank_tier = 48;
  bool has_rank_tier() const;
  private:
  bool _internal_has_rank_tier() const;
  public:
  void clear_rank_tier();
  ::PROTOBUF_NAMESPACE_ID::int32 rank_tier() const;
  void set_rank_tier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank_tier() const;
  void _internal_set_rank_tier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool was_mvp_last_game = 43;
  bool has_was_mvp_last_game() const;
  private:
  bool _internal_has_was_mvp_last_game() const;
  public:
  void clear_was_mvp_last_game();
  bool was_mvp_last_game() const;
  void set_was_mvp_last_game(bool value);
  private:
  bool _internal_was_mvp_last_game() const;
  void _internal_set_was_mvp_last_game(bool value);
  public:

  // optional bool is_steam_china = 54;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // optional uint32 title = 50;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  ::PROTOBUF_NAMESPACE_ID::uint32 title() const;
  void set_title(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_title() const;
  void _internal_set_title(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_id = 51;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reports_available = 52;
  bool has_reports_available() const;
  private:
  bool _internal_has_reports_available() const;
  public:
  void clear_reports_available();
  ::PROTOBUF_NAMESPACE_ID::uint32 reports_available() const;
  void set_reports_available(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reports_available() const;
  void _internal_set_reports_available(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 live_spectator_account_id = 55;
  bool has_live_spectator_account_id() const;
  private:
  bool _internal_has_live_spectator_account_id() const;
  public:
  void clear_live_spectator_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 live_spectator_account_id() const;
  void set_live_spectator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_live_spectator_account_id() const;
  void _internal_set_live_spectator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_live_spectator_team() const;
  private:
  bool _internal_has_live_spectator_team() const;
  public:
  void clear_live_spectator_team();
  ::DOTA_GC_TEAM live_spectator_team() const;
  void set_live_spectator_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_live_spectator_team() const;
  void _internal_set_live_spectator_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 channel = 17 [default = 6];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_coach_team() const;
  private:
  bool _internal_has_coach_team() const;
  public:
  void clear_coach_team();
  ::DOTA_GC_TEAM coach_team() const;
  void set_coach_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_coach_team() const;
  void _internal_set_coach_team(::DOTA_GC_TEAM value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > disabled_hero_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > enabled_hero_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > custom_game_product_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > disabled_random_hero_bits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward > pending_awards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward > pending_awards_on_victory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > coached_account_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwrd_cyber_cafe_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_id_;
  int team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 party_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_xp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meta_xp_awarded_;
  int leaver_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pwrd_cyber_cafe_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leaver_actions_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_change_;
  ::PROTOBUF_NAMESPACE_ID::uint64 favorite_team_packed_;
  int search_match_type_;
  bool cameraman_;
  bool is_plus_subscriber_;
  bool rank_tier_updated_;
  bool can_earn_rewards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coach_rating_;
  int rank_mmr_boost_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_point_adjustment_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_tier_;
  bool was_mvp_last_game_;
  bool is_steam_china_;
  ::PROTOBUF_NAMESPACE_ID::uint32 title_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reports_available_;
  ::PROTOBUF_NAMESPACE_ID::uint32 live_spectator_account_id_;
  int live_spectator_team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  int coach_team_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyTeamDetails) */ {
 public:
  inline CLobbyTeamDetails() : CLobbyTeamDetails(nullptr) {}
  virtual ~CLobbyTeamDetails();
  explicit constexpr CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyTeamDetails(const CLobbyTeamDetails& from);
  CLobbyTeamDetails(CLobbyTeamDetails&& from) noexcept
    : CLobbyTeamDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyTeamDetails& operator=(CLobbyTeamDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLobbyTeamDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTeamDetails*>(
               &_CLobbyTeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CLobbyTeamDetails& a, CLobbyTeamDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyTeamDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyTeamDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTeamDetails* New() const final {
    return CreateMaybeMessage<CLobbyTeamDetails>(nullptr);
  }

  CLobbyTeamDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyTeamDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLobbyTeamDetails& from);
  void MergeFrom(const CLobbyTeamDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTeamDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyTeamDetails";
  }
  protected:
  explicit CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 1,
    kTeamTagFieldNumber = 3,
    kTeamLogoUrlFieldNumber = 20,
    kTeamAbbreviationFieldNumber = 21,
    kTeamLogoFieldNumber = 5,
    kTeamBaseLogoFieldNumber = 6,
    kTeamBannerLogoFieldNumber = 7,
    kTeamIdFieldNumber = 4,
    kTeamCompleteFieldNumber = 8,
    kIsHomeTeamFieldNumber = 17,
    kIsChallengeMatchFieldNumber = 18,
    kRankFieldNumber = 15,
    kRankChangeFieldNumber = 16,
    kChallengeMatchTokenAccountFieldNumber = 19,
  };
  // optional string team_name = 1;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 3;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  void set_team_tag(const std::string& value);
  void set_team_tag(std::string&& value);
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  std::string* mutable_team_tag();
  std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_logo_url = 20;
  bool has_team_logo_url() const;
  private:
  bool _internal_has_team_logo_url() const;
  public:
  void clear_team_logo_url();
  const std::string& team_logo_url() const;
  void set_team_logo_url(const std::string& value);
  void set_team_logo_url(std::string&& value);
  void set_team_logo_url(const char* value);
  void set_team_logo_url(const char* value, size_t size);
  std::string* mutable_team_logo_url();
  std::string* release_team_logo_url();
  void set_allocated_team_logo_url(std::string* team_logo_url);
  private:
  const std::string& _internal_team_logo_url() const;
  void _internal_set_team_logo_url(const std::string& value);
  std::string* _internal_mutable_team_logo_url();
  public:

  // optional string team_abbreviation = 21;
  bool has_team_abbreviation() const;
  private:
  bool _internal_has_team_abbreviation() const;
  public:
  void clear_team_abbreviation();
  const std::string& team_abbreviation() const;
  void set_team_abbreviation(const std::string& value);
  void set_team_abbreviation(std::string&& value);
  void set_team_abbreviation(const char* value);
  void set_team_abbreviation(const char* value, size_t size);
  std::string* mutable_team_abbreviation();
  std::string* release_team_abbreviation();
  void set_allocated_team_abbreviation(std::string* team_abbreviation);
  private:
  const std::string& _internal_team_abbreviation() const;
  void _internal_set_team_abbreviation(const std::string& value);
  std::string* _internal_mutable_team_abbreviation();
  public:

  // optional uint64 team_logo = 5;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo() const;
  void set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_logo() const;
  void _internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 team_base_logo = 6;
  bool has_team_base_logo() const;
  private:
  bool _internal_has_team_base_logo() const;
  public:
  void clear_team_base_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_base_logo() const;
  void set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_base_logo() const;
  void _internal_set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 team_banner_logo = 7;
  bool has_team_banner_logo() const;
  private:
  bool _internal_has_team_banner_logo() const;
  public:
  void clear_team_banner_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_banner_logo() const;
  void set_team_banner_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_banner_logo() const;
  void _internal_set_team_banner_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool team_complete = 8;
  bool has_team_complete() const;
  private:
  bool _internal_has_team_complete() const;
  public:
  void clear_team_complete();
  bool team_complete() const;
  void set_team_complete(bool value);
  private:
  bool _internal_team_complete() const;
  void _internal_set_team_complete(bool value);
  public:

  // optional bool is_home_team = 17;
  bool has_is_home_team() const;
  private:
  bool _internal_has_is_home_team() const;
  public:
  void clear_is_home_team();
  bool is_home_team() const;
  void set_is_home_team(bool value);
  private:
  bool _internal_is_home_team() const;
  void _internal_set_is_home_team(bool value);
  public:

  // optional bool is_challenge_match = 18;
  bool has_is_challenge_match() const;
  private:
  bool _internal_has_is_challenge_match() const;
  public:
  void clear_is_challenge_match();
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);
  private:
  bool _internal_is_challenge_match() const;
  void _internal_set_is_challenge_match(bool value);
  public:

  // optional uint32 rank = 15;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional sint32 rank_change = 16;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  ::PROTOBUF_NAMESPACE_ID::int32 rank_change() const;
  void set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank_change() const;
  void _internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 challenge_match_token_account = 19;
  bool has_challenge_match_token_account() const;
  private:
  bool _internal_has_challenge_match_token_account() const;
  public:
  void clear_challenge_match_token_account();
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge_match_token_account() const;
  void set_challenge_match_token_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_challenge_match_token_account() const;
  void _internal_set_challenge_match_token_account(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_logo_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_abbreviation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_base_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_banner_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  bool team_complete_;
  bool is_home_team_;
  bool is_challenge_match_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_change_;
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge_match_token_account_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyGuildDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyGuildDetails) */ {
 public:
  inline CLobbyGuildDetails() : CLobbyGuildDetails(nullptr) {}
  virtual ~CLobbyGuildDetails();
  explicit constexpr CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyGuildDetails(const CLobbyGuildDetails& from);
  CLobbyGuildDetails(CLobbyGuildDetails&& from) noexcept
    : CLobbyGuildDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyGuildDetails& operator=(const CLobbyGuildDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyGuildDetails& operator=(CLobbyGuildDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLobbyGuildDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyGuildDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyGuildDetails*>(
               &_CLobbyGuildDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CLobbyGuildDetails& a, CLobbyGuildDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyGuildDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyGuildDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLobbyGuildDetails* New() const final {
    return CreateMaybeMessage<CLobbyGuildDetails>(nullptr);
  }

  CLobbyGuildDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyGuildDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLobbyGuildDetails& from);
  void MergeFrom(const CLobbyGuildDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyGuildDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyGuildDetails";
  }
  protected:
  explicit CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildTagFieldNumber = 10,
    kGuildIdFieldNumber = 1,
    kGuildPrimaryColorFieldNumber = 2,
    kGuildSecondaryColorFieldNumber = 3,
    kGuildPatternFieldNumber = 4,
    kGuildLogoFieldNumber = 5,
    kGuildPointsFieldNumber = 6,
    kGuildEventFieldNumber = 7,
    kGuildFlagsFieldNumber = 8,
    kTeamForGuildFieldNumber = 9,
    kGuildWeeklyPercentileFieldNumber = 11,
  };
  // optional string guild_tag = 10;
  bool has_guild_tag() const;
  private:
  bool _internal_has_guild_tag() const;
  public:
  void clear_guild_tag();
  const std::string& guild_tag() const;
  void set_guild_tag(const std::string& value);
  void set_guild_tag(std::string&& value);
  void set_guild_tag(const char* value);
  void set_guild_tag(const char* value, size_t size);
  std::string* mutable_guild_tag();
  std::string* release_guild_tag();
  void set_allocated_guild_tag(std::string* guild_tag);
  private:
  const std::string& _internal_guild_tag() const;
  void _internal_set_guild_tag(const std::string& value);
  std::string* _internal_mutable_guild_tag();
  public:

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_primary_color = 2;
  bool has_guild_primary_color() const;
  private:
  bool _internal_has_guild_primary_color() const;
  public:
  void clear_guild_primary_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_primary_color() const;
  void set_guild_primary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_primary_color() const;
  void _internal_set_guild_primary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_secondary_color = 3;
  bool has_guild_secondary_color() const;
  private:
  bool _internal_has_guild_secondary_color() const;
  public:
  void clear_guild_secondary_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_secondary_color() const;
  void set_guild_secondary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_secondary_color() const;
  void _internal_set_guild_secondary_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_pattern = 4;
  bool has_guild_pattern() const;
  private:
  bool _internal_has_guild_pattern() const;
  public:
  void clear_guild_pattern();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_pattern() const;
  void set_guild_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_pattern() const;
  void _internal_set_guild_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 guild_logo = 5;
  bool has_guild_logo() const;
  private:
  bool _internal_has_guild_logo() const;
  public:
  void clear_guild_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_logo() const;
  void set_guild_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guild_logo() const;
  void _internal_set_guild_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 guild_points = 6;
  bool has_guild_points() const;
  private:
  bool _internal_has_guild_points() const;
  public:
  void clear_guild_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_points() const;
  void set_guild_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_points() const;
  void _internal_set_guild_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_event = 7;
  bool has_guild_event() const;
  private:
  bool _internal_has_guild_event() const;
  public:
  void clear_guild_event();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_event() const;
  void set_guild_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_event() const;
  void _internal_set_guild_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 guild_flags = 8;
  bool has_guild_flags() const;
  private:
  bool _internal_has_guild_flags() const;
  public:
  void clear_guild_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_flags() const;
  void set_guild_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_flags() const;
  void _internal_set_guild_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team_for_guild() const;
  private:
  bool _internal_has_team_for_guild() const;
  public:
  void clear_team_for_guild();
  ::DOTA_GC_TEAM team_for_guild() const;
  void set_team_for_guild(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team_for_guild() const;
  void _internal_set_team_for_guild(::DOTA_GC_TEAM value);
  public:

  // optional uint32 guild_weekly_percentile = 11;
  bool has_guild_weekly_percentile() const;
  private:
  bool _internal_has_guild_weekly_percentile() const;
  public:
  void clear_guild_weekly_percentile();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_weekly_percentile() const;
  void set_guild_weekly_percentile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_weekly_percentile() const;
  void _internal_set_guild_weekly_percentile(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyGuildDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_primary_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_secondary_color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_pattern_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guild_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_flags_;
  int team_for_guild_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_weekly_percentile_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyTimedRewardDetails) */ {
 public:
  inline CLobbyTimedRewardDetails() : CLobbyTimedRewardDetails(nullptr) {}
  virtual ~CLobbyTimedRewardDetails();
  explicit constexpr CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);
  CLobbyTimedRewardDetails(CLobbyTimedRewardDetails&& from) noexcept
    : CLobbyTimedRewardDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyTimedRewardDetails& operator=(CLobbyTimedRewardDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLobbyTimedRewardDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyTimedRewardDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTimedRewardDetails*>(
               &_CLobbyTimedRewardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CLobbyTimedRewardDetails& a, CLobbyTimedRewardDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLobbyTimedRewardDetails* New() const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(nullptr);
  }

  CLobbyTimedRewardDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  void MergeFrom(const CLobbyTimedRewardDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTimedRewardDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyTimedRewardDetails";
  }
  protected:
  explicit CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefIndexFieldNumber = 2,
    kIsSupplyCrateFieldNumber = 3,
    kIsTimedDropFieldNumber = 4,
    kAccountIdFieldNumber = 5,
    kOriginFieldNumber = 6,
  };
  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index() const;
  void set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_def_index() const;
  void _internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_supply_crate = 3;
  bool has_is_supply_crate() const;
  private:
  bool _internal_has_is_supply_crate() const;
  public:
  void clear_is_supply_crate();
  bool is_supply_crate() const;
  void set_is_supply_crate(bool value);
  private:
  bool _internal_is_supply_crate() const;
  void _internal_set_is_supply_crate(bool value);
  public:

  // optional bool is_timed_drop = 4;
  bool has_is_timed_drop() const;
  private:
  bool _internal_has_is_timed_drop() const;
  public:
  void clear_is_timed_drop();
  bool is_timed_drop() const;
  void set_is_timed_drop(bool value);
  private:
  bool _internal_is_timed_drop() const;
  void _internal_set_is_timed_drop(bool value);
  public:

  // optional uint32 account_id = 5;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 origin = 6;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_def_index_;
  bool is_supply_crate_;
  bool is_timed_drop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyBroadcastChannelInfo) */ {
 public:
  inline CLobbyBroadcastChannelInfo() : CLobbyBroadcastChannelInfo(nullptr) {}
  virtual ~CLobbyBroadcastChannelInfo();
  explicit constexpr CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);
  CLobbyBroadcastChannelInfo(CLobbyBroadcastChannelInfo&& from) noexcept
    : CLobbyBroadcastChannelInfo() {
    *this = ::std::move(from);
  }

  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyBroadcastChannelInfo& operator=(CLobbyBroadcastChannelInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLobbyBroadcastChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyBroadcastChannelInfo* internal_default_instance() {
    return reinterpret_cast<const CLobbyBroadcastChannelInfo*>(
               &_CLobbyBroadcastChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CLobbyBroadcastChannelInfo& a, CLobbyBroadcastChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyBroadcastChannelInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyBroadcastChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLobbyBroadcastChannelInfo* New() const final {
    return CreateMaybeMessage<CLobbyBroadcastChannelInfo>(nullptr);
  }

  CLobbyBroadcastChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyBroadcastChannelInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  void MergeFrom(const CLobbyBroadcastChannelInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyBroadcastChannelInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyBroadcastChannelInfo";
  }
  protected:
  explicit CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLanguageCodeFieldNumber = 4,
    kChannelIdFieldNumber = 1,
  };
  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string language_code = 4;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // optional uint32 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyBroadcastChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CLobbyGuildChallenge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyGuildChallenge) */ {
 public:
  inline CLobbyGuildChallenge() : CLobbyGuildChallenge(nullptr) {}
  virtual ~CLobbyGuildChallenge();
  explicit constexpr CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyGuildChallenge(const CLobbyGuildChallenge& from);
  CLobbyGuildChallenge(CLobbyGuildChallenge&& from) noexcept
    : CLobbyGuildChallenge() {
    *this = ::std::move(from);
  }

  inline CLobbyGuildChallenge& operator=(const CLobbyGuildChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyGuildChallenge& operator=(CLobbyGuildChallenge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLobbyGuildChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyGuildChallenge* internal_default_instance() {
    return reinterpret_cast<const CLobbyGuildChallenge*>(
               &_CLobbyGuildChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CLobbyGuildChallenge& a, CLobbyGuildChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyGuildChallenge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyGuildChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLobbyGuildChallenge* New() const final {
    return CreateMaybeMessage<CLobbyGuildChallenge>(nullptr);
  }

  CLobbyGuildChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLobbyGuildChallenge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLobbyGuildChallenge& from);
  void MergeFrom(const CLobbyGuildChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyGuildChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyGuildChallenge";
  }
  protected:
  explicit CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEligibleAccountIdsFieldNumber = 8,
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeParameterFieldNumber = 4,
    kChallengeTimestampFieldNumber = 5,
    kChallengePeriodSerialFieldNumber = 6,
    kChallengeProgressAtStartFieldNumber = 7,
  };
  // repeated uint32 eligible_account_ids = 8;
  int eligible_account_ids_size() const;
  private:
  int _internal_eligible_account_ids_size() const;
  public:
  void clear_eligible_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eligible_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_eligible_account_ids() const;
  void _internal_add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_eligible_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 eligible_account_ids(int index) const;
  void set_eligible_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      eligible_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_eligible_account_ids();

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id() const;
  void set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_id() const;
  void _internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id() const;
  void set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_parameter = 4;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter() const;
  void set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_timestamp = 5;
  bool has_challenge_timestamp() const;
  private:
  bool _internal_has_challenge_timestamp() const;
  public:
  void clear_challenge_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_timestamp() const;
  void set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_timestamp() const;
  void _internal_set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_period_serial = 6;
  bool has_challenge_period_serial() const;
  private:
  bool _internal_has_challenge_period_serial() const;
  public:
  void clear_challenge_period_serial();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_period_serial() const;
  void set_challenge_period_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_period_serial() const;
  void _internal_set_challenge_period_serial(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 challenge_progress_at_start = 7;
  bool has_challenge_progress_at_start() const;
  private:
  bool _internal_has_challenge_progress_at_start() const;
  public:
  void clear_challenge_progress_at_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_at_start() const;
  void set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_progress_at_start() const;
  void _internal_set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyGuildChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > eligible_account_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_id_;
  int event_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_parameter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_period_serial_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_progress_at_start_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobby.CExtraMsg) */ {
 public:
  inline CSODOTALobby_CExtraMsg() : CSODOTALobby_CExtraMsg(nullptr) {}
  virtual ~CSODOTALobby_CExtraMsg();
  explicit constexpr CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);
  CSODOTALobby_CExtraMsg(CSODOTALobby_CExtraMsg&& from) noexcept
    : CSODOTALobby_CExtraMsg() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobby_CExtraMsg& operator=(CSODOTALobby_CExtraMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTALobby_CExtraMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobby_CExtraMsg* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby_CExtraMsg*>(
               &_CSODOTALobby_CExtraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CSODOTALobby_CExtraMsg& a, CSODOTALobby_CExtraMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobby_CExtraMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobby_CExtraMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobby_CExtraMsg* New() const final {
    return CreateMaybeMessage<CSODOTALobby_CExtraMsg>(nullptr);
  }

  CSODOTALobby_CExtraMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobby_CExtraMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  void MergeFrom(const CSODOTALobby_CExtraMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby_CExtraMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobby.CExtraMsg";
  }
  protected:
  explicit CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional bytes contents = 2;
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  const std::string& contents() const;
  void set_contents(const std::string& value);
  void set_contents(std::string&& value);
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  std::string* mutable_contents();
  std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobby.CExtraMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobby) */ {
 public:
  inline CSODOTALobby() : CSODOTALobby(nullptr) {}
  virtual ~CSODOTALobby();
  explicit constexpr CSODOTALobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobby(const CSODOTALobby& from);
  CSODOTALobby(CSODOTALobby&& from) noexcept
    : CSODOTALobby() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobby& operator=(CSODOTALobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSODOTALobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby*>(
               &_CSODOTALobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CSODOTALobby& a, CSODOTALobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSODOTALobby* New() const final {
    return CreateMaybeMessage<CSODOTALobby>(nullptr);
  }

  CSODOTALobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSODOTALobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSODOTALobby& from);
  void MergeFrom(const CSODOTALobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobby";
  }
  protected:
  explicit CSODOTALobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_CExtraMsg CExtraMsg;

  typedef CSODOTALobby_State State;
  static constexpr State UI =
    CSODOTALobby_State_UI;
  static constexpr State READYUP =
    CSODOTALobby_State_READYUP;
  static constexpr State SERVERSETUP =
    CSODOTALobby_State_SERVERSETUP;
  static constexpr State RUN =
    CSODOTALobby_State_RUN;
  static constexpr State POSTGAME =
    CSODOTALobby_State_POSTGAME;
  static constexpr State NOTREADY =
    CSODOTALobby_State_NOTREADY;
  static constexpr State SERVERASSIGN =
    CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CSODOTALobby_State_State_MIN;
  static constexpr State State_MAX =
    CSODOTALobby_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CSODOTALobby_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static constexpr LobbyType INVALID =
    CSODOTALobby_LobbyType_INVALID;
  static constexpr LobbyType CASUAL_MATCH =
    CSODOTALobby_LobbyType_CASUAL_MATCH;
  static constexpr LobbyType PRACTICE =
    CSODOTALobby_LobbyType_PRACTICE;
  static constexpr LobbyType COOP_BOT_MATCH =
    CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static constexpr LobbyType LEGACY_TEAM_MATCH =
    CSODOTALobby_LobbyType_LEGACY_TEAM_MATCH;
  static constexpr LobbyType LEGACY_SOLO_QUEUE_MATCH =
    CSODOTALobby_LobbyType_LEGACY_SOLO_QUEUE_MATCH;
  static constexpr LobbyType COMPETITIVE_MATCH =
    CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static constexpr LobbyType CASUAL_1V1_MATCH =
    CSODOTALobby_LobbyType_CASUAL_1V1_MATCH;
  static constexpr LobbyType WEEKEND_TOURNEY =
    CSODOTALobby_LobbyType_WEEKEND_TOURNEY;
  static constexpr LobbyType LOCAL_BOT_MATCH =
    CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
  static constexpr LobbyType SPECTATOR =
    CSODOTALobby_LobbyType_SPECTATOR;
  static constexpr LobbyType EVENT_MATCH =
    CSODOTALobby_LobbyType_EVENT_MATCH;
  static constexpr LobbyType GAUNTLET =
    CSODOTALobby_LobbyType_GAUNTLET;
  static constexpr LobbyType NEW_PLAYER_POOL =
    CSODOTALobby_LobbyType_NEW_PLAYER_POOL;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static constexpr LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static constexpr LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static constexpr int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  template<typename T>
  static inline const std::string& LobbyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LobbyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LobbyType_Name.");
    return CSODOTALobby_LobbyType_Name(enum_t_value);
  }
  static inline bool LobbyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kV2MembersFieldNumber = 2,
    kV2LeftMembersFieldNumber = 7,
    kPendingInvitesFieldNumber = 10,
    kTeamDetailsFieldNumber = 17,
    kTimedRewardDetailsFieldNumber = 38,
    kBroadcastChannelInfoFieldNumber = 58,
    kExtraMessagesFieldNumber = 62,
    kPreviousSeriesMatchesFieldNumber = 81,
    kEventProgressionEnabledFieldNumber = 96,
    kEmergencyDisabledHeroIdsFieldNumber = 105,
    kGuildChallengesFieldNumber = 117,
    kGuildDetailsFieldNumber = 118,
    kLobbyEventPointsFieldNumber = 119,
    kAllMembersFieldNumber = 120,
    kMemberIndicesFieldNumber = 121,
    kLeftMemberIndicesFieldNumber = 122,
    kFreeMemberIndicesFieldNumber = 123,
    kRequestedHeroIdsFieldNumber = 124,
    kCoachFriendRequestsFieldNumber = 125,
    kConnectFieldNumber = 5,
    kGameNameFieldNumber = 16,
    kPassKeyFieldNumber = 39,
    kCustomGameModeFieldNumber = 54,
    kCustomMapNameFieldNumber = 55,
    kLanHostPingLocationFieldNumber = 109,
    kSaveGameFieldNumber = 63,
    kLobbyIdFieldNumber = 1,
    kGameModeFieldNumber = 3,
    kStateFieldNumber = 4,
    kServerIdFieldNumber = 6,
    kLeaderIdFieldNumber = 11,
    kTutorialLessonFieldNumber = 18,
    kTournamentIdFieldNumber = 19,
    kTournamentGameIdFieldNumber = 20,
    kServerRegionFieldNumber = 21,
    kGameStateFieldNumber = 22,
    kNumSpectatorsFieldNumber = 23,
    kAllowCheatsFieldNumber = 13,
    kFillWithBotsFieldNumber = 14,
    kIntroModeFieldNumber = 15,
    kAllchatFieldNumber = 51,
    kMatchgroupFieldNumber = 25,
    kMatchIdFieldNumber = 30,
    kCmPickFieldNumber = 28,
    kGameVersionFieldNumber = 37,
    kLeagueidFieldNumber = 42,
    kPenaltyLevelRadiantFieldNumber = 43,
    kPenaltyLevelDireFieldNumber = 44,
    kLoadGameIdFieldNumber = 45,
    kSeriesTypeFieldNumber = 46,
    kRadiantSeriesWinsFieldNumber = 47,
    kDireSeriesWinsFieldNumber = 48,
    kLootGeneratedFieldNumber = 49,
    kLootAwardedFieldNumber = 50,
    kDotaTvDelayFieldNumber = 53,
    kCustomDifficultyFieldNumber = 56,
    kFirstLeaverAccountidFieldNumber = 59,
    kSeriesIdFieldNumber = 60,
    kLanFieldNumber = 57,
    kLowPriorityFieldNumber = 61,
    kFirstBloodHappenedFieldNumber = 65,
    kMassDisconnectFieldNumber = 67,
    kCustomGameIdFieldNumber = 68,
    kMatchOutcomeFieldNumber = 70,
    kCustomMinPlayersFieldNumber = 71,
    kCustomMaxPlayersFieldNumber = 72,
    kVisibilityFieldNumber = 75,
    kCustomGameCrcFieldNumber = 76,
    kPreviousMatchOverrideFieldNumber = 82,
    kCustomGameTimestampFieldNumber = 80,
    kGameStartTimeFieldNumber = 87,
    kPauseSettingFieldNumber = 88,
    kLobbyMvpAccountIdFieldNumber = 89,
    kWeekendTourneyDivisionIdFieldNumber = 90,
    kWeekendTourneySkillLevelFieldNumber = 91,
    kWeekendTourneyBracketRoundFieldNumber = 92,
    kCustomGameAutoCreatedLobbyFieldNumber = 77,
    kCustomGameUsesAccountRecordsFieldNumber = 83,
    kSeriesCurrentSelectionPriorityUsedCoinTossFieldNumber = 102,
    kCustomGamePenaltiesFieldNumber = 107,
    kBotRadiantFieldNumber = 94,
    kBotDireFieldNumber = 95,
    kSelectionPriorityRulesFieldNumber = 97,
    kSeriesPreviousSelectionPriorityTeamIdFieldNumber = 98,
    kSeriesCurrentSelectionPriorityTeamIdFieldNumber = 99,
    kSeriesCurrentPriorityTeamChoiceFieldNumber = 100,
    kSeriesCurrentNonPriorityTeamChoiceFieldNumber = 101,
    kCurrentPrimaryEventFieldNumber = 103,
    kWithScenarioSaveFieldNumber = 127,
    kCustomGamePrivateKeyFieldNumber = 106,
    kLeagueNodeIdFieldNumber = 110,
    kMatchDurationFieldNumber = 111,
    kLeaguePhaseFieldNumber = 113,
    kCustomGameBrowseableFieldNumber = 112,
    kRecordDetailedStatsFieldNumber = 114,
    kExperimentalGameplayEnabledFieldNumber = 116,
    kIsInSteamChinaFieldNumber = 126,
    kLobbyTypeFieldNumber = 12,
    kAllowSpectatingFieldNumber = 31,
    kBotDifficultyRadiantFieldNumber = 36,
    kBotDifficultyDireFieldNumber = 93,
  };
  // repeated .CSODOTALobbyMember v2_members = 2;
  int v2_members_size() const;
  private:
  int _internal_v2_members_size() const;
  public:
  void clear_v2_members();
  ::CSODOTALobbyMember* mutable_v2_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
      mutable_v2_members();
  private:
  const ::CSODOTALobbyMember& _internal_v2_members(int index) const;
  ::CSODOTALobbyMember* _internal_add_v2_members();
  public:
  const ::CSODOTALobbyMember& v2_members(int index) const;
  ::CSODOTALobbyMember* add_v2_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
      v2_members() const;

  // repeated .CSODOTALobbyMember v2_left_members = 7;
  int v2_left_members_size() const;
  private:
  int _internal_v2_left_members_size() const;
  public:
  void clear_v2_left_members();
  ::CSODOTALobbyMember* mutable_v2_left_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
      mutable_v2_left_members();
  private:
  const ::CSODOTALobbyMember& _internal_v2_left_members(int index) const;
  ::CSODOTALobbyMember* _internal_add_v2_left_members();
  public:
  const ::CSODOTALobbyMember& v2_left_members(int index) const;
  ::CSODOTALobbyMember* add_v2_left_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
      v2_left_members() const;

  // repeated fixed64 pending_invites = 10;
  int pending_invites_size() const;
  private:
  int _internal_pending_invites_size() const;
  public:
  void clear_pending_invites();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pending_invites(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_pending_invites() const;
  void _internal_add_pending_invites(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_pending_invites();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 pending_invites(int index) const;
  void set_pending_invites(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_pending_invites(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      pending_invites() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_pending_invites();

  // repeated .CLobbyTeamDetails team_details = 17;
  int team_details_size() const;
  private:
  int _internal_team_details_size() const;
  public:
  void clear_team_details();
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  private:
  const ::CLobbyTeamDetails& _internal_team_details(int index) const;
  ::CLobbyTeamDetails* _internal_add_team_details();
  public:
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* add_team_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  int timed_reward_details_size() const;
  private:
  int _internal_timed_reward_details_size() const;
  public:
  void clear_timed_reward_details();
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  private:
  const ::CLobbyTimedRewardDetails& _internal_timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_timed_reward_details();
  public:
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  int broadcast_channel_info_size() const;
  private:
  int _internal_broadcast_channel_info_size() const;
  public:
  void clear_broadcast_channel_info();
  ::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();
  private:
  const ::CLobbyBroadcastChannelInfo& _internal_broadcast_channel_info(int index) const;
  ::CLobbyBroadcastChannelInfo* _internal_add_broadcast_channel_info();
  public:
  const ::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  ::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  int extra_messages_size() const;
  private:
  int _internal_extra_messages_size() const;
  public:
  void clear_extra_messages();
  ::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();
  private:
  const ::CSODOTALobby_CExtraMsg& _internal_extra_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* _internal_add_extra_messages();
  public:
  const ::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* add_extra_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_messages() const;

  // repeated uint64 previous_series_matches = 81;
  int previous_series_matches_size() const;
  private:
  int _internal_previous_series_matches_size() const;
  public:
  void clear_previous_series_matches();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_series_matches(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_previous_series_matches() const;
  void _internal_add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_previous_series_matches();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_series_matches(int index) const;
  void set_previous_series_matches(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      previous_series_matches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_previous_series_matches();

  // repeated .EEvent event_progression_enabled = 96;
  int event_progression_enabled_size() const;
  private:
  int _internal_event_progression_enabled_size() const;
  public:
  void clear_event_progression_enabled();
  private:
  ::EEvent _internal_event_progression_enabled(int index) const;
  void _internal_add_event_progression_enabled(::EEvent value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_event_progression_enabled();
  public:
  ::EEvent event_progression_enabled(int index) const;
  void set_event_progression_enabled(int index, ::EEvent value);
  void add_event_progression_enabled(::EEvent value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& event_progression_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_event_progression_enabled();

  // repeated uint32 emergency_disabled_hero_ids = 105;
  int emergency_disabled_hero_ids_size() const;
  private:
  int _internal_emergency_disabled_hero_ids_size() const;
  public:
  void clear_emergency_disabled_hero_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_emergency_disabled_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_emergency_disabled_hero_ids() const;
  void _internal_add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_emergency_disabled_hero_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 emergency_disabled_hero_ids(int index) const;
  void set_emergency_disabled_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      emergency_disabled_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_emergency_disabled_hero_ids();

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  int guild_challenges_size() const;
  private:
  int _internal_guild_challenges_size() const;
  public:
  void clear_guild_challenges();
  ::CLobbyGuildChallenge* mutable_guild_challenges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >*
      mutable_guild_challenges();
  private:
  const ::CLobbyGuildChallenge& _internal_guild_challenges(int index) const;
  ::CLobbyGuildChallenge* _internal_add_guild_challenges();
  public:
  const ::CLobbyGuildChallenge& guild_challenges(int index) const;
  ::CLobbyGuildChallenge* add_guild_challenges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >&
      guild_challenges() const;

  // repeated .CLobbyGuildDetails guild_details = 118;
  int guild_details_size() const;
  private:
  int _internal_guild_details_size() const;
  public:
  void clear_guild_details();
  ::CLobbyGuildDetails* mutable_guild_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >*
      mutable_guild_details();
  private:
  const ::CLobbyGuildDetails& _internal_guild_details(int index) const;
  ::CLobbyGuildDetails* _internal_add_guild_details();
  public:
  const ::CLobbyGuildDetails& guild_details(int index) const;
  ::CLobbyGuildDetails* add_guild_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >&
      guild_details() const;

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  int lobby_event_points_size() const;
  private:
  int _internal_lobby_event_points_size() const;
  public:
  void clear_lobby_event_points();
  ::CMsgLobbyEventPoints* mutable_lobby_event_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
      mutable_lobby_event_points();
  private:
  const ::CMsgLobbyEventPoints& _internal_lobby_event_points(int index) const;
  ::CMsgLobbyEventPoints* _internal_add_lobby_event_points();
  public:
  const ::CMsgLobbyEventPoints& lobby_event_points(int index) const;
  ::CMsgLobbyEventPoints* add_lobby_event_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
      lobby_event_points() const;

  // repeated .CSODOTALobbyMember all_members = 120;
  int all_members_size() const;
  private:
  int _internal_all_members_size() const;
  public:
  void clear_all_members();
  ::CSODOTALobbyMember* mutable_all_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
      mutable_all_members();
  private:
  const ::CSODOTALobbyMember& _internal_all_members(int index) const;
  ::CSODOTALobbyMember* _internal_add_all_members();
  public:
  const ::CSODOTALobbyMember& all_members(int index) const;
  ::CSODOTALobbyMember* add_all_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
      all_members() const;

  // repeated uint32 member_indices = 121;
  int member_indices_size() const;
  private:
  int _internal_member_indices_size() const;
  public:
  void clear_member_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_member_indices() const;
  void _internal_add_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_member_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 member_indices(int index) const;
  void set_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_member_indices();

  // repeated uint32 left_member_indices = 122;
  int left_member_indices_size() const;
  private:
  int _internal_left_member_indices_size() const;
  public:
  void clear_left_member_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_left_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_left_member_indices() const;
  void _internal_add_left_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_left_member_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 left_member_indices(int index) const;
  void set_left_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_left_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      left_member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_left_member_indices();

  // repeated uint32 free_member_indices = 123;
  int free_member_indices_size() const;
  private:
  int _internal_free_member_indices_size() const;
  public:
  void clear_free_member_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_free_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_free_member_indices() const;
  void _internal_add_free_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_free_member_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 free_member_indices(int index) const;
  void set_free_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_free_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      free_member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_free_member_indices();

  // repeated uint32 requested_hero_ids = 124;
  int requested_hero_ids_size() const;
  private:
  int _internal_requested_hero_ids_size() const;
  public:
  void clear_requested_hero_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requested_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_requested_hero_ids() const;
  void _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_requested_hero_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 requested_hero_ids(int index) const;
  void set_requested_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      requested_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_requested_hero_ids();

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  int coach_friend_requests_size() const;
  private:
  int _internal_coach_friend_requests_size() const;
  public:
  void clear_coach_friend_requests();
  ::CMsgLobbyCoachFriendRequest* mutable_coach_friend_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >*
      mutable_coach_friend_requests();
  private:
  const ::CMsgLobbyCoachFriendRequest& _internal_coach_friend_requests(int index) const;
  ::CMsgLobbyCoachFriendRequest* _internal_add_coach_friend_requests();
  public:
  const ::CMsgLobbyCoachFriendRequest& coach_friend_requests(int index) const;
  ::CMsgLobbyCoachFriendRequest* add_coach_friend_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >&
      coach_friend_requests() const;

  // optional string connect = 5;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const std::string& connect() const;
  void set_connect(const std::string& value);
  void set_connect(std::string&& value);
  void set_connect(const char* value);
  void set_connect(const char* value, size_t size);
  std::string* mutable_connect();
  std::string* release_connect();
  void set_allocated_connect(std::string* connect);
  private:
  const std::string& _internal_connect() const;
  void _internal_set_connect(const std::string& value);
  std::string* _internal_mutable_connect();
  public:

  // optional string game_name = 16;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  void set_game_name(const std::string& value);
  void set_game_name(std::string&& value);
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  std::string* mutable_game_name();
  std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional string pass_key = 39;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional string custom_game_mode = 54;
  bool has_custom_game_mode() const;
  private:
  bool _internal_has_custom_game_mode() const;
  public:
  void clear_custom_game_mode();
  const std::string& custom_game_mode() const;
  void set_custom_game_mode(const std::string& value);
  void set_custom_game_mode(std::string&& value);
  void set_custom_game_mode(const char* value);
  void set_custom_game_mode(const char* value, size_t size);
  std::string* mutable_custom_game_mode();
  std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(std::string* custom_game_mode);
  private:
  const std::string& _internal_custom_game_mode() const;
  void _internal_set_custom_game_mode(const std::string& value);
  std::string* _internal_mutable_custom_game_mode();
  public:

  // optional string custom_map_name = 55;
  bool has_custom_map_name() const;
  private:
  bool _internal_has_custom_map_name() const;
  public:
  void clear_custom_map_name();
  const std::string& custom_map_name() const;
  void set_custom_map_name(const std::string& value);
  void set_custom_map_name(std::string&& value);
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  std::string* mutable_custom_map_name();
  std::string* release_custom_map_name();
  void set_allocated_custom_map_name(std::string* custom_map_name);
  private:
  const std::string& _internal_custom_map_name() const;
  void _internal_set_custom_map_name(const std::string& value);
  std::string* _internal_mutable_custom_map_name();
  public:

  // optional string lan_host_ping_location = 109;
  bool has_lan_host_ping_location() const;
  private:
  bool _internal_has_lan_host_ping_location() const;
  public:
  void clear_lan_host_ping_location();
  const std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const std::string& value);
  void set_lan_host_ping_location(std::string&& value);
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  std::string* mutable_lan_host_ping_location();
  std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(std::string* lan_host_ping_location);
  private:
  const std::string& _internal_lan_host_ping_location() const;
  void _internal_set_lan_host_ping_location(const std::string& value);
  std::string* _internal_mutable_lan_host_ping_location();
  public:

  // optional .CDOTASaveGame save_game = 63;
  bool has_save_game() const;
  private:
  bool _internal_has_save_game() const;
  public:
  void clear_save_game();
  const ::CDOTASaveGame& save_game() const;
  ::CDOTASaveGame* release_save_game();
  ::CDOTASaveGame* mutable_save_game();
  void set_allocated_save_game(::CDOTASaveGame* save_game);
  private:
  const ::CDOTASaveGame& _internal_save_game() const;
  ::CDOTASaveGame* _internal_mutable_save_game();
  public:
  void unsafe_arena_set_allocated_save_game(
      ::CDOTASaveGame* save_game);
  ::CDOTASaveGame* unsafe_arena_release_save_game();

  // optional uint64 lobby_id = 1 [(.key_field) = true];
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 game_mode = 3;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CSODOTALobby.State state = 4 [default = UI];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CSODOTALobby_State state() const;
  void set_state(::CSODOTALobby_State value);
  private:
  ::CSODOTALobby_State _internal_state() const;
  void _internal_set_state(::CSODOTALobby_State value);
  public:

  // optional fixed64 server_id = 6 [default = 0];
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 leader_id = 11;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id() const;
  void set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leader_id() const;
  void _internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tutorial_lesson = 18;
  bool has_tutorial_lesson() const;
  private:
  bool _internal_has_tutorial_lesson() const;
  public:
  void clear_tutorial_lesson();
  ::PROTOBUF_NAMESPACE_ID::uint32 tutorial_lesson() const;
  void set_tutorial_lesson(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tutorial_lesson() const;
  void _internal_set_tutorial_lesson(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tournament_id = 19;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_id() const;
  void set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournament_id() const;
  void _internal_set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tournament_game_id = 20;
  bool has_tournament_game_id() const;
  private:
  bool _internal_has_tournament_game_id() const;
  public:
  void clear_tournament_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_game_id() const;
  void set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournament_game_id() const;
  void _internal_set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_region = 21 [default = 0];
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional uint32 num_spectators = 23;
  bool has_num_spectators() const;
  private:
  bool _internal_has_num_spectators() const;
  public:
  void clear_num_spectators();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_spectators() const;
  void set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_spectators() const;
  void _internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool allow_cheats = 13;
  bool has_allow_cheats() const;
  private:
  bool _internal_has_allow_cheats() const;
  public:
  void clear_allow_cheats();
  bool allow_cheats() const;
  void set_allow_cheats(bool value);
  private:
  bool _internal_allow_cheats() const;
  void _internal_set_allow_cheats(bool value);
  public:

  // optional bool fill_with_bots = 14;
  bool has_fill_with_bots() const;
  private:
  bool _internal_has_fill_with_bots() const;
  public:
  void clear_fill_with_bots();
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);
  private:
  bool _internal_fill_with_bots() const;
  void _internal_set_fill_with_bots(bool value);
  public:

  // optional bool intro_mode = 15;
  bool has_intro_mode() const;
  private:
  bool _internal_has_intro_mode() const;
  public:
  void clear_intro_mode();
  bool intro_mode() const;
  void set_intro_mode(bool value);
  private:
  bool _internal_intro_mode() const;
  void _internal_set_intro_mode(bool value);
  public:

  // optional bool allchat = 51 [default = false];
  bool has_allchat() const;
  private:
  bool _internal_has_allchat() const;
  public:
  void clear_allchat();
  bool allchat() const;
  void set_allchat(bool value);
  private:
  bool _internal_allchat() const;
  void _internal_set_allchat(bool value);
  public:

  // optional uint32 matchgroup = 25;
  bool has_matchgroup() const;
  private:
  bool _internal_has_matchgroup() const;
  public:
  void clear_matchgroup();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroup() const;
  void set_matchgroup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchgroup() const;
  void _internal_set_matchgroup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 match_id = 30;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  private:
  bool _internal_has_cm_pick() const;
  public:
  void clear_cm_pick();
  ::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::DOTA_CM_PICK value);
  private:
  ::DOTA_CM_PICK _internal_cm_pick() const;
  void _internal_set_cm_pick(::DOTA_CM_PICK value);
  public:

  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  bool has_game_version() const;
  private:
  bool _internal_has_game_version() const;
  public:
  void clear_game_version();
  ::DOTAGameVersion game_version() const;
  void set_game_version(::DOTAGameVersion value);
  private:
  ::DOTAGameVersion _internal_game_version() const;
  void _internal_set_game_version(::DOTAGameVersion value);
  public:

  // optional uint32 leagueid = 42;
  bool has_leagueid() const;
  private:
  bool _internal_has_leagueid() const;
  public:
  void clear_leagueid();
  ::PROTOBUF_NAMESPACE_ID::uint32 leagueid() const;
  void set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leagueid() const;
  void _internal_set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  bool has_penalty_level_radiant() const;
  private:
  bool _internal_has_penalty_level_radiant() const;
  public:
  void clear_penalty_level_radiant();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_radiant() const;
  void set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_level_radiant() const;
  void _internal_set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_level_dire = 44 [default = 0];
  bool has_penalty_level_dire() const;
  private:
  bool _internal_has_penalty_level_dire() const;
  public:
  void clear_penalty_level_dire();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_dire() const;
  void set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_level_dire() const;
  void _internal_set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 load_game_id = 45;
  bool has_load_game_id() const;
  private:
  bool _internal_has_load_game_id() const;
  public:
  void clear_load_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 load_game_id() const;
  void set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_load_game_id() const;
  void _internal_set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_type = 46;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type() const;
  void set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_type() const;
  void _internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 radiant_series_wins = 47;
  bool has_radiant_series_wins() const;
  private:
  bool _internal_has_radiant_series_wins() const;
  public:
  void clear_radiant_series_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 radiant_series_wins() const;
  void set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radiant_series_wins() const;
  void _internal_set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dire_series_wins = 48;
  bool has_dire_series_wins() const;
  private:
  bool _internal_has_dire_series_wins() const;
  public:
  void clear_dire_series_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 dire_series_wins() const;
  void set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dire_series_wins() const;
  void _internal_set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 loot_generated = 49;
  bool has_loot_generated() const;
  private:
  bool _internal_has_loot_generated() const;
  public:
  void clear_loot_generated();
  ::PROTOBUF_NAMESPACE_ID::uint32 loot_generated() const;
  void set_loot_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loot_generated() const;
  void _internal_set_loot_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 loot_awarded = 50;
  bool has_loot_awarded() const;
  private:
  bool _internal_has_loot_awarded() const;
  public:
  void clear_loot_awarded();
  ::PROTOBUF_NAMESPACE_ID::uint32 loot_awarded() const;
  void set_loot_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loot_awarded() const;
  void _internal_set_loot_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  bool has_dota_tv_delay() const;
  private:
  bool _internal_has_dota_tv_delay() const;
  public:
  void clear_dota_tv_delay();
  ::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::LobbyDotaTVDelay value);
  private:
  ::LobbyDotaTVDelay _internal_dota_tv_delay() const;
  void _internal_set_dota_tv_delay(::LobbyDotaTVDelay value);
  public:

  // optional uint32 custom_difficulty = 56;
  bool has_custom_difficulty() const;
  private:
  bool _internal_has_custom_difficulty() const;
  public:
  void clear_custom_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_difficulty() const;
  void set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_difficulty() const;
  void _internal_set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 first_leaver_accountid = 59;
  bool has_first_leaver_accountid() const;
  private:
  bool _internal_has_first_leaver_accountid() const;
  public:
  void clear_first_leaver_accountid();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_leaver_accountid() const;
  void set_first_leaver_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_first_leaver_accountid() const;
  void _internal_set_first_leaver_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_id = 60;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_id() const;
  void set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_id() const;
  void _internal_set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool lan = 57;
  bool has_lan() const;
  private:
  bool _internal_has_lan() const;
  public:
  void clear_lan();
  bool lan() const;
  void set_lan(bool value);
  private:
  bool _internal_lan() const;
  void _internal_set_lan(bool value);
  public:

  // optional bool low_priority = 61;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // optional bool first_blood_happened = 65;
  bool has_first_blood_happened() const;
  private:
  bool _internal_has_first_blood_happened() const;
  public:
  void clear_first_blood_happened();
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);
  private:
  bool _internal_first_blood_happened() const;
  void _internal_set_first_blood_happened(bool value);
  public:

  // optional bool mass_disconnect = 67;
  bool has_mass_disconnect() const;
  private:
  bool _internal_has_mass_disconnect() const;
  public:
  void clear_mass_disconnect();
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);
  private:
  bool _internal_mass_disconnect() const;
  void _internal_set_mass_disconnect(bool value);
  public:

  // optional uint64 custom_game_id = 68;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint32 custom_min_players = 71;
  bool has_custom_min_players() const;
  private:
  bool _internal_has_custom_min_players() const;
  public:
  void clear_custom_min_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_min_players() const;
  void set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_min_players() const;
  void _internal_set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_max_players = 72;
  bool has_custom_max_players() const;
  private:
  bool _internal_has_custom_max_players() const;
  public:
  void clear_custom_max_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_max_players() const;
  void set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_max_players() const;
  void _internal_set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::DOTALobbyVisibility visibility() const;
  void set_visibility(::DOTALobbyVisibility value);
  private:
  ::DOTALobbyVisibility _internal_visibility() const;
  void _internal_set_visibility(::DOTALobbyVisibility value);
  public:

  // optional fixed64 custom_game_crc = 76;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc() const;
  void set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 previous_match_override = 82;
  bool has_previous_match_override() const;
  private:
  bool _internal_has_previous_match_override() const;
  public:
  void clear_previous_match_override();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_match_override() const;
  void set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_match_override() const;
  void _internal_set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 custom_game_timestamp = 80;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_start_time = 87;
  bool has_game_start_time() const;
  private:
  bool _internal_has_game_start_time() const;
  public:
  void clear_game_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_start_time() const;
  void set_game_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_start_time() const;
  void _internal_set_game_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  bool has_pause_setting() const;
  private:
  bool _internal_has_pause_setting() const;
  public:
  void clear_pause_setting();
  ::LobbyDotaPauseSetting pause_setting() const;
  void set_pause_setting(::LobbyDotaPauseSetting value);
  private:
  ::LobbyDotaPauseSetting _internal_pause_setting() const;
  void _internal_set_pause_setting(::LobbyDotaPauseSetting value);
  public:

  // optional uint32 lobby_mvp_account_id = 89;
  bool has_lobby_mvp_account_id() const;
  private:
  bool _internal_has_lobby_mvp_account_id() const;
  public:
  void clear_lobby_mvp_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mvp_account_id() const;
  void set_lobby_mvp_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_mvp_account_id() const;
  void _internal_set_lobby_mvp_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 weekend_tourney_division_id = 90;
  bool has_weekend_tourney_division_id() const;
  private:
  bool _internal_has_weekend_tourney_division_id() const;
  public:
  void clear_weekend_tourney_division_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_division_id() const;
  void set_weekend_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weekend_tourney_division_id() const;
  void _internal_set_weekend_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 weekend_tourney_skill_level = 91;
  bool has_weekend_tourney_skill_level() const;
  private:
  bool _internal_has_weekend_tourney_skill_level() const;
  public:
  void clear_weekend_tourney_skill_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weekend_tourney_skill_level() const;
  void _internal_set_weekend_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 weekend_tourney_bracket_round = 92;
  bool has_weekend_tourney_bracket_round() const;
  private:
  bool _internal_has_weekend_tourney_bracket_round() const;
  public:
  void clear_weekend_tourney_bracket_round();
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weekend_tourney_bracket_round() const;
  void _internal_set_weekend_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool custom_game_auto_created_lobby = 77;
  bool has_custom_game_auto_created_lobby() const;
  private:
  bool _internal_has_custom_game_auto_created_lobby() const;
  public:
  void clear_custom_game_auto_created_lobby();
  bool custom_game_auto_created_lobby() const;
  void set_custom_game_auto_created_lobby(bool value);
  private:
  bool _internal_custom_game_auto_created_lobby() const;
  void _internal_set_custom_game_auto_created_lobby(bool value);
  public:

  // optional bool custom_game_uses_account_records = 83;
  bool has_custom_game_uses_account_records() const;
  private:
  bool _internal_has_custom_game_uses_account_records() const;
  public:
  void clear_custom_game_uses_account_records();
  bool custom_game_uses_account_records() const;
  void set_custom_game_uses_account_records(bool value);
  private:
  bool _internal_custom_game_uses_account_records() const;
  void _internal_set_custom_game_uses_account_records(bool value);
  public:

  // optional bool series_current_selection_priority_used_coin_toss = 102;
  bool has_series_current_selection_priority_used_coin_toss() const;
  private:
  bool _internal_has_series_current_selection_priority_used_coin_toss() const;
  public:
  void clear_series_current_selection_priority_used_coin_toss();
  bool series_current_selection_priority_used_coin_toss() const;
  void set_series_current_selection_priority_used_coin_toss(bool value);
  private:
  bool _internal_series_current_selection_priority_used_coin_toss() const;
  void _internal_set_series_current_selection_priority_used_coin_toss(bool value);
  public:

  // optional bool custom_game_penalties = 107;
  bool has_custom_game_penalties() const;
  private:
  bool _internal_has_custom_game_penalties() const;
  public:
  void clear_custom_game_penalties();
  bool custom_game_penalties() const;
  void set_custom_game_penalties(bool value);
  private:
  bool _internal_custom_game_penalties() const;
  void _internal_set_custom_game_penalties(bool value);
  public:

  // optional uint64 bot_radiant = 94;
  bool has_bot_radiant() const;
  private:
  bool _internal_has_bot_radiant() const;
  public:
  void clear_bot_radiant();
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_radiant() const;
  void set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bot_radiant() const;
  void _internal_set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 bot_dire = 95;
  bool has_bot_dire() const;
  private:
  bool _internal_has_bot_dire() const;
  public:
  void clear_bot_dire();
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_dire() const;
  void set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bot_dire() const;
  void _internal_set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  bool has_selection_priority_rules() const;
  private:
  bool _internal_has_selection_priority_rules() const;
  public:
  void clear_selection_priority_rules();
  ::DOTASelectionPriorityRules selection_priority_rules() const;
  void set_selection_priority_rules(::DOTASelectionPriorityRules value);
  private:
  ::DOTASelectionPriorityRules _internal_selection_priority_rules() const;
  void _internal_set_selection_priority_rules(::DOTASelectionPriorityRules value);
  public:

  // optional uint32 series_previous_selection_priority_team_id = 98;
  bool has_series_previous_selection_priority_team_id() const;
  private:
  bool _internal_has_series_previous_selection_priority_team_id() const;
  public:
  void clear_series_previous_selection_priority_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_previous_selection_priority_team_id() const;
  void set_series_previous_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_previous_selection_priority_team_id() const;
  void _internal_set_series_previous_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_current_selection_priority_team_id = 99;
  bool has_series_current_selection_priority_team_id() const;
  private:
  bool _internal_has_series_current_selection_priority_team_id() const;
  public:
  void clear_series_current_selection_priority_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_current_selection_priority_team_id() const;
  void set_series_current_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_current_selection_priority_team_id() const;
  void _internal_set_series_current_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_priority_team_choice() const;
  private:
  bool _internal_has_series_current_priority_team_choice() const;
  public:
  void clear_series_current_priority_team_choice();
  ::DOTASelectionPriorityChoice series_current_priority_team_choice() const;
  void set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value);
  private:
  ::DOTASelectionPriorityChoice _internal_series_current_priority_team_choice() const;
  void _internal_set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value);
  public:

  // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_non_priority_team_choice() const;
  private:
  bool _internal_has_series_current_non_priority_team_choice() const;
  public:
  void clear_series_current_non_priority_team_choice();
  ::DOTASelectionPriorityChoice series_current_non_priority_team_choice() const;
  void set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value);
  private:
  ::DOTASelectionPriorityChoice _internal_series_current_non_priority_team_choice() const;
  void _internal_set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value);
  public:

  // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  bool has_current_primary_event() const;
  private:
  bool _internal_has_current_primary_event() const;
  public:
  void clear_current_primary_event();
  ::EEvent current_primary_event() const;
  void set_current_primary_event(::EEvent value);
  private:
  ::EEvent _internal_current_primary_event() const;
  void _internal_set_current_primary_event(::EEvent value);
  public:

  // optional bool with_scenario_save = 127;
  bool has_with_scenario_save() const;
  private:
  bool _internal_has_with_scenario_save() const;
  public:
  void clear_with_scenario_save();
  bool with_scenario_save() const;
  void set_with_scenario_save(bool value);
  private:
  bool _internal_with_scenario_save() const;
  void _internal_set_with_scenario_save(bool value);
  public:

  // optional fixed64 custom_game_private_key = 106;
  bool has_custom_game_private_key() const;
  private:
  bool _internal_has_custom_game_private_key() const;
  public:
  void clear_custom_game_private_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_private_key() const;
  void set_custom_game_private_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_private_key() const;
  void _internal_set_custom_game_private_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 league_node_id = 110;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_node_id() const;
  void set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_node_id() const;
  void _internal_set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 match_duration = 111;
  bool has_match_duration() const;
  private:
  bool _internal_has_match_duration() const;
  public:
  void clear_match_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 match_duration() const;
  void set_match_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_match_duration() const;
  void _internal_set_match_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 league_phase = 113;
  bool has_league_phase() const;
  private:
  bool _internal_has_league_phase() const;
  public:
  void clear_league_phase();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_phase() const;
  void set_league_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_phase() const;
  void _internal_set_league_phase(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool custom_game_browseable = 112;
  bool has_custom_game_browseable() const;
  private:
  bool _internal_has_custom_game_browseable() const;
  public:
  void clear_custom_game_browseable();
  bool custom_game_browseable() const;
  void set_custom_game_browseable(bool value);
  private:
  bool _internal_custom_game_browseable() const;
  void _internal_set_custom_game_browseable(bool value);
  public:

  // optional bool record_detailed_stats = 114;
  bool has_record_detailed_stats() const;
  private:
  bool _internal_has_record_detailed_stats() const;
  public:
  void clear_record_detailed_stats();
  bool record_detailed_stats() const;
  void set_record_detailed_stats(bool value);
  private:
  bool _internal_record_detailed_stats() const;
  void _internal_set_record_detailed_stats(bool value);
  public:

  // optional bool experimental_gameplay_enabled = 116;
  bool has_experimental_gameplay_enabled() const;
  private:
  bool _internal_has_experimental_gameplay_enabled() const;
  public:
  void clear_experimental_gameplay_enabled();
  bool experimental_gameplay_enabled() const;
  void set_experimental_gameplay_enabled(bool value);
  private:
  bool _internal_experimental_gameplay_enabled() const;
  void _internal_set_experimental_gameplay_enabled(bool value);
  public:

  // optional bool is_in_steam_china = 126;
  bool has_is_in_steam_china() const;
  private:
  bool _internal_has_is_in_steam_china() const;
  public:
  void clear_is_in_steam_china();
  bool is_in_steam_china() const;
  void set_is_in_steam_china(bool value);
  private:
  bool _internal_is_in_steam_china() const;
  void _internal_set_is_in_steam_china(bool value);
  public:

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  ::CSODOTALobby_LobbyType lobby_type() const;
  void set_lobby_type(::CSODOTALobby_LobbyType value);
  private:
  ::CSODOTALobby_LobbyType _internal_lobby_type() const;
  void _internal_set_lobby_type(::CSODOTALobby_LobbyType value);
  public:

  // optional bool allow_spectating = 31 [default = true];
  bool has_allow_spectating() const;
  private:
  bool _internal_has_allow_spectating() const;
  public:
  void clear_allow_spectating();
  bool allow_spectating() const;
  void set_allow_spectating(bool value);
  private:
  bool _internal_allow_spectating() const;
  void _internal_set_allow_spectating(bool value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_radiant() const;
  private:
  bool _internal_has_bot_difficulty_radiant() const;
  public:
  void clear_bot_difficulty_radiant();
  ::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_radiant() const;
  void _internal_set_bot_difficulty_radiant(::DOTABotDifficulty value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_dire() const;
  private:
  bool _internal_has_bot_difficulty_dire() const;
  public:
  void clear_bot_difficulty_dire();
  ::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_dire() const;
  void _internal_set_bot_difficulty_dire(::DOTABotDifficulty value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember > v2_members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember > v2_left_members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > pending_invites_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_messages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > previous_series_matches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> event_progression_enabled_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > emergency_disabled_hero_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge > guild_challenges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails > guild_details_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints > lobby_event_points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember > all_members_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > member_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > left_member_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > free_member_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > requested_hero_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest > coach_friend_requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_game_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_host_ping_location_;
  ::CDOTASaveGame* save_game_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tutorial_lesson_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  int game_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_spectators_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allchat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroup_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  int cm_pick_;
  int game_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leagueid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_radiant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_dire_;
  ::PROTOBUF_NAMESPACE_ID::uint32 load_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radiant_series_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dire_series_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loot_generated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loot_awarded_;
  int dota_tv_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_leaver_accountid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_id_;
  bool lan_;
  bool low_priority_;
  bool first_blood_happened_;
  bool mass_disconnect_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  int match_outcome_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_min_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_max_players_;
  int visibility_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_match_override_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_start_time_;
  int pause_setting_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_mvp_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_division_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_skill_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weekend_tourney_bracket_round_;
  bool custom_game_auto_created_lobby_;
  bool custom_game_uses_account_records_;
  bool series_current_selection_priority_used_coin_toss_;
  bool custom_game_penalties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_radiant_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_dire_;
  int selection_priority_rules_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_previous_selection_priority_team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_current_selection_priority_team_id_;
  int series_current_priority_team_choice_;
  int series_current_non_priority_team_choice_;
  int current_primary_event_;
  bool with_scenario_save_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_private_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 match_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_phase_;
  bool custom_game_browseable_;
  bool record_detailed_stats_;
  bool experimental_gameplay_enabled_;
  bool is_in_steam_china_;
  int lobby_type_;
  bool allow_spectating_;
  int bot_difficulty_radiant_;
  int bot_difficulty_dire_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlaytestDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyPlaytestDetails) */ {
 public:
  inline CMsgLobbyPlaytestDetails() : CMsgLobbyPlaytestDetails(nullptr) {}
  virtual ~CMsgLobbyPlaytestDetails();
  explicit constexpr CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from);
  CMsgLobbyPlaytestDetails(CMsgLobbyPlaytestDetails&& from) noexcept
    : CMsgLobbyPlaytestDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlaytestDetails& operator=(const CMsgLobbyPlaytestDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyPlaytestDetails& operator=(CMsgLobbyPlaytestDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyPlaytestDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyPlaytestDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlaytestDetails*>(
               &_CMsgLobbyPlaytestDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgLobbyPlaytestDetails& a, CMsgLobbyPlaytestDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyPlaytestDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyPlaytestDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyPlaytestDetails* New() const final {
    return CreateMaybeMessage<CMsgLobbyPlaytestDetails>(nullptr);
  }

  CMsgLobbyPlaytestDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyPlaytestDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyPlaytestDetails& from);
  void MergeFrom(const CMsgLobbyPlaytestDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlaytestDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyPlaytestDetails";
  }
  protected:
  explicit CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 1,
  };
  // optional string json = 1;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const std::string& json() const;
  void set_json(const std::string& value);
  void set_json(std::string&& value);
  void set_json(const char* value);
  void set_json(const char* value, size_t size);
  std::string* mutable_json();
  std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyPlaytestDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus_ReadyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyCheckStatus.ReadyMember) */ {
 public:
  inline CMsgReadyCheckStatus_ReadyMember() : CMsgReadyCheckStatus_ReadyMember(nullptr) {}
  virtual ~CMsgReadyCheckStatus_ReadyMember();
  explicit constexpr CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from);
  CMsgReadyCheckStatus_ReadyMember(CMsgReadyCheckStatus_ReadyMember&& from) noexcept
    : CMsgReadyCheckStatus_ReadyMember() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus_ReadyMember& operator=(const CMsgReadyCheckStatus_ReadyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyCheckStatus_ReadyMember& operator=(CMsgReadyCheckStatus_ReadyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgReadyCheckStatus_ReadyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyCheckStatus_ReadyMember* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus_ReadyMember*>(
               &_CMsgReadyCheckStatus_ReadyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgReadyCheckStatus_ReadyMember& a, CMsgReadyCheckStatus_ReadyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyCheckStatus_ReadyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyCheckStatus_ReadyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyCheckStatus_ReadyMember* New() const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus_ReadyMember>(nullptr);
  }

  CMsgReadyCheckStatus_ReadyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus_ReadyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from);
  void MergeFrom(const CMsgReadyCheckStatus_ReadyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus_ReadyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyCheckStatus.ReadyMember";
  }
  protected:
  explicit CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kReadyStatusFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  private:
  bool _internal_has_ready_status() const;
  public:
  void clear_ready_status();
  ::EReadyCheckStatus ready_status() const;
  void set_ready_status(::EReadyCheckStatus value);
  private:
  ::EReadyCheckStatus _internal_ready_status() const;
  void _internal_set_ready_status(::EReadyCheckStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyCheckStatus.ReadyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  int ready_status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyCheckStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyCheckStatus) */ {
 public:
  inline CMsgReadyCheckStatus() : CMsgReadyCheckStatus(nullptr) {}
  virtual ~CMsgReadyCheckStatus();
  explicit constexpr CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from);
  CMsgReadyCheckStatus(CMsgReadyCheckStatus&& from) noexcept
    : CMsgReadyCheckStatus() {
    *this = ::std::move(from);
  }

  inline CMsgReadyCheckStatus& operator=(const CMsgReadyCheckStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyCheckStatus& operator=(CMsgReadyCheckStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgReadyCheckStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyCheckStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyCheckStatus*>(
               &_CMsgReadyCheckStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgReadyCheckStatus& a, CMsgReadyCheckStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyCheckStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyCheckStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyCheckStatus* New() const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus>(nullptr);
  }

  CMsgReadyCheckStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyCheckStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReadyCheckStatus& from);
  void MergeFrom(const CMsgReadyCheckStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyCheckStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyCheckStatus";
  }
  protected:
  explicit CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgReadyCheckStatus_ReadyMember ReadyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kReadyMembersFieldNumber = 4,
    kStartTimestampFieldNumber = 1,
    kFinishTimestampFieldNumber = 2,
    kInitiatorAccountIdFieldNumber = 3,
  };
  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  int ready_members_size() const;
  private:
  int _internal_ready_members_size() const;
  public:
  void clear_ready_members();
  ::CMsgReadyCheckStatus_ReadyMember* mutable_ready_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >*
      mutable_ready_members();
  private:
  const ::CMsgReadyCheckStatus_ReadyMember& _internal_ready_members(int index) const;
  ::CMsgReadyCheckStatus_ReadyMember* _internal_add_ready_members();
  public:
  const ::CMsgReadyCheckStatus_ReadyMember& ready_members(int index) const;
  ::CMsgReadyCheckStatus_ReadyMember* add_ready_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >&
      ready_members() const;

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp() const;
  void set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 finish_timestamp = 2;
  bool has_finish_timestamp() const;
  private:
  bool _internal_has_finish_timestamp() const;
  public:
  void clear_finish_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_timestamp() const;
  void set_finish_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finish_timestamp() const;
  void _internal_set_finish_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 initiator_account_id = 3;
  bool has_initiator_account_id() const;
  private:
  bool _internal_has_initiator_account_id() const;
  public:
  void clear_initiator_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 initiator_account_id() const;
  void set_initiator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initiator_account_id() const;
  void _internal_set_initiator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyCheckStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember > ready_members_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initiator_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckRequest) */ {
 public:
  inline CMsgPartyReadyCheckRequest() : CMsgPartyReadyCheckRequest(nullptr) {}
  virtual ~CMsgPartyReadyCheckRequest();
  explicit constexpr CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from);
  CMsgPartyReadyCheckRequest(CMsgPartyReadyCheckRequest&& from) noexcept
    : CMsgPartyReadyCheckRequest() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckRequest& operator=(const CMsgPartyReadyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckRequest& operator=(CMsgPartyReadyCheckRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPartyReadyCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckRequest*>(
               &_CMsgPartyReadyCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgPartyReadyCheckRequest& a, CMsgPartyReadyCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckRequest* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckRequest>(nullptr);
  }

  CMsgPartyReadyCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckRequest& from);
  void MergeFrom(const CMsgPartyReadyCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckRequest";
  }
  protected:
  explicit CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckResponse) */ {
 public:
  inline CMsgPartyReadyCheckResponse() : CMsgPartyReadyCheckResponse(nullptr) {}
  virtual ~CMsgPartyReadyCheckResponse();
  explicit constexpr CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from);
  CMsgPartyReadyCheckResponse(CMsgPartyReadyCheckResponse&& from) noexcept
    : CMsgPartyReadyCheckResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckResponse& operator=(const CMsgPartyReadyCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckResponse& operator=(CMsgPartyReadyCheckResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPartyReadyCheckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckResponse*>(
               &_CMsgPartyReadyCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgPartyReadyCheckResponse& a, CMsgPartyReadyCheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckResponse* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckResponse>(nullptr);
  }

  CMsgPartyReadyCheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckResponse& from);
  void MergeFrom(const CMsgPartyReadyCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckResponse";
  }
  protected:
  explicit CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::EReadyCheckRequestResult result() const;
  void set_result(::EReadyCheckRequestResult value);
  private:
  ::EReadyCheckRequestResult _internal_result() const;
  void _internal_set_result(::EReadyCheckRequestResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyReadyCheckAcknowledge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyReadyCheckAcknowledge) */ {
 public:
  inline CMsgPartyReadyCheckAcknowledge() : CMsgPartyReadyCheckAcknowledge(nullptr) {}
  virtual ~CMsgPartyReadyCheckAcknowledge();
  explicit constexpr CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from);
  CMsgPartyReadyCheckAcknowledge(CMsgPartyReadyCheckAcknowledge&& from) noexcept
    : CMsgPartyReadyCheckAcknowledge() {
    *this = ::std::move(from);
  }

  inline CMsgPartyReadyCheckAcknowledge& operator=(const CMsgPartyReadyCheckAcknowledge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyReadyCheckAcknowledge& operator=(CMsgPartyReadyCheckAcknowledge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPartyReadyCheckAcknowledge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyReadyCheckAcknowledge* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyReadyCheckAcknowledge*>(
               &_CMsgPartyReadyCheckAcknowledge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgPartyReadyCheckAcknowledge& a, CMsgPartyReadyCheckAcknowledge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyReadyCheckAcknowledge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyReadyCheckAcknowledge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyReadyCheckAcknowledge* New() const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckAcknowledge>(nullptr);
  }

  CMsgPartyReadyCheckAcknowledge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyReadyCheckAcknowledge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyReadyCheckAcknowledge& from);
  void MergeFrom(const CMsgPartyReadyCheckAcknowledge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyReadyCheckAcknowledge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyReadyCheckAcknowledge";
  }
  protected:
  explicit CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadyStatusFieldNumber = 1,
  };
  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  bool has_ready_status() const;
  private:
  bool _internal_has_ready_status() const;
  public:
  void clear_ready_status();
  ::EReadyCheckStatus ready_status() const;
  void set_ready_status(::EReadyCheckStatus value);
  private:
  ::EReadyCheckStatus _internal_ready_status() const;
  void _internal_set_ready_status(::EReadyCheckStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyReadyCheckAcknowledge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int ready_status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventGameDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventGameDetails) */ {
 public:
  inline CMsgLobbyEventGameDetails() : CMsgLobbyEventGameDetails(nullptr) {}
  virtual ~CMsgLobbyEventGameDetails();
  explicit constexpr CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from);
  CMsgLobbyEventGameDetails(CMsgLobbyEventGameDetails&& from) noexcept
    : CMsgLobbyEventGameDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventGameDetails& operator=(const CMsgLobbyEventGameDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventGameDetails& operator=(CMsgLobbyEventGameDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyEventGameDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventGameDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventGameDetails*>(
               &_CMsgLobbyEventGameDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgLobbyEventGameDetails& a, CMsgLobbyEventGameDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventGameDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventGameDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyEventGameDetails* New() const final {
    return CreateMaybeMessage<CMsgLobbyEventGameDetails>(nullptr);
  }

  CMsgLobbyEventGameDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyEventGameDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyEventGameDetails& from);
  void MergeFrom(const CMsgLobbyEventGameDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventGameDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventGameDetails";
  }
  protected:
  explicit CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvDataFieldNumber = 1,
  };
  // optional bytes kv_data = 1;
  bool has_kv_data() const;
  private:
  bool _internal_has_kv_data() const;
  public:
  void clear_kv_data();
  const std::string& kv_data() const;
  void set_kv_data(const std::string& value);
  void set_kv_data(std::string&& value);
  void set_kv_data(const char* value);
  void set_kv_data(const void* value, size_t size);
  std::string* mutable_kv_data();
  std::string* release_kv_data();
  void set_allocated_kv_data(std::string* kv_data);
  private:
  const std::string& _internal_kv_data() const;
  void _internal_set_kv_data(const std::string& value);
  std::string* _internal_mutable_kv_data();
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventGameDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_data_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchMatchmakingStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchMatchmakingStats) */ {
 public:
  inline CMsgMatchMatchmakingStats() : CMsgMatchMatchmakingStats(nullptr) {}
  virtual ~CMsgMatchMatchmakingStats();
  explicit constexpr CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from);
  CMsgMatchMatchmakingStats(CMsgMatchMatchmakingStats&& from) noexcept
    : CMsgMatchMatchmakingStats() {
    *this = ::std::move(from);
  }

  inline CMsgMatchMatchmakingStats& operator=(const CMsgMatchMatchmakingStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchMatchmakingStats& operator=(CMsgMatchMatchmakingStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgMatchMatchmakingStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchMatchmakingStats* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchMatchmakingStats*>(
               &_CMsgMatchMatchmakingStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgMatchMatchmakingStats& a, CMsgMatchMatchmakingStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchMatchmakingStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgMatchMatchmakingStats* New() const final {
    return CreateMaybeMessage<CMsgMatchMatchmakingStats>(nullptr);
  }

  CMsgMatchMatchmakingStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgMatchMatchmakingStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgMatchMatchmakingStats& from);
  void MergeFrom(const CMsgMatchMatchmakingStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchMatchmakingStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchMatchmakingStats";
  }
  protected:
  explicit CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageQueueTimeFieldNumber = 1,
    kMaximumQueueTimeFieldNumber = 2,
    kBehaviorScoreVarianceFieldNumber = 3,
  };
  // optional uint32 average_queue_time = 1;
  bool has_average_queue_time() const;
  private:
  bool _internal_has_average_queue_time() const;
  public:
  void clear_average_queue_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 average_queue_time() const;
  void set_average_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_average_queue_time() const;
  void _internal_set_average_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maximum_queue_time = 2;
  bool has_maximum_queue_time() const;
  private:
  bool _internal_has_maximum_queue_time() const;
  public:
  void clear_maximum_queue_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_queue_time() const;
  void set_maximum_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maximum_queue_time() const;
  void _internal_set_maximum_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  bool has_behavior_score_variance() const;
  private:
  bool _internal_has_behavior_score_variance() const;
  public:
  void clear_behavior_score_variance();
  ::EMatchBehaviorScoreVariance behavior_score_variance() const;
  void set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  private:
  ::EMatchBehaviorScoreVariance _internal_behavior_score_variance() const;
  void _internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchMatchmakingStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 average_queue_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maximum_queue_time_;
  int behavior_score_variance_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData_MvpDatum_MvpAccolade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData.MvpDatum.MvpAccolade) */ {
 public:
  inline CMvpData_MvpDatum_MvpAccolade() : CMvpData_MvpDatum_MvpAccolade(nullptr) {}
  virtual ~CMvpData_MvpDatum_MvpAccolade();
  explicit constexpr CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData_MvpDatum_MvpAccolade(const CMvpData_MvpDatum_MvpAccolade& from);
  CMvpData_MvpDatum_MvpAccolade(CMvpData_MvpDatum_MvpAccolade&& from) noexcept
    : CMvpData_MvpDatum_MvpAccolade() {
    *this = ::std::move(from);
  }

  inline CMvpData_MvpDatum_MvpAccolade& operator=(const CMvpData_MvpDatum_MvpAccolade& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData_MvpDatum_MvpAccolade& operator=(CMvpData_MvpDatum_MvpAccolade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMvpData_MvpDatum_MvpAccolade& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData_MvpDatum_MvpAccolade* internal_default_instance() {
    return reinterpret_cast<const CMvpData_MvpDatum_MvpAccolade*>(
               &_CMvpData_MvpDatum_MvpAccolade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMvpData_MvpDatum_MvpAccolade& a, CMvpData_MvpDatum_MvpAccolade& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData_MvpDatum_MvpAccolade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData_MvpDatum_MvpAccolade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMvpData_MvpDatum_MvpAccolade* New() const final {
    return CreateMaybeMessage<CMvpData_MvpDatum_MvpAccolade>(nullptr);
  }

  CMvpData_MvpDatum_MvpAccolade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMvpData_MvpDatum_MvpAccolade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMvpData_MvpDatum_MvpAccolade& from);
  void MergeFrom(const CMvpData_MvpDatum_MvpAccolade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData_MvpDatum_MvpAccolade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData.MvpDatum.MvpAccolade";
  }
  protected:
  explicit CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType MvpAccoladeType;
  static constexpr MvpAccoladeType kills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kills;
  static constexpr MvpAccoladeType deaths =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_deaths;
  static constexpr MvpAccoladeType assists =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_assists;
  static constexpr MvpAccoladeType net_worth =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_net_worth;
  static constexpr MvpAccoladeType item_value =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_item_value;
  static constexpr MvpAccoladeType support_gold_spent =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_support_gold_spent;
  static constexpr MvpAccoladeType wards_placed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_wards_placed;
  static constexpr MvpAccoladeType dewards =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_dewards;
  static constexpr MvpAccoladeType camps_stacked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_camps_stacked;
  static constexpr MvpAccoladeType last_hits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_last_hits;
  static constexpr MvpAccoladeType denies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_denies;
  static constexpr MvpAccoladeType kKillEaterEvent_Killing_Sprees =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Killing_Sprees;
  static constexpr MvpAccoladeType kKillEaterEvent_Godlike =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Godlike;
  static constexpr MvpAccoladeType kKillEaterEvent_Towers_Destroyed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Towers_Destroyed;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_SunstrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_SunstrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Axe_Culls =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_Culls;
  static constexpr MvpAccoladeType kKillEaterEventType_Axe_BattleHungerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Axe_BattleHungerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_LowHealthKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LowHealthKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_TornadoKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_TornadoKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_DoubleStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_DoubleStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_WarcryAssists =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_WarcryAssists;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_CleaveDoubleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_CleaveDoubleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_TeleportInterrupts =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_TeleportInterrupts;
  static constexpr MvpAccoladeType kKillEaterEventType_Faceless_MultiChrono =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_MultiChrono;
  static constexpr MvpAccoladeType kKillEaterEventType_Faceless_ChronoKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Faceless_ChronoKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_MultiShocks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_MultiShocks;
  static constexpr MvpAccoladeType kKillEaterEventType_RoshanKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_RoshanKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_FingerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_FingerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_SmokedHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_SmokedHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_HeroesRevealedWithDust =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_HeroesRevealedWithDust;
  static constexpr MvpAccoladeType kKillEaterEventType_SkeletonKing_ReincarnationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_ReincarnationKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Skywrath_FlareKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Skywrath_FlareKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_SplitEarthStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_SplitEarthStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_MaxStunArrows =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MaxStunArrows;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_DaggerCrits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerCrits;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_Earthbinds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_Earthbinds;
  static constexpr MvpAccoladeType kKillEaterEventType_Bloodseeker_RuptureKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bloodseeker_RuptureKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Slark_LeashedEnemies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_LeashedEnemies;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_FountainGlimpses =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_FountainGlimpses;
  static constexpr MvpAccoladeType kKillEaterEventType_Rubick_SpellsStolen =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_SpellsStolen;
  static constexpr MvpAccoladeType kKillEaterEventType_Rubick_UltimatesStolen =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Rubick_UltimatesStolen;
  static constexpr MvpAccoladeType kKillEaterEventType_Doom_EnemiesDoomed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_EnemiesDoomed;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_Purifications =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_Purifications;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_AlliesRepelled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_AlliesRepelled;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_EnemiesRepelled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_EnemiesRepelled;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_FiveHeroFatalBonds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FiveHeroFatalBonds;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_FrostbittenEnemies =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FrostbittenEnemies;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_CrystalNovas =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_CrystalNovas;
  static constexpr MvpAccoladeType kKillEaterEventType_Kunkka_DoubleHeroTorrents =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_DoubleHeroTorrents;
  static constexpr MvpAccoladeType kKillEaterEventType_Kunkka_TripleHeroGhostShips =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Kunkka_TripleHeroGhostShips;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_EnemiesEnsnared =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_EnemiesEnsnared;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_TripleHeroRipTides =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_TripleHeroRipTides;
  static constexpr MvpAccoladeType kKillEaterEventType_Lycan_KillsDuringShapeshift =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lycan_KillsDuringShapeshift;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_DismemberKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_DismemberKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_EnemyHeroesHooked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_EnemyHeroesHooked;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_HookKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_HookKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_EnemiesSilenced =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_EnemiesSilenced;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_MultiHeroSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_MultiHeroSilences;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_SilencedKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_SilencedKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_FrostArrowKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_FrostArrowKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_KillsInDragonForm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_KillsInDragonForm;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_BreatheFireKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_BreatheFireKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DragonKnight_SplashKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DragonKnight_SplashKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_CaskStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_CaskStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MaledictKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MaledictKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MultiHeroMaledicts =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroMaledicts;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_DeathWardKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_DeathWardKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_ThunderStrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThunderStrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_HeroesGlimpsed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_HeroesGlimpsed;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_FreezingFieldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_FreezingFieldKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_EnemiesPetrified =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_EnemiesPetrified;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_FatalBondsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_FatalBondsKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_GolemKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_GolemKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_WalrusPunches =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunches;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_SnowballStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_SnowballStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_FissureStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_3HeroEchoslams =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_3HeroEchoslams;
  static constexpr MvpAccoladeType kKillEaterEventType_SandKing_BurrowstrikeStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_BurrowstrikeStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_SandKing_EpicenterKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SandKing_EpicenterKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkywrathMage_AncientSealKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_AncientSealKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkywrathMage_ConcussiveShotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkywrathMage_ConcussiveShotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Luna_LucentBeamKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_LucentBeamKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Luna_EclipseKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Luna_EclipseKills;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_IlluminateKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_IlluminateKills;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled;
  static constexpr MvpAccoladeType kKillEaterEventType_LegionCommander_DuelsWon =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LegionCommander_DuelsWon;
  static constexpr MvpAccoladeType kKillEaterEventType_Beastmaster_RoarKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Beastmaster_RoarMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Beastmaster_RoarMultiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_FocusFireBuildings =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_FocusFireBuildings;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_PowershotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_PowershotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_DaggerLastHits =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_DaggerLastHits;
  static constexpr MvpAccoladeType kKillEaterEventType_PhantomAssassin_PhantomStrikeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_PhantomAssassin_PhantomStrikeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_CryptSwarmKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_CryptSwarmKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismBuildingKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismBuildingKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_MultiHeroSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_MultiHeroSilences;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_MistCoilKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_MistCoilHealed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_MistCoilHealed;
  static constexpr MvpAccoladeType kKillEaterEventType_Abaddon_AphoticShieldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Abaddon_AphoticShieldKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostTripleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostTripleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostMultiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lich_ChainFrostBounces =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lich_ChainFrostBounces;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_EnragedKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EnragedKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Ursa_EarthshockKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Ursa_EarthshockKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LagunaBladeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_DragonSlaveKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_DragonSlaveKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LightStrikeArrayStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeArrayStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_Barracks_Destroyed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Barracks_Destroyed;
  static constexpr MvpAccoladeType kKillEaterEvent_TemplarAssassin_MeldKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_MeldKills;
  static constexpr MvpAccoladeType kKillEaterEvent_TemplarAssassin_HeroesSlowed =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_TemplarAssassin_HeroesSlowed;
  static constexpr MvpAccoladeType kKillEaterEvent_Sniper_AssassinationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_AssassinationKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Sniper_HeadshotStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Sniper_HeadshotStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_EarthSpirit_SmashStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_SmashStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_EarthSpirit_GripSilences =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EarthSpirit_GripSilences;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowShaman_ShackleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_ShackleKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowShaman_HexKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowShaman_HexKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_EnemiesStomped =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_EnemiesStomped;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_DoubleEdgeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_DoubleEdgeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Centaur_ReturnKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Centaur_ReturnKills;
  static constexpr MvpAccoladeType kKillEaterEvent_EmberSpirit_EnemiesChained =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_EnemiesChained;
  static constexpr MvpAccoladeType kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Puck_OrbKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Puck_OrbKills;
  static constexpr MvpAccoladeType kKillEaterEvent_VengefulSpirit_EnemiesStunned =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_VengefulSpirit_EnemiesStunned;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_RageKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_RageKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_OpenWoundsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_OpenWoundsKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Lifestealer_InfestKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Lifestealer_InfestKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ElderTitan_SpiritKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_SpiritKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ElderTitan_GoodStomps =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ElderTitan_GoodStomps;
  static constexpr MvpAccoladeType kKillEaterEvent_Clockwerk_RocketKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_RocketKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Clockwerk_BlindRocketKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Clockwerk_BlindRocketKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_BallKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_BallKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_DoubleRemnantKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_DoubleRemnantKills;
  static constexpr MvpAccoladeType kKillEaterEvent_StormSpirit_VortexKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_StormSpirit_VortexKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Tinker_DoubleMissileKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_DoubleMissileKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Tinker_LaserKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Tinker_LaserKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_SuicideKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_SuicideKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_LandMineKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_LandMineKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_StatisTrapStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_StatisTrapStuns;
  static constexpr MvpAccoladeType kKillEaterEvent_Techies_RemoteMineKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Techies_RemoteMineKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_TripleRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_TripleRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_RequiemMultiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_RequiemMultiKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_QRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_QRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_WRazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_WRazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_ShadowFiend_ERazeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_ShadowFiend_ERazeKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Oracle_FatesEdictKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FatesEdictKills;
  static constexpr MvpAccoladeType kKillEaterEvent_Oracle_FalsePromiseSaves =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Oracle_FalsePromiseSaves;
  static constexpr MvpAccoladeType kKillEaterEvent_Juggernaut_OmnislashKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEvent_Juggernaut_OmnislashKills;
  static constexpr MvpAccoladeType kKillEaterEventType_SkeletonKing_SkeletonHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SkeletonKing_SkeletonHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DarkWillow_CursedCrownTripleStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DarkWillow_CursedCrownTripleStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_ShallowGraveSaves =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShallowGraveSaves;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_PoisonTouchKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_PoisonTouchKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ThreeManMeks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeManMeks;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_PoisonAttackKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_PoisonAttackKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_CorrosiveSkinKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_CorrosiveSkinKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ThreeHeroVeils =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ThreeHeroVeils;
  static constexpr MvpAccoladeType kKillEaterEventType_Viper_KillsDuringViperStrike =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Viper_KillsDuringViperStrike;
  static constexpr MvpAccoladeType kKillEaterEventType_SolarCrestKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_SolarCrestKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tiny_TreeThrowKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tiny_TreeThrowKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_BackstabKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_BackstabKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Terrorblade_MetamorphosisKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Terrorblade_MetamorphosisKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_GreatFingerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_GreatFingerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_SpellsBlockedWithAghanims =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithAghanims;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_ThreeManManaVoids =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_ThreeManManaVoids;
  static constexpr MvpAccoladeType kKillEaterEventType_ArcWarden_TempestDoubleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_TempestDoubleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ArcWarden_SparkWraithKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ArcWarden_SparkWraithKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Bane_BrainSapKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_BrainSapKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Bane_FiendsGripKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bane_FiendsGripKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Batrider_TripleHeroFlamebreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_TripleHeroFlamebreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_Batrider_DoubleHeroLassoes =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Batrider_DoubleHeroLassoes;
  static constexpr MvpAccoladeType kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit;
  static constexpr MvpAccoladeType kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks;
  static constexpr MvpAccoladeType kKillEaterEventType_Bristleback_TripleHeroNasalGoo =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Bristleback_TripleHeroNasalGoo;
  static constexpr MvpAccoladeType kKillEaterEventType_Broodmother_SpiderlingHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_SpiderlingHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Broodmother_KillsInsideWeb =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Broodmother_KillsInsideWeb;
  static constexpr MvpAccoladeType kKillEaterEventType_Centaur_ThreeHeroStampede =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Centaur_ThreeHeroStampede;
  static constexpr MvpAccoladeType kKillEaterEventType_ChaosKnight_RealityRiftKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ChaosKnight_RealityRiftKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Chen_KillsWithPenitence =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Chen_KillsWithPenitence;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas;
  static constexpr MvpAccoladeType kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields;
  static constexpr MvpAccoladeType kKillEaterEventType_Dazzle_ShadowWaveKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Dazzle_ShadowWaveKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_SiphonKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_SiphonKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls;
  static constexpr MvpAccoladeType kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Doom_InfernalBladeBurnKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Doom_InfernalBladeBurnKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_EmberSpirit_RemnantKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_RemnantKills;
  static constexpr MvpAccoladeType kKillEaterEventType_EmberSpirit_SleightOfFistKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_EmberSpirit_SleightOfFistKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos;
  static constexpr MvpAccoladeType kKillEaterEventType_Enigma_ThreeManBlackHoles =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Enigma_ThreeManBlackHoles;
  static constexpr MvpAccoladeType kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_HomingMissileKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_HomingMissileKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Gyrocopter_RocketBarrageKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Gyrocopter_RocketBarrageKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Huskar_KillsDuringLifeBreak =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_KillsDuringLifeBreak;
  static constexpr MvpAccoladeType kKillEaterEventType_Huskar_BurningSpearKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Huskar_BurningSpearKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_MultiHeroIceWall =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroIceWall;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_ThreeHeroEMP =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroEMP;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast;
  static constexpr MvpAccoladeType kKillEaterEventType_Invoker_MultiHeroChaosMeteor =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Invoker_MultiHeroChaosMeteor;
  static constexpr MvpAccoladeType kKillEaterEventType_Jakiro_MultiHeroDualBreath =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_MultiHeroDualBreath;
  static constexpr MvpAccoladeType kKillEaterEventType_Jakiro_IcePathMacropyreCombos =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Jakiro_IcePathMacropyreCombos;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_PulseNovaKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_PulseNovaKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Leshrac_ThreeHeroLightningStorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Leshrac_ThreeHeroLightningStorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Lion_ThreeHeroFingerOfDeath =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lion_ThreeHeroFingerOfDeath;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_PoofKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_PoofKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Meepo_MultiHeroEarthbinds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Meepo_MultiHeroEarthbinds;
  static constexpr MvpAccoladeType kKillEaterEventType_NightStalker_NighttimeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_NighttimeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Morphling_KillsDuringReplicate =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Morphling_KillsDuringReplicate;
  static constexpr MvpAccoladeType kKillEaterEventType_OgreMagi_FireblastKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_FireblastKills;
  static constexpr MvpAccoladeType kKillEaterEventType_OgreMagi_IgniteKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_OgreMagi_IgniteKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DominatingKillStreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DominatingKillStreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_MegaKillStreaks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_MegaKillStreaks;
  static constexpr MvpAccoladeType kKillEaterEventType_Alchemist_AghanimsGiven =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Alchemist_AghanimsGiven;
  static constexpr MvpAccoladeType kKillEaterEventType_VeilsLeadingToKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VeilsLeadingToKills;
  static constexpr MvpAccoladeType kKillEaterEventType_DustLeadingToKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_DustLeadingToKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Weaver_ShukuchiKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Weaver_ShukuchiKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Windrunner_ShackleFocusFireKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Windrunner_ShackleFocusFireKills;
  static constexpr MvpAccoladeType kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tusk_WalrusPunchKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tusk_WalrusPunchKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Tinker_MultiHeroLasers =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Tinker_MultiHeroLasers;
  static constexpr MvpAccoladeType kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades;
  static constexpr MvpAccoladeType kKillEaterEventType_Sven_KillsDuringGodsStrength =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sven_KillsDuringGodsStrength;
  static constexpr MvpAccoladeType kKillEaterEventType_Sniper_ThreeHeroShrapnels =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Sniper_ThreeHeroShrapnels;
  static constexpr MvpAccoladeType kKillEaterEventType_Slark_KillsDuringShadowDance =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Slark_KillsDuringShadowDance;
  static constexpr MvpAccoladeType kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks;
  static constexpr MvpAccoladeType kKillEaterEventType_ShadowShaman_SerpentWardShackleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ShadowShaman_SerpentWardShackleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade;
  static constexpr MvpAccoladeType kKillEaterEventType_Razor_EyeOfTheStormKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Razor_EyeOfTheStormKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pugna_LifeDrainKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pugna_LifeDrainKills;
  static constexpr MvpAccoladeType kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Oracle_MultiHeroFortunesEnd =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Oracle_MultiHeroFortunesEnd;
  static constexpr MvpAccoladeType kKillEaterEventType_Omniknight_PurificationKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Omniknight_PurificationKills;
  static constexpr MvpAccoladeType kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear;
  static constexpr MvpAccoladeType kKillEaterEventType_Warlock_ThreeHeroFatalBonds =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Warlock_ThreeHeroFatalBonds;
  static constexpr MvpAccoladeType kKillEaterEventType_Riki_TricksOfTheTradeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Riki_TricksOfTheTradeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_AftershockHits10 =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_AftershockHits10;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_5HeroEchoslams =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_5HeroEchoslams;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LagunaBladeHeroKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LagunaBladeHeroKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Lina_LightStrikeHeroStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Lina_LightStrikeHeroStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_FissureMultiStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_FissureMultiStuns;
  static constexpr MvpAccoladeType kKillEaterEventType_Earthshaker_TotemKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Earthshaker_TotemKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Pangolier_SwashbuckleKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_SwashbuckleKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Furion_EnemyHeroesTrapped =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Furion_EnemyHeroesTrapped;
  static constexpr MvpAccoladeType kKillEaterEventType_Pangolier_HeartpiercerKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Pangolier_HeartpiercerKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_MultiHeroStoneGaze =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_MultiHeroStoneGaze;
  static constexpr MvpAccoladeType kKillEaterEventType_Medusa_SplitShotKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Medusa_SplitShotKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_MultiHeroStarstorm =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_MultiHeroStarstorm;
  static constexpr MvpAccoladeType kKillEaterEventType_Mirana_KillsFromMoonlightShadow =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mirana_KillsFromMoonlightShadow;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_MultiHeroSkewers =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroSkewers;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_MultiHeroReversePolarity =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_MultiHeroReversePolarity;
  static constexpr MvpAccoladeType kKillEaterEventType_Magnus_HeroesSlowedWithShockwave =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Magnus_HeroesSlowedWithShockwave;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_MultiHeroSong =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_MultiHeroSong;
  static constexpr MvpAccoladeType kKillEaterEventType_NagaSiren_AlliesHealedBySong =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_NagaSiren_AlliesHealedBySong;
  static constexpr MvpAccoladeType kKillEaterEventType_LoneDruid_MultiHeroRoar =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_MultiHeroRoar;
  static constexpr MvpAccoladeType kKillEaterEventType_LoneDruid_BattleCryKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_LoneDruid_BattleCryKills;
  static constexpr MvpAccoladeType kKillEaterEventType_WinterWyvern_ThreeHeroCurses =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_WinterWyvern_ThreeHeroCurses;
  static constexpr MvpAccoladeType kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_EnemiesKilledInArena =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_EnemiesKilledInArena;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_MultiHeroGodsRebuke =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_MultiHeroGodsRebuke;
  static constexpr MvpAccoladeType kKillEaterEventType_Mars_GodsRebukeKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Mars_GodsRebukeKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Snapfire_LizardBlobsKills =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_LizardBlobsKills;
  static constexpr MvpAccoladeType kKillEaterEventType_Snapfire_TwoHeroCookieStuns =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_kKillEaterEventType_Snapfire_TwoHeroCookieStuns;
  static constexpr MvpAccoladeType Custom_KillStreak =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Custom_KillStreak;
  static inline bool MvpAccoladeType_IsValid(int value) {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(value);
  }
  static constexpr MvpAccoladeType MvpAccoladeType_MIN =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MIN;
  static constexpr MvpAccoladeType MvpAccoladeType_MAX =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_MAX;
  static constexpr int MvpAccoladeType_ARRAYSIZE =
    CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_MvpAccoladeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MvpAccoladeType_descriptor() {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
  }
  template<typename T>
  static inline const std::string& MvpAccoladeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MvpAccoladeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MvpAccoladeType_Name.");
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Name(enum_t_value);
  }
  static inline bool MvpAccoladeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MvpAccoladeType* value) {
    return CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional float detail_value = 2;
  bool has_detail_value() const;
  private:
  bool _internal_has_detail_value() const;
  public:
  void clear_detail_value();
  float detail_value() const;
  void set_detail_value(float value);
  private:
  float _internal_detail_value() const;
  void _internal_set_detail_value(float value);
  public:

  // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType type() const;
  void set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value);
  private:
  ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType _internal_type() const;
  void _internal_set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value);
  public:

  // @@protoc_insertion_point(class_scope:CMvpData.MvpDatum.MvpAccolade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float detail_value_;
  int type_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData_MvpDatum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData.MvpDatum) */ {
 public:
  inline CMvpData_MvpDatum() : CMvpData_MvpDatum(nullptr) {}
  virtual ~CMvpData_MvpDatum();
  explicit constexpr CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData_MvpDatum(const CMvpData_MvpDatum& from);
  CMvpData_MvpDatum(CMvpData_MvpDatum&& from) noexcept
    : CMvpData_MvpDatum() {
    *this = ::std::move(from);
  }

  inline CMvpData_MvpDatum& operator=(const CMvpData_MvpDatum& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData_MvpDatum& operator=(CMvpData_MvpDatum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMvpData_MvpDatum& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData_MvpDatum* internal_default_instance() {
    return reinterpret_cast<const CMvpData_MvpDatum*>(
               &_CMvpData_MvpDatum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMvpData_MvpDatum& a, CMvpData_MvpDatum& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData_MvpDatum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData_MvpDatum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMvpData_MvpDatum* New() const final {
    return CreateMaybeMessage<CMvpData_MvpDatum>(nullptr);
  }

  CMvpData_MvpDatum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMvpData_MvpDatum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMvpData_MvpDatum& from);
  void MergeFrom(const CMvpData_MvpDatum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData_MvpDatum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData.MvpDatum";
  }
  protected:
  explicit CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum_MvpAccolade MvpAccolade;

  // accessors -------------------------------------------------------

  enum : int {
    kAccoladesFieldNumber = 2,
    kSlotFieldNumber = 1,
    kAccountIdFieldNumber = 3,
  };
  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  int accolades_size() const;
  private:
  int _internal_accolades_size() const;
  public:
  void clear_accolades();
  ::CMvpData_MvpDatum_MvpAccolade* mutable_accolades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >*
      mutable_accolades();
  private:
  const ::CMvpData_MvpDatum_MvpAccolade& _internal_accolades(int index) const;
  ::CMvpData_MvpDatum_MvpAccolade* _internal_add_accolades();
  public:
  const ::CMvpData_MvpDatum_MvpAccolade& accolades(int index) const;
  ::CMvpData_MvpDatum_MvpAccolade* add_accolades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >&
      accolades() const;

  // optional uint32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMvpData.MvpDatum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade > accolades_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMvpData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMvpData) */ {
 public:
  inline CMvpData() : CMvpData(nullptr) {}
  virtual ~CMvpData();
  explicit constexpr CMvpData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMvpData(const CMvpData& from);
  CMvpData(CMvpData&& from) noexcept
    : CMvpData() {
    *this = ::std::move(from);
  }

  inline CMvpData& operator=(const CMvpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMvpData& operator=(CMvpData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMvpData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMvpData* internal_default_instance() {
    return reinterpret_cast<const CMvpData*>(
               &_CMvpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMvpData& a, CMvpData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMvpData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMvpData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMvpData* New() const final {
    return CreateMaybeMessage<CMvpData>(nullptr);
  }

  CMvpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMvpData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMvpData& from);
  void MergeFrom(const CMvpData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMvpData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMvpData";
  }
  protected:
  explicit CMvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMvpData_MvpDatum MvpDatum;

  // accessors -------------------------------------------------------

  enum : int {
    kMvpsFieldNumber = 1,
  };
  // repeated .CMvpData.MvpDatum mvps = 1;
  int mvps_size() const;
  private:
  int _internal_mvps_size() const;
  public:
  void clear_mvps();
  ::CMvpData_MvpDatum* mutable_mvps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >*
      mutable_mvps();
  private:
  const ::CMvpData_MvpDatum& _internal_mvps(int index) const;
  ::CMvpData_MvpDatum* _internal_add_mvps();
  public:
  const ::CMvpData_MvpDatum& mvps(int index) const;
  ::CMvpData_MvpDatum* add_mvps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >&
      mvps() const;

  // @@protoc_insertion_point(class_scope:CMvpData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum > mvps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSODOTAPartyMember

// optional bool is_coach = 2;
inline bool CSODOTAPartyMember::_internal_has_is_coach() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_coach() const {
  return _internal_has_is_coach();
}
inline void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSODOTAPartyMember::_internal_is_coach() const {
  return is_coach_;
}
inline bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_coach)
  return _internal_is_coach();
}
inline void CSODOTAPartyMember::_internal_set_is_coach(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_coach_ = value;
}
inline void CSODOTAPartyMember::set_is_coach(bool value) {
  _internal_set_is_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_coach)
}

// repeated uint32 region_ping_codes = 4 [packed = true];
inline int CSODOTAPartyMember::_internal_region_ping_codes_size() const {
  return region_ping_codes_.size();
}
inline int CSODOTAPartyMember::region_ping_codes_size() const {
  return _internal_region_ping_codes_size();
}
inline void CSODOTAPartyMember::clear_region_ping_codes() {
  region_ping_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_region_ping_codes(int index) const {
  return region_ping_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::region_ping_codes(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_codes)
  return _internal_region_ping_codes(index);
}
inline void CSODOTAPartyMember::set_region_ping_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  region_ping_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_codes)
}
inline void CSODOTAPartyMember::_internal_add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  region_ping_codes_.Add(value);
}
inline void CSODOTAPartyMember::add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_region_ping_codes(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTAPartyMember::_internal_region_ping_codes() const {
  return region_ping_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTAPartyMember::region_ping_codes() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_codes)
  return _internal_region_ping_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTAPartyMember::_internal_mutable_region_ping_codes() {
  return &region_ping_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTAPartyMember::mutable_region_ping_codes() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_codes)
  return _internal_mutable_region_ping_codes();
}

// repeated uint32 region_ping_times = 5 [packed = true];
inline int CSODOTAPartyMember::_internal_region_ping_times_size() const {
  return region_ping_times_.size();
}
inline int CSODOTAPartyMember::region_ping_times_size() const {
  return _internal_region_ping_times_size();
}
inline void CSODOTAPartyMember::clear_region_ping_times() {
  region_ping_times_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_region_ping_times(int index) const {
  return region_ping_times_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::region_ping_times(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_times)
  return _internal_region_ping_times(index);
}
inline void CSODOTAPartyMember::set_region_ping_times(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  region_ping_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_times)
}
inline void CSODOTAPartyMember::_internal_add_region_ping_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  region_ping_times_.Add(value);
}
inline void CSODOTAPartyMember::add_region_ping_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_region_ping_times(value);
  // @@protoc_insertion_point(field_add:CSODOTAPartyMember.region_ping_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTAPartyMember::_internal_region_ping_times() const {
  return region_ping_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTAPartyMember::region_ping_times() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyMember.region_ping_times)
  return _internal_region_ping_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTAPartyMember::_internal_mutable_region_ping_times() {
  return &region_ping_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTAPartyMember::mutable_region_ping_times() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyMember.region_ping_times)
  return _internal_mutable_region_ping_times();
}

// optional uint32 region_ping_failed_bitmask = 6;
inline bool CSODOTAPartyMember::_internal_has_region_ping_failed_bitmask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_region_ping_failed_bitmask() const {
  return _internal_has_region_ping_failed_bitmask();
}
inline void CSODOTAPartyMember::clear_region_ping_failed_bitmask() {
  region_ping_failed_bitmask_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_region_ping_failed_bitmask() const {
  return region_ping_failed_bitmask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.region_ping_failed_bitmask)
  return _internal_region_ping_failed_bitmask();
}
inline void CSODOTAPartyMember::_internal_set_region_ping_failed_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  region_ping_failed_bitmask_ = value;
}
inline void CSODOTAPartyMember::set_region_ping_failed_bitmask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_ping_failed_bitmask(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.region_ping_failed_bitmask)
}

// optional bool is_plus_subscriber = 10;
inline bool CSODOTAPartyMember::_internal_has_is_plus_subscriber() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CSODOTAPartyMember::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSODOTAPartyMember::_internal_is_plus_subscriber() const {
  return is_plus_subscriber_;
}
inline bool CSODOTAPartyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CSODOTAPartyMember::_internal_set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_plus_subscriber_ = value;
}
inline void CSODOTAPartyMember::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_plus_subscriber)
}

// optional uint32 tourney_skill_level = 7;
inline bool CSODOTAPartyMember::_internal_has_tourney_skill_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_skill_level() const {
  return _internal_has_tourney_skill_level();
}
inline void CSODOTAPartyMember::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_tourney_skill_level() const {
  return tourney_skill_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_skill_level)
  return _internal_tourney_skill_level();
}
inline void CSODOTAPartyMember::_internal_set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tourney_skill_level_ = value;
}
inline void CSODOTAPartyMember::set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_skill_level)
}

// optional uint32 tourney_buyin = 8;
inline bool CSODOTAPartyMember::_internal_has_tourney_buyin() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_buyin() const {
  return _internal_has_tourney_buyin();
}
inline void CSODOTAPartyMember::clear_tourney_buyin() {
  tourney_buyin_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_tourney_buyin() const {
  return tourney_buyin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::tourney_buyin() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_buyin)
  return _internal_tourney_buyin();
}
inline void CSODOTAPartyMember::_internal_set_tourney_buyin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tourney_buyin_ = value;
}
inline void CSODOTAPartyMember::set_tourney_buyin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_buyin(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_buyin)
}

// optional uint32 tourney_prevent_until = 9;
inline bool CSODOTAPartyMember::_internal_has_tourney_prevent_until() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_tourney_prevent_until() const {
  return _internal_has_tourney_prevent_until();
}
inline void CSODOTAPartyMember::clear_tourney_prevent_until() {
  tourney_prevent_until_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_tourney_prevent_until() const {
  return tourney_prevent_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::tourney_prevent_until() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.tourney_prevent_until)
  return _internal_tourney_prevent_until();
}
inline void CSODOTAPartyMember::_internal_set_tourney_prevent_until(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tourney_prevent_until_ = value;
}
inline void CSODOTAPartyMember::set_tourney_prevent_until(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_prevent_until(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.tourney_prevent_until)
}

// optional bool mm_data_valid = 13;
inline bool CSODOTAPartyMember::_internal_has_mm_data_valid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_mm_data_valid() const {
  return _internal_has_mm_data_valid();
}
inline void CSODOTAPartyMember::clear_mm_data_valid() {
  mm_data_valid_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSODOTAPartyMember::_internal_mm_data_valid() const {
  return mm_data_valid_;
}
inline bool CSODOTAPartyMember::mm_data_valid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.mm_data_valid)
  return _internal_mm_data_valid();
}
inline void CSODOTAPartyMember::_internal_set_mm_data_valid(bool value) {
  _has_bits_[0] |= 0x00000040u;
  mm_data_valid_ = value;
}
inline void CSODOTAPartyMember::set_mm_data_valid(bool value) {
  _internal_set_mm_data_valid(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.mm_data_valid)
}

// optional uint32 lane_selection_flags = 11;
inline bool CSODOTAPartyMember::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CSODOTAPartyMember::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CSODOTAPartyMember::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  lane_selection_flags_ = value;
}
inline void CSODOTAPartyMember::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.lane_selection_flags)
}

// optional bool high_priority_disabled = 14;
inline bool CSODOTAPartyMember::_internal_has_high_priority_disabled() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_high_priority_disabled() const {
  return _internal_has_high_priority_disabled();
}
inline void CSODOTAPartyMember::clear_high_priority_disabled() {
  high_priority_disabled_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSODOTAPartyMember::_internal_high_priority_disabled() const {
  return high_priority_disabled_;
}
inline bool CSODOTAPartyMember::high_priority_disabled() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.high_priority_disabled)
  return _internal_high_priority_disabled();
}
inline void CSODOTAPartyMember::_internal_set_high_priority_disabled(bool value) {
  _has_bits_[0] |= 0x00000080u;
  high_priority_disabled_ = value;
}
inline void CSODOTAPartyMember::set_high_priority_disabled(bool value) {
  _internal_set_high_priority_disabled(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.high_priority_disabled)
}

// optional bool has_hp_resource = 15;
inline bool CSODOTAPartyMember::_internal_has_has_hp_resource() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_has_hp_resource() const {
  return _internal_has_has_hp_resource();
}
inline void CSODOTAPartyMember::clear_has_hp_resource() {
  has_hp_resource_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSODOTAPartyMember::_internal_has_hp_resource() const {
  return has_hp_resource_;
}
inline bool CSODOTAPartyMember::has_hp_resource() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.has_hp_resource)
  return _internal_has_hp_resource();
}
inline void CSODOTAPartyMember::_internal_set_has_hp_resource(bool value) {
  _has_bits_[0] |= 0x00000200u;
  has_hp_resource_ = value;
}
inline void CSODOTAPartyMember::set_has_hp_resource(bool value) {
  _internal_set_has_hp_resource(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.has_hp_resource)
}

// optional bool joined_from_partyfinder = 12;
inline bool CSODOTAPartyMember::_internal_has_joined_from_partyfinder() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_joined_from_partyfinder() const {
  return _internal_has_joined_from_partyfinder();
}
inline void CSODOTAPartyMember::clear_joined_from_partyfinder() {
  joined_from_partyfinder_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSODOTAPartyMember::_internal_joined_from_partyfinder() const {
  return joined_from_partyfinder_;
}
inline bool CSODOTAPartyMember::joined_from_partyfinder() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.joined_from_partyfinder)
  return _internal_joined_from_partyfinder();
}
inline void CSODOTAPartyMember::_internal_set_joined_from_partyfinder(bool value) {
  _has_bits_[0] |= 0x00000400u;
  joined_from_partyfinder_ = value;
}
inline void CSODOTAPartyMember::set_joined_from_partyfinder(bool value) {
  _internal_set_joined_from_partyfinder(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.joined_from_partyfinder)
}

// optional bool is_steam_china = 16;
inline bool CSODOTAPartyMember::_internal_has_is_steam_china() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAPartyMember::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTAPartyMember::clear_is_steam_china() {
  is_steam_china_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CSODOTAPartyMember::_internal_is_steam_china() const {
  return is_steam_china_;
}
inline bool CSODOTAPartyMember::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyMember.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTAPartyMember::_internal_set_is_steam_china(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_steam_china_ = value;
}
inline void CSODOTAPartyMember::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyMember.is_steam_china)
}

// -------------------------------------------------------------------

// CSODOTAParty

// optional uint64 party_id = 1 [(.key_field) = true];
inline bool CSODOTAParty::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_id() const {
  return _internal_has_party_id();
}
inline void CSODOTAParty::clear_party_id() {
  party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_id)
  return _internal_party_id();
}
inline void CSODOTAParty::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  party_id_ = value;
}
inline void CSODOTAParty::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
inline bool CSODOTAParty::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAParty::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void CSODOTAParty::clear_leader_id() {
  leader_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.leader_id)
  return _internal_leader_id();
}
inline void CSODOTAParty::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  leader_id_ = value;
}
inline void CSODOTAParty::set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
inline int CSODOTAParty::_internal_member_ids_size() const {
  return member_ids_.size();
}
inline int CSODOTAParty::member_ids_size() const {
  return _internal_member_ids_size();
}
inline void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::_internal_member_ids(int index) const {
  return member_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.member_ids)
  return _internal_member_ids(index);
}
inline void CSODOTAParty::set_member_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.member_ids)
}
inline void CSODOTAParty::_internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  member_ids_.Add(value);
}
inline void CSODOTAParty::add_member_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_member_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTAParty.member_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTAParty::_internal_member_ids() const {
  return member_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.member_ids)
  return _internal_member_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTAParty::_internal_mutable_member_ids() {
  return &member_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.member_ids)
  return _internal_mutable_member_ids();
}

// optional uint32 game_modes = 4;
inline bool CSODOTAParty::_internal_has_game_modes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAParty::has_game_modes() const {
  return _internal_has_game_modes();
}
inline void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_game_modes() const {
  return game_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.game_modes)
  return _internal_game_modes();
}
inline void CSODOTAParty::_internal_set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_modes_ = value;
}
inline void CSODOTAParty::set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_modes(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.game_modes)
}

// optional .CSODOTAParty.State state = 6 [default = UI];
inline bool CSODOTAParty::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAParty::has_state() const {
  return _internal_has_state();
}
inline void CSODOTAParty::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::CSODOTAParty_State CSODOTAParty::_internal_state() const {
  return static_cast< ::CSODOTAParty_State >(state_);
}
inline ::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.state)
  return _internal_state();
}
inline void CSODOTAParty::_internal_set_state(::CSODOTAParty_State value) {
  assert(::CSODOTAParty_State_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  state_ = value;
}
inline void CSODOTAParty::set_state(::CSODOTAParty_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
inline bool CSODOTAParty::_internal_has_effective_started_matchmaking_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return _internal_has_effective_started_matchmaking_time();
}
inline void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_effective_started_matchmaking_time() const {
  return effective_started_matchmaking_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.effective_started_matchmaking_time)
  return _internal_effective_started_matchmaking_time();
}
inline void CSODOTAParty::_internal_set_effective_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  effective_started_matchmaking_time_ = value;
}
inline void CSODOTAParty::set_effective_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_effective_started_matchmaking_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
inline bool CSODOTAParty::_internal_has_raw_started_matchmaking_time() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return _internal_has_raw_started_matchmaking_time();
}
inline void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_raw_started_matchmaking_time() const {
  return raw_started_matchmaking_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.raw_started_matchmaking_time)
  return _internal_raw_started_matchmaking_time();
}
inline void CSODOTAParty::_internal_set_raw_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  raw_started_matchmaking_time_ = value;
}
inline void CSODOTAParty::set_raw_started_matchmaking_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_raw_started_matchmaking_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
inline bool CSODOTAParty::_internal_has_attempt_start_time() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_attempt_start_time() const {
  return _internal_has_attempt_start_time();
}
inline void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_attempt_start_time() const {
  return attempt_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_start_time)
  return _internal_attempt_start_time();
}
inline void CSODOTAParty::_internal_set_attempt_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  attempt_start_time_ = value;
}
inline void CSODOTAParty::set_attempt_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attempt_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
inline bool CSODOTAParty::_internal_has_attempt_num() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_attempt_num() const {
  return _internal_has_attempt_num();
}
inline void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_attempt_num() const {
  return attempt_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.attempt_num)
  return _internal_attempt_num();
}
inline void CSODOTAParty::_internal_set_attempt_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  attempt_num_ = value;
}
inline void CSODOTAParty::set_attempt_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_attempt_num(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
inline bool CSODOTAParty::_internal_has_matchgroups() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchgroups() const {
  return _internal_has_matchgroups();
}
inline void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_matchgroups() const {
  return matchgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchgroups)
  return _internal_matchgroups();
}
inline void CSODOTAParty::_internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  matchgroups_ = value;
}
inline void CSODOTAParty::set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchgroups(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
inline bool CSODOTAParty::_internal_has_low_priority_account_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAParty::has_low_priority_account_id() const {
  return _internal_has_low_priority_account_id();
}
inline void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_low_priority_account_id() const {
  return low_priority_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_account_id)
  return _internal_low_priority_account_id();
}
inline void CSODOTAParty::_internal_set_low_priority_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  low_priority_account_id_ = value;
}
inline void CSODOTAParty::set_low_priority_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_low_priority_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_account_id)
}

// optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTAParty::_internal_has_match_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_type() const {
  return _internal_has_match_type();
}
inline void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::MatchType CSODOTAParty::_internal_match_type() const {
  return static_cast< ::MatchType >(match_type_);
}
inline ::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_type)
  return _internal_match_type();
}
inline void CSODOTAParty::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  match_type_ = value;
}
inline void CSODOTAParty::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_type)
}

// optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CSODOTAParty::_internal_has_bot_difficulty() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAParty::has_bot_difficulty() const {
  return _internal_has_bot_difficulty();
}
inline void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::DOTABotDifficulty CSODOTAParty::_internal_bot_difficulty() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline ::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_difficulty)
  return _internal_bot_difficulty();
}
inline void CSODOTAParty::_internal_set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  bot_difficulty_ = value;
}
inline void CSODOTAParty::set_bot_difficulty(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
inline bool CSODOTAParty::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_id() const {
  return _internal_has_team_id();
}
inline void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_id)
  return _internal_team_id();
}
inline void CSODOTAParty::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  team_id_ = value;
}
inline void CSODOTAParty::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_id)
}

// optional string team_name = 51;
inline bool CSODOTAParty::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_name() const {
  return _internal_has_team_name();
}
inline void CSODOTAParty::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAParty::team_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_name)
  return _internal_team_name();
}
inline void CSODOTAParty::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_name)
}
inline std::string* CSODOTAParty::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CSODOTAParty::_internal_team_name() const {
  return team_name_.Get();
}
inline void CSODOTAParty::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTAParty::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAParty.team_name)
}
inline void CSODOTAParty::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTAParty.team_name)
}
inline void CSODOTAParty::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTAParty.team_name)
}
inline std::string* CSODOTAParty::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTAParty::release_team_name() {
  // @@protoc_insertion_point(field_release:CSODOTAParty.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTAParty::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTAParty.team_name)
}

// optional uint64 team_ui_logo = 52;
inline bool CSODOTAParty::_internal_has_team_ui_logo() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_ui_logo() const {
  return _internal_has_team_ui_logo();
}
inline void CSODOTAParty::clear_team_ui_logo() {
  team_ui_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::_internal_team_ui_logo() const {
  return team_ui_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_ui_logo)
  return _internal_team_ui_logo();
}
inline void CSODOTAParty::_internal_set_team_ui_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x04000000u;
  team_ui_logo_ = value;
}
inline void CSODOTAParty::set_team_ui_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_ui_logo(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_ui_logo)
}

// optional uint64 team_base_logo = 53;
inline bool CSODOTAParty::_internal_has_team_base_logo() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_team_base_logo() const {
  return _internal_has_team_base_logo();
}
inline void CSODOTAParty::clear_team_base_logo() {
  team_base_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::_internal_team_base_logo() const {
  return team_base_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAParty::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.team_base_logo)
  return _internal_team_base_logo();
}
inline void CSODOTAParty::_internal_set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x80000000u;
  team_base_logo_ = value;
}
inline void CSODOTAParty::set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_base_logo(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.team_base_logo)
}

// optional uint32 match_disabled_until_date = 24;
inline bool CSODOTAParty::_internal_has_match_disabled_until_date() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_disabled_until_date() const {
  return _internal_has_match_disabled_until_date();
}
inline void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_match_disabled_until_date() const {
  return match_disabled_until_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_until_date)
  return _internal_match_disabled_until_date();
}
inline void CSODOTAParty::_internal_set_match_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  match_disabled_until_date_ = value;
}
inline void CSODOTAParty::set_match_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_match_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
inline bool CSODOTAParty::_internal_has_match_disabled_account_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_match_disabled_account_id() const {
  return _internal_has_match_disabled_account_id();
}
inline void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_match_disabled_account_id() const {
  return match_disabled_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.match_disabled_account_id)
  return _internal_match_disabled_account_id();
}
inline void CSODOTAParty::_internal_set_match_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  match_disabled_account_id_ = value;
}
inline void CSODOTAParty::set_match_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_match_disabled_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
inline bool CSODOTAParty::_internal_has_matchmaking_max_range_minutes() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return _internal_has_matchmaking_max_range_minutes();
}
inline void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_matchmaking_max_range_minutes() const {
  return matchmaking_max_range_minutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_max_range_minutes)
  return _internal_matchmaking_max_range_minutes();
}
inline void CSODOTAParty::_internal_set_matchmaking_max_range_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  matchmaking_max_range_minutes_ = value;
}
inline void CSODOTAParty::set_matchmaking_max_range_minutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchmaking_max_range_minutes(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
inline bool CSODOTAParty::_internal_has_matchlanguages() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchlanguages() const {
  return _internal_has_matchlanguages();
}
inline void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_matchlanguages() const {
  return matchlanguages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchlanguages)
  return _internal_matchlanguages();
}
inline void CSODOTAParty::_internal_set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  matchlanguages_ = value;
}
inline void CSODOTAParty::set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchlanguages(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchlanguages)
}

// repeated .CSODOTAPartyMember members = 29;
inline int CSODOTAParty::_internal_members_size() const {
  return members_.size();
}
inline int CSODOTAParty::members_size() const {
  return _internal_members_size();
}
inline void CSODOTAParty::clear_members() {
  members_.Clear();
}
inline ::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.members)
  return &members_;
}
inline const ::CSODOTAPartyMember& CSODOTAParty::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.members)
  return _internal_members(index);
}
inline ::CSODOTAPartyMember* CSODOTAParty::_internal_add_members() {
  return members_.Add();
}
inline ::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.members)
  return members_;
}

// optional uint32 low_priority_games_remaining = 35;
inline bool CSODOTAParty::_internal_has_low_priority_games_remaining() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_low_priority_games_remaining() const {
  return _internal_has_low_priority_games_remaining();
}
inline void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_low_priority_games_remaining() const {
  return low_priority_games_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.low_priority_games_remaining)
  return _internal_low_priority_games_remaining();
}
inline void CSODOTAParty::_internal_set_low_priority_games_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  low_priority_games_remaining_ = value;
}
inline void CSODOTAParty::set_low_priority_games_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_low_priority_games_remaining(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.low_priority_games_remaining)
}

// optional bool open_for_join_requests = 40;
inline bool CSODOTAParty::_internal_has_open_for_join_requests() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAParty::has_open_for_join_requests() const {
  return _internal_has_open_for_join_requests();
}
inline void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool CSODOTAParty::_internal_open_for_join_requests() const {
  return open_for_join_requests_;
}
inline bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.open_for_join_requests)
  return _internal_open_for_join_requests();
}
inline void CSODOTAParty::_internal_set_open_for_join_requests(bool value) {
  _has_bits_[1] |= 0x00000008u;
  open_for_join_requests_ = value;
}
inline void CSODOTAParty::set_open_for_join_requests(bool value) {
  _internal_set_open_for_join_requests(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.open_for_join_requests)
}

// repeated .CSODOTAPartyInvite sent_invites = 41;
inline int CSODOTAParty::_internal_sent_invites_size() const {
  return sent_invites_.size();
}
inline int CSODOTAParty::sent_invites_size() const {
  return _internal_sent_invites_size();
}
inline void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.sent_invites)
  return &sent_invites_;
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::_internal_sent_invites(int index) const {
  return sent_invites_.Get(index);
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.sent_invites)
  return _internal_sent_invites(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::_internal_add_sent_invites() {
  return sent_invites_.Add();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.sent_invites)
  return _internal_add_sent_invites();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.sent_invites)
  return sent_invites_;
}

// repeated .CSODOTAPartyInvite recv_invites = 42;
inline int CSODOTAParty::_internal_recv_invites_size() const {
  return recv_invites_.size();
}
inline int CSODOTAParty::recv_invites_size() const {
  return _internal_recv_invites_size();
}
inline void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAParty.recv_invites)
  return &recv_invites_;
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::_internal_recv_invites(int index) const {
  return recv_invites_.Get(index);
}
inline const ::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.recv_invites)
  return _internal_recv_invites(index);
}
inline ::CSODOTAPartyInvite* CSODOTAParty::_internal_add_recv_invites() {
  return recv_invites_.Add();
}
inline ::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:CSODOTAParty.recv_invites)
  return _internal_add_recv_invites();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTAParty.recv_invites)
  return recv_invites_;
}

// optional uint32 account_flags = 43;
inline bool CSODOTAParty::_internal_has_account_flags() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_account_flags() const {
  return _internal_has_account_flags();
}
inline void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_account_flags() const {
  return account_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.account_flags)
  return _internal_account_flags();
}
inline void CSODOTAParty::_internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  account_flags_ = value;
}
inline void CSODOTAParty::set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.account_flags)
}

// optional uint32 region_select_flags = 44;
inline bool CSODOTAParty::_internal_has_region_select_flags() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_region_select_flags() const {
  return _internal_has_region_select_flags();
}
inline void CSODOTAParty::clear_region_select_flags() {
  region_select_flags_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_region_select_flags() const {
  return region_select_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::region_select_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.region_select_flags)
  return _internal_region_select_flags();
}
inline void CSODOTAParty::_internal_set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  region_select_flags_ = value;
}
inline void CSODOTAParty::set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_select_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.region_select_flags)
}

// optional uint32 exclusive_tournament_id = 45;
inline bool CSODOTAParty::_internal_has_exclusive_tournament_id() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_exclusive_tournament_id() const {
  return _internal_has_exclusive_tournament_id();
}
inline void CSODOTAParty::clear_exclusive_tournament_id() {
  exclusive_tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_exclusive_tournament_id() const {
  return exclusive_tournament_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::exclusive_tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.exclusive_tournament_id)
  return _internal_exclusive_tournament_id();
}
inline void CSODOTAParty::_internal_set_exclusive_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  exclusive_tournament_id_ = value;
}
inline void CSODOTAParty::set_exclusive_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exclusive_tournament_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.exclusive_tournament_id)
}

// optional uint32 tourney_division_id = 47;
inline bool CSODOTAParty::_internal_has_tourney_division_id() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_division_id() const {
  return _internal_has_tourney_division_id();
}
inline void CSODOTAParty::clear_tourney_division_id() {
  tourney_division_id_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_tourney_division_id() const {
  return tourney_division_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_division_id)
  return _internal_tourney_division_id();
}
inline void CSODOTAParty::_internal_set_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  tourney_division_id_ = value;
}
inline void CSODOTAParty::set_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_division_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_division_id)
}

// optional uint32 tourney_schedule_time = 48;
inline bool CSODOTAParty::_internal_has_tourney_schedule_time() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_schedule_time() const {
  return _internal_has_tourney_schedule_time();
}
inline void CSODOTAParty::clear_tourney_schedule_time() {
  tourney_schedule_time_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_tourney_schedule_time() const {
  return tourney_schedule_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::tourney_schedule_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_schedule_time)
  return _internal_tourney_schedule_time();
}
inline void CSODOTAParty::_internal_set_tourney_schedule_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  tourney_schedule_time_ = value;
}
inline void CSODOTAParty::set_tourney_schedule_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_schedule_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_schedule_time)
}

// optional uint32 tourney_skill_level = 49;
inline bool CSODOTAParty::_internal_has_tourney_skill_level() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_skill_level() const {
  return _internal_has_tourney_skill_level();
}
inline void CSODOTAParty::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_tourney_skill_level() const {
  return tourney_skill_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_skill_level)
  return _internal_tourney_skill_level();
}
inline void CSODOTAParty::_internal_set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  tourney_skill_level_ = value;
}
inline void CSODOTAParty::set_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_skill_level)
}

// optional uint32 tourney_bracket_round = 50;
inline bool CSODOTAParty::_internal_has_tourney_bracket_round() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_bracket_round() const {
  return _internal_has_tourney_bracket_round();
}
inline void CSODOTAParty::clear_tourney_bracket_round() {
  tourney_bracket_round_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_tourney_bracket_round() const {
  return tourney_bracket_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_bracket_round)
  return _internal_tourney_bracket_round();
}
inline void CSODOTAParty::_internal_set_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  tourney_bracket_round_ = value;
}
inline void CSODOTAParty::set_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_bracket_round(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_bracket_round)
}

// optional uint32 tourney_queue_deadline_time = 54;
inline bool CSODOTAParty::_internal_has_tourney_queue_deadline_time() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_queue_deadline_time() const {
  return _internal_has_tourney_queue_deadline_time();
}
inline void CSODOTAParty::clear_tourney_queue_deadline_time() {
  tourney_queue_deadline_time_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_tourney_queue_deadline_time() const {
  return tourney_queue_deadline_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::tourney_queue_deadline_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_time)
  return _internal_tourney_queue_deadline_time();
}
inline void CSODOTAParty::_internal_set_tourney_queue_deadline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  tourney_queue_deadline_time_ = value;
}
inline void CSODOTAParty::set_tourney_queue_deadline_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tourney_queue_deadline_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_time)
}

// optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
inline bool CSODOTAParty::_internal_has_tourney_queue_deadline_state() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAParty::has_tourney_queue_deadline_state() const {
  return _internal_has_tourney_queue_deadline_state();
}
inline void CSODOTAParty::clear_tourney_queue_deadline_state() {
  tourney_queue_deadline_state_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::ETourneyQueueDeadlineState CSODOTAParty::_internal_tourney_queue_deadline_state() const {
  return static_cast< ::ETourneyQueueDeadlineState >(tourney_queue_deadline_state_);
}
inline ::ETourneyQueueDeadlineState CSODOTAParty::tourney_queue_deadline_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.tourney_queue_deadline_state)
  return _internal_tourney_queue_deadline_state();
}
inline void CSODOTAParty::_internal_set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value) {
  assert(::ETourneyQueueDeadlineState_IsValid(value));
  _has_bits_[1] |= 0x00000001u;
  tourney_queue_deadline_state_ = value;
}
inline void CSODOTAParty::set_tourney_queue_deadline_state(::ETourneyQueueDeadlineState value) {
  _internal_set_tourney_queue_deadline_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.tourney_queue_deadline_state)
}

// optional uint32 party_builder_slots_to_fill = 56;
inline bool CSODOTAParty::_internal_has_party_builder_slots_to_fill() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_slots_to_fill() const {
  return _internal_has_party_builder_slots_to_fill();
}
inline void CSODOTAParty::clear_party_builder_slots_to_fill() {
  party_builder_slots_to_fill_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_party_builder_slots_to_fill() const {
  return party_builder_slots_to_fill_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::party_builder_slots_to_fill() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_slots_to_fill)
  return _internal_party_builder_slots_to_fill();
}
inline void CSODOTAParty::_internal_set_party_builder_slots_to_fill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  party_builder_slots_to_fill_ = value;
}
inline void CSODOTAParty::set_party_builder_slots_to_fill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_party_builder_slots_to_fill(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_slots_to_fill)
}

// optional uint32 party_builder_match_groups = 57;
inline bool CSODOTAParty::_internal_has_party_builder_match_groups() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_match_groups() const {
  return _internal_has_party_builder_match_groups();
}
inline void CSODOTAParty::clear_party_builder_match_groups() {
  party_builder_match_groups_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_party_builder_match_groups() const {
  return party_builder_match_groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::party_builder_match_groups() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_match_groups)
  return _internal_party_builder_match_groups();
}
inline void CSODOTAParty::_internal_set_party_builder_match_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  party_builder_match_groups_ = value;
}
inline void CSODOTAParty::set_party_builder_match_groups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_party_builder_match_groups(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_match_groups)
}

// optional uint32 party_builder_start_time = 58;
inline bool CSODOTAParty::_internal_has_party_builder_start_time() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_builder_start_time() const {
  return _internal_has_party_builder_start_time();
}
inline void CSODOTAParty::clear_party_builder_start_time() {
  party_builder_start_time_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_party_builder_start_time() const {
  return party_builder_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::party_builder_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_builder_start_time)
  return _internal_party_builder_start_time();
}
inline void CSODOTAParty::_internal_set_party_builder_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  party_builder_start_time_ = value;
}
inline void CSODOTAParty::set_party_builder_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_party_builder_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_builder_start_time)
}

// optional bool solo_queue = 59;
inline bool CSODOTAParty::_internal_has_solo_queue() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAParty::has_solo_queue() const {
  return _internal_has_solo_queue();
}
inline void CSODOTAParty::clear_solo_queue() {
  solo_queue_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool CSODOTAParty::_internal_solo_queue() const {
  return solo_queue_;
}
inline bool CSODOTAParty::solo_queue() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.solo_queue)
  return _internal_solo_queue();
}
inline void CSODOTAParty::_internal_set_solo_queue(bool value) {
  _has_bits_[1] |= 0x00000010u;
  solo_queue_ = value;
}
inline void CSODOTAParty::set_solo_queue(bool value) {
  _internal_set_solo_queue(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.solo_queue)
}

// optional uint32 bot_script_index = 60;
inline bool CSODOTAParty::_internal_has_bot_script_index() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTAParty::has_bot_script_index() const {
  return _internal_has_bot_script_index();
}
inline void CSODOTAParty::clear_bot_script_index() {
  bot_script_index_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_bot_script_index() const {
  return bot_script_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::bot_script_index() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.bot_script_index)
  return _internal_bot_script_index();
}
inline void CSODOTAParty::_internal_set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  bot_script_index_ = value;
}
inline void CSODOTAParty::set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bot_script_index(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.bot_script_index)
}

// optional uint32 steam_clan_account_id = 61;
inline bool CSODOTAParty::_internal_has_steam_clan_account_id() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTAParty::has_steam_clan_account_id() const {
  return _internal_has_steam_clan_account_id();
}
inline void CSODOTAParty::clear_steam_clan_account_id() {
  steam_clan_account_id_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_steam_clan_account_id() const {
  return steam_clan_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::steam_clan_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.steam_clan_account_id)
  return _internal_steam_clan_account_id();
}
inline void CSODOTAParty::_internal_set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  steam_clan_account_id_ = value;
}
inline void CSODOTAParty::set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steam_clan_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.steam_clan_account_id)
}

// optional .CMsgReadyCheckStatus ready_check = 62;
inline bool CSODOTAParty::_internal_has_ready_check() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ready_check_ != nullptr);
  return value;
}
inline bool CSODOTAParty::has_ready_check() const {
  return _internal_has_ready_check();
}
inline void CSODOTAParty::clear_ready_check() {
  if (ready_check_ != nullptr) ready_check_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgReadyCheckStatus& CSODOTAParty::_internal_ready_check() const {
  const ::CMsgReadyCheckStatus* p = ready_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgReadyCheckStatus&>(
      ::_CMsgReadyCheckStatus_default_instance_);
}
inline const ::CMsgReadyCheckStatus& CSODOTAParty::ready_check() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.ready_check)
  return _internal_ready_check();
}
inline void CSODOTAParty::unsafe_arena_set_allocated_ready_check(
    ::CMsgReadyCheckStatus* ready_check) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ready_check_);
  }
  ready_check_ = ready_check;
  if (ready_check) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSODOTAParty.ready_check)
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::release_ready_check() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgReadyCheckStatus* temp = ready_check_;
  ready_check_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::unsafe_arena_release_ready_check() {
  // @@protoc_insertion_point(field_release:CSODOTAParty.ready_check)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgReadyCheckStatus* temp = ready_check_;
  ready_check_ = nullptr;
  return temp;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::_internal_mutable_ready_check() {
  _has_bits_[0] |= 0x00000002u;
  if (ready_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgReadyCheckStatus>(GetArena());
    ready_check_ = p;
  }
  return ready_check_;
}
inline ::CMsgReadyCheckStatus* CSODOTAParty::mutable_ready_check() {
  // @@protoc_insertion_point(field_mutable:CSODOTAParty.ready_check)
  return _internal_mutable_ready_check();
}
inline void CSODOTAParty::set_allocated_ready_check(::CMsgReadyCheckStatus* ready_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ready_check_;
  }
  if (ready_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ready_check);
    if (message_arena != submessage_arena) {
      ready_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ready_check, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ready_check_ = ready_check;
  // @@protoc_insertion_point(field_set_allocated:CSODOTAParty.ready_check)
}

// optional uint32 custom_game_disabled_until_date = 63;
inline bool CSODOTAParty::_internal_has_custom_game_disabled_until_date() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_disabled_until_date() const {
  return _internal_has_custom_game_disabled_until_date();
}
inline void CSODOTAParty::clear_custom_game_disabled_until_date() {
  custom_game_disabled_until_date_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_custom_game_disabled_until_date() const {
  return custom_game_disabled_until_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::custom_game_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_disabled_until_date)
  return _internal_custom_game_disabled_until_date();
}
inline void CSODOTAParty::_internal_set_custom_game_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  custom_game_disabled_until_date_ = value;
}
inline void CSODOTAParty::set_custom_game_disabled_until_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_disabled_until_date(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_disabled_until_date)
}

// optional uint32 custom_game_disabled_account_id = 64;
inline bool CSODOTAParty::_internal_has_custom_game_disabled_account_id() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_disabled_account_id() const {
  return _internal_has_custom_game_disabled_account_id();
}
inline void CSODOTAParty::clear_custom_game_disabled_account_id() {
  custom_game_disabled_account_id_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_custom_game_disabled_account_id() const {
  return custom_game_disabled_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::custom_game_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_disabled_account_id)
  return _internal_custom_game_disabled_account_id();
}
inline void CSODOTAParty::_internal_set_custom_game_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  custom_game_disabled_account_id_ = value;
}
inline void CSODOTAParty::set_custom_game_disabled_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_disabled_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_disabled_account_id)
}

// optional bool is_challenge_match = 65;
inline bool CSODOTAParty::_internal_has_is_challenge_match() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAParty::has_is_challenge_match() const {
  return _internal_has_is_challenge_match();
}
inline void CSODOTAParty::clear_is_challenge_match() {
  is_challenge_match_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool CSODOTAParty::_internal_is_challenge_match() const {
  return is_challenge_match_;
}
inline bool CSODOTAParty::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.is_challenge_match)
  return _internal_is_challenge_match();
}
inline void CSODOTAParty::_internal_set_is_challenge_match(bool value) {
  _has_bits_[1] |= 0x00000020u;
  is_challenge_match_ = value;
}
inline void CSODOTAParty::set_is_challenge_match(bool value) {
  _internal_set_is_challenge_match(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.is_challenge_match)
}

// optional bool party_search_beacon_active = 66;
inline bool CSODOTAParty::_internal_has_party_search_beacon_active() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAParty::has_party_search_beacon_active() const {
  return _internal_has_party_search_beacon_active();
}
inline void CSODOTAParty::clear_party_search_beacon_active() {
  party_search_beacon_active_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool CSODOTAParty::_internal_party_search_beacon_active() const {
  return party_search_beacon_active_;
}
inline bool CSODOTAParty::party_search_beacon_active() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.party_search_beacon_active)
  return _internal_party_search_beacon_active();
}
inline void CSODOTAParty::_internal_set_party_search_beacon_active(bool value) {
  _has_bits_[1] |= 0x00000040u;
  party_search_beacon_active_ = value;
}
inline void CSODOTAParty::set_party_search_beacon_active(bool value) {
  _internal_set_party_search_beacon_active(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.party_search_beacon_active)
}

// optional uint32 matchmaking_flags = 67;
inline bool CSODOTAParty::_internal_has_matchmaking_flags() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_matchmaking_flags() const {
  return _internal_has_matchmaking_flags();
}
inline void CSODOTAParty::clear_matchmaking_flags() {
  matchmaking_flags_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_matchmaking_flags() const {
  return matchmaking_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::matchmaking_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.matchmaking_flags)
  return _internal_matchmaking_flags();
}
inline void CSODOTAParty::_internal_set_matchmaking_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  matchmaking_flags_ = value;
}
inline void CSODOTAParty::set_matchmaking_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchmaking_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.matchmaking_flags)
}

// optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
inline bool CSODOTAParty::_internal_has_high_priority_state() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_high_priority_state() const {
  return _internal_has_high_priority_state();
}
inline void CSODOTAParty::clear_high_priority_state() {
  high_priority_state_ = 0;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::EHighPriorityMMState CSODOTAParty::_internal_high_priority_state() const {
  return static_cast< ::EHighPriorityMMState >(high_priority_state_);
}
inline ::EHighPriorityMMState CSODOTAParty::high_priority_state() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.high_priority_state)
  return _internal_high_priority_state();
}
inline void CSODOTAParty::_internal_set_high_priority_state(::EHighPriorityMMState value) {
  assert(::EHighPriorityMMState_IsValid(value));
  _has_bits_[1] |= 0x00002000u;
  high_priority_state_ = value;
}
inline void CSODOTAParty::set_high_priority_state(::EHighPriorityMMState value) {
  _internal_set_high_priority_state(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.high_priority_state)
}

// optional bool lane_selections_enabled = 69;
inline bool CSODOTAParty::_internal_has_lane_selections_enabled() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_lane_selections_enabled() const {
  return _internal_has_lane_selections_enabled();
}
inline void CSODOTAParty::clear_lane_selections_enabled() {
  lane_selections_enabled_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool CSODOTAParty::_internal_lane_selections_enabled() const {
  return lane_selections_enabled_;
}
inline bool CSODOTAParty::lane_selections_enabled() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.lane_selections_enabled)
  return _internal_lane_selections_enabled();
}
inline void CSODOTAParty::_internal_set_lane_selections_enabled(bool value) {
  _has_bits_[0] |= 0x20000000u;
  lane_selections_enabled_ = value;
}
inline void CSODOTAParty::set_lane_selections_enabled(bool value) {
  _internal_set_lane_selections_enabled(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.lane_selections_enabled)
}

// optional uint32 custom_game_difficulty_mask = 70;
inline bool CSODOTAParty::_internal_has_custom_game_difficulty_mask() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_custom_game_difficulty_mask() const {
  return _internal_has_custom_game_difficulty_mask();
}
inline void CSODOTAParty::clear_custom_game_difficulty_mask() {
  custom_game_difficulty_mask_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::_internal_custom_game_difficulty_mask() const {
  return custom_game_difficulty_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAParty::custom_game_difficulty_mask() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.custom_game_difficulty_mask)
  return _internal_custom_game_difficulty_mask();
}
inline void CSODOTAParty::_internal_set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  custom_game_difficulty_mask_ = value;
}
inline void CSODOTAParty::set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_difficulty_mask(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.custom_game_difficulty_mask)
}

// optional bool is_steam_china = 71;
inline bool CSODOTAParty::_internal_has_is_steam_china() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTAParty::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTAParty::clear_is_steam_china() {
  is_steam_china_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool CSODOTAParty::_internal_is_steam_china() const {
  return is_steam_china_;
}
inline bool CSODOTAParty::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTAParty.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTAParty::_internal_set_is_steam_china(bool value) {
  _has_bits_[0] |= 0x40000000u;
  is_steam_china_ = value;
}
inline void CSODOTAParty::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTAParty.is_steam_china)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTAPartyInvite_PartyMember::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.name)
  return _internal_name();
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.name)
}
inline std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.PartyMember.name)
  return _internal_mutable_name();
}
inline const std::string& CSODOTAPartyInvite_PartyMember::_internal_name() const {
  return name_.Get();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTAPartyInvite_PartyMember::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.PartyMember.name)
}
inline void CSODOTAPartyInvite_PartyMember::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.PartyMember.name)
}
inline std::string* CSODOTAPartyInvite_PartyMember::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.PartyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTAPartyInvite_PartyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite_PartyMember::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.steam_id)
  return _internal_steam_id();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CSODOTAPartyInvite_PartyMember::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
inline bool CSODOTAPartyInvite_PartyMember::_internal_has_is_coach() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return _internal_has_is_coach();
}
inline void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSODOTAPartyInvite_PartyMember::_internal_is_coach() const {
  return is_coach_;
}
inline bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.PartyMember.is_coach)
  return _internal_is_coach();
}
inline void CSODOTAPartyInvite_PartyMember::_internal_set_is_coach(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_coach_ = value;
}
inline void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  _internal_set_is_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.PartyMember.is_coach)
}

// -------------------------------------------------------------------

// CSODOTAPartyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSODOTAPartyInvite::_internal_has_group_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_group_id() const {
  return _internal_has_group_id();
}
inline void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.group_id)
  return _internal_group_id();
}
inline void CSODOTAPartyInvite::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  group_id_ = value;
}
inline void CSODOTAPartyInvite::set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTAPartyInvite::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_id)
  return _internal_sender_id();
}
inline void CSODOTAPartyInvite::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_ = value;
}
inline void CSODOTAPartyInvite::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTAPartyInvite::_internal_has_sender_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void CSODOTAPartyInvite::clear_sender_name() {
  sender_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.sender_name)
  return _internal_sender_name();
}
inline void CSODOTAPartyInvite::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.sender_name)
}
inline std::string* CSODOTAPartyInvite::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& CSODOTAPartyInvite::_internal_sender_name() const {
  return sender_name_.Get();
}
inline void CSODOTAPartyInvite::_internal_set_sender_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTAPartyInvite::set_sender_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTAPartyInvite.sender_name)
}
inline void CSODOTAPartyInvite::set_sender_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTAPartyInvite.sender_name)
}
inline std::string* CSODOTAPartyInvite::_internal_mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTAPartyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:CSODOTAPartyInvite.sender_name)
  if (!_internal_has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTAPartyInvite::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTAPartyInvite.sender_name)
}

// repeated .CSODOTAPartyInvite.PartyMember members = 4;
inline int CSODOTAPartyInvite::_internal_members_size() const {
  return members_.size();
}
inline int CSODOTAPartyInvite::members_size() const {
  return _internal_members_size();
}
inline void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAPartyInvite.members)
  return &members_;
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.members)
  return _internal_members(index);
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::_internal_add_members() {
  return members_.Add();
}
inline ::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTAPartyInvite.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTAPartyInvite.members)
  return members_;
}

// optional uint32 team_id = 5;
inline bool CSODOTAPartyInvite::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_team_id() const {
  return _internal_has_team_id();
}
inline void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyInvite::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.team_id)
  return _internal_team_id();
}
inline void CSODOTAPartyInvite::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_id_ = value;
}
inline void CSODOTAPartyInvite::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
inline bool CSODOTAPartyInvite::_internal_has_low_priority_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_low_priority_status() const {
  return _internal_has_low_priority_status();
}
inline void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSODOTAPartyInvite::_internal_low_priority_status() const {
  return low_priority_status_;
}
inline bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.low_priority_status)
  return _internal_low_priority_status();
}
inline void CSODOTAPartyInvite::_internal_set_low_priority_status(bool value) {
  _has_bits_[0] |= 0x00000010u;
  low_priority_status_ = value;
}
inline void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  _internal_set_low_priority_status(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
inline bool CSODOTAPartyInvite::_internal_has_as_coach() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_as_coach() const {
  return _internal_has_as_coach();
}
inline void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CSODOTAPartyInvite::_internal_as_coach() const {
  return as_coach_;
}
inline bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.as_coach)
  return _internal_as_coach();
}
inline void CSODOTAPartyInvite::_internal_set_as_coach(bool value) {
  _has_bits_[0] |= 0x00000020u;
  as_coach_ = value;
}
inline void CSODOTAPartyInvite::set_as_coach(bool value) {
  _internal_set_as_coach(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
inline bool CSODOTAPartyInvite::_internal_has_invite_gid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTAPartyInvite::has_invite_gid() const {
  return _internal_has_invite_gid();
}
inline void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::_internal_invite_gid() const {
  return invite_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTAPartyInvite.invite_gid)
  return _internal_invite_gid();
}
inline void CSODOTAPartyInvite::_internal_set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  invite_gid_ = value;
}
inline void CSODOTAPartyInvite::set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invite_gid(value);
  // @@protoc_insertion_point(field_set:CSODOTAPartyInvite.invite_gid)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
inline bool CSODOTALobbyInvite_LobbyMember::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTALobbyInvite_LobbyMember::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.name)
  return _internal_name();
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.name)
}
inline std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.LobbyMember.name)
  return _internal_mutable_name();
}
inline const std::string& CSODOTALobbyInvite_LobbyMember::_internal_name() const {
  return name_.Get();
}
inline void CSODOTALobbyInvite_LobbyMember::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.LobbyMember.name)
}
inline void CSODOTALobbyInvite_LobbyMember::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.LobbyMember.name)
}
inline std::string* CSODOTALobbyInvite_LobbyMember::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyInvite.LobbyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobbyInvite_LobbyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTALobbyInvite_LobbyMember::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite_LobbyMember::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.steam_id)
  return _internal_steam_id();
}
inline void CSODOTALobbyInvite_LobbyMember::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CSODOTALobbyInvite_LobbyMember::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSODOTALobbyInvite::_internal_has_group_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_group_id() const {
  return _internal_has_group_id();
}
inline void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.group_id)
  return _internal_group_id();
}
inline void CSODOTALobbyInvite::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  group_id_ = value;
}
inline void CSODOTALobbyInvite::set_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTALobbyInvite::_internal_has_sender_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_id)
  return _internal_sender_id();
}
inline void CSODOTALobbyInvite::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_ = value;
}
inline void CSODOTALobbyInvite::set_sender_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTALobbyInvite::_internal_has_sender_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void CSODOTALobbyInvite::clear_sender_name() {
  sender_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_name)
  return _internal_sender_name();
}
inline void CSODOTALobbyInvite::set_sender_name(const std::string& value) {
  _internal_set_sender_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_name)
}
inline std::string* CSODOTALobbyInvite::mutable_sender_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.sender_name)
  return _internal_mutable_sender_name();
}
inline const std::string& CSODOTALobbyInvite::_internal_sender_name() const {
  return sender_name_.Get();
}
inline void CSODOTALobbyInvite::_internal_set_sender_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobbyInvite::set_sender_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyInvite.sender_name)
}
inline void CSODOTALobbyInvite::set_sender_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyInvite.sender_name)
}
inline std::string* CSODOTALobbyInvite::_internal_mutable_sender_name() {
  _has_bits_[0] |= 0x00000001u;
  return sender_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobbyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyInvite.sender_name)
  if (!_internal_has_sender_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sender_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobbyInvite::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sender_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.sender_name)
}

// repeated .CSODOTALobbyInvite.LobbyMember members = 4;
inline int CSODOTALobbyInvite::_internal_members_size() const {
  return members_.size();
}
inline int CSODOTALobbyInvite::members_size() const {
  return _internal_members_size();
}
inline void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInvite.members)
  return &members_;
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.members)
  return _internal_members(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::_internal_add_members() {
  return members_.Add();
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyInvite.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInvite.members)
  return members_;
}

// optional uint64 custom_game_id = 5;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_id)
  return _internal_custom_game_id();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_id_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
inline bool CSODOTALobbyInvite::_internal_has_invite_gid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_invite_gid() const {
  return _internal_has_invite_gid();
}
inline void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::_internal_invite_gid() const {
  return invite_gid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.invite_gid)
  return _internal_invite_gid();
}
inline void CSODOTALobbyInvite::_internal_set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  invite_gid_ = value;
}
inline void CSODOTALobbyInvite::set_invite_gid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_invite_gid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_crc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::_internal_custom_game_crc() const {
  return custom_game_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  custom_game_crc_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyInvite::_internal_custom_game_timestamp() const {
  return custom_game_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  custom_game_timestamp_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgLeaverState

// optional uint32 lobby_state = 1;
inline bool CMsgLeaverState::_internal_has_lobby_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_lobby_state() const {
  return _internal_has_lobby_state();
}
inline void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLeaverState::_internal_lobby_state() const {
  return lobby_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.lobby_state)
  return _internal_lobby_state();
}
inline void CMsgLeaverState::_internal_set_lobby_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_state_ = value;
}
inline void CMsgLeaverState::set_lobby_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_state(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.lobby_state)
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgLeaverState::_internal_has_game_state() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameState CMsgLeaverState::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline ::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.game_state)
  return _internal_game_state();
}
inline void CMsgLeaverState::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  game_state_ = value;
}
inline void CMsgLeaverState::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
inline bool CMsgLeaverState::_internal_has_leaver_detected() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_leaver_detected() const {
  return _internal_has_leaver_detected();
}
inline void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgLeaverState::_internal_leaver_detected() const {
  return leaver_detected_;
}
inline bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.leaver_detected)
  return _internal_leaver_detected();
}
inline void CMsgLeaverState::_internal_set_leaver_detected(bool value) {
  _has_bits_[0] |= 0x00000004u;
  leaver_detected_ = value;
}
inline void CMsgLeaverState::set_leaver_detected(bool value) {
  _internal_set_leaver_detected(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
inline bool CMsgLeaverState::_internal_has_first_blood_happened() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_first_blood_happened() const {
  return _internal_has_first_blood_happened();
}
inline void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgLeaverState::_internal_first_blood_happened() const {
  return first_blood_happened_;
}
inline bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.first_blood_happened)
  return _internal_first_blood_happened();
}
inline void CMsgLeaverState::_internal_set_first_blood_happened(bool value) {
  _has_bits_[0] |= 0x00000008u;
  first_blood_happened_ = value;
}
inline void CMsgLeaverState::set_first_blood_happened(bool value) {
  _internal_set_first_blood_happened(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
inline bool CMsgLeaverState::_internal_has_discard_match_results() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_discard_match_results() const {
  return _internal_has_discard_match_results();
}
inline void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgLeaverState::_internal_discard_match_results() const {
  return discard_match_results_;
}
inline bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.discard_match_results)
  return _internal_discard_match_results();
}
inline void CMsgLeaverState::_internal_set_discard_match_results(bool value) {
  _has_bits_[0] |= 0x00000010u;
  discard_match_results_ = value;
}
inline void CMsgLeaverState::set_discard_match_results(bool value) {
  _internal_set_discard_match_results(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
inline bool CMsgLeaverState::_internal_has_mass_disconnect() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLeaverState::has_mass_disconnect() const {
  return _internal_has_mass_disconnect();
}
inline void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgLeaverState::_internal_mass_disconnect() const {
  return mass_disconnect_;
}
inline bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverState.mass_disconnect)
  return _internal_mass_disconnect();
}
inline void CMsgLeaverState::_internal_set_mass_disconnect(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mass_disconnect_ = value;
}
inline void CMsgLeaverState::set_mass_disconnect(bool value) {
  _internal_set_mass_disconnect(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverState.mass_disconnect)
}

// -------------------------------------------------------------------

// CMsgLobbyCoachFriendRequest

// optional uint32 coach_account_id = 1;
inline bool CMsgLobbyCoachFriendRequest::_internal_has_coach_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_coach_account_id() const {
  return _internal_has_coach_account_id();
}
inline void CMsgLobbyCoachFriendRequest::clear_coach_account_id() {
  coach_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyCoachFriendRequest::_internal_coach_account_id() const {
  return coach_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyCoachFriendRequest::coach_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.coach_account_id)
  return _internal_coach_account_id();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_coach_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  coach_account_id_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_coach_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coach_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.coach_account_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgLobbyCoachFriendRequest::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgLobbyCoachFriendRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyCoachFriendRequest::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyCoachFriendRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.player_account_id)
}

// optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
inline bool CMsgLobbyCoachFriendRequest::_internal_has_request_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_request_state() const {
  return _internal_has_request_state();
}
inline void CMsgLobbyCoachFriendRequest::clear_request_state() {
  request_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ELobbyMemberCoachRequestState CMsgLobbyCoachFriendRequest::_internal_request_state() const {
  return static_cast< ::ELobbyMemberCoachRequestState >(request_state_);
}
inline ::ELobbyMemberCoachRequestState CMsgLobbyCoachFriendRequest::request_state() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.request_state)
  return _internal_request_state();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_request_state(::ELobbyMemberCoachRequestState value) {
  assert(::ELobbyMemberCoachRequestState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  request_state_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_request_state(::ELobbyMemberCoachRequestState value) {
  _internal_set_request_state(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.request_state)
}

// -------------------------------------------------------------------

// CSODOTALobbyMember

// optional fixed64 id = 1 [(.key_field) = true];
inline bool CSODOTALobbyMember::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_id() const {
  return _internal_has_id();
}
inline void CSODOTALobbyMember::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.id)
  return _internal_id();
}
inline void CSODOTALobbyMember::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CSODOTALobbyMember::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CSODOTALobbyMember::_internal_has_hero_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CSODOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_hero_id() const {
  return hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.hero_id)
  return _internal_hero_id();
}
inline void CSODOTALobbyMember::_internal_set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  hero_id_ = value;
}
inline void CSODOTALobbyMember::set_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CSODOTALobbyMember::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_team() const {
  return _internal_has_team();
}
inline void CSODOTALobbyMember::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_team() const {
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.team)
  return _internal_team();
}
inline void CSODOTALobbyMember::_internal_set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  team_ = value;
}
inline void CSODOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.team)
}

// optional string name = 6;
inline bool CSODOTALobbyMember::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTALobbyMember::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.name)
  return _internal_name();
}
inline void CSODOTALobbyMember::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.name)
}
inline std::string* CSODOTALobbyMember::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.name)
  return _internal_mutable_name();
}
inline const std::string& CSODOTALobbyMember::_internal_name() const {
  return name_.Get();
}
inline void CSODOTALobbyMember::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobbyMember::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobbyMember.name)
}
inline void CSODOTALobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyMember.name)
}
inline void CSODOTALobbyMember::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyMember.name)
}
inline std::string* CSODOTALobbyMember::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobbyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CSODOTALobbyMember::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_slot() const {
  return _internal_has_slot();
}
inline void CSODOTALobbyMember::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.slot)
  return _internal_slot();
}
inline void CSODOTALobbyMember::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  slot_ = value;
}
inline void CSODOTALobbyMember::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
inline bool CSODOTALobbyMember::_internal_has_party_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_party_id() const {
  return _internal_has_party_id();
}
inline void CSODOTALobbyMember::clear_party_id() {
  party_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::_internal_party_id() const {
  return party_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.party_id)
  return _internal_party_id();
}
inline void CSODOTALobbyMember::_internal_set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  party_id_ = value;
}
inline void CSODOTALobbyMember::set_party_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CSODOTALobbyMember::_internal_has_meta_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_level() const {
  return _internal_has_meta_level();
}
inline void CSODOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_meta_level() const {
  return meta_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_level)
  return _internal_meta_level();
}
inline void CSODOTALobbyMember::_internal_set_meta_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  meta_level_ = value;
}
inline void CSODOTALobbyMember::set_meta_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meta_level(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CSODOTALobbyMember::_internal_has_meta_xp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_xp() const {
  return _internal_has_meta_xp();
}
inline void CSODOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_meta_xp() const {
  return meta_xp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_xp)
  return _internal_meta_xp();
}
inline void CSODOTALobbyMember::_internal_set_meta_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  meta_xp_ = value;
}
inline void CSODOTALobbyMember::set_meta_xp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meta_xp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CSODOTALobbyMember::_internal_has_meta_xp_awarded() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_xp_awarded() const {
  return _internal_has_meta_xp_awarded();
}
inline void CSODOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_meta_xp_awarded() const {
  return meta_xp_awarded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_xp_awarded)
  return _internal_meta_xp_awarded();
}
inline void CSODOTALobbyMember::_internal_set_meta_xp_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  meta_xp_awarded_ = value;
}
inline void CSODOTALobbyMember::set_meta_xp_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meta_xp_awarded(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CSODOTALobbyMember::_internal_has_leaver_status() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_leaver_status() const {
  return _internal_has_leaver_status();
}
inline void CSODOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::DOTALeaverStatus_t CSODOTALobbyMember::_internal_leaver_status() const {
  return static_cast< ::DOTALeaverStatus_t >(leaver_status_);
}
inline ::DOTALeaverStatus_t CSODOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.leaver_status)
  return _internal_leaver_status();
}
inline void CSODOTALobbyMember::_internal_set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  leaver_status_ = value;
}
inline void CSODOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  _internal_set_leaver_status(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
inline bool CSODOTALobbyMember::_internal_has_leaver_actions() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_leaver_actions() const {
  return _internal_has_leaver_actions();
}
inline void CSODOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_leaver_actions() const {
  return leaver_actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.leaver_actions)
  return _internal_leaver_actions();
}
inline void CSODOTALobbyMember::_internal_set_leaver_actions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  leaver_actions_ = value;
}
inline void CSODOTALobbyMember::set_leaver_actions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leaver_actions(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17 [default = 6];
inline bool CSODOTALobbyMember::_internal_has_channel() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_channel() const {
  return _internal_has_channel();
}
inline void CSODOTALobbyMember::clear_channel() {
  channel_ = 6u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.channel)
  return _internal_channel();
}
inline void CSODOTALobbyMember::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  channel_ = value;
}
inline void CSODOTALobbyMember::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.channel)
}

// repeated uint32 disabled_hero_id = 20;
inline int CSODOTALobbyMember::_internal_disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
inline int CSODOTALobbyMember::disabled_hero_id_size() const {
  return _internal_disabled_hero_id_size();
}
inline void CSODOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_disabled_hero_id(int index) const {
  return disabled_hero_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.disabled_hero_id)
  return _internal_disabled_hero_id(index);
}
inline void CSODOTALobbyMember::set_disabled_hero_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.disabled_hero_id)
}
inline void CSODOTALobbyMember::_internal_add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_hero_id_.Add(value);
}
inline void CSODOTALobbyMember::add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_disabled_hero_id(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.disabled_hero_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::_internal_disabled_hero_id() const {
  return disabled_hero_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.disabled_hero_id)
  return _internal_disabled_hero_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::_internal_mutable_disabled_hero_id() {
  return &disabled_hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.disabled_hero_id)
  return _internal_mutable_disabled_hero_id();
}

// repeated uint32 enabled_hero_id = 22;
inline int CSODOTALobbyMember::_internal_enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
inline int CSODOTALobbyMember::enabled_hero_id_size() const {
  return _internal_enabled_hero_id_size();
}
inline void CSODOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_enabled_hero_id(int index) const {
  return enabled_hero_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.enabled_hero_id)
  return _internal_enabled_hero_id(index);
}
inline void CSODOTALobbyMember::set_enabled_hero_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.enabled_hero_id)
}
inline void CSODOTALobbyMember::_internal_add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  enabled_hero_id_.Add(value);
}
inline void CSODOTALobbyMember::add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_enabled_hero_id(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.enabled_hero_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::_internal_enabled_hero_id() const {
  return enabled_hero_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.enabled_hero_id)
  return _internal_enabled_hero_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::_internal_mutable_enabled_hero_id() {
  return &enabled_hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.enabled_hero_id)
  return _internal_mutable_enabled_hero_id();
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CSODOTALobbyMember::_internal_has_coach_team() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_coach_team() const {
  return _internal_has_coach_team();
}
inline void CSODOTALobbyMember::clear_coach_team() {
  coach_team_ = 5;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_coach_team() const {
  return static_cast< ::DOTA_GC_TEAM >(coach_team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coach_team)
  return _internal_coach_team();
}
inline void CSODOTALobbyMember::_internal_set_coach_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[1] |= 0x00000002u;
  coach_team_ = value;
}
inline void CSODOTALobbyMember::set_coach_team(::DOTA_GC_TEAM value) {
  _internal_set_coach_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coach_team)
}

// repeated uint32 coached_account_ids = 53;
inline int CSODOTALobbyMember::_internal_coached_account_ids_size() const {
  return coached_account_ids_.size();
}
inline int CSODOTALobbyMember::coached_account_ids_size() const {
  return _internal_coached_account_ids_size();
}
inline void CSODOTALobbyMember::clear_coached_account_ids() {
  coached_account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_coached_account_ids(int index) const {
  return coached_account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::coached_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coached_account_ids)
  return _internal_coached_account_ids(index);
}
inline void CSODOTALobbyMember::set_coached_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  coached_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coached_account_ids)
}
inline void CSODOTALobbyMember::_internal_add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  coached_account_ids_.Add(value);
}
inline void CSODOTALobbyMember::add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_coached_account_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.coached_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::_internal_coached_account_ids() const {
  return coached_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::coached_account_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.coached_account_ids)
  return _internal_coached_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::_internal_mutable_coached_account_ids() {
  return &coached_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::mutable_coached_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.coached_account_ids)
  return _internal_mutable_coached_account_ids();
}

// optional uint32 coach_rating = 42;
inline bool CSODOTALobbyMember::_internal_has_coach_rating() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_coach_rating() const {
  return _internal_has_coach_rating();
}
inline void CSODOTALobbyMember::clear_coach_rating() {
  coach_rating_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_coach_rating() const {
  return coach_rating_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::coach_rating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coach_rating)
  return _internal_coach_rating();
}
inline void CSODOTALobbyMember::_internal_set_coach_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  coach_rating_ = value;
}
inline void CSODOTALobbyMember::set_coach_rating(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coach_rating(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coach_rating)
}

// optional uint32 pwrd_cyber_cafe_id = 24;
inline bool CSODOTALobbyMember::_internal_has_pwrd_cyber_cafe_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_pwrd_cyber_cafe_id() const {
  return _internal_has_pwrd_cyber_cafe_id();
}
inline void CSODOTALobbyMember::clear_pwrd_cyber_cafe_id() {
  pwrd_cyber_cafe_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_pwrd_cyber_cafe_id() const {
  return pwrd_cyber_cafe_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::pwrd_cyber_cafe_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pwrd_cyber_cafe_id)
  return _internal_pwrd_cyber_cafe_id();
}
inline void CSODOTALobbyMember::_internal_set_pwrd_cyber_cafe_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  pwrd_cyber_cafe_id_ = value;
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pwrd_cyber_cafe_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.pwrd_cyber_cafe_id)
}

// optional string pwrd_cyber_cafe_name = 25;
inline bool CSODOTALobbyMember::_internal_has_pwrd_cyber_cafe_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_pwrd_cyber_cafe_name() const {
  return _internal_has_pwrd_cyber_cafe_name();
}
inline void CSODOTALobbyMember::clear_pwrd_cyber_cafe_name() {
  pwrd_cyber_cafe_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSODOTALobbyMember::pwrd_cyber_cafe_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  return _internal_pwrd_cyber_cafe_name();
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_name(const std::string& value) {
  _internal_set_pwrd_cyber_cafe_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}
inline std::string* CSODOTALobbyMember::mutable_pwrd_cyber_cafe_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  return _internal_mutable_pwrd_cyber_cafe_name();
}
inline const std::string& CSODOTALobbyMember::_internal_pwrd_cyber_cafe_name() const {
  return pwrd_cyber_cafe_name_.Get();
}
inline void CSODOTALobbyMember::_internal_set_pwrd_cyber_cafe_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pwrd_cyber_cafe_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}
inline std::string* CSODOTALobbyMember::_internal_mutable_pwrd_cyber_cafe_name() {
  _has_bits_[0] |= 0x00000002u;
  return pwrd_cyber_cafe_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobbyMember::release_pwrd_cyber_cafe_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  if (!_internal_has_pwrd_cyber_cafe_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pwrd_cyber_cafe_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobbyMember::set_allocated_pwrd_cyber_cafe_name(std::string* pwrd_cyber_cafe_name) {
  if (pwrd_cyber_cafe_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pwrd_cyber_cafe_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwrd_cyber_cafe_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}

// repeated fixed32 disabled_random_hero_bits = 41;
inline int CSODOTALobbyMember::_internal_disabled_random_hero_bits_size() const {
  return disabled_random_hero_bits_.size();
}
inline int CSODOTALobbyMember::disabled_random_hero_bits_size() const {
  return _internal_disabled_random_hero_bits_size();
}
inline void CSODOTALobbyMember::clear_disabled_random_hero_bits() {
  disabled_random_hero_bits_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_disabled_random_hero_bits(int index) const {
  return disabled_random_hero_bits_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::disabled_random_hero_bits(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_disabled_random_hero_bits(index);
}
inline void CSODOTALobbyMember::set_disabled_random_hero_bits(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_random_hero_bits_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.disabled_random_hero_bits)
}
inline void CSODOTALobbyMember::_internal_add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_random_hero_bits_.Add(value);
}
inline void CSODOTALobbyMember::add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_disabled_random_hero_bits(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.disabled_random_hero_bits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::_internal_disabled_random_hero_bits() const {
  return disabled_random_hero_bits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::disabled_random_hero_bits() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_disabled_random_hero_bits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::_internal_mutable_disabled_random_hero_bits() {
  return &disabled_random_hero_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::mutable_disabled_random_hero_bits() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_mutable_disabled_random_hero_bits();
}

// optional sint32 rank_change = 29;
inline bool CSODOTALobbyMember::_internal_has_rank_change() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CSODOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::_internal_rank_change() const {
  return rank_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_change)
  return _internal_rank_change();
}
inline void CSODOTALobbyMember::_internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  rank_change_ = value;
}
inline void CSODOTALobbyMember::set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
inline bool CSODOTALobbyMember::_internal_has_cameraman() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_cameraman() const {
  return _internal_has_cameraman();
}
inline void CSODOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CSODOTALobbyMember::_internal_cameraman() const {
  return cameraman_;
}
inline bool CSODOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.cameraman)
  return _internal_cameraman();
}
inline void CSODOTALobbyMember::_internal_set_cameraman(bool value) {
  _has_bits_[0] |= 0x00010000u;
  cameraman_ = value;
}
inline void CSODOTALobbyMember::set_cameraman(bool value) {
  _internal_set_cameraman(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
inline int CSODOTALobbyMember::_internal_custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
inline int CSODOTALobbyMember::custom_game_product_ids_size() const {
  return _internal_custom_game_product_ids_size();
}
inline void CSODOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_custom_game_product_ids(int index) const {
  return custom_game_product_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_custom_game_product_ids(index);
}
inline void CSODOTALobbyMember::set_custom_game_product_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.custom_game_product_ids)
}
inline void CSODOTALobbyMember::_internal_add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  custom_game_product_ids_.Add(value);
}
inline void CSODOTALobbyMember::add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_custom_game_product_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.custom_game_product_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::_internal_custom_game_product_ids() const {
  return custom_game_product_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_custom_game_product_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::_internal_mutable_custom_game_product_ids() {
  return &custom_game_product_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_mutable_custom_game_product_ids();
}

// optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTALobbyMember::_internal_has_search_match_type() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_search_match_type() const {
  return _internal_has_search_match_type();
}
inline void CSODOTALobbyMember::clear_search_match_type() {
  search_match_type_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::MatchType CSODOTALobbyMember::_internal_search_match_type() const {
  return static_cast< ::MatchType >(search_match_type_);
}
inline ::MatchType CSODOTALobbyMember::search_match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.search_match_type)
  return _internal_search_match_type();
}
inline void CSODOTALobbyMember::_internal_set_search_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  search_match_type_ = value;
}
inline void CSODOTALobbyMember::set_search_match_type(::MatchType value) {
  _internal_set_search_match_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.search_match_type)
}

// optional uint64 favorite_team_packed = 35;
inline bool CSODOTALobbyMember::_internal_has_favorite_team_packed() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_favorite_team_packed() const {
  return _internal_has_favorite_team_packed();
}
inline void CSODOTALobbyMember::clear_favorite_team_packed() {
  favorite_team_packed_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::_internal_favorite_team_packed() const {
  return favorite_team_packed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobbyMember::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.favorite_team_packed)
  return _internal_favorite_team_packed();
}
inline void CSODOTALobbyMember::_internal_set_favorite_team_packed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  favorite_team_packed_ = value;
}
inline void CSODOTALobbyMember::set_favorite_team_packed(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_favorite_team_packed(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.favorite_team_packed)
}

// optional bool is_plus_subscriber = 36;
inline bool CSODOTALobbyMember::_internal_has_is_plus_subscriber() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CSODOTALobbyMember::clear_is_plus_subscriber() {
  is_plus_subscriber_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CSODOTALobbyMember::_internal_is_plus_subscriber() const {
  return is_plus_subscriber_;
}
inline bool CSODOTALobbyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CSODOTALobbyMember::_internal_set_is_plus_subscriber(bool value) {
  _has_bits_[0] |= 0x00020000u;
  is_plus_subscriber_ = value;
}
inline void CSODOTALobbyMember::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.is_plus_subscriber)
}

// optional bool rank_tier_updated = 37;
inline bool CSODOTALobbyMember::_internal_has_rank_tier_updated() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_tier_updated() const {
  return _internal_has_rank_tier_updated();
}
inline void CSODOTALobbyMember::clear_rank_tier_updated() {
  rank_tier_updated_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CSODOTALobbyMember::_internal_rank_tier_updated() const {
  return rank_tier_updated_;
}
inline bool CSODOTALobbyMember::rank_tier_updated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_tier_updated)
  return _internal_rank_tier_updated();
}
inline void CSODOTALobbyMember::_internal_set_rank_tier_updated(bool value) {
  _has_bits_[0] |= 0x00040000u;
  rank_tier_updated_ = value;
}
inline void CSODOTALobbyMember::set_rank_tier_updated(bool value) {
  _internal_set_rank_tier_updated(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_tier_updated)
}

// optional uint32 lane_selection_flags = 38;
inline bool CSODOTALobbyMember::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CSODOTALobbyMember::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CSODOTALobbyMember::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  lane_selection_flags_ = value;
}
inline void CSODOTALobbyMember::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.lane_selection_flags)
}

// optional bool can_earn_rewards = 39;
inline bool CSODOTALobbyMember::_internal_has_can_earn_rewards() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_can_earn_rewards() const {
  return _internal_has_can_earn_rewards();
}
inline void CSODOTALobbyMember::clear_can_earn_rewards() {
  can_earn_rewards_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CSODOTALobbyMember::_internal_can_earn_rewards() const {
  return can_earn_rewards_;
}
inline bool CSODOTALobbyMember::can_earn_rewards() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.can_earn_rewards)
  return _internal_can_earn_rewards();
}
inline void CSODOTALobbyMember::_internal_set_can_earn_rewards(bool value) {
  _has_bits_[0] |= 0x00080000u;
  can_earn_rewards_ = value;
}
inline void CSODOTALobbyMember::set_can_earn_rewards(bool value) {
  _internal_set_can_earn_rewards(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.can_earn_rewards)
}

// optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CSODOTALobbyMember::_internal_has_live_spectator_team() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_live_spectator_team() const {
  return _internal_has_live_spectator_team();
}
inline void CSODOTALobbyMember::clear_live_spectator_team() {
  live_spectator_team_ = 5;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_live_spectator_team() const {
  return static_cast< ::DOTA_GC_TEAM >(live_spectator_team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::live_spectator_team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.live_spectator_team)
  return _internal_live_spectator_team();
}
inline void CSODOTALobbyMember::_internal_set_live_spectator_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x80000000u;
  live_spectator_team_ = value;
}
inline void CSODOTALobbyMember::set_live_spectator_team(::DOTA_GC_TEAM value) {
  _internal_set_live_spectator_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.live_spectator_team)
}

// optional bool was_mvp_last_game = 43;
inline bool CSODOTALobbyMember::_internal_has_was_mvp_last_game() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_was_mvp_last_game() const {
  return _internal_has_was_mvp_last_game();
}
inline void CSODOTALobbyMember::clear_was_mvp_last_game() {
  was_mvp_last_game_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool CSODOTALobbyMember::_internal_was_mvp_last_game() const {
  return was_mvp_last_game_;
}
inline bool CSODOTALobbyMember::was_mvp_last_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.was_mvp_last_game)
  return _internal_was_mvp_last_game();
}
inline void CSODOTALobbyMember::_internal_set_was_mvp_last_game(bool value) {
  _has_bits_[0] |= 0x02000000u;
  was_mvp_last_game_ = value;
}
inline void CSODOTALobbyMember::set_was_mvp_last_game(bool value) {
  _internal_set_was_mvp_last_game(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.was_mvp_last_game)
}

// repeated .CMsgPendingEventAward pending_awards = 44;
inline int CSODOTALobbyMember::_internal_pending_awards_size() const {
  return pending_awards_.size();
}
inline int CSODOTALobbyMember::pending_awards_size() const {
  return _internal_pending_awards_size();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::mutable_pending_awards(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pending_awards)
  return pending_awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
CSODOTALobbyMember::mutable_pending_awards() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.pending_awards)
  return &pending_awards_;
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::_internal_pending_awards(int index) const {
  return pending_awards_.Get(index);
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::pending_awards(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pending_awards)
  return _internal_pending_awards(index);
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::_internal_add_pending_awards() {
  return pending_awards_.Add();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::add_pending_awards() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.pending_awards)
  return _internal_add_pending_awards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
CSODOTALobbyMember::pending_awards() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.pending_awards)
  return pending_awards_;
}

// repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
inline int CSODOTALobbyMember::_internal_pending_awards_on_victory_size() const {
  return pending_awards_on_victory_.size();
}
inline int CSODOTALobbyMember::pending_awards_on_victory_size() const {
  return _internal_pending_awards_on_victory_size();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::mutable_pending_awards_on_victory(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pending_awards_on_victory)
  return pending_awards_on_victory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
CSODOTALobbyMember::mutable_pending_awards_on_victory() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.pending_awards_on_victory)
  return &pending_awards_on_victory_;
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::_internal_pending_awards_on_victory(int index) const {
  return pending_awards_on_victory_.Get(index);
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::pending_awards_on_victory(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pending_awards_on_victory)
  return _internal_pending_awards_on_victory(index);
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::_internal_add_pending_awards_on_victory() {
  return pending_awards_on_victory_.Add();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::add_pending_awards_on_victory() {
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.pending_awards_on_victory)
  return _internal_add_pending_awards_on_victory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
CSODOTALobbyMember::pending_awards_on_victory() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.pending_awards_on_victory)
  return pending_awards_on_victory_;
}

// optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
inline bool CSODOTALobbyMember::_internal_has_rank_mmr_boost_type() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_mmr_boost_type() const {
  return _internal_has_rank_mmr_boost_type();
}
inline void CSODOTALobbyMember::clear_rank_mmr_boost_type() {
  rank_mmr_boost_type_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::EDOTAMMRBoostType CSODOTALobbyMember::_internal_rank_mmr_boost_type() const {
  return static_cast< ::EDOTAMMRBoostType >(rank_mmr_boost_type_);
}
inline ::EDOTAMMRBoostType CSODOTALobbyMember::rank_mmr_boost_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_mmr_boost_type)
  return _internal_rank_mmr_boost_type();
}
inline void CSODOTALobbyMember::_internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  assert(::EDOTAMMRBoostType_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  rank_mmr_boost_type_ = value;
}
inline void CSODOTALobbyMember::set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  _internal_set_rank_mmr_boost_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_mmr_boost_type)
}

// optional sint32 queue_point_adjustment = 47;
inline bool CSODOTALobbyMember::_internal_has_queue_point_adjustment() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_queue_point_adjustment() const {
  return _internal_has_queue_point_adjustment();
}
inline void CSODOTALobbyMember::clear_queue_point_adjustment() {
  queue_point_adjustment_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::_internal_queue_point_adjustment() const {
  return queue_point_adjustment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::queue_point_adjustment() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.queue_point_adjustment)
  return _internal_queue_point_adjustment();
}
inline void CSODOTALobbyMember::_internal_set_queue_point_adjustment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  queue_point_adjustment_ = value;
}
inline void CSODOTALobbyMember::set_queue_point_adjustment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_point_adjustment(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.queue_point_adjustment)
}

// optional int32 rank_tier = 48;
inline bool CSODOTALobbyMember::_internal_has_rank_tier() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_tier() const {
  return _internal_has_rank_tier();
}
inline void CSODOTALobbyMember::clear_rank_tier() {
  rank_tier_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::_internal_rank_tier() const {
  return rank_tier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSODOTALobbyMember::rank_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_tier)
  return _internal_rank_tier();
}
inline void CSODOTALobbyMember::_internal_set_rank_tier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  rank_tier_ = value;
}
inline void CSODOTALobbyMember::set_rank_tier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank_tier(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_tier)
}

// optional uint32 title = 50;
inline bool CSODOTALobbyMember::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_title() const {
  return _internal_has_title();
}
inline void CSODOTALobbyMember::clear_title() {
  title_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_title() const {
  return title_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::title() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.title)
  return _internal_title();
}
inline void CSODOTALobbyMember::_internal_set_title(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  title_ = value;
}
inline void CSODOTALobbyMember::set_title(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.title)
}

// optional uint32 guild_id = 51;
inline bool CSODOTALobbyMember::_internal_has_guild_id() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CSODOTALobbyMember::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.guild_id)
  return _internal_guild_id();
}
inline void CSODOTALobbyMember::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  guild_id_ = value;
}
inline void CSODOTALobbyMember::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.guild_id)
}

// optional uint32 reports_available = 52;
inline bool CSODOTALobbyMember::_internal_has_reports_available() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_reports_available() const {
  return _internal_has_reports_available();
}
inline void CSODOTALobbyMember::clear_reports_available() {
  reports_available_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_reports_available() const {
  return reports_available_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::reports_available() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.reports_available)
  return _internal_reports_available();
}
inline void CSODOTALobbyMember::_internal_set_reports_available(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  reports_available_ = value;
}
inline void CSODOTALobbyMember::set_reports_available(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reports_available(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.reports_available)
}

// optional bool is_steam_china = 54;
inline bool CSODOTALobbyMember::_internal_has_is_steam_china() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTALobbyMember::clear_is_steam_china() {
  is_steam_china_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool CSODOTALobbyMember::_internal_is_steam_china() const {
  return is_steam_china_;
}
inline bool CSODOTALobbyMember::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTALobbyMember::_internal_set_is_steam_china(bool value) {
  _has_bits_[0] |= 0x04000000u;
  is_steam_china_ = value;
}
inline void CSODOTALobbyMember::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.is_steam_china)
}

// optional uint32 live_spectator_account_id = 55;
inline bool CSODOTALobbyMember::_internal_has_live_spectator_account_id() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_live_spectator_account_id() const {
  return _internal_has_live_spectator_account_id();
}
inline void CSODOTALobbyMember::clear_live_spectator_account_id() {
  live_spectator_account_id_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::_internal_live_spectator_account_id() const {
  return live_spectator_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobbyMember::live_spectator_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.live_spectator_account_id)
  return _internal_live_spectator_account_id();
}
inline void CSODOTALobbyMember::_internal_set_live_spectator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  live_spectator_account_id_ = value;
}
inline void CSODOTALobbyMember::set_live_spectator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_live_spectator_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.live_spectator_account_id)
}

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_name() const {
  return _internal_has_team_name();
}
inline void CLobbyTeamDetails::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return _internal_team_name();
}
inline void CLobbyTeamDetails::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
inline std::string* CLobbyTeamDetails::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CLobbyTeamDetails::_internal_team_name() const {
  return team_name_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyTeamDetails::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_name)
}
inline void CLobbyTeamDetails::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_name)
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyTeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyTeamDetails::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::_internal_has_team_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CLobbyTeamDetails::clear_team_tag() {
  team_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return _internal_team_tag();
}
inline void CLobbyTeamDetails::set_team_tag(const std::string& value) {
  _internal_set_team_tag(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
inline std::string* CLobbyTeamDetails::mutable_team_tag() {
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return _internal_mutable_team_tag();
}
inline const std::string& CLobbyTeamDetails::_internal_team_tag() const {
  return team_tag_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyTeamDetails::set_team_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_tag)
}
inline void CLobbyTeamDetails::set_team_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_tag)
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  return team_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyTeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyTeamDetails::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_id() const {
  return _internal_has_team_id();
}
inline void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTeamDetails::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return _internal_team_id();
}
inline void CLobbyTeamDetails::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  team_id_ = value;
}
inline void CLobbyTeamDetails::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::_internal_has_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::_internal_team_logo() const {
  return team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return _internal_team_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  team_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::_internal_has_team_base_logo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return _internal_has_team_base_logo();
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::_internal_team_base_logo() const {
  return team_base_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return _internal_team_base_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  team_base_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_base_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_base_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::_internal_has_team_banner_logo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return _internal_has_team_banner_logo();
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::_internal_team_banner_logo() const {
  return team_banner_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return _internal_team_banner_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_banner_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  team_banner_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_banner_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_banner_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::_internal_has_team_complete() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_complete() const {
  return _internal_has_team_complete();
}
inline void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CLobbyTeamDetails::_internal_team_complete() const {
  return team_complete_;
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return _internal_team_complete();
}
inline void CLobbyTeamDetails::_internal_set_team_complete(bool value) {
  _has_bits_[0] |= 0x00000100u;
  team_complete_ = value;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  _internal_set_team_complete(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_rank() const {
  return _internal_has_rank();
}
inline void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTeamDetails::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return _internal_rank();
}
inline void CLobbyTeamDetails::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  rank_ = value;
}
inline void CLobbyTeamDetails::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::_internal_has_rank_change() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLobbyTeamDetails::_internal_rank_change() const {
  return rank_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return _internal_rank_change();
}
inline void CLobbyTeamDetails::_internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  rank_change_ = value;
}
inline void CLobbyTeamDetails::set_rank_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::_internal_has_is_home_team() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return _internal_has_is_home_team();
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CLobbyTeamDetails::_internal_is_home_team() const {
  return is_home_team_;
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return _internal_is_home_team();
}
inline void CLobbyTeamDetails::_internal_set_is_home_team(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_home_team_ = value;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  _internal_set_is_home_team(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

// optional bool is_challenge_match = 18;
inline bool CLobbyTeamDetails::_internal_has_is_challenge_match() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_is_challenge_match() const {
  return _internal_has_is_challenge_match();
}
inline void CLobbyTeamDetails::clear_is_challenge_match() {
  is_challenge_match_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CLobbyTeamDetails::_internal_is_challenge_match() const {
  return is_challenge_match_;
}
inline bool CLobbyTeamDetails::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_challenge_match)
  return _internal_is_challenge_match();
}
inline void CLobbyTeamDetails::_internal_set_is_challenge_match(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_challenge_match_ = value;
}
inline void CLobbyTeamDetails::set_is_challenge_match(bool value) {
  _internal_set_is_challenge_match(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_challenge_match)
}

// optional uint64 challenge_match_token_account = 19;
inline bool CLobbyTeamDetails::_internal_has_challenge_match_token_account() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_challenge_match_token_account() const {
  return _internal_has_challenge_match_token_account();
}
inline void CLobbyTeamDetails::clear_challenge_match_token_account() {
  challenge_match_token_account_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::_internal_challenge_match_token_account() const {
  return challenge_match_token_account_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyTeamDetails::challenge_match_token_account() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.challenge_match_token_account)
  return _internal_challenge_match_token_account();
}
inline void CLobbyTeamDetails::_internal_set_challenge_match_token_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  challenge_match_token_account_ = value;
}
inline void CLobbyTeamDetails::set_challenge_match_token_account(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_challenge_match_token_account(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.challenge_match_token_account)
}

// optional string team_logo_url = 20;
inline bool CLobbyTeamDetails::_internal_has_team_logo_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_logo_url() const {
  return _internal_has_team_logo_url();
}
inline void CLobbyTeamDetails::clear_team_logo_url() {
  team_logo_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CLobbyTeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo_url)
  return _internal_team_logo_url();
}
inline void CLobbyTeamDetails::set_team_logo_url(const std::string& value) {
  _internal_set_team_logo_url(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo_url)
}
inline std::string* CLobbyTeamDetails::mutable_team_logo_url() {
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_logo_url)
  return _internal_mutable_team_logo_url();
}
inline const std::string& CLobbyTeamDetails::_internal_team_logo_url() const {
  return team_logo_url_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_logo_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyTeamDetails::set_team_logo_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_logo_url)
}
inline void CLobbyTeamDetails::set_team_logo_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_logo_url)
}
inline void CLobbyTeamDetails::set_team_logo_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_logo_url)
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_logo_url() {
  _has_bits_[0] |= 0x00000004u;
  return team_logo_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyTeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_logo_url)
  if (!_internal_has_team_logo_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_logo_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyTeamDetails::set_allocated_team_logo_url(std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_logo_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_logo_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_logo_url)
}

// optional string team_abbreviation = 21;
inline bool CLobbyTeamDetails::_internal_has_team_abbreviation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_abbreviation() const {
  return _internal_has_team_abbreviation();
}
inline void CLobbyTeamDetails::clear_team_abbreviation() {
  team_abbreviation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CLobbyTeamDetails::team_abbreviation() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_abbreviation)
  return _internal_team_abbreviation();
}
inline void CLobbyTeamDetails::set_team_abbreviation(const std::string& value) {
  _internal_set_team_abbreviation(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_abbreviation)
}
inline std::string* CLobbyTeamDetails::mutable_team_abbreviation() {
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_abbreviation)
  return _internal_mutable_team_abbreviation();
}
inline const std::string& CLobbyTeamDetails::_internal_team_abbreviation() const {
  return team_abbreviation_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_abbreviation(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyTeamDetails::set_team_abbreviation(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  team_abbreviation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyTeamDetails.team_abbreviation)
}
inline void CLobbyTeamDetails::set_team_abbreviation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyTeamDetails.team_abbreviation)
}
inline void CLobbyTeamDetails::set_team_abbreviation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyTeamDetails.team_abbreviation)
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_abbreviation() {
  _has_bits_[0] |= 0x00000008u;
  return team_abbreviation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyTeamDetails::release_team_abbreviation() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_abbreviation)
  if (!_internal_has_team_abbreviation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return team_abbreviation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyTeamDetails::set_allocated_team_abbreviation(std::string* team_abbreviation) {
  if (team_abbreviation != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  team_abbreviation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_abbreviation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_abbreviation)
}

// -------------------------------------------------------------------

// CLobbyGuildDetails

// optional uint32 guild_id = 1;
inline bool CLobbyGuildDetails::_internal_has_guild_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CLobbyGuildDetails::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_id)
  return _internal_guild_id();
}
inline void CLobbyGuildDetails::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  guild_id_ = value;
}
inline void CLobbyGuildDetails::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_id)
}

// optional uint32 guild_primary_color = 2;
inline bool CLobbyGuildDetails::_internal_has_guild_primary_color() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_primary_color() const {
  return _internal_has_guild_primary_color();
}
inline void CLobbyGuildDetails::clear_guild_primary_color() {
  guild_primary_color_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_primary_color() const {
  return guild_primary_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_primary_color() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_primary_color)
  return _internal_guild_primary_color();
}
inline void CLobbyGuildDetails::_internal_set_guild_primary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  guild_primary_color_ = value;
}
inline void CLobbyGuildDetails::set_guild_primary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_primary_color(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_primary_color)
}

// optional uint32 guild_secondary_color = 3;
inline bool CLobbyGuildDetails::_internal_has_guild_secondary_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_secondary_color() const {
  return _internal_has_guild_secondary_color();
}
inline void CLobbyGuildDetails::clear_guild_secondary_color() {
  guild_secondary_color_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_secondary_color() const {
  return guild_secondary_color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_secondary_color() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_secondary_color)
  return _internal_guild_secondary_color();
}
inline void CLobbyGuildDetails::_internal_set_guild_secondary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  guild_secondary_color_ = value;
}
inline void CLobbyGuildDetails::set_guild_secondary_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_secondary_color(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_secondary_color)
}

// optional uint32 guild_pattern = 4;
inline bool CLobbyGuildDetails::_internal_has_guild_pattern() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_pattern() const {
  return _internal_has_guild_pattern();
}
inline void CLobbyGuildDetails::clear_guild_pattern() {
  guild_pattern_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_pattern() const {
  return guild_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_pattern() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_pattern)
  return _internal_guild_pattern();
}
inline void CLobbyGuildDetails::_internal_set_guild_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  guild_pattern_ = value;
}
inline void CLobbyGuildDetails::set_guild_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_pattern(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_pattern)
}

// optional uint64 guild_logo = 5;
inline bool CLobbyGuildDetails::_internal_has_guild_logo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_logo() const {
  return _internal_has_guild_logo();
}
inline void CLobbyGuildDetails::clear_guild_logo() {
  guild_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyGuildDetails::_internal_guild_logo() const {
  return guild_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CLobbyGuildDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_logo)
  return _internal_guild_logo();
}
inline void CLobbyGuildDetails::_internal_set_guild_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  guild_logo_ = value;
}
inline void CLobbyGuildDetails::set_guild_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guild_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_logo)
}

// optional uint32 guild_points = 6;
inline bool CLobbyGuildDetails::_internal_has_guild_points() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_points() const {
  return _internal_has_guild_points();
}
inline void CLobbyGuildDetails::clear_guild_points() {
  guild_points_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_points() const {
  return guild_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_points() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_points)
  return _internal_guild_points();
}
inline void CLobbyGuildDetails::_internal_set_guild_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  guild_points_ = value;
}
inline void CLobbyGuildDetails::set_guild_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_points(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_points)
}

// optional uint32 guild_event = 7;
inline bool CLobbyGuildDetails::_internal_has_guild_event() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_event() const {
  return _internal_has_guild_event();
}
inline void CLobbyGuildDetails::clear_guild_event() {
  guild_event_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_event() const {
  return guild_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_event() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_event)
  return _internal_guild_event();
}
inline void CLobbyGuildDetails::_internal_set_guild_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  guild_event_ = value;
}
inline void CLobbyGuildDetails::set_guild_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_event(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_event)
}

// optional uint32 guild_flags = 8;
inline bool CLobbyGuildDetails::_internal_has_guild_flags() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_flags() const {
  return _internal_has_guild_flags();
}
inline void CLobbyGuildDetails::clear_guild_flags() {
  guild_flags_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_flags() const {
  return guild_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_flags() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_flags)
  return _internal_guild_flags();
}
inline void CLobbyGuildDetails::_internal_set_guild_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  guild_flags_ = value;
}
inline void CLobbyGuildDetails::set_guild_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_flags(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_flags)
}

// optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CLobbyGuildDetails::_internal_has_team_for_guild() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_team_for_guild() const {
  return _internal_has_team_for_guild();
}
inline void CLobbyGuildDetails::clear_team_for_guild() {
  team_for_guild_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::DOTA_GC_TEAM CLobbyGuildDetails::_internal_team_for_guild() const {
  return static_cast< ::DOTA_GC_TEAM >(team_for_guild_);
}
inline ::DOTA_GC_TEAM CLobbyGuildDetails::team_for_guild() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.team_for_guild)
  return _internal_team_for_guild();
}
inline void CLobbyGuildDetails::_internal_set_team_for_guild(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  team_for_guild_ = value;
}
inline void CLobbyGuildDetails::set_team_for_guild(::DOTA_GC_TEAM value) {
  _internal_set_team_for_guild(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.team_for_guild)
}

// optional string guild_tag = 10;
inline bool CLobbyGuildDetails::_internal_has_guild_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_tag() const {
  return _internal_has_guild_tag();
}
inline void CLobbyGuildDetails::clear_guild_tag() {
  guild_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyGuildDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_tag)
  return _internal_guild_tag();
}
inline void CLobbyGuildDetails::set_guild_tag(const std::string& value) {
  _internal_set_guild_tag(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_tag)
}
inline std::string* CLobbyGuildDetails::mutable_guild_tag() {
  // @@protoc_insertion_point(field_mutable:CLobbyGuildDetails.guild_tag)
  return _internal_mutable_guild_tag();
}
inline const std::string& CLobbyGuildDetails::_internal_guild_tag() const {
  return guild_tag_.Get();
}
inline void CLobbyGuildDetails::_internal_set_guild_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guild_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyGuildDetails::set_guild_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guild_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyGuildDetails.guild_tag)
}
inline void CLobbyGuildDetails::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guild_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyGuildDetails.guild_tag)
}
inline void CLobbyGuildDetails::set_guild_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guild_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyGuildDetails.guild_tag)
}
inline std::string* CLobbyGuildDetails::_internal_mutable_guild_tag() {
  _has_bits_[0] |= 0x00000001u;
  return guild_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyGuildDetails::release_guild_tag() {
  // @@protoc_insertion_point(field_release:CLobbyGuildDetails.guild_tag)
  if (!_internal_has_guild_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guild_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyGuildDetails::set_allocated_guild_tag(std::string* guild_tag) {
  if (guild_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guild_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyGuildDetails.guild_tag)
}

// optional uint32 guild_weekly_percentile = 11;
inline bool CLobbyGuildDetails::_internal_has_guild_weekly_percentile() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_weekly_percentile() const {
  return _internal_has_guild_weekly_percentile();
}
inline void CLobbyGuildDetails::clear_guild_weekly_percentile() {
  guild_weekly_percentile_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::_internal_guild_weekly_percentile() const {
  return guild_weekly_percentile_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildDetails::guild_weekly_percentile() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_weekly_percentile)
  return _internal_guild_weekly_percentile();
}
inline void CLobbyGuildDetails::_internal_set_guild_weekly_percentile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  guild_weekly_percentile_ = value;
}
inline void CLobbyGuildDetails::set_guild_weekly_percentile(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_weekly_percentile(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_weekly_percentile)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::_internal_has_item_def_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::_internal_item_def_index() const {
  return item_def_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return _internal_item_def_index();
}
inline void CLobbyTimedRewardDetails::_internal_set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_def_index_ = value;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::_internal_has_is_supply_crate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return _internal_has_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_supply_crate() const {
  return is_supply_crate_;
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return _internal_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_supply_crate(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_supply_crate_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  _internal_set_is_supply_crate(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::_internal_has_is_timed_drop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return _internal_has_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_timed_drop() const {
  return is_timed_drop_;
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return _internal_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_timed_drop(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_timed_drop_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  _internal_set_is_timed_drop(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return _internal_has_account_id();
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return _internal_account_id();
}
inline void CLobbyTimedRewardDetails::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  account_id_ = value;
}
inline void CLobbyTimedRewardDetails::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return _internal_has_origin();
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return _internal_origin();
}
inline void CLobbyTimedRewardDetails::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  origin_ = value;
}
inline void CLobbyTimedRewardDetails::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::_internal_has_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyBroadcastChannelInfo::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.channel_id)
  return _internal_channel_id();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_id_ = value;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return _internal_has_country_code();
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.country_code)
  return _internal_country_code();
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.country_code)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_country_code() const {
  return country_code_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.country_code)
}
inline void CLobbyBroadcastChannelInfo::set_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.country_code)
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000001u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return _internal_has_description();
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.description)
  return _internal_description();
}
inline void CLobbyBroadcastChannelInfo::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.description)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.description)
  return _internal_mutable_description();
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_description() const {
  return description_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.description)
}
inline void CLobbyBroadcastChannelInfo::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.description)
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyBroadcastChannelInfo::release_description() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
inline bool CLobbyBroadcastChannelInfo::_internal_has_language_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return _internal_has_language_code();
}
inline void CLobbyBroadcastChannelInfo::clear_language_code() {
  language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.language_code)
  return _internal_language_code();
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.language_code)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_language_code() const {
  return language_code_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CLobbyBroadcastChannelInfo.language_code)
}
inline void CLobbyBroadcastChannelInfo::set_language_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CLobbyBroadcastChannelInfo.language_code)
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_language_code() {
  _has_bits_[0] |= 0x00000004u;
  return language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CLobbyBroadcastChannelInfo::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.language_code)
}

// -------------------------------------------------------------------

// CLobbyGuildChallenge

// optional uint32 guild_id = 1;
inline bool CLobbyGuildChallenge::_internal_has_guild_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CLobbyGuildChallenge::clear_guild_id() {
  guild_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_guild_id() const {
  return guild_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.guild_id)
  return _internal_guild_id();
}
inline void CLobbyGuildChallenge::_internal_set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  guild_id_ = value;
}
inline void CLobbyGuildChallenge::set_guild_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.guild_id)
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CLobbyGuildChallenge::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_event_id() const {
  return _internal_has_event_id();
}
inline void CLobbyGuildChallenge::clear_event_id() {
  event_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CLobbyGuildChallenge::_internal_event_id() const {
  return static_cast< ::EEvent >(event_id_);
}
inline ::EEvent CLobbyGuildChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.event_id)
  return _internal_event_id();
}
inline void CLobbyGuildChallenge::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  event_id_ = value;
}
inline void CLobbyGuildChallenge::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.event_id)
}

// optional uint32 challenge_instance_id = 3;
inline bool CLobbyGuildChallenge::_internal_has_challenge_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CLobbyGuildChallenge::clear_challenge_instance_id() {
  challenge_instance_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_challenge_instance_id() const {
  return challenge_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_instance_id_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_instance_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_instance_id)
}

// optional uint32 challenge_parameter = 4;
inline bool CLobbyGuildChallenge::_internal_has_challenge_parameter() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CLobbyGuildChallenge::clear_challenge_parameter() {
  challenge_parameter_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_challenge_parameter() const {
  return challenge_parameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  challenge_parameter_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_parameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_parameter)
}

// optional uint32 challenge_timestamp = 5;
inline bool CLobbyGuildChallenge::_internal_has_challenge_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_timestamp() const {
  return _internal_has_challenge_timestamp();
}
inline void CLobbyGuildChallenge::clear_challenge_timestamp() {
  challenge_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_challenge_timestamp() const {
  return challenge_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_timestamp)
  return _internal_challenge_timestamp();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  challenge_timestamp_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_timestamp(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_timestamp)
}

// optional uint32 challenge_period_serial = 6;
inline bool CLobbyGuildChallenge::_internal_has_challenge_period_serial() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_period_serial() const {
  return _internal_has_challenge_period_serial();
}
inline void CLobbyGuildChallenge::clear_challenge_period_serial() {
  challenge_period_serial_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_challenge_period_serial() const {
  return challenge_period_serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::challenge_period_serial() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_period_serial)
  return _internal_challenge_period_serial();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_period_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  challenge_period_serial_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_period_serial(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_period_serial(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_period_serial)
}

// optional uint32 challenge_progress_at_start = 7;
inline bool CLobbyGuildChallenge::_internal_has_challenge_progress_at_start() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_progress_at_start() const {
  return _internal_has_challenge_progress_at_start();
}
inline void CLobbyGuildChallenge::clear_challenge_progress_at_start() {
  challenge_progress_at_start_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_challenge_progress_at_start() const {
  return challenge_progress_at_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::challenge_progress_at_start() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_progress_at_start)
  return _internal_challenge_progress_at_start();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_progress_at_start_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_progress_at_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_progress_at_start(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_progress_at_start)
}

// repeated uint32 eligible_account_ids = 8;
inline int CLobbyGuildChallenge::_internal_eligible_account_ids_size() const {
  return eligible_account_ids_.size();
}
inline int CLobbyGuildChallenge::eligible_account_ids_size() const {
  return _internal_eligible_account_ids_size();
}
inline void CLobbyGuildChallenge::clear_eligible_account_ids() {
  eligible_account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::_internal_eligible_account_ids(int index) const {
  return eligible_account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CLobbyGuildChallenge::eligible_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_eligible_account_ids(index);
}
inline void CLobbyGuildChallenge::set_eligible_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  eligible_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.eligible_account_ids)
}
inline void CLobbyGuildChallenge::_internal_add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  eligible_account_ids_.Add(value);
}
inline void CLobbyGuildChallenge::add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_eligible_account_ids(value);
  // @@protoc_insertion_point(field_add:CLobbyGuildChallenge.eligible_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CLobbyGuildChallenge::_internal_eligible_account_ids() const {
  return eligible_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CLobbyGuildChallenge::eligible_account_ids() const {
  // @@protoc_insertion_point(field_list:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_eligible_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CLobbyGuildChallenge::_internal_mutable_eligible_account_ids() {
  return &eligible_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CLobbyGuildChallenge::mutable_eligible_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_mutable_eligible_account_ids();
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return _internal_has_id();
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby_CExtraMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.id)
  return _internal_id();
}
inline void CSODOTALobby_CExtraMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CSODOTALobby_CExtraMsg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::_internal_has_contents() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return _internal_has_contents();
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  contents_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.contents)
  return _internal_contents();
}
inline void CSODOTALobby_CExtraMsg::set_contents(const std::string& value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.contents)
}
inline std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.CExtraMsg.contents)
  return _internal_mutable_contents();
}
inline const std::string& CSODOTALobby_CExtraMsg::_internal_contents() const {
  return contents_.Get();
}
inline void CSODOTALobby_CExtraMsg::_internal_set_contents(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby_CExtraMsg::set_contents(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  contents_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.CExtraMsg.contents)
}
inline void CSODOTALobby_CExtraMsg::set_contents(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.CExtraMsg.contents)
}
inline std::string* CSODOTALobby_CExtraMsg::_internal_mutable_contents() {
  _has_bits_[0] |= 0x00000001u;
  return contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby_CExtraMsg::release_contents() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.CExtraMsg.contents)
  if (!_internal_has_contents()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return contents_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby_CExtraMsg::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1 [(.key_field) = true];
inline bool CSODOTALobby::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return _internal_lobby_id();
}
inline void CSODOTALobby::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  lobby_id_ = value;
}
inline void CSODOTALobby::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CSODOTALobbyMember v2_members = 2;
inline int CSODOTALobby::_internal_v2_members_size() const {
  return v2_members_.size();
}
inline int CSODOTALobby::v2_members_size() const {
  return _internal_v2_members_size();
}
inline void CSODOTALobby::clear_v2_members() {
  v2_members_.Clear();
}
inline ::CSODOTALobbyMember* CSODOTALobby::mutable_v2_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.v2_members)
  return v2_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
CSODOTALobby::mutable_v2_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.v2_members)
  return &v2_members_;
}
inline const ::CSODOTALobbyMember& CSODOTALobby::_internal_v2_members(int index) const {
  return v2_members_.Get(index);
}
inline const ::CSODOTALobbyMember& CSODOTALobby::v2_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.v2_members)
  return _internal_v2_members(index);
}
inline ::CSODOTALobbyMember* CSODOTALobby::_internal_add_v2_members() {
  return v2_members_.Add();
}
inline ::CSODOTALobbyMember* CSODOTALobby::add_v2_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.v2_members)
  return _internal_add_v2_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
CSODOTALobby::v2_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.v2_members)
  return v2_members_;
}

// repeated .CSODOTALobbyMember v2_left_members = 7;
inline int CSODOTALobby::_internal_v2_left_members_size() const {
  return v2_left_members_.size();
}
inline int CSODOTALobby::v2_left_members_size() const {
  return _internal_v2_left_members_size();
}
inline void CSODOTALobby::clear_v2_left_members() {
  v2_left_members_.Clear();
}
inline ::CSODOTALobbyMember* CSODOTALobby::mutable_v2_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.v2_left_members)
  return v2_left_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
CSODOTALobby::mutable_v2_left_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.v2_left_members)
  return &v2_left_members_;
}
inline const ::CSODOTALobbyMember& CSODOTALobby::_internal_v2_left_members(int index) const {
  return v2_left_members_.Get(index);
}
inline const ::CSODOTALobbyMember& CSODOTALobby::v2_left_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.v2_left_members)
  return _internal_v2_left_members(index);
}
inline ::CSODOTALobbyMember* CSODOTALobby::_internal_add_v2_left_members() {
  return v2_left_members_.Add();
}
inline ::CSODOTALobbyMember* CSODOTALobby::add_v2_left_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.v2_left_members)
  return _internal_add_v2_left_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
CSODOTALobby::v2_left_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.v2_left_members)
  return v2_left_members_;
}

// repeated .CSODOTALobbyMember all_members = 120;
inline int CSODOTALobby::_internal_all_members_size() const {
  return all_members_.size();
}
inline int CSODOTALobby::all_members_size() const {
  return _internal_all_members_size();
}
inline void CSODOTALobby::clear_all_members() {
  all_members_.Clear();
}
inline ::CSODOTALobbyMember* CSODOTALobby::mutable_all_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.all_members)
  return all_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
CSODOTALobby::mutable_all_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.all_members)
  return &all_members_;
}
inline const ::CSODOTALobbyMember& CSODOTALobby::_internal_all_members(int index) const {
  return all_members_.Get(index);
}
inline const ::CSODOTALobbyMember& CSODOTALobby::all_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.all_members)
  return _internal_all_members(index);
}
inline ::CSODOTALobbyMember* CSODOTALobby::_internal_add_all_members() {
  return all_members_.Add();
}
inline ::CSODOTALobbyMember* CSODOTALobby::add_all_members() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.all_members)
  return _internal_add_all_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
CSODOTALobby::all_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.all_members)
  return all_members_;
}

// repeated uint32 member_indices = 121;
inline int CSODOTALobby::_internal_member_indices_size() const {
  return member_indices_.size();
}
inline int CSODOTALobby::member_indices_size() const {
  return _internal_member_indices_size();
}
inline void CSODOTALobby::clear_member_indices() {
  member_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_member_indices(int index) const {
  return member_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.member_indices)
  return _internal_member_indices(index);
}
inline void CSODOTALobby::set_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.member_indices)
}
inline void CSODOTALobby::_internal_add_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  member_indices_.Add(value);
}
inline void CSODOTALobby::add_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::_internal_member_indices() const {
  return member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.member_indices)
  return _internal_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::_internal_mutable_member_indices() {
  return &member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::mutable_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.member_indices)
  return _internal_mutable_member_indices();
}

// repeated uint32 left_member_indices = 122;
inline int CSODOTALobby::_internal_left_member_indices_size() const {
  return left_member_indices_.size();
}
inline int CSODOTALobby::left_member_indices_size() const {
  return _internal_left_member_indices_size();
}
inline void CSODOTALobby::clear_left_member_indices() {
  left_member_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_left_member_indices(int index) const {
  return left_member_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::left_member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_member_indices)
  return _internal_left_member_indices(index);
}
inline void CSODOTALobby::set_left_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  left_member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.left_member_indices)
}
inline void CSODOTALobby::_internal_add_left_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  left_member_indices_.Add(value);
}
inline void CSODOTALobby::add_left_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_left_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::_internal_left_member_indices() const {
  return left_member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::left_member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_member_indices)
  return _internal_left_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::_internal_mutable_left_member_indices() {
  return &left_member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::mutable_left_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_member_indices)
  return _internal_mutable_left_member_indices();
}

// repeated uint32 free_member_indices = 123;
inline int CSODOTALobby::_internal_free_member_indices_size() const {
  return free_member_indices_.size();
}
inline int CSODOTALobby::free_member_indices_size() const {
  return _internal_free_member_indices_size();
}
inline void CSODOTALobby::clear_free_member_indices() {
  free_member_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_free_member_indices(int index) const {
  return free_member_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::free_member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.free_member_indices)
  return _internal_free_member_indices(index);
}
inline void CSODOTALobby::set_free_member_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  free_member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.free_member_indices)
}
inline void CSODOTALobby::_internal_add_free_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  free_member_indices_.Add(value);
}
inline void CSODOTALobby::add_free_member_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_free_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.free_member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::_internal_free_member_indices() const {
  return free_member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::free_member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.free_member_indices)
  return _internal_free_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::_internal_mutable_free_member_indices() {
  return &free_member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::mutable_free_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.free_member_indices)
  return _internal_mutable_free_member_indices();
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::_internal_has_leader_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void CSODOTALobby::clear_leader_id() {
  leader_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_leader_id() const {
  return leader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return _internal_leader_id();
}
inline void CSODOTALobby::_internal_set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  leader_id_ = value;
}
inline void CSODOTALobby::set_leader_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_server_id() const {
  return _internal_has_server_id();
}
inline void CSODOTALobby::clear_server_id() {
  server_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return _internal_server_id();
}
inline void CSODOTALobby::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  server_id_ = value;
}
inline void CSODOTALobby::set_server_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return _internal_game_mode();
}
inline void CSODOTALobby::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_mode_ = value;
}
inline void CSODOTALobby::set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::_internal_pending_invites_size() const {
  return pending_invites_.size();
}
inline int CSODOTALobby::pending_invites_size() const {
  return _internal_pending_invites_size();
}
inline void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_pending_invites(int index) const {
  return pending_invites_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return _internal_pending_invites(index);
}
inline void CSODOTALobby::set_pending_invites(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::_internal_add_pending_invites(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  pending_invites_.Add(value);
}
inline void CSODOTALobby::add_pending_invites(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_pending_invites(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTALobby::_internal_pending_invites() const {
  return pending_invites_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return _internal_pending_invites();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTALobby::_internal_mutable_pending_invites() {
  return &pending_invites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return _internal_mutable_pending_invites();
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_state() const {
  return _internal_has_state();
}
inline void CSODOTALobby::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::CSODOTALobby_State CSODOTALobby::_internal_state() const {
  return static_cast< ::CSODOTALobby_State >(state_);
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return _internal_state();
}
inline void CSODOTALobby::_internal_set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  state_ = value;
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::_internal_has_connect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_connect() const {
  return _internal_has_connect();
}
inline void CSODOTALobby::clear_connect() {
  connect_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return _internal_connect();
}
inline void CSODOTALobby::set_connect(const std::string& value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
inline std::string* CSODOTALobby::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return _internal_mutable_connect();
}
inline const std::string& CSODOTALobby::_internal_connect() const {
  return connect_.Get();
}
inline void CSODOTALobby::_internal_set_connect(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_connect(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connect_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.connect)
}
inline void CSODOTALobby::set_connect(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.connect)
}
inline std::string* CSODOTALobby::_internal_mutable_connect() {
  _has_bits_[0] |= 0x00000001u;
  return connect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_connect() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.connect)
  if (!_internal_has_connect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connect_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_connect(std::string* connect) {
  if (connect != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connect,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::_internal_has_lobby_type() const {
  bool value = (_has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  _has_bits_[2] &= ~0x00004000u;
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::_internal_lobby_type() const {
  return static_cast< ::CSODOTALobby_LobbyType >(lobby_type_);
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return _internal_lobby_type();
}
inline void CSODOTALobby::_internal_set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  _has_bits_[2] |= 0x00004000u;
  lobby_type_ = value;
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::_internal_has_allow_cheats() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allow_cheats() const {
  return _internal_has_allow_cheats();
}
inline void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CSODOTALobby::_internal_allow_cheats() const {
  return allow_cheats_;
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return _internal_allow_cheats();
}
inline void CSODOTALobby::_internal_set_allow_cheats(bool value) {
  _has_bits_[0] |= 0x00040000u;
  allow_cheats_ = value;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  _internal_set_allow_cheats(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::_internal_has_fill_with_bots() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_fill_with_bots() const {
  return _internal_has_fill_with_bots();
}
inline void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool CSODOTALobby::_internal_fill_with_bots() const {
  return fill_with_bots_;
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return _internal_fill_with_bots();
}
inline void CSODOTALobby::_internal_set_fill_with_bots(bool value) {
  _has_bits_[0] |= 0x00080000u;
  fill_with_bots_ = value;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  _internal_set_fill_with_bots(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::_internal_has_intro_mode() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_intro_mode() const {
  return _internal_has_intro_mode();
}
inline void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool CSODOTALobby::_internal_intro_mode() const {
  return intro_mode_;
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return _internal_intro_mode();
}
inline void CSODOTALobby::_internal_set_intro_mode(bool value) {
  _has_bits_[0] |= 0x00100000u;
  intro_mode_ = value;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  _internal_set_intro_mode(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::_internal_has_game_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_name() const {
  return _internal_has_game_name();
}
inline void CSODOTALobby::clear_game_name() {
  game_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return _internal_game_name();
}
inline void CSODOTALobby::set_game_name(const std::string& value) {
  _internal_set_game_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
inline std::string* CSODOTALobby::mutable_game_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return _internal_mutable_game_name();
}
inline const std::string& CSODOTALobby::_internal_game_name() const {
  return game_name_.Get();
}
inline void CSODOTALobby::_internal_set_game_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_game_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.game_name)
}
inline void CSODOTALobby::set_game_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.game_name)
}
inline std::string* CSODOTALobby::_internal_mutable_game_name() {
  _has_bits_[0] |= 0x00000002u;
  return game_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_game_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::_internal_team_details_size() const {
  return team_details_.size();
}
inline int CSODOTALobby::team_details_size() const {
  return _internal_team_details_size();
}
inline void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &team_details_;
}
inline const ::CLobbyTeamDetails& CSODOTALobby::_internal_team_details(int index) const {
  return team_details_.Get(index);
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return _internal_team_details(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::_internal_add_team_details() {
  return team_details_.Add();
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return _internal_add_team_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::_internal_has_tutorial_lesson() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return _internal_has_tutorial_lesson();
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_tutorial_lesson() const {
  return tutorial_lesson_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return _internal_tutorial_lesson();
}
inline void CSODOTALobby::_internal_set_tutorial_lesson(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tutorial_lesson_ = value;
}
inline void CSODOTALobby::set_tutorial_lesson(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tutorial_lesson(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::_internal_has_tournament_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_tournament_id() const {
  return tournament_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return _internal_tournament_id();
}
inline void CSODOTALobby::_internal_set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  tournament_id_ = value;
}
inline void CSODOTALobby::set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::_internal_has_tournament_game_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tournament_game_id() const {
  return _internal_has_tournament_game_id();
}
inline void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_tournament_game_id() const {
  return tournament_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return _internal_tournament_game_id();
}
inline void CSODOTALobby::_internal_set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  tournament_game_id_ = value;
}
inline void CSODOTALobby::set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tournament_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_server_region() const {
  return _internal_has_server_region();
}
inline void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return _internal_server_region();
}
inline void CSODOTALobby::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  server_region_ = value;
}
inline void CSODOTALobby::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::_internal_has_game_state() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_state() const {
  return _internal_has_game_state();
}
inline void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::DOTA_GameState CSODOTALobby::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(game_state_);
}
inline ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return _internal_game_state();
}
inline void CSODOTALobby::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  game_state_ = value;
}
inline void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::_internal_has_num_spectators() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_num_spectators() const {
  return _internal_has_num_spectators();
}
inline void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_num_spectators() const {
  return num_spectators_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return _internal_num_spectators();
}
inline void CSODOTALobby::_internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  num_spectators_ = value;
}
inline void CSODOTALobby::set_num_spectators(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_spectators(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::_internal_has_matchgroup() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_matchgroup() const {
  return _internal_has_matchgroup();
}
inline void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_matchgroup() const {
  return matchgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return _internal_matchgroup();
}
inline void CSODOTALobby::_internal_set_matchgroup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  matchgroup_ = value;
}
inline void CSODOTALobby::set_matchgroup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchgroup(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::_internal_has_cm_pick() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_cm_pick() const {
  return _internal_has_cm_pick();
}
inline void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::DOTA_CM_PICK CSODOTALobby::_internal_cm_pick() const {
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return _internal_cm_pick();
}
inline void CSODOTALobby::_internal_set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  cm_pick_ = value;
}
inline void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  _internal_set_cm_pick(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
inline bool CSODOTALobby::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_id() const {
  return _internal_has_match_id();
}
inline void CSODOTALobby::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return _internal_match_id();
}
inline void CSODOTALobby::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  match_id_ = value;
}
inline void CSODOTALobby::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::_internal_has_allow_spectating() const {
  bool value = (_has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allow_spectating() const {
  return _internal_has_allow_spectating();
}
inline void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  _has_bits_[2] &= ~0x00008000u;
}
inline bool CSODOTALobby::_internal_allow_spectating() const {
  return allow_spectating_;
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return _internal_allow_spectating();
}
inline void CSODOTALobby::_internal_set_allow_spectating(bool value) {
  _has_bits_[2] |= 0x00008000u;
  allow_spectating_ = value;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  _internal_set_allow_spectating(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::_internal_has_bot_difficulty_radiant() const {
  bool value = (_has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_difficulty_radiant() const {
  return _internal_has_bot_difficulty_radiant();
}
inline void CSODOTALobby::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 3;
  _has_bits_[2] &= ~0x00010000u;
}
inline ::DOTABotDifficulty CSODOTALobby::_internal_bot_difficulty_radiant() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_radiant)
  return _internal_bot_difficulty_radiant();
}
inline void CSODOTALobby::_internal_set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[2] |= 0x00010000u;
  bot_difficulty_radiant_ = value;
}
inline void CSODOTALobby::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_radiant)
}

// optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
inline bool CSODOTALobby::_internal_has_game_version() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_version() const {
  return _internal_has_game_version();
}
inline void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::DOTAGameVersion CSODOTALobby::_internal_game_version() const {
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline ::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_version)
  return _internal_game_version();
}
inline void CSODOTALobby::_internal_set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  _has_bits_[0] |= 0x02000000u;
  game_version_ = value;
}
inline void CSODOTALobby::set_game_version(::DOTAGameVersion value) {
  _internal_set_game_version(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_version)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::_internal_timed_reward_details_size() const {
  return timed_reward_details_.size();
}
inline int CSODOTALobby::timed_reward_details_size() const {
  return _internal_timed_reward_details_size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::_internal_timed_reward_details(int index) const {
  return timed_reward_details_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return _internal_timed_reward_details(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::_internal_add_timed_reward_details() {
  return timed_reward_details_.Add();
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return _internal_add_timed_reward_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CSODOTALobby::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return _internal_pass_key();
}
inline void CSODOTALobby::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
inline std::string* CSODOTALobby::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CSODOTALobby::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CSODOTALobby::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.pass_key)
}
inline void CSODOTALobby::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.pass_key)
}
inline std::string* CSODOTALobby::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000004u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_pass_key() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::_internal_has_leagueid() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_leagueid() const {
  return _internal_has_leagueid();
}
inline void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_leagueid() const {
  return leagueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return _internal_leagueid();
}
inline void CSODOTALobby::_internal_set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  leagueid_ = value;
}
inline void CSODOTALobby::set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leagueid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::_internal_has_penalty_level_radiant() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return _internal_has_penalty_level_radiant();
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_penalty_level_radiant() const {
  return penalty_level_radiant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return _internal_penalty_level_radiant();
}
inline void CSODOTALobby::_internal_set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  penalty_level_radiant_ = value;
}
inline void CSODOTALobby::set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_level_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::_internal_has_penalty_level_dire() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return _internal_has_penalty_level_dire();
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_penalty_level_dire() const {
  return penalty_level_dire_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return _internal_penalty_level_dire();
}
inline void CSODOTALobby::_internal_set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  penalty_level_dire_ = value;
}
inline void CSODOTALobby::set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_level_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::_internal_has_load_game_id() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_load_game_id() const {
  return _internal_has_load_game_id();
}
inline void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_load_game_id() const {
  return load_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return _internal_load_game_id();
}
inline void CSODOTALobby::_internal_set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  load_game_id_ = value;
}
inline void CSODOTALobby::set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_load_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::_internal_has_series_type() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_type() const {
  return _internal_has_series_type();
}
inline void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_series_type() const {
  return series_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return _internal_series_type();
}
inline void CSODOTALobby::_internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  series_type_ = value;
}
inline void CSODOTALobby::set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::_internal_has_radiant_series_wins() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return _internal_has_radiant_series_wins();
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_radiant_series_wins() const {
  return radiant_series_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return _internal_radiant_series_wins();
}
inline void CSODOTALobby::_internal_set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  radiant_series_wins_ = value;
}
inline void CSODOTALobby::set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radiant_series_wins(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::_internal_has_dire_series_wins() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_dire_series_wins() const {
  return _internal_has_dire_series_wins();
}
inline void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_dire_series_wins() const {
  return dire_series_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return _internal_dire_series_wins();
}
inline void CSODOTALobby::_internal_set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  dire_series_wins_ = value;
}
inline void CSODOTALobby::set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dire_series_wins(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::_internal_has_loot_generated() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_loot_generated() const {
  return _internal_has_loot_generated();
}
inline void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_loot_generated() const {
  return loot_generated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return _internal_loot_generated();
}
inline void CSODOTALobby::_internal_set_loot_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  loot_generated_ = value;
}
inline void CSODOTALobby::set_loot_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loot_generated(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::_internal_has_loot_awarded() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_loot_awarded() const {
  return _internal_has_loot_awarded();
}
inline void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_loot_awarded() const {
  return loot_awarded_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return _internal_loot_awarded();
}
inline void CSODOTALobby::_internal_set_loot_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  loot_awarded_ = value;
}
inline void CSODOTALobby::set_loot_awarded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loot_awarded(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::_internal_has_allchat() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allchat() const {
  return _internal_has_allchat();
}
inline void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool CSODOTALobby::_internal_allchat() const {
  return allchat_;
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return _internal_allchat();
}
inline void CSODOTALobby::_internal_set_allchat(bool value) {
  _has_bits_[0] |= 0x00200000u;
  allchat_ = value;
}
inline void CSODOTALobby::set_allchat(bool value) {
  _internal_set_allchat(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::_internal_has_dota_tv_delay() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return _internal_has_dota_tv_delay();
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::LobbyDotaTVDelay CSODOTALobby::_internal_dota_tv_delay() const {
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return _internal_dota_tv_delay();
}
inline void CSODOTALobby::_internal_set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  _has_bits_[1] |= 0x00000008u;
  dota_tv_delay_ = value;
}
inline void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  _internal_set_dota_tv_delay(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::_internal_has_custom_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_mode() const {
  return _internal_has_custom_game_mode();
}
inline void CSODOTALobby::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_mode)
  return _internal_custom_game_mode();
}
inline void CSODOTALobby::set_custom_game_mode(const std::string& value) {
  _internal_set_custom_game_mode(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_mode)
}
inline std::string* CSODOTALobby::mutable_custom_game_mode() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_game_mode)
  return _internal_mutable_custom_game_mode();
}
inline const std::string& CSODOTALobby::_internal_custom_game_mode() const {
  return custom_game_mode_.Get();
}
inline void CSODOTALobby::_internal_set_custom_game_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_custom_game_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_game_mode)
}
inline void CSODOTALobby::set_custom_game_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_game_mode)
}
inline std::string* CSODOTALobby::_internal_mutable_custom_game_mode() {
  _has_bits_[0] |= 0x00000008u;
  return custom_game_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.custom_game_mode)
  if (!_internal_has_custom_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return custom_game_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_custom_game_mode(std::string* custom_game_mode) {
  if (custom_game_mode != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_game_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_game_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::_internal_has_custom_map_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_map_name() const {
  return _internal_has_custom_map_name();
}
inline void CSODOTALobby::clear_custom_map_name() {
  custom_map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_map_name)
  return _internal_custom_map_name();
}
inline void CSODOTALobby::set_custom_map_name(const std::string& value) {
  _internal_set_custom_map_name(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_map_name)
}
inline std::string* CSODOTALobby::mutable_custom_map_name() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_map_name)
  return _internal_mutable_custom_map_name();
}
inline const std::string& CSODOTALobby::_internal_custom_map_name() const {
  return custom_map_name_.Get();
}
inline void CSODOTALobby::_internal_set_custom_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_custom_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.custom_map_name)
}
inline void CSODOTALobby::set_custom_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.custom_map_name)
}
inline std::string* CSODOTALobby::_internal_mutable_custom_map_name() {
  _has_bits_[0] |= 0x00000010u;
  return custom_map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.custom_map_name)
  if (!_internal_has_custom_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return custom_map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_custom_map_name(std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::_internal_has_custom_difficulty() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_difficulty() const {
  return _internal_has_custom_difficulty();
}
inline void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_custom_difficulty() const {
  return custom_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_difficulty)
  return _internal_custom_difficulty();
}
inline void CSODOTALobby::_internal_set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  custom_difficulty_ = value;
}
inline void CSODOTALobby::set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_difficulty(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
inline bool CSODOTALobby::_internal_has_lan() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lan() const {
  return _internal_has_lan();
}
inline void CSODOTALobby::clear_lan() {
  lan_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CSODOTALobby::_internal_lan() const {
  return lan_;
}
inline bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan)
  return _internal_lan();
}
inline void CSODOTALobby::_internal_set_lan(bool value) {
  _has_bits_[1] |= 0x00000080u;
  lan_ = value;
}
inline void CSODOTALobby::set_lan(bool value) {
  _internal_set_lan(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan)
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::_internal_broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return _internal_broadcast_channel_info_size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::_internal_broadcast_channel_info(int index) const {
  return broadcast_channel_info_.Get(index);
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.broadcast_channel_info)
  return _internal_broadcast_channel_info(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::_internal_add_broadcast_channel_info() {
  return broadcast_channel_info_.Add();
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.broadcast_channel_info)
  return _internal_add_broadcast_channel_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::_internal_has_first_leaver_accountid() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return _internal_has_first_leaver_accountid();
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_first_leaver_accountid() const {
  return first_leaver_accountid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_leaver_accountid)
  return _internal_first_leaver_accountid();
}
inline void CSODOTALobby::_internal_set_first_leaver_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  first_leaver_accountid_ = value;
}
inline void CSODOTALobby::set_first_leaver_accountid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_first_leaver_accountid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::_internal_has_series_id() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_id() const {
  return _internal_has_series_id();
}
inline void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_series_id() const {
  return series_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_id)
  return _internal_series_id();
}
inline void CSODOTALobby::_internal_set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  series_id_ = value;
}
inline void CSODOTALobby::set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::_internal_has_low_priority() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CSODOTALobby::_internal_low_priority() const {
  return low_priority_;
}
inline bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.low_priority)
  return _internal_low_priority();
}
inline void CSODOTALobby::_internal_set_low_priority(bool value) {
  _has_bits_[1] |= 0x00000100u;
  low_priority_ = value;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.low_priority)
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::_internal_extra_messages_size() const {
  return extra_messages_.size();
}
inline int CSODOTALobby::extra_messages_size() const {
  return _internal_extra_messages_size();
}
inline void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_messages)
  return &extra_messages_;
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::_internal_extra_messages(int index) const {
  return extra_messages_.Get(index);
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_messages)
  return _internal_extra_messages(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::_internal_add_extra_messages() {
  return extra_messages_.Add();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_messages)
  return _internal_add_extra_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_messages)
  return extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::_internal_has_save_game() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || save_game_ != nullptr);
  return value;
}
inline bool CSODOTALobby::has_save_game() const {
  return _internal_has_save_game();
}
inline const ::CDOTASaveGame& CSODOTALobby::_internal_save_game() const {
  const ::CDOTASaveGame* p = save_game_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTASaveGame&>(
      ::_CDOTASaveGame_default_instance_);
}
inline const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.save_game)
  return _internal_save_game();
}
inline void CSODOTALobby::unsafe_arena_set_allocated_save_game(
    ::CDOTASaveGame* save_game) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_game_);
  }
  save_game_ = save_game;
  if (save_game) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSODOTALobby.save_game)
}
inline ::CDOTASaveGame* CSODOTALobby::release_save_game() {
  _has_bits_[0] &= ~0x00000040u;
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTASaveGame* CSODOTALobby::unsafe_arena_release_save_game() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.save_game)
  _has_bits_[0] &= ~0x00000040u;
  ::CDOTASaveGame* temp = save_game_;
  save_game_ = nullptr;
  return temp;
}
inline ::CDOTASaveGame* CSODOTALobby::_internal_mutable_save_game() {
  _has_bits_[0] |= 0x00000040u;
  if (save_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTASaveGame>(GetArena());
    save_game_ = p;
  }
  return save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.save_game)
  return _internal_mutable_save_game();
}
inline void CSODOTALobby::set_allocated_save_game(::CDOTASaveGame* save_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_game_);
  }
  if (save_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_game)->GetArena();
    if (message_arena != submessage_arena) {
      save_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_game, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  save_game_ = save_game;
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::_internal_has_first_blood_happened() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_first_blood_happened() const {
  return _internal_has_first_blood_happened();
}
inline void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CSODOTALobby::_internal_first_blood_happened() const {
  return first_blood_happened_;
}
inline bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_blood_happened)
  return _internal_first_blood_happened();
}
inline void CSODOTALobby::_internal_set_first_blood_happened(bool value) {
  _has_bits_[1] |= 0x00000200u;
  first_blood_happened_ = value;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  _internal_set_first_blood_happened(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_blood_happened)
}

// optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
inline bool CSODOTALobby::_internal_has_match_outcome() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::EMatchOutcome CSODOTALobby::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(match_outcome_);
}
inline ::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_outcome)
  return _internal_match_outcome();
}
inline void CSODOTALobby::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _has_bits_[1] |= 0x00001000u;
  match_outcome_ = value;
}
inline void CSODOTALobby::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::_internal_has_mass_disconnect() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_mass_disconnect() const {
  return _internal_has_mass_disconnect();
}
inline void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  _has_bits_[1] &= ~0x00000400u;
}
inline bool CSODOTALobby::_internal_mass_disconnect() const {
  return mass_disconnect_;
}
inline bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.mass_disconnect)
  return _internal_mass_disconnect();
}
inline void CSODOTALobby::_internal_set_mass_disconnect(bool value) {
  _has_bits_[1] |= 0x00000400u;
  mass_disconnect_ = value;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  _internal_set_mass_disconnect(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
inline bool CSODOTALobby::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_id)
  return _internal_custom_game_id();
}
inline void CSODOTALobby::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000800u;
  custom_game_id_ = value;
}
inline void CSODOTALobby::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_id)
}

// optional uint32 custom_min_players = 71;
inline bool CSODOTALobby::_internal_has_custom_min_players() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_min_players() const {
  return _internal_has_custom_min_players();
}
inline void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_custom_min_players() const {
  return custom_min_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_min_players)
  return _internal_custom_min_players();
}
inline void CSODOTALobby::_internal_set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  custom_min_players_ = value;
}
inline void CSODOTALobby::set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_min_players(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
inline bool CSODOTALobby::_internal_has_custom_max_players() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_max_players() const {
  return _internal_has_custom_max_players();
}
inline void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_custom_max_players() const {
  return custom_max_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_max_players)
  return _internal_custom_max_players();
}
inline void CSODOTALobby::_internal_set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  custom_max_players_ = value;
}
inline void CSODOTALobby::set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_max_players(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_max_players)
}

// optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
inline bool CSODOTALobby::_internal_has_visibility() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_visibility() const {
  return _internal_has_visibility();
}
inline void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::DOTALobbyVisibility CSODOTALobby::_internal_visibility() const {
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline ::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.visibility)
  return _internal_visibility();
}
inline void CSODOTALobby::_internal_set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  _has_bits_[1] |= 0x00008000u;
  visibility_ = value;
}
inline void CSODOTALobby::set_visibility(::DOTALobbyVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
inline bool CSODOTALobby::_internal_has_custom_game_crc() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_custom_game_crc() const {
  return custom_game_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CSODOTALobby::_internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00010000u;
  custom_game_crc_ = value;
}
inline void CSODOTALobby::set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
inline bool CSODOTALobby::_internal_has_custom_game_auto_created_lobby() const {
  bool value = (_has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return _internal_has_custom_game_auto_created_lobby();
}
inline void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  _has_bits_[1] &= ~0x02000000u;
}
inline bool CSODOTALobby::_internal_custom_game_auto_created_lobby() const {
  return custom_game_auto_created_lobby_;
}
inline bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_auto_created_lobby)
  return _internal_custom_game_auto_created_lobby();
}
inline void CSODOTALobby::_internal_set_custom_game_auto_created_lobby(bool value) {
  _has_bits_[1] |= 0x02000000u;
  custom_game_auto_created_lobby_ = value;
}
inline void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  _internal_set_custom_game_auto_created_lobby(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_auto_created_lobby)
}

// optional fixed32 custom_game_timestamp = 80;
inline bool CSODOTALobby::_internal_has_custom_game_timestamp() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_custom_game_timestamp() const {
  return custom_game_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CSODOTALobby::_internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  custom_game_timestamp_ = value;
}
inline void CSODOTALobby::set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_timestamp)
}

// repeated uint64 previous_series_matches = 81;
inline int CSODOTALobby::_internal_previous_series_matches_size() const {
  return previous_series_matches_.size();
}
inline int CSODOTALobby::previous_series_matches_size() const {
  return _internal_previous_series_matches_size();
}
inline void CSODOTALobby::clear_previous_series_matches() {
  previous_series_matches_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_previous_series_matches(int index) const {
  return previous_series_matches_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::previous_series_matches(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_series_matches)
  return _internal_previous_series_matches(index);
}
inline void CSODOTALobby::set_previous_series_matches(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  previous_series_matches_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_series_matches)
}
inline void CSODOTALobby::_internal_add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  previous_series_matches_.Add(value);
}
inline void CSODOTALobby::add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_previous_series_matches(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.previous_series_matches)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTALobby::_internal_previous_series_matches() const {
  return previous_series_matches_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CSODOTALobby::previous_series_matches() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.previous_series_matches)
  return _internal_previous_series_matches();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTALobby::_internal_mutable_previous_series_matches() {
  return &previous_series_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CSODOTALobby::mutable_previous_series_matches() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.previous_series_matches)
  return _internal_mutable_previous_series_matches();
}

// optional uint64 previous_match_override = 82;
inline bool CSODOTALobby::_internal_has_previous_match_override() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_previous_match_override() const {
  return _internal_has_previous_match_override();
}
inline void CSODOTALobby::clear_previous_match_override() {
  previous_match_override_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_previous_match_override() const {
  return previous_match_override_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_match_override)
  return _internal_previous_match_override();
}
inline void CSODOTALobby::_internal_set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00020000u;
  previous_match_override_ = value;
}
inline void CSODOTALobby::set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_match_override(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_match_override)
}

// optional bool custom_game_uses_account_records = 83;
inline bool CSODOTALobby::_internal_has_custom_game_uses_account_records() const {
  bool value = (_has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_uses_account_records() const {
  return _internal_has_custom_game_uses_account_records();
}
inline void CSODOTALobby::clear_custom_game_uses_account_records() {
  custom_game_uses_account_records_ = false;
  _has_bits_[1] &= ~0x04000000u;
}
inline bool CSODOTALobby::_internal_custom_game_uses_account_records() const {
  return custom_game_uses_account_records_;
}
inline bool CSODOTALobby::custom_game_uses_account_records() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_uses_account_records)
  return _internal_custom_game_uses_account_records();
}
inline void CSODOTALobby::_internal_set_custom_game_uses_account_records(bool value) {
  _has_bits_[1] |= 0x04000000u;
  custom_game_uses_account_records_ = value;
}
inline void CSODOTALobby::set_custom_game_uses_account_records(bool value) {
  _internal_set_custom_game_uses_account_records(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_uses_account_records)
}

// optional uint32 game_start_time = 87;
inline bool CSODOTALobby::_internal_has_game_start_time() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_start_time() const {
  return _internal_has_game_start_time();
}
inline void CSODOTALobby::clear_game_start_time() {
  game_start_time_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_game_start_time() const {
  return game_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::game_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_start_time)
  return _internal_game_start_time();
}
inline void CSODOTALobby::_internal_set_game_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00080000u;
  game_start_time_ = value;
}
inline void CSODOTALobby::set_game_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_start_time)
}

// optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CSODOTALobby::_internal_has_pause_setting() const {
  bool value = (_has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_pause_setting() const {
  return _internal_has_pause_setting();
}
inline void CSODOTALobby::clear_pause_setting() {
  pause_setting_ = 0;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::LobbyDotaPauseSetting CSODOTALobby::_internal_pause_setting() const {
  return static_cast< ::LobbyDotaPauseSetting >(pause_setting_);
}
inline ::LobbyDotaPauseSetting CSODOTALobby::pause_setting() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pause_setting)
  return _internal_pause_setting();
}
inline void CSODOTALobby::_internal_set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  _has_bits_[1] |= 0x00100000u;
  pause_setting_ = value;
}
inline void CSODOTALobby::set_pause_setting(::LobbyDotaPauseSetting value) {
  _internal_set_pause_setting(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pause_setting)
}

// optional uint32 lobby_mvp_account_id = 89;
inline bool CSODOTALobby::_internal_has_lobby_mvp_account_id() const {
  bool value = (_has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_mvp_account_id() const {
  return _internal_has_lobby_mvp_account_id();
}
inline void CSODOTALobby::clear_lobby_mvp_account_id() {
  lobby_mvp_account_id_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_lobby_mvp_account_id() const {
  return lobby_mvp_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::lobby_mvp_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_mvp_account_id)
  return _internal_lobby_mvp_account_id();
}
inline void CSODOTALobby::_internal_set_lobby_mvp_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  lobby_mvp_account_id_ = value;
}
inline void CSODOTALobby::set_lobby_mvp_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_mvp_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_mvp_account_id)
}

// optional uint32 weekend_tourney_division_id = 90;
inline bool CSODOTALobby::_internal_has_weekend_tourney_division_id() const {
  bool value = (_has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_division_id() const {
  return _internal_has_weekend_tourney_division_id();
}
inline void CSODOTALobby::clear_weekend_tourney_division_id() {
  weekend_tourney_division_id_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_weekend_tourney_division_id() const {
  return weekend_tourney_division_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::weekend_tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_division_id)
  return _internal_weekend_tourney_division_id();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  weekend_tourney_division_id_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_division_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weekend_tourney_division_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_division_id)
}

// optional uint32 weekend_tourney_skill_level = 91;
inline bool CSODOTALobby::_internal_has_weekend_tourney_skill_level() const {
  bool value = (_has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_skill_level() const {
  return _internal_has_weekend_tourney_skill_level();
}
inline void CSODOTALobby::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_weekend_tourney_skill_level() const {
  return weekend_tourney_skill_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_skill_level)
  return _internal_weekend_tourney_skill_level();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  weekend_tourney_skill_level_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_skill_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weekend_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 92;
inline bool CSODOTALobby::_internal_has_weekend_tourney_bracket_round() const {
  bool value = (_has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_bracket_round() const {
  return _internal_has_weekend_tourney_bracket_round();
}
inline void CSODOTALobby::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_weekend_tourney_bracket_round() const {
  return weekend_tourney_bracket_round_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_bracket_round)
  return _internal_weekend_tourney_bracket_round();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  weekend_tourney_bracket_round_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_bracket_round(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weekend_tourney_bracket_round(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_bracket_round)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::_internal_has_bot_difficulty_dire() const {
  bool value = (_has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_difficulty_dire() const {
  return _internal_has_bot_difficulty_dire();
}
inline void CSODOTALobby::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 3;
  _has_bits_[2] &= ~0x00020000u;
}
inline ::DOTABotDifficulty CSODOTALobby::_internal_bot_difficulty_dire() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_dire)
  return _internal_bot_difficulty_dire();
}
inline void CSODOTALobby::_internal_set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[2] |= 0x00020000u;
  bot_difficulty_dire_ = value;
}
inline void CSODOTALobby::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 94;
inline bool CSODOTALobby::_internal_has_bot_radiant() const {
  bool value = (_has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_radiant() const {
  return _internal_has_bot_radiant();
}
inline void CSODOTALobby::clear_bot_radiant() {
  bot_radiant_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_bot_radiant() const {
  return bot_radiant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_radiant)
  return _internal_bot_radiant();
}
inline void CSODOTALobby::_internal_set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x20000000u;
  bot_radiant_ = value;
}
inline void CSODOTALobby::set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bot_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_radiant)
}

// optional uint64 bot_dire = 95;
inline bool CSODOTALobby::_internal_has_bot_dire() const {
  bool value = (_has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_dire() const {
  return _internal_has_bot_dire();
}
inline void CSODOTALobby::clear_bot_dire() {
  bot_dire_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_bot_dire() const {
  return bot_dire_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::bot_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_dire)
  return _internal_bot_dire();
}
inline void CSODOTALobby::_internal_set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x40000000u;
  bot_dire_ = value;
}
inline void CSODOTALobby::set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bot_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_dire)
}

// repeated .EEvent event_progression_enabled = 96;
inline int CSODOTALobby::_internal_event_progression_enabled_size() const {
  return event_progression_enabled_.size();
}
inline int CSODOTALobby::event_progression_enabled_size() const {
  return _internal_event_progression_enabled_size();
}
inline void CSODOTALobby::clear_event_progression_enabled() {
  event_progression_enabled_.Clear();
}
inline ::EEvent CSODOTALobby::_internal_event_progression_enabled(int index) const {
  return static_cast< ::EEvent >(event_progression_enabled_.Get(index));
}
inline ::EEvent CSODOTALobby::event_progression_enabled(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.event_progression_enabled)
  return _internal_event_progression_enabled(index);
}
inline void CSODOTALobby::set_event_progression_enabled(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  event_progression_enabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.event_progression_enabled)
}
inline void CSODOTALobby::_internal_add_event_progression_enabled(::EEvent value) {
  assert(::EEvent_IsValid(value));
  event_progression_enabled_.Add(value);
}
inline void CSODOTALobby::add_event_progression_enabled(::EEvent value) {
  // @@protoc_insertion_point(field_add:CSODOTALobby.event_progression_enabled)
  _internal_add_event_progression_enabled(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSODOTALobby::event_progression_enabled() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.event_progression_enabled)
  return event_progression_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSODOTALobby::_internal_mutable_event_progression_enabled() {
  return &event_progression_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSODOTALobby::mutable_event_progression_enabled() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.event_progression_enabled)
  return _internal_mutable_event_progression_enabled();
}

// optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
inline bool CSODOTALobby::_internal_has_selection_priority_rules() const {
  bool value = (_has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_selection_priority_rules() const {
  return _internal_has_selection_priority_rules();
}
inline void CSODOTALobby::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::DOTASelectionPriorityRules CSODOTALobby::_internal_selection_priority_rules() const {
  return static_cast< ::DOTASelectionPriorityRules >(selection_priority_rules_);
}
inline ::DOTASelectionPriorityRules CSODOTALobby::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.selection_priority_rules)
  return _internal_selection_priority_rules();
}
inline void CSODOTALobby::_internal_set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  assert(::DOTASelectionPriorityRules_IsValid(value));
  _has_bits_[1] |= 0x80000000u;
  selection_priority_rules_ = value;
}
inline void CSODOTALobby::set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  _internal_set_selection_priority_rules(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.selection_priority_rules)
}

// optional uint32 series_previous_selection_priority_team_id = 98;
inline bool CSODOTALobby::_internal_has_series_previous_selection_priority_team_id() const {
  bool value = (_has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_previous_selection_priority_team_id() const {
  return _internal_has_series_previous_selection_priority_team_id();
}
inline void CSODOTALobby::clear_series_previous_selection_priority_team_id() {
  series_previous_selection_priority_team_id_ = 0u;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_series_previous_selection_priority_team_id() const {
  return series_previous_selection_priority_team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::series_previous_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_previous_selection_priority_team_id)
  return _internal_series_previous_selection_priority_team_id();
}
inline void CSODOTALobby::_internal_set_series_previous_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000001u;
  series_previous_selection_priority_team_id_ = value;
}
inline void CSODOTALobby::set_series_previous_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_previous_selection_priority_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_previous_selection_priority_team_id)
}

// optional uint32 series_current_selection_priority_team_id = 99;
inline bool CSODOTALobby::_internal_has_series_current_selection_priority_team_id() const {
  bool value = (_has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_selection_priority_team_id() const {
  return _internal_has_series_current_selection_priority_team_id();
}
inline void CSODOTALobby::clear_series_current_selection_priority_team_id() {
  series_current_selection_priority_team_id_ = 0u;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_series_current_selection_priority_team_id() const {
  return series_current_selection_priority_team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::series_current_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_selection_priority_team_id)
  return _internal_series_current_selection_priority_team_id();
}
inline void CSODOTALobby::_internal_set_series_current_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000002u;
  series_current_selection_priority_team_id_ = value;
}
inline void CSODOTALobby::set_series_current_selection_priority_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_current_selection_priority_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_selection_priority_team_id)
}

// optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::_internal_has_series_current_priority_team_choice() const {
  bool value = (_has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_priority_team_choice() const {
  return _internal_has_series_current_priority_team_choice();
}
inline void CSODOTALobby::clear_series_current_priority_team_choice() {
  series_current_priority_team_choice_ = 0;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::_internal_series_current_priority_team_choice() const {
  return static_cast< ::DOTASelectionPriorityChoice >(series_current_priority_team_choice_);
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::series_current_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_priority_team_choice)
  return _internal_series_current_priority_team_choice();
}
inline void CSODOTALobby::_internal_set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value) {
  assert(::DOTASelectionPriorityChoice_IsValid(value));
  _has_bits_[2] |= 0x00000004u;
  series_current_priority_team_choice_ = value;
}
inline void CSODOTALobby::set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value) {
  _internal_set_series_current_priority_team_choice(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_priority_team_choice)
}

// optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::_internal_has_series_current_non_priority_team_choice() const {
  bool value = (_has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_non_priority_team_choice() const {
  return _internal_has_series_current_non_priority_team_choice();
}
inline void CSODOTALobby::clear_series_current_non_priority_team_choice() {
  series_current_non_priority_team_choice_ = 0;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::_internal_series_current_non_priority_team_choice() const {
  return static_cast< ::DOTASelectionPriorityChoice >(series_current_non_priority_team_choice_);
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::series_current_non_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_non_priority_team_choice)
  return _internal_series_current_non_priority_team_choice();
}
inline void CSODOTALobby::_internal_set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value) {
  assert(::DOTASelectionPriorityChoice_IsValid(value));
  _has_bits_[2] |= 0x00000008u;
  series_current_non_priority_team_choice_ = value;
}
inline void CSODOTALobby::set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value) {
  _internal_set_series_current_non_priority_team_choice(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_non_priority_team_choice)
}

// optional bool series_current_selection_priority_used_coin_toss = 102;
inline bool CSODOTALobby::_internal_has_series_current_selection_priority_used_coin_toss() const {
  bool value = (_has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_selection_priority_used_coin_toss() const {
  return _internal_has_series_current_selection_priority_used_coin_toss();
}
inline void CSODOTALobby::clear_series_current_selection_priority_used_coin_toss() {
  series_current_selection_priority_used_coin_toss_ = false;
  _has_bits_[1] &= ~0x08000000u;
}
inline bool CSODOTALobby::_internal_series_current_selection_priority_used_coin_toss() const {
  return series_current_selection_priority_used_coin_toss_;
}
inline bool CSODOTALobby::series_current_selection_priority_used_coin_toss() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_selection_priority_used_coin_toss)
  return _internal_series_current_selection_priority_used_coin_toss();
}
inline void CSODOTALobby::_internal_set_series_current_selection_priority_used_coin_toss(bool value) {
  _has_bits_[1] |= 0x08000000u;
  series_current_selection_priority_used_coin_toss_ = value;
}
inline void CSODOTALobby::set_series_current_selection_priority_used_coin_toss(bool value) {
  _internal_set_series_current_selection_priority_used_coin_toss(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_selection_priority_used_coin_toss)
}

// optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
inline bool CSODOTALobby::_internal_has_current_primary_event() const {
  bool value = (_has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_current_primary_event() const {
  return _internal_has_current_primary_event();
}
inline void CSODOTALobby::clear_current_primary_event() {
  current_primary_event_ = 0;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::EEvent CSODOTALobby::_internal_current_primary_event() const {
  return static_cast< ::EEvent >(current_primary_event_);
}
inline ::EEvent CSODOTALobby::current_primary_event() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.current_primary_event)
  return _internal_current_primary_event();
}
inline void CSODOTALobby::_internal_set_current_primary_event(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _has_bits_[2] |= 0x00000010u;
  current_primary_event_ = value;
}
inline void CSODOTALobby::set_current_primary_event(::EEvent value) {
  _internal_set_current_primary_event(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.current_primary_event)
}

// repeated uint32 emergency_disabled_hero_ids = 105;
inline int CSODOTALobby::_internal_emergency_disabled_hero_ids_size() const {
  return emergency_disabled_hero_ids_.size();
}
inline int CSODOTALobby::emergency_disabled_hero_ids_size() const {
  return _internal_emergency_disabled_hero_ids_size();
}
inline void CSODOTALobby::clear_emergency_disabled_hero_ids() {
  emergency_disabled_hero_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_emergency_disabled_hero_ids(int index) const {
  return emergency_disabled_hero_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::emergency_disabled_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_emergency_disabled_hero_ids(index);
}
inline void CSODOTALobby::set_emergency_disabled_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  emergency_disabled_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.emergency_disabled_hero_ids)
}
inline void CSODOTALobby::_internal_add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  emergency_disabled_hero_ids_.Add(value);
}
inline void CSODOTALobby::add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_emergency_disabled_hero_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.emergency_disabled_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::_internal_emergency_disabled_hero_ids() const {
  return emergency_disabled_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::emergency_disabled_hero_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_emergency_disabled_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::_internal_mutable_emergency_disabled_hero_ids() {
  return &emergency_disabled_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::mutable_emergency_disabled_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_mutable_emergency_disabled_hero_ids();
}

// optional fixed64 custom_game_private_key = 106;
inline bool CSODOTALobby::_internal_has_custom_game_private_key() const {
  bool value = (_has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_private_key() const {
  return _internal_has_custom_game_private_key();
}
inline void CSODOTALobby::clear_custom_game_private_key() {
  custom_game_private_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[2] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::_internal_custom_game_private_key() const {
  return custom_game_private_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSODOTALobby::custom_game_private_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_private_key)
  return _internal_custom_game_private_key();
}
inline void CSODOTALobby::_internal_set_custom_game_private_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[2] |= 0x00000040u;
  custom_game_private_key_ = value;
}
inline void CSODOTALobby::set_custom_game_private_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_private_key(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_private_key)
}

// optional bool custom_game_penalties = 107;
inline bool CSODOTALobby::_internal_has_custom_game_penalties() const {
  bool value = (_has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_penalties() const {
  return _internal_has_custom_game_penalties();
}
inline void CSODOTALobby::clear_custom_game_penalties() {
  custom_game_penalties_ = false;
  _has_bits_[1] &= ~0x10000000u;
}
inline bool CSODOTALobby::_internal_custom_game_penalties() const {
  return custom_game_penalties_;
}
inline bool CSODOTALobby::custom_game_penalties() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_penalties)
  return _internal_custom_game_penalties();
}
inline void CSODOTALobby::_internal_set_custom_game_penalties(bool value) {
  _has_bits_[1] |= 0x10000000u;
  custom_game_penalties_ = value;
}
inline void CSODOTALobby::set_custom_game_penalties(bool value) {
  _internal_set_custom_game_penalties(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_penalties)
}

// optional string lan_host_ping_location = 109;
inline bool CSODOTALobby::_internal_has_lan_host_ping_location() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lan_host_ping_location() const {
  return _internal_has_lan_host_ping_location();
}
inline void CSODOTALobby::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CSODOTALobby::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan_host_ping_location)
  return _internal_lan_host_ping_location();
}
inline void CSODOTALobby::set_lan_host_ping_location(const std::string& value) {
  _internal_set_lan_host_ping_location(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan_host_ping_location)
}
inline std::string* CSODOTALobby::mutable_lan_host_ping_location() {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.lan_host_ping_location)
  return _internal_mutable_lan_host_ping_location();
}
inline const std::string& CSODOTALobby::_internal_lan_host_ping_location() const {
  return lan_host_ping_location_.Get();
}
inline void CSODOTALobby::_internal_set_lan_host_ping_location(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSODOTALobby::set_lan_host_ping_location(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSODOTALobby.lan_host_ping_location)
}
inline void CSODOTALobby::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSODOTALobby.lan_host_ping_location)
}
inline void CSODOTALobby::set_lan_host_ping_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSODOTALobby.lan_host_ping_location)
}
inline std::string* CSODOTALobby::_internal_mutable_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000020u;
  return lan_host_ping_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSODOTALobby::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.lan_host_ping_location)
  if (!_internal_has_lan_host_ping_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return lan_host_ping_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSODOTALobby::set_allocated_lan_host_ping_location(std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  lan_host_ping_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.lan_host_ping_location)
}

// optional uint32 league_node_id = 110;
inline bool CSODOTALobby::_internal_has_league_node_id() const {
  bool value = (_has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobby::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CSODOTALobby::clear_league_node_id() {
  league_node_id_ = 0u;
  _has_bits_[2] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_league_node_id() const {
  return league_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::league_node_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_node_id)
  return _internal_league_node_id();
}
inline void CSODOTALobby::_internal_set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000080u;
  league_node_id_ = value;
}
inline void CSODOTALobby::set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_node_id)
}

// optional uint32 match_duration = 111;
inline bool CSODOTALobby::_internal_has_match_duration() const {
  bool value = (_has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_duration() const {
  return _internal_has_match_duration();
}
inline void CSODOTALobby::clear_match_duration() {
  match_duration_ = 0u;
  _has_bits_[2] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_match_duration() const {
  return match_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::match_duration() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_duration)
  return _internal_match_duration();
}
inline void CSODOTALobby::_internal_set_match_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000100u;
  match_duration_ = value;
}
inline void CSODOTALobby::set_match_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_match_duration(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_duration)
}

// optional bool custom_game_browseable = 112;
inline bool CSODOTALobby::_internal_has_custom_game_browseable() const {
  bool value = (_has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_browseable() const {
  return _internal_has_custom_game_browseable();
}
inline void CSODOTALobby::clear_custom_game_browseable() {
  custom_game_browseable_ = false;
  _has_bits_[2] &= ~0x00000400u;
}
inline bool CSODOTALobby::_internal_custom_game_browseable() const {
  return custom_game_browseable_;
}
inline bool CSODOTALobby::custom_game_browseable() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_browseable)
  return _internal_custom_game_browseable();
}
inline void CSODOTALobby::_internal_set_custom_game_browseable(bool value) {
  _has_bits_[2] |= 0x00000400u;
  custom_game_browseable_ = value;
}
inline void CSODOTALobby::set_custom_game_browseable(bool value) {
  _internal_set_custom_game_browseable(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_browseable)
}

// optional uint32 league_phase = 113;
inline bool CSODOTALobby::_internal_has_league_phase() const {
  bool value = (_has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_league_phase() const {
  return _internal_has_league_phase();
}
inline void CSODOTALobby::clear_league_phase() {
  league_phase_ = 0u;
  _has_bits_[2] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_league_phase() const {
  return league_phase_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::league_phase() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_phase)
  return _internal_league_phase();
}
inline void CSODOTALobby::_internal_set_league_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000200u;
  league_phase_ = value;
}
inline void CSODOTALobby::set_league_phase(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_phase(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_phase)
}

// optional bool record_detailed_stats = 114;
inline bool CSODOTALobby::_internal_has_record_detailed_stats() const {
  bool value = (_has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_record_detailed_stats() const {
  return _internal_has_record_detailed_stats();
}
inline void CSODOTALobby::clear_record_detailed_stats() {
  record_detailed_stats_ = false;
  _has_bits_[2] &= ~0x00000800u;
}
inline bool CSODOTALobby::_internal_record_detailed_stats() const {
  return record_detailed_stats_;
}
inline bool CSODOTALobby::record_detailed_stats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.record_detailed_stats)
  return _internal_record_detailed_stats();
}
inline void CSODOTALobby::_internal_set_record_detailed_stats(bool value) {
  _has_bits_[2] |= 0x00000800u;
  record_detailed_stats_ = value;
}
inline void CSODOTALobby::set_record_detailed_stats(bool value) {
  _internal_set_record_detailed_stats(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.record_detailed_stats)
}

// optional bool experimental_gameplay_enabled = 116;
inline bool CSODOTALobby::_internal_has_experimental_gameplay_enabled() const {
  bool value = (_has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_experimental_gameplay_enabled() const {
  return _internal_has_experimental_gameplay_enabled();
}
inline void CSODOTALobby::clear_experimental_gameplay_enabled() {
  experimental_gameplay_enabled_ = false;
  _has_bits_[2] &= ~0x00001000u;
}
inline bool CSODOTALobby::_internal_experimental_gameplay_enabled() const {
  return experimental_gameplay_enabled_;
}
inline bool CSODOTALobby::experimental_gameplay_enabled() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.experimental_gameplay_enabled)
  return _internal_experimental_gameplay_enabled();
}
inline void CSODOTALobby::_internal_set_experimental_gameplay_enabled(bool value) {
  _has_bits_[2] |= 0x00001000u;
  experimental_gameplay_enabled_ = value;
}
inline void CSODOTALobby::set_experimental_gameplay_enabled(bool value) {
  _internal_set_experimental_gameplay_enabled(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.experimental_gameplay_enabled)
}

// repeated .CLobbyGuildChallenge guild_challenges = 117;
inline int CSODOTALobby::_internal_guild_challenges_size() const {
  return guild_challenges_.size();
}
inline int CSODOTALobby::guild_challenges_size() const {
  return _internal_guild_challenges_size();
}
inline void CSODOTALobby::clear_guild_challenges() {
  guild_challenges_.Clear();
}
inline ::CLobbyGuildChallenge* CSODOTALobby::mutable_guild_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.guild_challenges)
  return guild_challenges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >*
CSODOTALobby::mutable_guild_challenges() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.guild_challenges)
  return &guild_challenges_;
}
inline const ::CLobbyGuildChallenge& CSODOTALobby::_internal_guild_challenges(int index) const {
  return guild_challenges_.Get(index);
}
inline const ::CLobbyGuildChallenge& CSODOTALobby::guild_challenges(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.guild_challenges)
  return _internal_guild_challenges(index);
}
inline ::CLobbyGuildChallenge* CSODOTALobby::_internal_add_guild_challenges() {
  return guild_challenges_.Add();
}
inline ::CLobbyGuildChallenge* CSODOTALobby::add_guild_challenges() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.guild_challenges)
  return _internal_add_guild_challenges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >&
CSODOTALobby::guild_challenges() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.guild_challenges)
  return guild_challenges_;
}

// repeated .CLobbyGuildDetails guild_details = 118;
inline int CSODOTALobby::_internal_guild_details_size() const {
  return guild_details_.size();
}
inline int CSODOTALobby::guild_details_size() const {
  return _internal_guild_details_size();
}
inline void CSODOTALobby::clear_guild_details() {
  guild_details_.Clear();
}
inline ::CLobbyGuildDetails* CSODOTALobby::mutable_guild_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.guild_details)
  return guild_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >*
CSODOTALobby::mutable_guild_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.guild_details)
  return &guild_details_;
}
inline const ::CLobbyGuildDetails& CSODOTALobby::_internal_guild_details(int index) const {
  return guild_details_.Get(index);
}
inline const ::CLobbyGuildDetails& CSODOTALobby::guild_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.guild_details)
  return _internal_guild_details(index);
}
inline ::CLobbyGuildDetails* CSODOTALobby::_internal_add_guild_details() {
  return guild_details_.Add();
}
inline ::CLobbyGuildDetails* CSODOTALobby::add_guild_details() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.guild_details)
  return _internal_add_guild_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >&
CSODOTALobby::guild_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.guild_details)
  return guild_details_;
}

// repeated .CMsgLobbyEventPoints lobby_event_points = 119;
inline int CSODOTALobby::_internal_lobby_event_points_size() const {
  return lobby_event_points_.size();
}
inline int CSODOTALobby::lobby_event_points_size() const {
  return _internal_lobby_event_points_size();
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::mutable_lobby_event_points(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.lobby_event_points)
  return lobby_event_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
CSODOTALobby::mutable_lobby_event_points() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.lobby_event_points)
  return &lobby_event_points_;
}
inline const ::CMsgLobbyEventPoints& CSODOTALobby::_internal_lobby_event_points(int index) const {
  return lobby_event_points_.Get(index);
}
inline const ::CMsgLobbyEventPoints& CSODOTALobby::lobby_event_points(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_event_points)
  return _internal_lobby_event_points(index);
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::_internal_add_lobby_event_points() {
  return lobby_event_points_.Add();
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::add_lobby_event_points() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.lobby_event_points)
  return _internal_add_lobby_event_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
CSODOTALobby::lobby_event_points() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.lobby_event_points)
  return lobby_event_points_;
}

// repeated uint32 requested_hero_ids = 124;
inline int CSODOTALobby::_internal_requested_hero_ids_size() const {
  return requested_hero_ids_.size();
}
inline int CSODOTALobby::requested_hero_ids_size() const {
  return _internal_requested_hero_ids_size();
}
inline void CSODOTALobby::clear_requested_hero_ids() {
  requested_hero_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::_internal_requested_hero_ids(int index) const {
  return requested_hero_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSODOTALobby::requested_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.requested_hero_ids)
  return _internal_requested_hero_ids(index);
}
inline void CSODOTALobby::set_requested_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  requested_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.requested_hero_ids)
}
inline void CSODOTALobby::_internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  requested_hero_ids_.Add(value);
}
inline void CSODOTALobby::add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_requested_hero_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.requested_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::_internal_requested_hero_ids() const {
  return requested_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CSODOTALobby::requested_hero_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.requested_hero_ids)
  return _internal_requested_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::_internal_mutable_requested_hero_ids() {
  return &requested_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CSODOTALobby::mutable_requested_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.requested_hero_ids)
  return _internal_mutable_requested_hero_ids();
}

// repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
inline int CSODOTALobby::_internal_coach_friend_requests_size() const {
  return coach_friend_requests_.size();
}
inline int CSODOTALobby::coach_friend_requests_size() const {
  return _internal_coach_friend_requests_size();
}
inline void CSODOTALobby::clear_coach_friend_requests() {
  coach_friend_requests_.Clear();
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::mutable_coach_friend_requests(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.coach_friend_requests)
  return coach_friend_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >*
CSODOTALobby::mutable_coach_friend_requests() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.coach_friend_requests)
  return &coach_friend_requests_;
}
inline const ::CMsgLobbyCoachFriendRequest& CSODOTALobby::_internal_coach_friend_requests(int index) const {
  return coach_friend_requests_.Get(index);
}
inline const ::CMsgLobbyCoachFriendRequest& CSODOTALobby::coach_friend_requests(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.coach_friend_requests)
  return _internal_coach_friend_requests(index);
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::_internal_add_coach_friend_requests() {
  return coach_friend_requests_.Add();
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::add_coach_friend_requests() {
  // @@protoc_insertion_point(field_add:CSODOTALobby.coach_friend_requests)
  return _internal_add_coach_friend_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >&
CSODOTALobby::coach_friend_requests() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.coach_friend_requests)
  return coach_friend_requests_;
}

// optional bool is_in_steam_china = 126;
inline bool CSODOTALobby::_internal_has_is_in_steam_china() const {
  bool value = (_has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_is_in_steam_china() const {
  return _internal_has_is_in_steam_china();
}
inline void CSODOTALobby::clear_is_in_steam_china() {
  is_in_steam_china_ = false;
  _has_bits_[2] &= ~0x00002000u;
}
inline bool CSODOTALobby::_internal_is_in_steam_china() const {
  return is_in_steam_china_;
}
inline bool CSODOTALobby::is_in_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.is_in_steam_china)
  return _internal_is_in_steam_china();
}
inline void CSODOTALobby::_internal_set_is_in_steam_china(bool value) {
  _has_bits_[2] |= 0x00002000u;
  is_in_steam_china_ = value;
}
inline void CSODOTALobby::set_is_in_steam_china(bool value) {
  _internal_set_is_in_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.is_in_steam_china)
}

// optional bool with_scenario_save = 127;
inline bool CSODOTALobby::_internal_has_with_scenario_save() const {
  bool value = (_has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_with_scenario_save() const {
  return _internal_has_with_scenario_save();
}
inline void CSODOTALobby::clear_with_scenario_save() {
  with_scenario_save_ = false;
  _has_bits_[2] &= ~0x00000020u;
}
inline bool CSODOTALobby::_internal_with_scenario_save() const {
  return with_scenario_save_;
}
inline bool CSODOTALobby::with_scenario_save() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.with_scenario_save)
  return _internal_with_scenario_save();
}
inline void CSODOTALobby::_internal_set_with_scenario_save(bool value) {
  _has_bits_[2] |= 0x00000020u;
  with_scenario_save_ = value;
}
inline void CSODOTALobby::set_with_scenario_save(bool value) {
  _internal_set_with_scenario_save(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.with_scenario_save)
}

// -------------------------------------------------------------------

// CMsgLobbyPlaytestDetails

// optional string json = 1;
inline bool CMsgLobbyPlaytestDetails::_internal_has_json() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyPlaytestDetails::has_json() const {
  return _internal_has_json();
}
inline void CMsgLobbyPlaytestDetails::clear_json() {
  json_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLobbyPlaytestDetails::json() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlaytestDetails.json)
  return _internal_json();
}
inline void CMsgLobbyPlaytestDetails::set_json(const std::string& value) {
  _internal_set_json(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyPlaytestDetails.json)
}
inline std::string* CMsgLobbyPlaytestDetails::mutable_json() {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyPlaytestDetails.json)
  return _internal_mutable_json();
}
inline const std::string& CMsgLobbyPlaytestDetails::_internal_json() const {
  return json_.Get();
}
inline void CMsgLobbyPlaytestDetails::_internal_set_json(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgLobbyPlaytestDetails::set_json(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgLobbyPlaytestDetails.json)
}
inline void CMsgLobbyPlaytestDetails::set_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgLobbyPlaytestDetails.json)
}
inline void CMsgLobbyPlaytestDetails::set_json(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgLobbyPlaytestDetails.json)
}
inline std::string* CMsgLobbyPlaytestDetails::_internal_mutable_json() {
  _has_bits_[0] |= 0x00000001u;
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgLobbyPlaytestDetails::release_json() {
  // @@protoc_insertion_point(field_release:CMsgLobbyPlaytestDetails.json)
  if (!_internal_has_json()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return json_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgLobbyPlaytestDetails::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyPlaytestDetails.json)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus_ReadyMember

// optional uint32 account_id = 1;
inline bool CMsgReadyCheckStatus_ReadyMember::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus_ReadyMember::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus_ReadyMember::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus_ReadyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ReadyMember.account_id)
  return _internal_account_id();
}
inline void CMsgReadyCheckStatus_ReadyMember::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgReadyCheckStatus_ReadyMember::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.ReadyMember.account_id)
}

// optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgReadyCheckStatus_ReadyMember::_internal_has_ready_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus_ReadyMember::has_ready_status() const {
  return _internal_has_ready_status();
}
inline void CMsgReadyCheckStatus_ReadyMember::clear_ready_status() {
  ready_status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EReadyCheckStatus CMsgReadyCheckStatus_ReadyMember::_internal_ready_status() const {
  return static_cast< ::EReadyCheckStatus >(ready_status_);
}
inline ::EReadyCheckStatus CMsgReadyCheckStatus_ReadyMember::ready_status() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ReadyMember.ready_status)
  return _internal_ready_status();
}
inline void CMsgReadyCheckStatus_ReadyMember::_internal_set_ready_status(::EReadyCheckStatus value) {
  assert(::EReadyCheckStatus_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ready_status_ = value;
}
inline void CMsgReadyCheckStatus_ReadyMember::set_ready_status(::EReadyCheckStatus value) {
  _internal_set_ready_status(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.ReadyMember.ready_status)
}

// -------------------------------------------------------------------

// CMsgReadyCheckStatus

// optional uint32 start_timestamp = 1;
inline bool CMsgReadyCheckStatus::_internal_has_start_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgReadyCheckStatus::clear_start_timestamp() {
  start_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::_internal_start_timestamp() const {
  return start_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgReadyCheckStatus::_internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_timestamp_ = value;
}
inline void CMsgReadyCheckStatus::set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.start_timestamp)
}

// optional uint32 finish_timestamp = 2;
inline bool CMsgReadyCheckStatus::_internal_has_finish_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_finish_timestamp() const {
  return _internal_has_finish_timestamp();
}
inline void CMsgReadyCheckStatus::clear_finish_timestamp() {
  finish_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::_internal_finish_timestamp() const {
  return finish_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::finish_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.finish_timestamp)
  return _internal_finish_timestamp();
}
inline void CMsgReadyCheckStatus::_internal_set_finish_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  finish_timestamp_ = value;
}
inline void CMsgReadyCheckStatus::set_finish_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finish_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.finish_timestamp)
}

// optional uint32 initiator_account_id = 3;
inline bool CMsgReadyCheckStatus::_internal_has_initiator_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgReadyCheckStatus::has_initiator_account_id() const {
  return _internal_has_initiator_account_id();
}
inline void CMsgReadyCheckStatus::clear_initiator_account_id() {
  initiator_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::_internal_initiator_account_id() const {
  return initiator_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyCheckStatus::initiator_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.initiator_account_id)
  return _internal_initiator_account_id();
}
inline void CMsgReadyCheckStatus::_internal_set_initiator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  initiator_account_id_ = value;
}
inline void CMsgReadyCheckStatus::set_initiator_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initiator_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgReadyCheckStatus.initiator_account_id)
}

// repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
inline int CMsgReadyCheckStatus::_internal_ready_members_size() const {
  return ready_members_.size();
}
inline int CMsgReadyCheckStatus::ready_members_size() const {
  return _internal_ready_members_size();
}
inline void CMsgReadyCheckStatus::clear_ready_members() {
  ready_members_.Clear();
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::mutable_ready_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgReadyCheckStatus.ready_members)
  return ready_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >*
CMsgReadyCheckStatus::mutable_ready_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyCheckStatus.ready_members)
  return &ready_members_;
}
inline const ::CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus::_internal_ready_members(int index) const {
  return ready_members_.Get(index);
}
inline const ::CMsgReadyCheckStatus_ReadyMember& CMsgReadyCheckStatus::ready_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyCheckStatus.ready_members)
  return _internal_ready_members(index);
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::_internal_add_ready_members() {
  return ready_members_.Add();
}
inline ::CMsgReadyCheckStatus_ReadyMember* CMsgReadyCheckStatus::add_ready_members() {
  // @@protoc_insertion_point(field_add:CMsgReadyCheckStatus.ready_members)
  return _internal_add_ready_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgReadyCheckStatus_ReadyMember >&
CMsgReadyCheckStatus::ready_members() const {
  // @@protoc_insertion_point(field_list:CMsgReadyCheckStatus.ready_members)
  return ready_members_;
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckRequest

// -------------------------------------------------------------------

// CMsgPartyReadyCheckResponse

// optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
inline bool CMsgPartyReadyCheckResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyReadyCheckResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgPartyReadyCheckResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EReadyCheckRequestResult CMsgPartyReadyCheckResponse::_internal_result() const {
  return static_cast< ::EReadyCheckRequestResult >(result_);
}
inline ::EReadyCheckRequestResult CMsgPartyReadyCheckResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPartyReadyCheckResponse.result)
  return _internal_result();
}
inline void CMsgPartyReadyCheckResponse::_internal_set_result(::EReadyCheckRequestResult value) {
  assert(::EReadyCheckRequestResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgPartyReadyCheckResponse::set_result(::EReadyCheckRequestResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgPartyReadyCheckResponse.result)
}

// -------------------------------------------------------------------

// CMsgPartyReadyCheckAcknowledge

// optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
inline bool CMsgPartyReadyCheckAcknowledge::_internal_has_ready_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyReadyCheckAcknowledge::has_ready_status() const {
  return _internal_has_ready_status();
}
inline void CMsgPartyReadyCheckAcknowledge::clear_ready_status() {
  ready_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EReadyCheckStatus CMsgPartyReadyCheckAcknowledge::_internal_ready_status() const {
  return static_cast< ::EReadyCheckStatus >(ready_status_);
}
inline ::EReadyCheckStatus CMsgPartyReadyCheckAcknowledge::ready_status() const {
  // @@protoc_insertion_point(field_get:CMsgPartyReadyCheckAcknowledge.ready_status)
  return _internal_ready_status();
}
inline void CMsgPartyReadyCheckAcknowledge::_internal_set_ready_status(::EReadyCheckStatus value) {
  assert(::EReadyCheckStatus_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  ready_status_ = value;
}
inline void CMsgPartyReadyCheckAcknowledge::set_ready_status(::EReadyCheckStatus value) {
  _internal_set_ready_status(value);
  // @@protoc_insertion_point(field_set:CMsgPartyReadyCheckAcknowledge.ready_status)
}

// -------------------------------------------------------------------

// CMsgLobbyEventGameDetails

// optional bytes kv_data = 1;
inline bool CMsgLobbyEventGameDetails::_internal_has_kv_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventGameDetails::has_kv_data() const {
  return _internal_has_kv_data();
}
inline void CMsgLobbyEventGameDetails::clear_kv_data() {
  kv_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLobbyEventGameDetails::kv_data() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventGameDetails.kv_data)
  return _internal_kv_data();
}
inline void CMsgLobbyEventGameDetails::set_kv_data(const std::string& value) {
  _internal_set_kv_data(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventGameDetails.kv_data)
}
inline std::string* CMsgLobbyEventGameDetails::mutable_kv_data() {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventGameDetails.kv_data)
  return _internal_mutable_kv_data();
}
inline const std::string& CMsgLobbyEventGameDetails::_internal_kv_data() const {
  return kv_data_.Get();
}
inline void CMsgLobbyEventGameDetails::_internal_set_kv_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgLobbyEventGameDetails::set_kv_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgLobbyEventGameDetails.kv_data)
}
inline void CMsgLobbyEventGameDetails::set_kv_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kv_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgLobbyEventGameDetails.kv_data)
}
inline void CMsgLobbyEventGameDetails::set_kv_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kv_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgLobbyEventGameDetails.kv_data)
}
inline std::string* CMsgLobbyEventGameDetails::_internal_mutable_kv_data() {
  _has_bits_[0] |= 0x00000001u;
  return kv_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgLobbyEventGameDetails::release_kv_data() {
  // @@protoc_insertion_point(field_release:CMsgLobbyEventGameDetails.kv_data)
  if (!_internal_has_kv_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kv_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgLobbyEventGameDetails::set_allocated_kv_data(std::string* kv_data) {
  if (kv_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kv_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kv_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyEventGameDetails.kv_data)
}

// -------------------------------------------------------------------

// CMsgMatchMatchmakingStats

// optional uint32 average_queue_time = 1;
inline bool CMsgMatchMatchmakingStats::_internal_has_average_queue_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_average_queue_time() const {
  return _internal_has_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_average_queue_time() {
  average_queue_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchMatchmakingStats::_internal_average_queue_time() const {
  return average_queue_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchMatchmakingStats::average_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.average_queue_time)
  return _internal_average_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_average_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  average_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_average_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_average_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.average_queue_time)
}

// optional uint32 maximum_queue_time = 2;
inline bool CMsgMatchMatchmakingStats::_internal_has_maximum_queue_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_maximum_queue_time() const {
  return _internal_has_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::clear_maximum_queue_time() {
  maximum_queue_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchMatchmakingStats::_internal_maximum_queue_time() const {
  return maximum_queue_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgMatchMatchmakingStats::maximum_queue_time() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.maximum_queue_time)
  return _internal_maximum_queue_time();
}
inline void CMsgMatchMatchmakingStats::_internal_set_maximum_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  maximum_queue_time_ = value;
}
inline void CMsgMatchMatchmakingStats::set_maximum_queue_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maximum_queue_time(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.maximum_queue_time)
}

// optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
inline bool CMsgMatchMatchmakingStats::_internal_has_behavior_score_variance() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchMatchmakingStats::has_behavior_score_variance() const {
  return _internal_has_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::clear_behavior_score_variance() {
  behavior_score_variance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::_internal_behavior_score_variance() const {
  return static_cast< ::EMatchBehaviorScoreVariance >(behavior_score_variance_);
}
inline ::EMatchBehaviorScoreVariance CMsgMatchMatchmakingStats::behavior_score_variance() const {
  // @@protoc_insertion_point(field_get:CMsgMatchMatchmakingStats.behavior_score_variance)
  return _internal_behavior_score_variance();
}
inline void CMsgMatchMatchmakingStats::_internal_set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  assert(::EMatchBehaviorScoreVariance_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  behavior_score_variance_ = value;
}
inline void CMsgMatchMatchmakingStats::set_behavior_score_variance(::EMatchBehaviorScoreVariance value) {
  _internal_set_behavior_score_variance(value);
  // @@protoc_insertion_point(field_set:CMsgMatchMatchmakingStats.behavior_score_variance)
}

// -------------------------------------------------------------------

// CMvpData_MvpDatum_MvpAccolade

// optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
inline bool CMvpData_MvpDatum_MvpAccolade::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum_MvpAccolade::has_type() const {
  return _internal_has_type();
}
inline void CMvpData_MvpDatum_MvpAccolade::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::_internal_type() const {
  return static_cast< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType >(type_);
}
inline ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::type() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.MvpAccolade.type)
  return _internal_type();
}
inline void CMvpData_MvpDatum_MvpAccolade::_internal_set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value) {
  assert(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CMvpData_MvpDatum_MvpAccolade::set_type(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.MvpAccolade.type)
}

// optional float detail_value = 2;
inline bool CMvpData_MvpDatum_MvpAccolade::_internal_has_detail_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum_MvpAccolade::has_detail_value() const {
  return _internal_has_detail_value();
}
inline void CMvpData_MvpDatum_MvpAccolade::clear_detail_value() {
  detail_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMvpData_MvpDatum_MvpAccolade::_internal_detail_value() const {
  return detail_value_;
}
inline float CMvpData_MvpDatum_MvpAccolade::detail_value() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.MvpAccolade.detail_value)
  return _internal_detail_value();
}
inline void CMvpData_MvpDatum_MvpAccolade::_internal_set_detail_value(float value) {
  _has_bits_[0] |= 0x00000001u;
  detail_value_ = value;
}
inline void CMvpData_MvpDatum_MvpAccolade::set_detail_value(float value) {
  _internal_set_detail_value(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.MvpAccolade.detail_value)
}

// -------------------------------------------------------------------

// CMvpData_MvpDatum

// optional uint32 slot = 1;
inline bool CMvpData_MvpDatum::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum::has_slot() const {
  return _internal_has_slot();
}
inline void CMvpData_MvpDatum::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMvpData_MvpDatum::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMvpData_MvpDatum::slot() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.slot)
  return _internal_slot();
}
inline void CMvpData_MvpDatum::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void CMvpData_MvpDatum::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.slot)
}

// repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
inline int CMvpData_MvpDatum::_internal_accolades_size() const {
  return accolades_.size();
}
inline int CMvpData_MvpDatum::accolades_size() const {
  return _internal_accolades_size();
}
inline void CMvpData_MvpDatum::clear_accolades() {
  accolades_.Clear();
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::mutable_accolades(int index) {
  // @@protoc_insertion_point(field_mutable:CMvpData.MvpDatum.accolades)
  return accolades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >*
CMvpData_MvpDatum::mutable_accolades() {
  // @@protoc_insertion_point(field_mutable_list:CMvpData.MvpDatum.accolades)
  return &accolades_;
}
inline const ::CMvpData_MvpDatum_MvpAccolade& CMvpData_MvpDatum::_internal_accolades(int index) const {
  return accolades_.Get(index);
}
inline const ::CMvpData_MvpDatum_MvpAccolade& CMvpData_MvpDatum::accolades(int index) const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.accolades)
  return _internal_accolades(index);
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::_internal_add_accolades() {
  return accolades_.Add();
}
inline ::CMvpData_MvpDatum_MvpAccolade* CMvpData_MvpDatum::add_accolades() {
  // @@protoc_insertion_point(field_add:CMvpData.MvpDatum.accolades)
  return _internal_add_accolades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum_MvpAccolade >&
CMvpData_MvpDatum::accolades() const {
  // @@protoc_insertion_point(field_list:CMvpData.MvpDatum.accolades)
  return accolades_;
}

// optional uint32 account_id = 3;
inline bool CMvpData_MvpDatum::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMvpData_MvpDatum::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMvpData_MvpDatum::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMvpData_MvpDatum::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMvpData_MvpDatum::account_id() const {
  // @@protoc_insertion_point(field_get:CMvpData.MvpDatum.account_id)
  return _internal_account_id();
}
inline void CMvpData_MvpDatum::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMvpData_MvpDatum::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMvpData.MvpDatum.account_id)
}

// -------------------------------------------------------------------

// CMvpData

// repeated .CMvpData.MvpDatum mvps = 1;
inline int CMvpData::_internal_mvps_size() const {
  return mvps_.size();
}
inline int CMvpData::mvps_size() const {
  return _internal_mvps_size();
}
inline void CMvpData::clear_mvps() {
  mvps_.Clear();
}
inline ::CMvpData_MvpDatum* CMvpData::mutable_mvps(int index) {
  // @@protoc_insertion_point(field_mutable:CMvpData.mvps)
  return mvps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >*
CMvpData::mutable_mvps() {
  // @@protoc_insertion_point(field_mutable_list:CMvpData.mvps)
  return &mvps_;
}
inline const ::CMvpData_MvpDatum& CMvpData::_internal_mvps(int index) const {
  return mvps_.Get(index);
}
inline const ::CMvpData_MvpDatum& CMvpData::mvps(int index) const {
  // @@protoc_insertion_point(field_get:CMvpData.mvps)
  return _internal_mvps(index);
}
inline ::CMvpData_MvpDatum* CMvpData::_internal_add_mvps() {
  return mvps_.Add();
}
inline ::CMvpData_MvpDatum* CMvpData::add_mvps() {
  // @@protoc_insertion_point(field_add:CMvpData.mvps)
  return _internal_add_mvps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMvpData_MvpDatum >&
CMvpData::mvps() const {
  // @@protoc_insertion_point(field_list:CMvpData.mvps)
  return mvps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSODOTAParty_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTAParty_State>() {
  return ::CSODOTAParty_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_LobbyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>() {
  return ::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor();
}
template <> struct is_proto_enum< ::ELaneSelection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELaneSelection>() {
  return ::ELaneSelection_descriptor();
}
template <> struct is_proto_enum< ::ELaneSelectionFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELaneSelectionFlags>() {
  return ::ELaneSelectionFlags_descriptor();
}
template <> struct is_proto_enum< ::EPartyMatchmakingFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPartyMatchmakingFlags>() {
  return ::EPartyMatchmakingFlags_descriptor();
}
template <> struct is_proto_enum< ::EHighPriorityMMState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EHighPriorityMMState>() {
  return ::EHighPriorityMMState_descriptor();
}
template <> struct is_proto_enum< ::ELobbyMemberCoachRequestState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELobbyMemberCoachRequestState>() {
  return ::ELobbyMemberCoachRequestState_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaTVDelay> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaTVDelay>() {
  return ::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaPauseSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaPauseSetting>() {
  return ::LobbyDotaPauseSetting_descriptor();
}
template <> struct is_proto_enum< ::EReadyCheckStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EReadyCheckStatus>() {
  return ::EReadyCheckStatus_descriptor();
}
template <> struct is_proto_enum< ::EReadyCheckRequestResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EReadyCheckRequestResult>() {
  return ::EReadyCheckRequestResult_descriptor();
}
template <> struct is_proto_enum< ::EMatchBehaviorScoreVariance> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EMatchBehaviorScoreVariance>() {
  return ::EMatchBehaviorScoreVariance_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto
