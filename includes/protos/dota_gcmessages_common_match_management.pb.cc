// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#include "dota_gcmessages_common_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSODOTAPartyMember::CSODOTAPartyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_ping_codes_()
  , _region_ping_codes_cached_byte_size_()
  , region_ping_times_()
  , _region_ping_times_cached_byte_size_()
  , region_ping_failed_bitmask_(0u)
  , tourney_skill_level_(0u)
  , tourney_buyin_(0u)
  , tourney_prevent_until_(0u)
  , is_coach_(false)
  , is_plus_subscriber_(false)
  , mm_data_valid_(false)
  , high_priority_disabled_(false)
  , lane_selection_flags_(0u)
  , has_hp_resource_(false)
  , joined_from_partyfinder_(false)
  , is_steam_china_(false){}
struct CSODOTAPartyMemberDefaultTypeInternal {
  constexpr CSODOTAPartyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAPartyMemberDefaultTypeInternal() {}
  union {
    CSODOTAPartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAPartyMemberDefaultTypeInternal _CSODOTAPartyMember_default_instance_;
constexpr CSODOTAParty::CSODOTAParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_ids_()
  , members_()
  , sent_invites_()
  , recv_invites_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ready_check_(nullptr)
  , party_id_(PROTOBUF_ULONGLONG(0))
  , leader_id_(PROTOBUF_ULONGLONG(0))
  , game_modes_(0u)
  , state_(0)

  , effective_started_matchmaking_time_(0u)
  , matchgroups_(0u)
  , low_priority_account_id_(0u)
  , match_type_(0)

  , bot_difficulty_(0)

  , team_id_(0u)
  , match_disabled_until_date_(0u)
  , match_disabled_account_id_(0u)
  , matchmaking_max_range_minutes_(0u)
  , matchlanguages_(0u)
  , raw_started_matchmaking_time_(0u)
  , attempt_start_time_(0u)
  , attempt_num_(0u)
  , low_priority_games_remaining_(0u)
  , account_flags_(0u)
  , region_select_flags_(0u)
  , exclusive_tournament_id_(0u)
  , tourney_division_id_(0u)
  , tourney_schedule_time_(0u)
  , tourney_skill_level_(0u)
  , team_ui_logo_(PROTOBUF_ULONGLONG(0))
  , tourney_bracket_round_(0u)
  , tourney_queue_deadline_time_(0u)
  , lane_selections_enabled_(false)
  , is_steam_china_(false)
  , team_base_logo_(PROTOBUF_ULONGLONG(0))
  , tourney_queue_deadline_state_(0)

  , party_builder_slots_to_fill_(0u)
  , party_builder_match_groups_(0u)
  , open_for_join_requests_(false)
  , solo_queue_(false)
  , is_challenge_match_(false)
  , party_search_beacon_active_(false)
  , party_builder_start_time_(0u)
  , bot_script_index_(0u)
  , steam_clan_account_id_(0u)
  , custom_game_disabled_until_date_(0u)
  , custom_game_disabled_account_id_(0u)
  , matchmaking_flags_(0u)
  , high_priority_state_(0)

  , custom_game_difficulty_mask_(0u){}
struct CSODOTAPartyDefaultTypeInternal {
  constexpr CSODOTAPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAPartyDefaultTypeInternal() {}
  union {
    CSODOTAParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAPartyDefaultTypeInternal _CSODOTAParty_default_instance_;
constexpr CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , is_coach_(false){}
struct CSODOTAPartyInvite_PartyMemberDefaultTypeInternal {
  constexpr CSODOTAPartyInvite_PartyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAPartyInvite_PartyMemberDefaultTypeInternal() {}
  union {
    CSODOTAPartyInvite_PartyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAPartyInvite_PartyMemberDefaultTypeInternal _CSODOTAPartyInvite_PartyMember_default_instance_;
constexpr CSODOTAPartyInvite::CSODOTAPartyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(PROTOBUF_ULONGLONG(0))
  , sender_id_(PROTOBUF_ULONGLONG(0))
  , team_id_(0u)
  , low_priority_status_(false)
  , as_coach_(false)
  , invite_gid_(PROTOBUF_ULONGLONG(0)){}
struct CSODOTAPartyInviteDefaultTypeInternal {
  constexpr CSODOTAPartyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAPartyInviteDefaultTypeInternal() {}
  union {
    CSODOTAPartyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAPartyInviteDefaultTypeInternal _CSODOTAPartyInvite_default_instance_;
constexpr CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0)){}
struct CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal {
  constexpr CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTALobbyInvite_LobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal _CSODOTALobbyInvite_LobbyMember_default_instance_;
constexpr CSODOTALobbyInvite::CSODOTALobbyInvite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , sender_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(PROTOBUF_ULONGLONG(0))
  , sender_id_(PROTOBUF_ULONGLONG(0))
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , invite_gid_(PROTOBUF_ULONGLONG(0))
  , custom_game_crc_(PROTOBUF_ULONGLONG(0))
  , custom_game_timestamp_(0u){}
struct CSODOTALobbyInviteDefaultTypeInternal {
  constexpr CSODOTALobbyInviteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTALobbyInviteDefaultTypeInternal() {}
  union {
    CSODOTALobbyInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTALobbyInviteDefaultTypeInternal _CSODOTALobbyInvite_default_instance_;
constexpr CMsgLeaverState::CMsgLeaverState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_state_(0u)
  , game_state_(0)

  , leaver_detected_(false)
  , first_blood_happened_(false)
  , discard_match_results_(false)
  , mass_disconnect_(false){}
struct CMsgLeaverStateDefaultTypeInternal {
  constexpr CMsgLeaverStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeaverStateDefaultTypeInternal() {}
  union {
    CMsgLeaverState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeaverStateDefaultTypeInternal _CMsgLeaverState_default_instance_;
constexpr CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coach_account_id_(0u)
  , player_account_id_(0u)
  , request_state_(0)
{}
struct CMsgLobbyCoachFriendRequestDefaultTypeInternal {
  constexpr CMsgLobbyCoachFriendRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyCoachFriendRequestDefaultTypeInternal() {}
  union {
    CMsgLobbyCoachFriendRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyCoachFriendRequestDefaultTypeInternal _CMsgLobbyCoachFriendRequest_default_instance_;
constexpr CSODOTALobbyMember::CSODOTALobbyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disabled_hero_id_()
  , enabled_hero_id_()
  , custom_game_product_ids_()
  , disabled_random_hero_bits_()
  , pending_awards_()
  , pending_awards_on_victory_()
  , coached_account_ids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pwrd_cyber_cafe_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0))
  , hero_id_(0u)
  , team_(0)

  , slot_(0u)
  , meta_level_(0u)
  , party_id_(PROTOBUF_ULONGLONG(0))
  , meta_xp_(0u)
  , meta_xp_awarded_(0u)
  , leaver_status_(0)

  , pwrd_cyber_cafe_id_(0u)
  , leaver_actions_(0u)
  , rank_change_(0)
  , favorite_team_packed_(PROTOBUF_ULONGLONG(0))
  , search_match_type_(0)

  , cameraman_(false)
  , is_plus_subscriber_(false)
  , rank_tier_updated_(false)
  , can_earn_rewards_(false)
  , lane_selection_flags_(0u)
  , coach_rating_(0u)
  , rank_mmr_boost_type_(0)

  , queue_point_adjustment_(0)
  , rank_tier_(0)
  , was_mvp_last_game_(false)
  , is_steam_china_(false)
  , title_(0u)
  , guild_id_(0u)
  , reports_available_(0u)
  , live_spectator_account_id_(0u)
  , live_spectator_team_(5)

  , channel_(6u)
  , coach_team_(5)
{}
struct CSODOTALobbyMemberDefaultTypeInternal {
  constexpr CSODOTALobbyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTALobbyMemberDefaultTypeInternal() {}
  union {
    CSODOTALobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTALobbyMemberDefaultTypeInternal _CSODOTALobbyMember_default_instance_;
constexpr CLobbyTeamDetails::CLobbyTeamDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , team_base_logo_(PROTOBUF_ULONGLONG(0))
  , team_banner_logo_(PROTOBUF_ULONGLONG(0))
  , team_id_(0u)
  , team_complete_(false)
  , is_home_team_(false)
  , is_challenge_match_(false)
  , rank_(0u)
  , rank_change_(0)
  , challenge_match_token_account_(PROTOBUF_ULONGLONG(0)){}
struct CLobbyTeamDetailsDefaultTypeInternal {
  constexpr CLobbyTeamDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyTeamDetailsDefaultTypeInternal() {}
  union {
    CLobbyTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
constexpr CLobbyGuildDetails::CLobbyGuildDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , guild_id_(0u)
  , guild_primary_color_(0u)
  , guild_secondary_color_(0u)
  , guild_pattern_(0u)
  , guild_logo_(PROTOBUF_ULONGLONG(0))
  , guild_points_(0u)
  , guild_event_(0u)
  , guild_flags_(0u)
  , team_for_guild_(0)

  , guild_weekly_percentile_(0u){}
struct CLobbyGuildDetailsDefaultTypeInternal {
  constexpr CLobbyGuildDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyGuildDetailsDefaultTypeInternal() {}
  union {
    CLobbyGuildDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyGuildDetailsDefaultTypeInternal _CLobbyGuildDetails_default_instance_;
constexpr CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u)
  , is_supply_crate_(false)
  , is_timed_drop_(false)
  , account_id_(0u)
  , origin_(0u){}
struct CLobbyTimedRewardDetailsDefaultTypeInternal {
  constexpr CLobbyTimedRewardDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyTimedRewardDetailsDefaultTypeInternal() {}
  union {
    CLobbyTimedRewardDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
constexpr CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channel_id_(0u){}
struct CLobbyBroadcastChannelInfoDefaultTypeInternal {
  constexpr CLobbyBroadcastChannelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyBroadcastChannelInfoDefaultTypeInternal() {}
  union {
    CLobbyBroadcastChannelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyBroadcastChannelInfoDefaultTypeInternal _CLobbyBroadcastChannelInfo_default_instance_;
constexpr CLobbyGuildChallenge::CLobbyGuildChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eligible_account_ids_()
  , guild_id_(0u)
  , event_id_(0)

  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , challenge_timestamp_(0u)
  , challenge_period_serial_(0u)
  , challenge_progress_at_start_(0u){}
struct CLobbyGuildChallengeDefaultTypeInternal {
  constexpr CLobbyGuildChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CLobbyGuildChallengeDefaultTypeInternal() {}
  union {
    CLobbyGuildChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CLobbyGuildChallengeDefaultTypeInternal _CLobbyGuildChallenge_default_instance_;
constexpr CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CSODOTALobby_CExtraMsgDefaultTypeInternal {
  constexpr CSODOTALobby_CExtraMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTALobby_CExtraMsgDefaultTypeInternal() {}
  union {
    CSODOTALobby_CExtraMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTALobby_CExtraMsgDefaultTypeInternal _CSODOTALobby_CExtraMsg_default_instance_;
constexpr CSODOTALobby::CSODOTALobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : v2_members_()
  , v2_left_members_()
  , pending_invites_()
  , team_details_()
  , timed_reward_details_()
  , broadcast_channel_info_()
  , extra_messages_()
  , previous_series_matches_()
  , event_progression_enabled_()
  , emergency_disabled_hero_ids_()
  , guild_challenges_()
  , guild_details_()
  , lobby_event_points_()
  , all_members_()
  , member_indices_()
  , left_member_indices_()
  , free_member_indices_()
  , requested_hero_ids_()
  , coach_friend_requests_()
  , connect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pass_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lan_host_ping_location_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_game_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0u)
  , state_(0)

  , server_id_(PROTOBUF_ULONGLONG(0))
  , leader_id_(PROTOBUF_ULONGLONG(0))
  , tutorial_lesson_(0u)
  , tournament_id_(0u)
  , tournament_game_id_(0u)
  , server_region_(0u)
  , game_state_(0)

  , num_spectators_(0u)
  , allow_cheats_(false)
  , fill_with_bots_(false)
  , intro_mode_(false)
  , allchat_(false)
  , matchgroup_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , cm_pick_(0)

  , game_version_(0)

  , leagueid_(0u)
  , penalty_level_radiant_(0u)
  , penalty_level_dire_(0u)
  , load_game_id_(0u)
  , series_type_(0u)
  , radiant_series_wins_(0u)
  , dire_series_wins_(0u)
  , loot_generated_(0u)
  , loot_awarded_(0u)
  , dota_tv_delay_(0)

  , custom_difficulty_(0u)
  , first_leaver_accountid_(0u)
  , series_id_(0u)
  , lan_(false)
  , low_priority_(false)
  , first_blood_happened_(false)
  , mass_disconnect_(false)
  , custom_game_id_(PROTOBUF_ULONGLONG(0))
  , match_outcome_(0)

  , custom_min_players_(0u)
  , custom_max_players_(0u)
  , visibility_(0)

  , custom_game_crc_(PROTOBUF_ULONGLONG(0))
  , previous_match_override_(PROTOBUF_ULONGLONG(0))
  , custom_game_timestamp_(0u)
  , game_start_time_(0u)
  , pause_setting_(0)

  , lobby_mvp_account_id_(0u)
  , weekend_tourney_division_id_(0u)
  , weekend_tourney_skill_level_(0u)
  , weekend_tourney_bracket_round_(0u)
  , custom_game_auto_created_lobby_(false)
  , custom_game_uses_account_records_(false)
  , series_current_selection_priority_used_coin_toss_(false)
  , custom_game_penalties_(false)
  , bot_radiant_(PROTOBUF_ULONGLONG(0))
  , bot_dire_(PROTOBUF_ULONGLONG(0))
  , selection_priority_rules_(0)

  , series_previous_selection_priority_team_id_(0u)
  , series_current_selection_priority_team_id_(0u)
  , series_current_priority_team_choice_(0)

  , series_current_non_priority_team_choice_(0)

  , current_primary_event_(0)

  , with_scenario_save_(false)
  , custom_game_private_key_(PROTOBUF_ULONGLONG(0))
  , league_node_id_(0u)
  , match_duration_(0u)
  , league_phase_(0u)
  , custom_game_browseable_(false)
  , record_detailed_stats_(false)
  , experimental_gameplay_enabled_(false)
  , is_in_steam_china_(false)
  , lobby_type_(-1)

  , allow_spectating_(true)
  , bot_difficulty_radiant_(3)

  , bot_difficulty_dire_(3)
{}
struct CSODOTALobbyDefaultTypeInternal {
  constexpr CSODOTALobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTALobbyDefaultTypeInternal() {}
  union {
    CSODOTALobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
constexpr CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : json_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgLobbyPlaytestDetailsDefaultTypeInternal {
  constexpr CMsgLobbyPlaytestDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyPlaytestDetailsDefaultTypeInternal() {}
  union {
    CMsgLobbyPlaytestDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyPlaytestDetailsDefaultTypeInternal _CMsgLobbyPlaytestDetails_default_instance_;
constexpr CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , ready_status_(0)
{}
struct CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal {
  constexpr CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal() {}
  union {
    CMsgReadyCheckStatus_ReadyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReadyCheckStatus_ReadyMemberDefaultTypeInternal _CMsgReadyCheckStatus_ReadyMember_default_instance_;
constexpr CMsgReadyCheckStatus::CMsgReadyCheckStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ready_members_()
  , start_timestamp_(0u)
  , finish_timestamp_(0u)
  , initiator_account_id_(0u){}
struct CMsgReadyCheckStatusDefaultTypeInternal {
  constexpr CMsgReadyCheckStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgReadyCheckStatusDefaultTypeInternal() {}
  union {
    CMsgReadyCheckStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgReadyCheckStatusDefaultTypeInternal _CMsgReadyCheckStatus_default_instance_;
constexpr CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgPartyReadyCheckRequestDefaultTypeInternal {
  constexpr CMsgPartyReadyCheckRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckRequestDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyReadyCheckRequestDefaultTypeInternal _CMsgPartyReadyCheckRequest_default_instance_;
constexpr CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgPartyReadyCheckResponseDefaultTypeInternal {
  constexpr CMsgPartyReadyCheckResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckResponseDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyReadyCheckResponseDefaultTypeInternal _CMsgPartyReadyCheckResponse_default_instance_;
constexpr CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ready_status_(0)
{}
struct CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal {
  constexpr CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal() {}
  union {
    CMsgPartyReadyCheckAcknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyReadyCheckAcknowledgeDefaultTypeInternal _CMsgPartyReadyCheckAcknowledge_default_instance_;
constexpr CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kv_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgLobbyEventGameDetailsDefaultTypeInternal {
  constexpr CMsgLobbyEventGameDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventGameDetailsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventGameDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventGameDetailsDefaultTypeInternal _CMsgLobbyEventGameDetails_default_instance_;
constexpr CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : average_queue_time_(0u)
  , maximum_queue_time_(0u)
  , behavior_score_variance_(0)
{}
struct CMsgMatchMatchmakingStatsDefaultTypeInternal {
  constexpr CMsgMatchMatchmakingStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchMatchmakingStatsDefaultTypeInternal() {}
  union {
    CMsgMatchMatchmakingStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchMatchmakingStatsDefaultTypeInternal _CMsgMatchMatchmakingStats_default_instance_;
constexpr CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : detail_value_(0)
  , type_(1)
{}
struct CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal {
  constexpr CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal() {}
  union {
    CMvpData_MvpDatum_MvpAccolade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMvpData_MvpDatum_MvpAccoladeDefaultTypeInternal _CMvpData_MvpDatum_MvpAccolade_default_instance_;
constexpr CMvpData_MvpDatum::CMvpData_MvpDatum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accolades_()
  , slot_(0u)
  , account_id_(0u){}
struct CMvpData_MvpDatumDefaultTypeInternal {
  constexpr CMvpData_MvpDatumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMvpData_MvpDatumDefaultTypeInternal() {}
  union {
    CMvpData_MvpDatum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMvpData_MvpDatumDefaultTypeInternal _CMvpData_MvpDatum_default_instance_;
constexpr CMvpData::CMvpData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mvps_(){}
struct CMvpDataDefaultTypeInternal {
  constexpr CMvpDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMvpDataDefaultTypeInternal() {}
  union {
    CMvpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMvpDataDefaultTypeInternal _CMvpData_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, is_coach_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, region_ping_codes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, region_ping_times_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, region_ping_failed_bitmask_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, tourney_buyin_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, tourney_prevent_until_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, mm_data_valid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, high_priority_disabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, has_hp_resource_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, joined_from_partyfinder_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyMember, is_steam_china_),
  4,
  ~0u,
  ~0u,
  0,
  5,
  1,
  2,
  3,
  6,
  8,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, party_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, leader_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, member_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, game_modes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, effective_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, raw_started_matchmaking_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, attempt_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, attempt_num_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, low_priority_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, match_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, team_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, team_ui_logo_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, match_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, match_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, matchmaking_max_range_minutes_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, low_priority_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, open_for_join_requests_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, sent_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, recv_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, account_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, exclusive_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_schedule_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_queue_deadline_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, tourney_queue_deadline_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, party_builder_slots_to_fill_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, party_builder_match_groups_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, party_builder_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, solo_queue_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, bot_script_index_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, ready_check_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, custom_game_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, custom_game_disabled_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, party_search_beacon_active_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, matchmaking_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, high_priority_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, lane_selections_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, custom_game_difficulty_mask_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAParty, is_steam_china_),
  2,
  3,
  ~0u,
  4,
  5,
  6,
  16,
  17,
  18,
  7,
  8,
  9,
  10,
  11,
  0,
  26,
  31,
  12,
  13,
  14,
  15,
  ~0u,
  19,
  35,
  ~0u,
  ~0u,
  20,
  21,
  22,
  23,
  24,
  25,
  27,
  28,
  32,
  33,
  34,
  39,
  36,
  40,
  41,
  1,
  42,
  43,
  37,
  38,
  44,
  45,
  29,
  46,
  30,
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite_PartyMember, is_coach_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, sender_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, low_priority_status_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, as_coach_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPartyInvite, invite_gid_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite_LobbyMember, steam_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, group_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, sender_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, invite_gid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyInvite, custom_game_timestamp_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, lobby_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, leaver_detected_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, discard_match_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverState, mass_disconnect_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, coach_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyCoachFriendRequest, request_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, slot_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, party_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, meta_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, meta_xp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, meta_xp_awarded_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, leaver_actions_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, channel_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, disabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, enabled_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, coach_team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, coached_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, coach_rating_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, pwrd_cyber_cafe_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, pwrd_cyber_cafe_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, disabled_random_hero_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, rank_change_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, cameraman_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, custom_game_product_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, search_match_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, favorite_team_packed_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, rank_tier_updated_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, can_earn_rewards_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, live_spectator_team_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, was_mvp_last_game_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, pending_awards_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, pending_awards_on_victory_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, rank_mmr_boost_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, queue_point_adjustment_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, title_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, reports_available_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, is_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobbyMember, live_spectator_account_id_),
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  8,
  9,
  10,
  12,
  32,
  ~0u,
  ~0u,
  33,
  ~0u,
  21,
  11,
  1,
  ~0u,
  13,
  16,
  ~0u,
  15,
  14,
  17,
  18,
  20,
  19,
  31,
  25,
  ~0u,
  ~0u,
  22,
  23,
  24,
  27,
  28,
  29,
  26,
  30,
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_complete_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, rank_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, rank_change_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, is_home_team_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, challenge_match_token_account_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTeamDetails, team_abbreviation_),
  0,
  1,
  7,
  4,
  5,
  6,
  8,
  11,
  12,
  9,
  10,
  13,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_primary_color_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_secondary_color_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_pattern_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_logo_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_points_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_event_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_flags_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, team_for_guild_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_tag_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildDetails, guild_weekly_percentile_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  10,
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_supply_crate_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, is_timed_drop_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, account_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyTimedRewardDetails, origin_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, channel_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, description_),
  PROTOBUF_FIELD_OFFSET(::CLobbyBroadcastChannelInfo, language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, challenge_period_serial_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CLobbyGuildChallenge, eligible_account_ids_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby_CExtraMsg, contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, v2_members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, v2_left_members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, all_members_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, left_member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, free_member_indices_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, leader_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, server_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, pending_invites_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, connect_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, intro_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, game_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, team_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, tutorial_lesson_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, server_region_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, game_state_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, num_spectators_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, matchgroup_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, cm_pick_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, match_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, game_version_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, pass_key_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, leagueid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, load_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_type_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, loot_generated_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, loot_awarded_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, allchat_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lan_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, broadcast_channel_info_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, first_leaver_accountid_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, low_priority_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, save_game_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, mass_disconnect_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, visibility_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_auto_created_lobby_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, previous_series_matches_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_uses_account_records_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, game_start_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, pause_setting_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lobby_mvp_account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, weekend_tourney_division_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, weekend_tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, bot_dire_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, event_progression_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_previous_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_current_selection_priority_team_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_current_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_current_non_priority_team_choice_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, series_current_selection_priority_used_coin_toss_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, current_primary_event_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, emergency_disabled_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_private_key_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, match_duration_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, custom_game_browseable_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, league_phase_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, record_detailed_stats_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, experimental_gameplay_enabled_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, guild_challenges_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, guild_details_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, lobby_event_points_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, requested_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, coach_friend_requests_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, is_in_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CSODOTALobby, with_scenario_save_),
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  11,
  10,
  8,
  ~0u,
  9,
  0,
  78,
  18,
  19,
  20,
  1,
  ~0u,
  12,
  13,
  14,
  15,
  16,
  17,
  22,
  24,
  23,
  79,
  80,
  25,
  ~0u,
  2,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  21,
  35,
  3,
  4,
  36,
  39,
  ~0u,
  37,
  38,
  40,
  ~0u,
  6,
  41,
  44,
  42,
  43,
  45,
  46,
  47,
  48,
  57,
  50,
  ~0u,
  49,
  58,
  51,
  52,
  53,
  54,
  55,
  56,
  81,
  61,
  62,
  ~0u,
  63,
  64,
  65,
  66,
  67,
  59,
  68,
  ~0u,
  70,
  60,
  5,
  71,
  72,
  74,
  73,
  75,
  76,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  77,
  69,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlaytestDetails, json_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus_ReadyMember, ready_status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, finish_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, initiator_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyCheckStatus, ready_members_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyReadyCheckAcknowledge, ready_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameDetails, kv_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, average_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, maximum_queue_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchMatchmakingStats, behavior_score_variance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, type_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum_MvpAccolade, detail_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, slot_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, accolades_),
  PROTOBUF_FIELD_OFFSET(::CMvpData_MvpDatum, account_id_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMvpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMvpData, mvps_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::CSODOTAPartyMember)},
  { 33, 89, sizeof(::CSODOTAParty)},
  { 140, 148, sizeof(::CSODOTAPartyInvite_PartyMember)},
  { 151, 164, sizeof(::CSODOTAPartyInvite)},
  { 172, 179, sizeof(::CSODOTALobbyInvite_LobbyMember)},
  { 181, 194, sizeof(::CSODOTALobbyInvite)},
  { 202, 213, sizeof(::CMsgLeaverState)},
  { 219, 227, sizeof(::CMsgLobbyCoachFriendRequest)},
  { 230, 276, sizeof(::CSODOTALobbyMember)},
  { 317, 336, sizeof(::CLobbyTeamDetails)},
  { 350, 366, sizeof(::CLobbyGuildDetails)},
  { 377, 387, sizeof(::CLobbyTimedRewardDetails)},
  { 392, 401, sizeof(::CLobbyBroadcastChannelInfo)},
  { 405, 418, sizeof(::CLobbyGuildChallenge)},
  { 426, 433, sizeof(::CSODOTALobby_CExtraMsg)},
  { 435, 541, sizeof(::CSODOTALobby)},
  { 642, 648, sizeof(::CMsgLobbyPlaytestDetails)},
  { 649, 656, sizeof(::CMsgReadyCheckStatus_ReadyMember)},
  { 658, 667, sizeof(::CMsgReadyCheckStatus)},
  { 671, -1, sizeof(::CMsgPartyReadyCheckRequest)},
  { 676, 682, sizeof(::CMsgPartyReadyCheckResponse)},
  { 683, 689, sizeof(::CMsgPartyReadyCheckAcknowledge)},
  { 690, 696, sizeof(::CMsgLobbyEventGameDetails)},
  { 697, 705, sizeof(::CMsgMatchMatchmakingStats)},
  { 708, 715, sizeof(::CMvpData_MvpDatum_MvpAccolade)},
  { 717, 725, sizeof(::CMvpData_MvpDatum)},
  { 728, -1, sizeof(::CMvpData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAPartyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAPartyInvite_PartyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAPartyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTALobbyInvite_LobbyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTALobbyInvite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeaverState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyCoachFriendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTALobbyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyTeamDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyGuildDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyTimedRewardDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyBroadcastChannelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLobbyGuildChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTALobby_CExtraMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTALobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyPlaytestDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReadyCheckStatus_ReadyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgReadyCheckStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyReadyCheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyReadyCheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyReadyCheckAcknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventGameDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchMatchmakingStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMvpData_MvpDatum_MvpAccolade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMvpData_MvpDatum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMvpData_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-dota_gcmessages_common_match_managemen"
  "t.proto\032\023steammessages.proto\032\026gcsdk_gcme"
  "ssages.proto\032\027dota_shared_enums.proto\032\034d"
  "ota_gcmessages_common.proto\"\236\003\n\022CSODOTAP"
  "artyMember\022\020\n\010is_coach\030\002 \001(\010\022\035\n\021region_p"
  "ing_codes\030\004 \003(\rB\002\020\001\022\035\n\021region_ping_times"
  "\030\005 \003(\rB\002\020\001\022\"\n\032region_ping_failed_bitmask"
  "\030\006 \001(\r\022\032\n\022is_plus_subscriber\030\n \001(\010\022\033\n\023to"
  "urney_skill_level\030\007 \001(\r\022\025\n\rtourney_buyin"
  "\030\010 \001(\r\022\035\n\025tourney_prevent_until\030\t \001(\r\022\025\n"
  "\rmm_data_valid\030\r \001(\010\022\034\n\024lane_selection_f"
  "lags\030\013 \001(\r\022\036\n\026high_priority_disabled\030\016 \001"
  "(\010\022\027\n\017has_hp_resource\030\017 \001(\010\022\037\n\027joined_fr"
  "om_partyfinder\030\014 \001(\010\022\026\n\016is_steam_china\030\020"
  " \001(\010\"\234\016\n\014CSODOTAParty\022\026\n\010party_id\030\001 \001(\004B"
  "\004\200\246\035\001\022\021\n\tleader_id\030\002 \001(\006\022\022\n\nmember_ids\030\003"
  " \003(\006\022\022\n\ngame_modes\030\004 \001(\r\022&\n\005state\030\006 \001(\0162"
  "\023.CSODOTAParty.State:\002UI\022*\n\"effective_st"
  "arted_matchmaking_time\030\007 \001(\r\022$\n\034raw_star"
  "ted_matchmaking_time\030  \001(\r\022\032\n\022attempt_st"
  "art_time\030! \001(\r\022\023\n\013attempt_num\030\" \001(\r\022\023\n\013m"
  "atchgroups\030\013 \001(\r\022\037\n\027low_priority_account"
  "_id\030\023 \001(\r\0221\n\nmatch_type\030\025 \001(\0162\n.MatchTyp"
  "e:\021MATCH_TYPE_CASUAL\022B\n\016bot_difficulty\030\026"
  " \001(\0162\022.DOTABotDifficulty:\026BOT_DIFFICULTY"
  "_PASSIVE\022\017\n\007team_id\030\027 \001(\r\022\021\n\tteam_name\0303"
  " \001(\t\022\024\n\014team_ui_logo\0304 \001(\004\022\026\n\016team_base_"
  "logo\0305 \001(\004\022!\n\031match_disabled_until_date\030"
  "\030 \001(\r\022!\n\031match_disabled_account_id\030\031 \001(\r"
  "\022%\n\035matchmaking_max_range_minutes\030\032 \001(\r\022"
  "\026\n\016matchlanguages\030\033 \001(\r\022$\n\007members\030\035 \003(\013"
  "2\023.CSODOTAPartyMember\022$\n\034low_priority_ga"
  "mes_remaining\030# \001(\r\022\036\n\026open_for_join_req"
  "uests\030( \001(\010\022)\n\014sent_invites\030) \003(\0132\023.CSOD"
  "OTAPartyInvite\022)\n\014recv_invites\030* \003(\0132\023.C"
  "SODOTAPartyInvite\022\025\n\raccount_flags\030+ \001(\r"
  "\022\033\n\023region_select_flags\030, \001(\r\022\037\n\027exclusi"
  "ve_tournament_id\030- \001(\r\022\033\n\023tourney_divisi"
  "on_id\030/ \001(\r\022\035\n\025tourney_schedule_time\0300 \001"
  "(\r\022\033\n\023tourney_skill_level\0301 \001(\r\022\035\n\025tourn"
  "ey_bracket_round\0302 \001(\r\022#\n\033tourney_queue_"
  "deadline_time\0306 \001(\r\022f\n\034tourney_queue_dea"
  "dline_state\0307 \001(\0162\033.ETourneyQueueDeadlin"
  "eState:#k_ETourneyQueueDeadlineState_Nor"
  "mal\022#\n\033party_builder_slots_to_fill\0308 \001(\r"
  "\022\"\n\032party_builder_match_groups\0309 \001(\r\022 \n\030"
  "party_builder_start_time\030: \001(\r\022\022\n\nsolo_q"
  "ueue\030; \001(\010\022\030\n\020bot_script_index\030< \001(\r\022\035\n\025"
  "steam_clan_account_id\030= \001(\r\022*\n\013ready_che"
  "ck\030> \001(\0132\025.CMsgReadyCheckStatus\022\'\n\037custo"
  "m_game_disabled_until_date\030\? \001(\r\022\'\n\037cust"
  "om_game_disabled_account_id\030@ \001(\r\022\032\n\022is_"
  "challenge_match\030A \001(\010\022\"\n\032party_search_be"
  "acon_active\030B \001(\010\022\031\n\021matchmaking_flags\030C"
  " \001(\r\022M\n\023high_priority_state\030D \001(\0162\025.EHig"
  "hPriorityMMState:\031k_EHighPriorityMM_Unkn"
  "own\022\037\n\027lane_selections_enabled\030E \001(\010\022#\n\033"
  "custom_game_difficulty_mask\030F \001(\r\022\026\n\016is_"
  "steam_china\030G \001(\010\"0\n\005State\022\006\n\002UI\020\000\022\021\n\rFI"
  "NDING_MATCH\020\001\022\014\n\010IN_MATCH\020\002\"\233\002\n\022CSODOTAP"
  "artyInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tse"
  "nder_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\0220\n\007me"
  "mbers\030\004 \003(\0132\037.CSODOTAPartyInvite.PartyMe"
  "mber\022\017\n\007team_id\030\005 \001(\r\022\033\n\023low_priority_st"
  "atus\030\006 \001(\010\022\020\n\010as_coach\030\007 \001(\010\022\022\n\ninvite_g"
  "id\030\010 \001(\006\032\?\n\013PartyMember\022\014\n\004name\030\001 \001(\t\022\020\n"
  "\010steam_id\030\002 \001(\006\022\020\n\010is_coach\030\004 \001(\010\"\231\002\n\022CS"
  "ODOTALobbyInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001"
  "\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t"
  "\0220\n\007members\030\004 \003(\0132\037.CSODOTALobbyInvite.L"
  "obbyMember\022\026\n\016custom_game_id\030\005 \001(\004\022\022\n\nin"
  "vite_gid\030\006 \001(\006\022\027\n\017custom_game_crc\030\007 \001(\006\022"
  "\035\n\025custom_game_timestamp\030\010 \001(\007\032-\n\013LobbyM"
  "ember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006\"\325\001"
  "\n\017CMsgLeaverState\022\023\n\013lobby_state\030\001 \001(\r\022>"
  "\n\ngame_state\030\002 \001(\0162\017.DOTA_GameState:\031DOT"
  "A_GAMERULES_STATE_INIT\022\027\n\017leaver_detecte"
  "d\030\003 \001(\010\022\034\n\024first_blood_happened\030\004 \001(\010\022\035\n"
  "\025discard_match_results\030\005 \001(\010\022\027\n\017mass_dis"
  "connect\030\006 \001(\010\"\257\001\n\033CMsgLobbyCoachFriendRe"
  "quest\022\030\n\020coach_account_id\030\001 \001(\r\022\031\n\021playe"
  "r_account_id\030\002 \001(\r\022[\n\rrequest_state\030\003 \001("
  "\0162\036.ELobbyMemberCoachRequestState:$k_eLo"
  "bbyMemberCoachRequestState_None\"\211\n\n\022CSOD"
  "OTALobbyMember\022\020\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017\n\007hero"
  "_id\030\002 \001(\r\0223\n\004team\030\003 \001(\0162\r.DOTA_GC_TEAM:\026"
  "DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001(\t\022\014\n\004"
  "slot\030\007 \001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nmeta_lev"
  "el\030\r \001(\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_xp_awa"
  "rded\030\017 \001(\r\022<\n\rleaver_status\030\020 \001(\0162\023.DOTA"
  "LeaverStatus_t:\020DOTA_LEAVER_NONE\022\026\n\016leav"
  "er_actions\030\034 \001(\r\022\022\n\007channel\030\021 \001(\r:\0016\022\030\n\020"
  "disabled_hero_id\030\024 \003(\r\022\027\n\017enabled_hero_i"
  "d\030\026 \003(\r\0226\n\ncoach_team\030\027 \001(\0162\r.DOTA_GC_TE"
  "AM:\023DOTA_GC_TEAM_NOTEAM\022\033\n\023coached_accou"
  "nt_ids\0305 \003(\r\022\024\n\014coach_rating\030* \001(\r\022\032\n\022pw"
  "rd_cyber_cafe_id\030\030 \001(\r\022\034\n\024pwrd_cyber_caf"
  "e_name\030\031 \001(\t\022!\n\031disabled_random_hero_bit"
  "s\030) \003(\007\022\023\n\013rank_change\030\035 \001(\021\022\021\n\tcamerama"
  "n\030\036 \001(\010\022\037\n\027custom_game_product_ids\030\037 \003(\r"
  "\0228\n\021search_match_type\030! \001(\0162\n.MatchType:"
  "\021MATCH_TYPE_CASUAL\022\034\n\024favorite_team_pack"
  "ed\030# \001(\004\022\032\n\022is_plus_subscriber\030$ \001(\010\022\031\n\021"
  "rank_tier_updated\030% \001(\010\022\034\n\024lane_selectio"
  "n_flags\030& \001(\r\022\030\n\020can_earn_rewards\030\' \001(\010\022"
  "\?\n\023live_spectator_team\030( \001(\0162\r.DOTA_GC_T"
  "EAM:\023DOTA_GC_TEAM_NOTEAM\022\031\n\021was_mvp_last"
  "_game\030+ \001(\010\022.\n\016pending_awards\030, \003(\0132\026.CM"
  "sgPendingEventAward\0229\n\031pending_awards_on"
  "_victory\030- \003(\0132\026.CMsgPendingEventAward\022I"
  "\n\023rank_mmr_boost_type\030. \001(\0162\022.EDOTAMMRBo"
  "ostType:\030k_EDOTAMMRBoostType_None\022\036\n\026que"
  "ue_point_adjustment\030/ \001(\021\022\021\n\trank_tier\0300"
  " \001(\005\022\r\n\005title\0302 \001(\r\022\020\n\010guild_id\0303 \001(\r\022\031\n"
  "\021reports_available\0304 \001(\r\022\026\n\016is_steam_chi"
  "na\0306 \001(\010\022!\n\031live_spectator_account_id\0307 "
  "\001(\r\"\323\002\n\021CLobbyTeamDetails\022\021\n\tteam_name\030\001"
  " \001(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\r\022"
  "\021\n\tteam_logo\030\005 \001(\004\022\026\n\016team_base_logo\030\006 \001"
  "(\004\022\030\n\020team_banner_logo\030\007 \001(\004\022\025\n\rteam_com"
  "plete\030\010 \001(\010\022\014\n\004rank\030\017 \001(\r\022\023\n\013rank_change"
  "\030\020 \001(\021\022\024\n\014is_home_team\030\021 \001(\010\022\032\n\022is_chall"
  "enge_match\030\022 \001(\010\022%\n\035challenge_match_toke"
  "n_account\030\023 \001(\004\022\025\n\rteam_logo_url\030\024 \001(\t\022\031"
  "\n\021team_abbreviation\030\025 \001(\t\"\300\002\n\022CLobbyGuil"
  "dDetails\022\020\n\010guild_id\030\001 \001(\r\022\033\n\023guild_prim"
  "ary_color\030\002 \001(\r\022\035\n\025guild_secondary_color"
  "\030\003 \001(\r\022\025\n\rguild_pattern\030\004 \001(\r\022\022\n\nguild_l"
  "ogo\030\005 \001(\004\022\024\n\014guild_points\030\006 \001(\r\022\023\n\013guild"
  "_event\030\007 \001(\r\022\023\n\013guild_flags\030\010 \001(\r\022=\n\016tea"
  "m_for_guild\030\t \001(\0162\r.DOTA_GC_TEAM:\026DOTA_G"
  "C_TEAM_GOOD_GUYS\022\021\n\tguild_tag\030\n \001(\t\022\037\n\027g"
  "uild_weekly_percentile\030\013 \001(\r\"\206\001\n\030CLobbyT"
  "imedRewardDetails\022\026\n\016item_def_index\030\002 \001("
  "\r\022\027\n\017is_supply_crate\030\003 \001(\010\022\025\n\ris_timed_d"
  "rop\030\004 \001(\010\022\022\n\naccount_id\030\005 \001(\r\022\016\n\006origin\030"
  "\006 \001(\r\"r\n\032CLobbyBroadcastChannelInfo\022\022\n\nc"
  "hannel_id\030\001 \001(\r\022\024\n\014country_code\030\002 \001(\t\022\023\n"
  "\013description\030\003 \001(\t\022\025\n\rlanguage_code\030\004 \001("
  "\t\"\217\002\n\024CLobbyGuildChallenge\022\020\n\010guild_id\030\001"
  " \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_I"
  "D_NONE\022\035\n\025challenge_instance_id\030\003 \001(\r\022\033\n"
  "\023challenge_parameter\030\004 \001(\r\022\033\n\023challenge_"
  "timestamp\030\005 \001(\r\022\037\n\027challenge_period_seri"
  "al\030\006 \001(\r\022#\n\033challenge_progress_at_start\030"
  "\007 \001(\r\022\034\n\024eligible_account_ids\030\010 \003(\r\"\302 \n\014"
  "CSODOTALobby\022\026\n\010lobby_id\030\001 \001(\004B\004\200\246\035\001\022\'\n\n"
  "v2_members\030\002 \003(\0132\023.CSODOTALobbyMember\022,\n"
  "\017v2_left_members\030\007 \003(\0132\023.CSODOTALobbyMem"
  "ber\022(\n\013all_members\030x \003(\0132\023.CSODOTALobbyM"
  "ember\022\026\n\016member_indices\030y \003(\r\022\033\n\023left_me"
  "mber_indices\030z \003(\r\022\033\n\023free_member_indice"
  "s\030{ \003(\r\022\021\n\tleader_id\030\013 \001(\006\022\024\n\tserver_id\030"
  "\006 \001(\006:\0010\022\021\n\tgame_mode\030\003 \001(\r\022\027\n\017pending_i"
  "nvites\030\n \003(\006\022&\n\005state\030\004 \001(\0162\023.CSODOTALob"
  "by.State:\002UI\022\017\n\007connect\030\005 \001(\t\0224\n\nlobby_t"
  "ype\030\014 \001(\0162\027.CSODOTALobby.LobbyType:\007INVA"
  "LID\022\024\n\014allow_cheats\030\r \001(\010\022\026\n\016fill_with_b"
  "ots\030\016 \001(\010\022\022\n\nintro_mode\030\017 \001(\010\022\021\n\tgame_na"
  "me\030\020 \001(\t\022(\n\014team_details\030\021 \003(\0132\022.CLobbyT"
  "eamDetails\022\027\n\017tutorial_lesson\030\022 \001(\r\022\025\n\rt"
  "ournament_id\030\023 \001(\r\022\032\n\022tournament_game_id"
  "\030\024 \001(\r\022\030\n\rserver_region\030\025 \001(\r:\0010\022>\n\ngame"
  "_state\030\026 \001(\0162\017.DOTA_GameState:\031DOTA_GAME"
  "RULES_STATE_INIT\022\026\n\016num_spectators\030\027 \001(\r"
  "\022\022\n\nmatchgroup\030\031 \001(\r\022.\n\007cm_pick\030\034 \001(\0162\r."
  "DOTA_CM_PICK:\016DOTA_CM_RANDOM\022\020\n\010match_id"
  "\030\036 \001(\004\022\036\n\020allow_spectating\030\037 \001(\010:\004true\022G"
  "\n\026bot_difficulty_radiant\030$ \001(\0162\022.DOTABot"
  "Difficulty:\023BOT_DIFFICULTY_HARD\022<\n\014game_"
  "version\030% \001(\0162\020.DOTAGameVersion:\024GAME_VE"
  "RSION_CURRENT\0227\n\024timed_reward_details\030& "
  "\003(\0132\031.CLobbyTimedRewardDetails\022\020\n\010pass_k"
  "ey\030\' \001(\t\022\020\n\010leagueid\030* \001(\r\022 \n\025penalty_le"
  "vel_radiant\030+ \001(\r:\0010\022\035\n\022penalty_level_di"
  "re\030, \001(\r:\0010\022\024\n\014load_game_id\030- \001(\r\022\023\n\013ser"
  "ies_type\030. \001(\r\022\033\n\023radiant_series_wins\030/ "
  "\001(\r\022\030\n\020dire_series_wins\0300 \001(\r\022\026\n\016loot_ge"
  "nerated\0301 \001(\r\022\024\n\014loot_awarded\0302 \001(\r\022\026\n\007a"
  "llchat\0303 \001(\010:\005false\0228\n\rdota_tv_delay\0305 \001"
  "(\0162\021.LobbyDotaTVDelay:\016LobbyDotaTV_10\022\030\n"
  "\020custom_game_mode\0306 \001(\t\022\027\n\017custom_map_na"
  "me\0307 \001(\t\022\031\n\021custom_difficulty\0308 \001(\r\022\013\n\003l"
  "an\0309 \001(\010\022;\n\026broadcast_channel_info\030: \003(\013"
  "2\033.CLobbyBroadcastChannelInfo\022\036\n\026first_l"
  "eaver_accountid\030; \001(\r\022\021\n\tseries_id\030< \001(\r"
  "\022\024\n\014low_priority\030= \001(\010\022/\n\016extra_messages"
  "\030> \003(\0132\027.CSODOTALobby.CExtraMsg\022!\n\tsave_"
  "game\030\? \001(\0132\016.CDOTASaveGame\022\034\n\024first_bloo"
  "d_happened\030A \001(\010\022>\n\rmatch_outcome\030F \001(\0162"
  "\016.EMatchOutcome:\027k_EMatchOutcome_Unknown"
  "\022\027\n\017mass_disconnect\030C \001(\010\022\026\n\016custom_game"
  "_id\030D \001(\004\022\032\n\022custom_min_players\030G \001(\r\022\032\n"
  "\022custom_max_players\030H \001(\r\022D\n\nvisibility\030"
  "K \001(\0162\024.DOTALobbyVisibility:\032DOTALobbyVi"
  "sibility_Public\022\027\n\017custom_game_crc\030L \001(\006"
  "\022&\n\036custom_game_auto_created_lobby\030M \001(\010"
  "\022\035\n\025custom_game_timestamp\030P \001(\007\022\037\n\027previ"
  "ous_series_matches\030Q \003(\004\022\037\n\027previous_mat"
  "ch_override\030R \001(\004\022(\n custom_game_uses_ac"
  "count_records\030S \001(\010\022\027\n\017game_start_time\030W"
  " \001(\r\022N\n\rpause_setting\030X \001(\0162\026.LobbyDotaP"
  "auseSetting:\037LobbyDotaPauseSetting_Unlim"
  "ited\022\034\n\024lobby_mvp_account_id\030Y \001(\r\022#\n\033we"
  "ekend_tourney_division_id\030Z \001(\r\022#\n\033weeke"
  "nd_tourney_skill_level\030[ \001(\r\022%\n\035weekend_"
  "tourney_bracket_round\030\\ \001(\r\022D\n\023bot_diffi"
  "culty_dire\030] \001(\0162\022.DOTABotDifficulty:\023BO"
  "T_DIFFICULTY_HARD\022\023\n\013bot_radiant\030^ \001(\004\022\020"
  "\n\010bot_dire\030_ \001(\004\022*\n\031event_progression_en"
  "abled\030` \003(\0162\007.EEvent\022b\n\030selection_priori"
  "ty_rules\030a \001(\0162\033.DOTASelectionPriorityRu"
  "les:#k_DOTASelectionPriorityRules_Manual"
  "\0222\n*series_previous_selection_priority_t"
  "eam_id\030b \001(\r\0221\n)series_current_selection"
  "_priority_team_id\030c \001(\r\022p\n#series_curren"
  "t_priority_team_choice\030d \001(\0162\034.DOTASelec"
  "tionPriorityChoice:%k_DOTASelectionPrior"
  "ityChoice_Invalid\022t\n\'series_current_non_"
  "priority_team_choice\030e \001(\0162\034.DOTASelecti"
  "onPriorityChoice:%k_DOTASelectionPriorit"
  "yChoice_Invalid\0228\n0series_current_select"
  "ion_priority_used_coin_toss\030f \001(\010\0225\n\025cur"
  "rent_primary_event\030g \001(\0162\007.EEvent:\rEVENT"
  "_ID_NONE\022#\n\033emergency_disabled_hero_ids\030"
  "i \003(\r\022\037\n\027custom_game_private_key\030j \001(\006\022\035"
  "\n\025custom_game_penalties\030k \001(\010\022\036\n\026lan_hos"
  "t_ping_location\030m \001(\t\022\026\n\016league_node_id\030"
  "n \001(\r\022\026\n\016match_duration\030o \001(\r\022\036\n\026custom_"
  "game_browseable\030p \001(\010\022\024\n\014league_phase\030q "
  "\001(\r\022\035\n\025record_detailed_stats\030r \001(\010\022%\n\035ex"
  "perimental_gameplay_enabled\030t \001(\010\022/\n\020gui"
  "ld_challenges\030u \003(\0132\025.CLobbyGuildChallen"
  "ge\022*\n\rguild_details\030v \003(\0132\023.CLobbyGuildD"
  "etails\0221\n\022lobby_event_points\030w \003(\0132\025.CMs"
  "gLobbyEventPoints\022\032\n\022requested_hero_ids\030"
  "| \003(\r\022;\n\025coach_friend_requests\030} \003(\0132\034.C"
  "MsgLobbyCoachFriendRequest\022\031\n\021is_in_stea"
  "m_china\030~ \001(\010\022\032\n\022with_scenario_save\030\177 \001("
  "\010\032)\n\tCExtraMsg\022\n\n\002id\030\001 \001(\r\022\020\n\010contents\030\002"
  " \001(\014\"d\n\005State\022\006\n\002UI\020\000\022\013\n\007READYUP\020\004\022\017\n\013SE"
  "RVERSETUP\020\001\022\007\n\003RUN\020\002\022\014\n\010POSTGAME\020\003\022\014\n\010NO"
  "TREADY\020\005\022\020\n\014SERVERASSIGN\020\006\"\243\002\n\tLobbyType"
  "\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014CASUAL_MATCH\020\000"
  "\022\014\n\010PRACTICE\020\001\022\022\n\016COOP_BOT_MATCH\020\004\022\025\n\021LE"
  "GACY_TEAM_MATCH\020\005\022\033\n\027LEGACY_SOLO_QUEUE_M"
  "ATCH\020\006\022\025\n\021COMPETITIVE_MATCH\020\007\022\024\n\020CASUAL_"
  "1V1_MATCH\020\010\022\023\n\017WEEKEND_TOURNEY\020\t\022\023\n\017LOCA"
  "L_BOT_MATCH\020\n\022\r\n\tSPECTATOR\020\013\022\017\n\013EVENT_MA"
  "TCH\020\014\022\014\n\010GAUNTLET\020\r\022\023\n\017NEW_PLAYER_POOL\020\016"
  "\"(\n\030CMsgLobbyPlaytestDetails\022\014\n\004json\030\001 \001"
  "(\t\"\213\002\n\024CMsgReadyCheckStatus\022\027\n\017start_tim"
  "estamp\030\001 \001(\r\022\030\n\020finish_timestamp\030\002 \001(\r\022\034"
  "\n\024initiator_account_id\030\003 \001(\r\0228\n\rready_me"
  "mbers\030\004 \003(\0132!.CMsgReadyCheckStatus.Ready"
  "Member\032h\n\013ReadyMember\022\022\n\naccount_id\030\001 \001("
  "\r\022E\n\014ready_status\030\002 \001(\0162\022.EReadyCheckSta"
  "tus:\033k_EReadyCheckStatus_Unknown\"\034\n\032CMsg"
  "PartyReadyCheckRequest\"l\n\033CMsgPartyReady"
  "CheckResponse\022M\n\006result\030\001 \001(\0162\031.EReadyCh"
  "eckRequestResult:\"k_EReadyCheckRequestRe"
  "sult_Success\"g\n\036CMsgPartyReadyCheckAckno"
  "wledge\022E\n\014ready_status\030\001 \001(\0162\022.EReadyChe"
  "ckStatus:\033k_EReadyCheckStatus_Unknown\",\n"
  "\031CMsgLobbyEventGameDetails\022\017\n\007kv_data\030\001 "
  "\001(\014\"\271\001\n\031CMsgMatchMatchmakingStats\022\032\n\022ave"
  "rage_queue_time\030\001 \001(\r\022\032\n\022maximum_queue_t"
  "ime\030\002 \001(\r\022d\n\027behavior_score_variance\030\003 \001"
  "(\0162\034.EMatchBehaviorScoreVariance:%k_EMat"
  "chBehaviorScoreVariance_Invalid\"\245i\n\010CMvp"
  "Data\022 \n\004mvps\030\001 \003(\0132\022.CMvpData.MvpDatum\032\366"
  "h\n\010MvpDatum\022\014\n\004slot\030\001 \001(\r\0221\n\taccolades\030\002"
  " \003(\0132\036.CMvpData.MvpDatum.MvpAccolade\022\022\n\n"
  "account_id\030\003 \001(\r\032\224h\n\013MvpAccolade\022C\n\004type"
  "\030\001 \001(\0162..CMvpData.MvpDatum.MvpAccolade.M"
  "vpAccoladeType:\005kills\022\024\n\014detail_value\030\002 "
  "\001(\002\"\251g\n\017MvpAccoladeType\022\t\n\005kills\020\001\022\n\n\006de"
  "aths\020\002\022\013\n\007assists\020\003\022\r\n\tnet_worth\020\005\022\016\n\nit"
  "em_value\020\006\022\026\n\022support_gold_spent\020\007\022\020\n\014wa"
  "rds_placed\020\010\022\013\n\007dewards\020\t\022\021\n\rcamps_stack"
  "ed\020\n\022\r\n\tlast_hits\020\013\022\n\n\006denies\020\014\022\"\n\036kKill"
  "EaterEvent_Killing_Sprees\020\r\022\033\n\027kKillEate"
  "rEvent_Godlike\020\016\022$\n kKillEaterEvent_Towe"
  "rs_Destroyed\020\017\022.\n*kKillEaterEventType_In"
  "voker_SunstrikeKills\020\020\022!\n\035kKillEaterEven"
  "tType_Axe_Culls\020\021\022-\n)kKillEaterEventType"
  "_Axe_BattleHungerKills\020\022\022&\n\"kKillEaterEv"
  "entType_LowHealthKills\020\023\022,\n(kKillEaterEv"
  "entType_Invoker_TornadoKills\020\024\022(\n$kKillE"
  "aterEventType_Sven_DoubleStuns\020\025\022*\n&kKil"
  "lEaterEventType_Sven_WarcryAssists\020\026\022.\n*"
  "kKillEaterEventType_Sven_CleaveDoubleKil"
  "ls\020\027\022/\n+kKillEaterEventType_Sven_Telepor"
  "tInterrupts\020\030\022,\n(kKillEaterEventType_Fac"
  "eless_MultiChrono\020\031\022,\n(kKillEaterEventTy"
  "pe_Faceless_ChronoKills\020\032\022(\n$kKillEaterE"
  "ventType_Ursa_MultiShocks\020\033\022#\n\037kKillEate"
  "rEventType_RoshanKills\020\034\022(\n$kKillEaterEv"
  "entType_Lion_FingerKills\020\035\022,\n(kKillEater"
  "EventType_Riki_SmokedHeroKills\020 \022.\n*kKil"
  "lEaterEventType_HeroesRevealedWithDust\020!"
  "\0227\n3kKillEaterEventType_SkeletonKing_Rei"
  "ncarnationKills\020\"\022+\n\'kKillEaterEventType"
  "_Skywrath_FlareKills\020#\022/\n+kKillEaterEven"
  "tType_Leshrac_SplitEarthStuns\020$\022,\n(kKill"
  "EaterEventType_Mirana_MaxStunArrows\020%\0228\n"
  "4kKillEaterEventType_PhantomAssassin_Cou"
  "pdeGraceCrits\020&\0223\n/kKillEaterEventType_P"
  "hantomAssassin_DaggerCrits\020\'\022(\n$kKillEat"
  "erEventType_Meepo_Earthbinds\020(\0220\n,kKillE"
  "aterEventType_Bloodseeker_RuptureKills\020)"
  "\022,\n(kKillEaterEventType_Slark_LeashedEne"
  "mies\020*\0222\n.kKillEaterEventType_Disruptor_"
  "FountainGlimpses\020+\022+\n\'kKillEaterEventTyp"
  "e_Rubick_SpellsStolen\020,\022.\n*kKillEaterEve"
  "ntType_Rubick_UltimatesStolen\020-\022*\n&kKill"
  "EaterEventType_Doom_EnemiesDoomed\020.\0220\n,k"
  "KillEaterEventType_Omniknight_Purificati"
  "ons\020/\0221\n-kKillEaterEventType_Omniknight_"
  "AlliesRepelled\0200\0222\n.kKillEaterEventType_"
  "Omniknight_EnemiesRepelled\0201\0222\n.kKillEat"
  "erEventType_Warlock_FiveHeroFatalBonds\0202"
  "\0228\n4kKillEaterEventType_CrystalMaiden_Fr"
  "ostbittenEnemies\0203\0222\n.kKillEaterEventTyp"
  "e_CrystalMaiden_CrystalNovas\0204\0221\n-kKillE"
  "aterEventType_Kunkka_DoubleHeroTorrents\020"
  "5\0223\n/kKillEaterEventType_Kunkka_TripleHe"
  "roGhostShips\0206\0221\n-kKillEaterEventType_Na"
  "gaSiren_EnemiesEnsnared\0207\0224\n0kKillEaterE"
  "ventType_NagaSiren_TripleHeroRipTides\0208\022"
  "3\n/kKillEaterEventType_Lycan_KillsDuring"
  "Shapeshift\0209\022,\n(kKillEaterEventType_Pudg"
  "e_DismemberKills\020:\022/\n+kKillEaterEventTyp"
  "e_Pudge_EnemyHeroesHooked\020;\022\'\n#kKillEate"
  "rEventType_Pudge_HookKills\020<\0225\n1kKillEat"
  "erEventType_Pudge_UnseenEnemyHeroesHooke"
  "d\020=\0222\n.kKillEaterEventType_DrowRanger_En"
  "emiesSilenced\020>\0224\n0kKillEaterEventType_D"
  "rowRanger_MultiHeroSilences\020\?\0220\n,kKillEa"
  "terEventType_DrowRanger_SilencedKills\020@\022"
  "2\n.kKillEaterEventType_DrowRanger_FrostA"
  "rrowKills\020A\0226\n2kKillEaterEventType_Drago"
  "nKnight_KillsInDragonForm\020B\0225\n1kKillEate"
  "rEventType_DragonKnight_BreatheFireKills"
  "\020C\0220\n,kKillEaterEventType_DragonKnight_S"
  "plashKills\020D\022-\n)kKillEaterEventType_Witc"
  "hDoctor_CaskStuns\020E\0221\n-kKillEaterEventTy"
  "pe_WitchDoctor_MaledictKills\020F\0226\n2kKillE"
  "aterEventType_WitchDoctor_MultiHeroMaled"
  "icts\020G\0222\n.kKillEaterEventType_WitchDocto"
  "r_DeathWardKills\020H\0224\n0kKillEaterEventTyp"
  "e_Disruptor_ThunderStrikeKills\020I\0220\n,kKil"
  "lEaterEventType_Disruptor_HeroesGlimpsed"
  "\020J\0228\n4kKillEaterEventType_CrystalMaiden_"
  "FreezingFieldKills\020K\022/\n+kKillEaterEventT"
  "ype_Medusa_EnemiesPetrified\020M\022/\n+kKillEa"
  "terEventType_Warlock_FatalBondsKills\020N\022*"
  "\n&kKillEaterEventType_Warlock_GolemKills"
  "\020O\022*\n&kKillEaterEventType_Tusk_WalrusPun"
  "ches\020P\022*\n&kKillEaterEventType_Tusk_Snowb"
  "allStuns\020Q\0220\n,kKillEaterEventType_Earths"
  "haker_FissureStuns\020R\0222\n.kKillEaterEventT"
  "ype_Earthshaker_3HeroEchoslams\020S\0222\n.kKil"
  "lEaterEventType_SandKing_BurrowstrikeStu"
  "ns\020T\022/\n+kKillEaterEventType_SandKing_Epi"
  "centerKills\020U\0225\n1kKillEaterEventType_Sky"
  "wrathMage_AncientSealKills\020V\0228\n4kKillEat"
  "erEventType_SkywrathMage_ConcussiveShotK"
  "ills\020W\022,\n(kKillEaterEventType_Luna_Lucen"
  "tBeamKills\020X\022)\n%kKillEaterEventType_Luna"
  "_EclipseKills\020Y\0228\n4kKillEaterEventType_K"
  "eeperOfTheLight_IlluminateKills\020Z\0226\n2kKi"
  "llEaterEventType_KeeperOfTheLight_ManaLe"
  "akStuns\020[\022:\n6kKillEaterEventType_KeeperO"
  "fTheLight_TeammatesRecalled\020\\\0220\n,kKillEa"
  "terEventType_LegionCommander_DuelsWon\020]\022"
  "-\n)kKillEaterEventType_Beastmaster_RoarK"
  "ills\020^\0222\n.kKillEaterEventType_Beastmaste"
  "r_RoarMultiKills\020_\0225\n1kKillEaterEventTyp"
  "e_Windrunner_FocusFireBuildings\020`\0221\n-kKi"
  "llEaterEventType_Windrunner_PowershotKil"
  "ls\020a\0226\n2kKillEaterEventType_PhantomAssas"
  "sin_DaggerLastHits\020b\022:\n6kKillEaterEventT"
  "ype_PhantomAssassin_PhantomStrikeKills\020c"
  "\0224\n0kKillEaterEventType_DeathProphet_Cry"
  "ptSwarmKills\020d\022:\n6kKillEaterEventType_De"
  "athProphet_ExorcismBuildingKills\020e\022<\n8kK"
  "illEaterEventType_DeathProphet_ExorcismS"
  "piritsSummoned\020f\0226\n2kKillEaterEventType_"
  "DeathProphet_MultiHeroSilences\020g\022-\n)kKil"
  "lEaterEventType_Abaddon_MistCoilKills\020h\022"
  ".\n*kKillEaterEventType_Abaddon_MistCoilH"
  "ealed\020i\0222\n.kKillEaterEventType_Abaddon_A"
  "photicShieldKills\020j\0222\n.kKillEaterEventTy"
  "pe_Lich_ChainFrostTripleKills\020k\0221\n-kKill"
  "EaterEventType_Lich_ChainFrostMultiKills"
  "\020l\022.\n*kKillEaterEventType_Lich_ChainFros"
  "tBounces\020m\022)\n%kKillEaterEventType_Ursa_E"
  "nragedKills\020n\022,\n(kKillEaterEventType_Urs"
  "a_EarthshockKills\020o\022-\n)kKillEaterEventTy"
  "pe_Lina_LagunaBladeKills\020p\022-\n)kKillEater"
  "EventType_Lina_DragonSlaveKills\020q\0222\n.kKi"
  "llEaterEventType_Lina_LightStrikeArraySt"
  "uns\020r\022&\n\"kKillEaterEvent_Barracks_Destro"
  "yed\020s\022-\n)kKillEaterEvent_TemplarAssassin"
  "_MeldKills\020t\0220\n,kKillEaterEvent_TemplarA"
  "ssassin_HeroesSlowed\020u\022-\n)kKillEaterEven"
  "t_Sniper_AssassinationKills\020v\022(\n$kKillEa"
  "terEvent_Sniper_HeadshotStuns\020w\022*\n&kKill"
  "EaterEvent_EarthSpirit_SmashStuns\020x\022,\n(k"
  "KillEaterEvent_EarthSpirit_GripSilences\020"
  "y\022-\n)kKillEaterEvent_ShadowShaman_Shackl"
  "eKills\020z\022)\n%kKillEaterEvent_ShadowShaman"
  "_HexKills\020{\022*\n&kKillEaterEvent_Centaur_E"
  "nemiesStomped\020|\022+\n\'kKillEaterEvent_Centa"
  "ur_DoubleEdgeKills\020}\022\'\n#kKillEaterEvent_"
  "Centaur_ReturnKills\020~\022.\n*kKillEaterEvent"
  "_EmberSpirit_EnemiesChained\020\177\0228\n3kKillEa"
  "terEvent_EmberSpirit_SleightOfFistMultiK"
  "ills\020\200\001\022\"\n\035kKillEaterEvent_Puck_OrbKills"
  "\020\201\001\0222\n-kKillEaterEvent_VengefulSpirit_En"
  "emiesStunned\020\202\001\022*\n%kKillEaterEvent_Lifes"
  "tealer_RageKills\020\203\001\0220\n+kKillEaterEvent_L"
  "ifestealer_OpenWoundsKills\020\204\001\022,\n\'kKillEa"
  "terEvent_Lifestealer_InfestKills\020\205\001\022+\n&k"
  "KillEaterEvent_ElderTitan_SpiritKills\020\206\001"
  "\022*\n%kKillEaterEvent_ElderTitan_GoodStomp"
  "s\020\207\001\022*\n%kKillEaterEvent_Clockwerk_Rocket"
  "Kills\020\210\001\022/\n*kKillEaterEvent_Clockwerk_Bl"
  "indRocketKills\020\211\001\022*\n%kKillEaterEvent_Sto"
  "rmSpirit_BallKills\020\212\001\0223\n.kKillEaterEvent"
  "_StormSpirit_DoubleRemnantKills\020\213\001\022,\n\'kK"
  "illEaterEvent_StormSpirit_VortexKills\020\214\001"
  "\022.\n)kKillEaterEvent_Tinker_DoubleMissile"
  "Kills\020\215\001\022&\n!kKillEaterEvent_Tinker_Laser"
  "Kills\020\216\001\022)\n$kKillEaterEvent_Techies_Suic"
  "ideKills\020\217\001\022*\n%kKillEaterEvent_Techies_L"
  "andMineKills\020\220\001\022,\n\'kKillEaterEvent_Techi"
  "es_StatisTrapStuns\020\221\001\022,\n\'kKillEaterEvent"
  "_Techies_RemoteMineKills\020\222\001\0220\n+kKillEate"
  "rEvent_ShadowFiend_TripleRazeKills\020\223\001\0222\n"
  "-kKillEaterEvent_ShadowFiend_RequiemMult"
  "iKills\020\224\001\022+\n&kKillEaterEvent_ShadowFiend"
  "_QRazeKills\020\225\001\022+\n&kKillEaterEvent_Shadow"
  "Fiend_WRazeKills\020\226\001\022+\n&kKillEaterEvent_S"
  "hadowFiend_ERazeKills\020\227\001\022+\n&kKillEaterEv"
  "ent_Oracle_FatesEdictKills\020\230\001\022-\n(kKillEa"
  "terEvent_Oracle_FalsePromiseSaves\020\231\001\022.\n)"
  "kKillEaterEvent_Juggernaut_OmnislashKill"
  "s\020\232\001\0227\n2kKillEaterEventType_SkeletonKing"
  "_SkeletonHeroKills\020\235\001\022:\n5kKillEaterEvent"
  "Type_DarkWillow_CursedCrownTripleStuns\020\236"
  "\001\0221\n,kKillEaterEventType_Dazzle_ShallowG"
  "raveSaves\020\237\001\0220\n+kKillEaterEventType_Dazz"
  "le_PoisonTouchKills\020\240\001\022%\n kKillEaterEven"
  "tType_ThreeManMeks\020\241\001\0220\n+kKillEaterEvent"
  "Type_Viper_PoisonAttackKills\020\242\001\0221\n,kKill"
  "EaterEventType_Viper_CorrosiveSkinKills\020"
  "\243\001\022\'\n\"kKillEaterEventType_ThreeHeroVeils"
  "\020\244\001\0225\n0kKillEaterEventType_Viper_KillsDu"
  "ringViperStrike\020\245\001\022(\n#kKillEaterEventTyp"
  "e_SolarCrestKills\020\246\001\022,\n\'kKillEaterEventT"
  "ype_Tiny_TreeThrowKills\020\247\001\022+\n&kKillEater"
  "EventType_Riki_BackstabKills\020\250\001\0228\n3kKill"
  "EaterEventType_Phoenix_ThreeHeroSupernov"
  "aStuns\020\251\001\0227\n2kKillEaterEventType_Terrorb"
  "lade_MetamorphosisKills\020\252\001\022.\n)kKillEater"
  "EventType_Lion_GreatFingerKills\020\253\001\022;\n6kK"
  "illEaterEventType_Antimage_SpellsBlocked"
  "WithAghanims\020\254\001\0223\n.kKillEaterEventType_A"
  "ntimage_ThreeManManaVoids\020\255\001\0225\n0kKillEat"
  "erEventType_ArcWarden_TempestDoubleKills"
  "\020\256\001\0223\n.kKillEaterEventType_ArcWarden_Spa"
  "rkWraithKills\020\257\001\022+\n&kKillEaterEventType_"
  "Bane_BrainSapKills\020\260\001\022-\n(kKillEaterEvent"
  "Type_Bane_FiendsGripKills\020\261\001\0227\n2kKillEat"
  "erEventType_Batrider_TripleHeroFlamebrea"
  "ks\020\262\001\0223\n.kKillEaterEventType_Batrider_Do"
  "ubleHeroLassoes\020\263\001\022:\n5kKillEaterEventTyp"
  "e_Brewmaster_KillsDuringPrimalSplit\020\264\001\022>"
  "\n9kKillEaterEventType_Bristleback_KillsU"
  "nderFourQuillStacks\020\265\001\0227\n2kKillEaterEven"
  "tType_Bristleback_TripleHeroNasalGoo\020\266\001\022"
  "8\n3kKillEaterEventType_Broodmother_Spide"
  "rlingHeroKills\020\267\001\0223\n.kKillEaterEventType"
  "_Broodmother_KillsInsideWeb\020\270\001\0222\n-kKillE"
  "aterEventType_Centaur_ThreeHeroStampede\020"
  "\271\001\0225\n0kKillEaterEventType_ChaosKnight_Re"
  "alityRiftKills\020\272\001\0220\n+kKillEaterEventType"
  "_Chen_KillsWithPenitence\020\273\001\022:\n5kKillEate"
  "rEventType_CrystalMaiden_TwoHeroCrystalN"
  "ovas\020\274\001\022>\n9kKillEaterEventType_CrystalMa"
  "iden_ThreeHeroFreezingFields\020\275\001\022/\n*kKill"
  "EaterEventType_Dazzle_ShadowWaveKills\020\276\001"
  "\0221\n,kKillEaterEventType_DeathProphet_Sip"
  "honKills\020\277\001\022=\n8kKillEaterEventType_Death"
  "Prophet_ExorcismKillsDuringEuls\020\300\001\022C\n>kK"
  "illEaterEventType_Disruptor_ThreeHeroKin"
  "eticFieldStaticStorm\020\301\001\0224\n/kKillEaterEve"
  "ntType_Doom_InfernalBladeBurnKills\020\302\001\022@\n"
  ";kKillEaterEventType_DrowRanger_Precisio"
  "nAuraCreepTowerKills\020\303\001\0221\n,kKillEaterEve"
  "ntType_EmberSpirit_RemnantKills\020\304\001\0227\n2kK"
  "illEaterEventType_EmberSpirit_SleightOfF"
  "istKills\020\305\001\022<\n7kKillEaterEventType_Enigm"
  "a_MidnightPulseBlackHoleCombos\020\306\001\0222\n-kKi"
  "llEaterEventType_Enigma_ThreeManBlackHol"
  "es\020\307\001\022;\n6kKillEaterEventType_FacelessVoi"
  "d_MultiHeroTimeDilation\020\310\001\0227\n2kKillEater"
  "EventType_Gyrocopter_ThreeHeroFlakCannon"
  "\020\311\001\0226\n1kKillEaterEventType_Gyrocopter_Ho"
  "mingMissileKills\020\312\001\0226\n1kKillEaterEventTy"
  "pe_Gyrocopter_RocketBarrageKills\020\313\001\0224\n/k"
  "KillEaterEventType_Huskar_KillsDuringLif"
  "eBreak\020\314\001\0221\n,kKillEaterEventType_Huskar_"
  "BurningSpearKills\020\315\001\0221\n,kKillEaterEventT"
  "ype_Invoker_MultiHeroIceWall\020\316\001\022-\n(kKill"
  "EaterEventType_Invoker_ThreeHeroEMP\020\317\001\0228"
  "\n3kKillEaterEventType_Invoker_ThreeHeroD"
  "eafeningBlast\020\320\001\0225\n0kKillEaterEventType_"
  "Invoker_MultiHeroChaosMeteor\020\321\001\0223\n.kKill"
  "EaterEventType_Jakiro_MultiHeroDualBreat"
  "h\020\322\001\0226\n1kKillEaterEventType_Jakiro_IcePa"
  "thMacropyreCombos\020\323\001\022/\n*kKillEaterEventT"
  "ype_Leshrac_PulseNovaKills\020\324\001\0228\n3kKillEa"
  "terEventType_Leshrac_ThreeHeroLightningS"
  "torm\020\325\001\0224\n/kKillEaterEventType_Lion_Thre"
  "eHeroFingerOfDeath\020\326\001\022(\n#kKillEaterEvent"
  "Type_Meepo_PoofKills\020\327\001\0222\n-kKillEaterEve"
  "ntType_Meepo_MultiHeroEarthbinds\020\330\001\0224\n/k"
  "KillEaterEventType_NightStalker_Nighttim"
  "eKills\020\331\001\0227\n2kKillEaterEventType_Morphli"
  "ng_KillsDuringReplicate\020\332\001\0220\n+kKillEater"
  "EventType_OgreMagi_FireblastKills\020\333\001\022-\n("
  "kKillEaterEventType_OgreMagi_IgniteKills"
  "\020\334\001\022.\n)kKillEaterEventType_DominatingKil"
  "lStreaks\020\335\001\022(\n#kKillEaterEventType_MegaK"
  "illStreaks\020\336\001\0220\n+kKillEaterEventType_Alc"
  "hemist_AghanimsGiven\020\337\001\022,\n\'kKillEaterEve"
  "ntType_VeilsLeadingToKills\020\340\001\022+\n&kKillEa"
  "terEventType_DustLeadingToKills\020\341\001\0227\n2kK"
  "illEaterEventType_WitchDoctor_MultiHeroC"
  "askStuns\020\342\001\022-\n(kKillEaterEventType_Weave"
  "r_ShukuchiKills\020\343\001\0229\n4kKillEaterEventTyp"
  "e_Windrunner_ShackleFocusFireKills\020\344\001\022B\n"
  "=kKillEaterEventType_VengefulSpirit_Veng"
  "eanceAuraIllusionKills\020\345\001\022.\n)kKillEaterE"
  "ventType_Tusk_WalrusPunchKills\020\346\001\022/\n*kKi"
  "llEaterEventType_Tinker_MultiHeroLasers\020"
  "\347\001\022;\n6kKillEaterEventType_TemplarAssassi"
  "n_MultiHeroPsiBlades\020\350\001\0225\n0kKillEaterEve"
  "ntType_Sven_KillsDuringGodsStrength\020\351\001\0222"
  "\n-kKillEaterEventType_Sniper_ThreeHeroSh"
  "rapnels\020\352\001\0225\n0kKillEaterEventType_Slark_"
  "KillsDuringShadowDance\020\353\001\022:\n5kKillEaterE"
  "ventType_ShadowShaman_MultiHeroEtherShoc"
  "ks\020\354\001\022=\n8kKillEaterEventType_ShadowShama"
  "n_SerpentWardShackleKills\020\355\001\0227\n2kKillEat"
  "erEventType_Riki_ThreeHeroTricksOfTheTra"
  "de\020\356\001\0221\n,kKillEaterEventType_Razor_EyeOf"
  "TheStormKills\020\357\001\022-\n(kKillEaterEventType_"
  "Pugna_LifeDrainKills\020\360\001\022>\n9kKillEaterEve"
  "ntType_ObsidianDestroyer_SanitysEclipseK"
  "ills\020\361\001\0224\n/kKillEaterEventType_Oracle_Mu"
  "ltiHeroFortunesEnd\020\362\001\0225\n0kKillEaterEvent"
  "Type_Omniknight_PurificationKills\020\363\001\022C\n>"
  "kKillEaterEventType_NightStalker_EnemyMi"
  "ssesUnderCripplingFear\020\364\001\0224\n/kKillEaterE"
  "ventType_Warlock_ThreeHeroFatalBonds\020\365\001\022"
  "3\n.kKillEaterEventType_Riki_TricksOfTheT"
  "radeKills\020\366\001\0225\n0kKillEaterEventType_Eart"
  "hshaker_AftershockHits10\020\367\001\0223\n.kKillEate"
  "rEventType_Earthshaker_5HeroEchoslams\020\370\001"
  "\0222\n-kKillEaterEventType_Lina_LagunaBlade"
  "HeroKills\020\371\001\0222\n-kKillEaterEventType_Lina"
  "_LightStrikeHeroStuns\020\372\001\0226\n1kKillEaterEv"
  "entType_Earthshaker_FissureMultiStuns\020\373\001"
  "\022/\n*kKillEaterEventType_Earthshaker_Tote"
  "mKills\020\374\001\0223\n.kKillEaterEventType_Pangoli"
  "er_SwashbuckleKills\020\375\001\0222\n-kKillEaterEven"
  "tType_Furion_EnemyHeroesTrapped\020\376\001\0224\n/kK"
  "illEaterEventType_Pangolier_Heartpiercer"
  "Kills\020\377\001\0222\n-kKillEaterEventType_Medusa_M"
  "ultiHeroStoneGaze\020\200\002\022.\n)kKillEaterEventT"
  "ype_Medusa_SplitShotKills\020\201\002\0222\n-kKillEat"
  "erEventType_Mirana_MultiHeroStarstorm\020\202\002"
  "\0228\n3kKillEaterEventType_Mirana_KillsFrom"
  "MoonlightShadow\020\203\002\0220\n+kKillEaterEventTyp"
  "e_Magnus_MultiHeroSkewers\020\204\002\0228\n3kKillEat"
  "erEventType_Magnus_MultiHeroReversePolar"
  "ity\020\205\002\0229\n4kKillEaterEventType_Magnus_Her"
  "oesSlowedWithShockwave\020\206\002\0220\n+kKillEaterE"
  "ventType_NagaSiren_MultiHeroSong\020\207\002\0225\n0k"
  "KillEaterEventType_NagaSiren_AlliesHeale"
  "dBySong\020\210\002\0220\n+kKillEaterEventType_LoneDr"
  "uid_MultiHeroRoar\020\211\002\0221\n,kKillEaterEventT"
  "ype_LoneDruid_BattleCryKills\020\212\002\0225\n0kKill"
  "EaterEventType_WinterWyvern_ThreeHeroCur"
  "ses\020\213\002\022\?\n:kKillEaterEventType_Antimage_S"
  "pellsBlockedWithCounterspell\020\214\002\0222\n-kKill"
  "EaterEventType_Mars_EnemiesKilledInArena"
  "\020\215\002\0221\n,kKillEaterEventType_Mars_MultiHer"
  "oGodsRebuke\020\216\002\022-\n(kKillEaterEventType_Ma"
  "rs_GodsRebukeKills\020\217\002\0222\n-kKillEaterEvent"
  "Type_Snapfire_LizardBlobsKills\020\220\002\0224\n/kKi"
  "llEaterEventType_Snapfire_TwoHeroCookieS"
  "tuns\020\221\002\022\026\n\021Custom_KillStreak\020\222\002*\261\001\n\016ELan"
  "eSelection\022\035\n\031k_ELaneSelection_SAFELANE\020"
  "\000\022\034\n\030k_ELaneSelection_OFFLANE\020\001\022\034\n\030k_ELa"
  "neSelection_MIDLANE\020\002\022!\n\035k_ELaneSelectio"
  "n_SUPPORT_SOFT\020\003\022!\n\035k_ELaneSelection_SUP"
  "PORT_HARD\020\004*\321\002\n\023ELaneSelectionFlags\022\036\n\032k"
  "_ELaneSelectionFlags_None\020\000\022\"\n\036k_ELaneSe"
  "lectionFlags_SAFELANE\020\001\022!\n\035k_ELaneSelect"
  "ionFlags_OFFLANE\020\002\022!\n\035k_ELaneSelectionFl"
  "ags_MIDLANE\020\004\022\036\n\032k_ELaneSelectionFlags_C"
  "ORE\020\007\022&\n\"k_ELaneSelectionFlags_SUPPORT_S"
  "OFT\020\010\022&\n\"k_ELaneSelectionFlags_SUPPORT_H"
  "ARD\020\020\022!\n\035k_ELaneSelectionFlags_SUPPORT\020\030"
  "\022\035\n\031k_ELaneSelectionFlags_ALL\020\037*i\n\026EPart"
  "yMatchmakingFlags\022!\n\035k_EPartyMatchmaking"
  "Flags_None\020\000\022,\n(k_EPartyMatchmakingFlags"
  "_LargeRankSpread\020\001*\334\002\n\024EHighPriorityMMSt"
  "ate\022\035\n\031k_EHighPriorityMM_Unknown\020\000\022#\n\037k_"
  "EHighPriorityMM_MissingMMData\020\001\022%\n!k_EHi"
  "ghPriorityMM_ResourceMissing\020\002\022&\n\"k_EHig"
  "hPriorityMM_ManuallyDisabled\020\003\022!\n\035k_EHig"
  "hPriorityMM_Min_Enabled\020@\022&\n\"k_EHighPrio"
  "rityMM_AllRolesSelected\020A\022#\n\037k_EHighPrio"
  "rityMM_UsingResource\020B\022\037\n\033k_EHighPriorit"
  "yMM_FiveStack\020C\022 \n\034k_EHighPriorityMM_Hig"
  "hDemand\020D*\245\001\n\035ELobbyMemberCoachRequestSt"
  "ate\022(\n$k_eLobbyMemberCoachRequestState_N"
  "one\020\000\022,\n(k_eLobbyMemberCoachRequestState"
  "_Accepted\020\001\022,\n(k_eLobbyMemberCoachReques"
  "tState_Rejected\020\002*e\n\020LobbyDotaTVDelay\022\022\n"
  "\016LobbyDotaTV_10\020\000\022\023\n\017LobbyDotaTV_120\020\001\022\023"
  "\n\017LobbyDotaTV_300\020\002\022\023\n\017LobbyDotaTV_900\020\003"
  "*\203\001\n\025LobbyDotaPauseSetting\022#\n\037LobbyDotaP"
  "auseSetting_Unlimited\020\000\022!\n\035LobbyDotaPaus"
  "eSetting_Limited\020\001\022\"\n\036LobbyDotaPauseSett"
  "ing_Disabled\020\002*u\n\021EReadyCheckStatus\022\037\n\033k"
  "_EReadyCheckStatus_Unknown\020\000\022 \n\034k_EReady"
  "CheckStatus_NotReady\020\001\022\035\n\031k_EReadyCheckS"
  "tatus_Ready\020\002*\366\001\n\030EReadyCheckRequestResu"
  "lt\022&\n\"k_EReadyCheckRequestResult_Success"
  "\020\000\0220\n,k_EReadyCheckRequestResult_Already"
  "InProgress\020\001\022)\n%k_EReadyCheckRequestResu"
  "lt_NotInParty\020\002\022(\n$k_EReadyCheckRequestR"
  "esult_SendError\020\003\022+\n\'k_EReadyCheckReques"
  "tResult_UnknownError\020\004*\301\001\n\033EMatchBehavio"
  "rScoreVariance\022)\n%k_EMatchBehaviorScoreV"
  "ariance_Invalid\020\000\022%\n!k_EMatchBehaviorSco"
  "reVariance_Low\020\001\022(\n$k_EMatchBehaviorScor"
  "eVariance_Medium\020\002\022&\n\"k_EMatchBehaviorSc"
  "oreVariance_High\020\003B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_deps[4] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto = {
  false, false, 26225, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, "dota_gcmessages_common_match_management.proto", 
  &descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_deps, 4, 27,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTAParty_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[0];
}
bool CSODOTAParty_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSODOTAParty_State CSODOTAParty::UI;
constexpr CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
constexpr CSODOTAParty_State CSODOTAParty::IN_MATCH;
constexpr CSODOTAParty_State CSODOTAParty::State_MIN;
constexpr CSODOTAParty_State CSODOTAParty::State_MAX;
constexpr int CSODOTAParty::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[1];
}
bool CSODOTALobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSODOTALobby_State CSODOTALobby::UI;
constexpr CSODOTALobby_State CSODOTALobby::READYUP;
constexpr CSODOTALobby_State CSODOTALobby::SERVERSETUP;
constexpr CSODOTALobby_State CSODOTALobby::RUN;
constexpr CSODOTALobby_State CSODOTALobby::POSTGAME;
constexpr CSODOTALobby_State CSODOTALobby::NOTREADY;
constexpr CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
constexpr CSODOTALobby_State CSODOTALobby::State_MIN;
constexpr CSODOTALobby_State CSODOTALobby::State_MAX;
constexpr int CSODOTALobby::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[2];
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSODOTALobby_LobbyType CSODOTALobby::INVALID;
constexpr CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
constexpr CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LEGACY_TEAM_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LEGACY_SOLO_QUEUE_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::CASUAL_1V1_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::SPECTATOR;
constexpr CSODOTALobby_LobbyType CSODOTALobby::EVENT_MATCH;
constexpr CSODOTALobby_LobbyType CSODOTALobby::GAUNTLET;
constexpr CSODOTALobby_LobbyType CSODOTALobby::NEW_PLAYER_POOL;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
constexpr CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
constexpr int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[3];
}
bool CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::deaths;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::assists;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::net_worth;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::item_value;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::support_gold_spent;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::wards_placed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::dewards;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::camps_stacked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::last_hits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::denies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Killing_Sprees;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Godlike;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Towers_Destroyed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_SunstrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Axe_Culls;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Axe_BattleHungerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LowHealthKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_TornadoKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_DoubleStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_WarcryAssists;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_CleaveDoubleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_TeleportInterrupts;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Faceless_MultiChrono;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Faceless_ChronoKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_MultiShocks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_RoshanKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_FingerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_SmokedHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_HeroesRevealedWithDust;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkeletonKing_ReincarnationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Skywrath_FlareKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_SplitEarthStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_MaxStunArrows;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_CoupdeGraceCrits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_DaggerCrits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_Earthbinds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bloodseeker_RuptureKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Slark_LeashedEnemies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_FountainGlimpses;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Rubick_SpellsStolen;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Rubick_UltimatesStolen;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Doom_EnemiesDoomed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_Purifications;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_AlliesRepelled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_EnemiesRepelled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_FiveHeroFatalBonds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_FrostbittenEnemies;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_CrystalNovas;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Kunkka_DoubleHeroTorrents;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Kunkka_TripleHeroGhostShips;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_EnemiesEnsnared;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_TripleHeroRipTides;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lycan_KillsDuringShapeshift;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_DismemberKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_EnemyHeroesHooked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_HookKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pudge_UnseenEnemyHeroesHooked;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_EnemiesSilenced;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_MultiHeroSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_SilencedKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_FrostArrowKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_KillsInDragonForm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_BreatheFireKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DragonKnight_SplashKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_CaskStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MaledictKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MultiHeroMaledicts;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_DeathWardKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_ThunderStrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_HeroesGlimpsed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_FreezingFieldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_EnemiesPetrified;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_FatalBondsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_GolemKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_WalrusPunches;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_SnowballStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_FissureStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_3HeroEchoslams;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SandKing_BurrowstrikeStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SandKing_EpicenterKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkywrathMage_AncientSealKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkywrathMage_ConcussiveShotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Luna_LucentBeamKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Luna_EclipseKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_IlluminateKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_ManaLeakStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_KeeperOfTheLight_TeammatesRecalled;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LegionCommander_DuelsWon;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Beastmaster_RoarKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Beastmaster_RoarMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_FocusFireBuildings;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_PowershotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_DaggerLastHits;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_PhantomAssassin_PhantomStrikeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_CryptSwarmKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismBuildingKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismSpiritsSummoned;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_MultiHeroSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_MistCoilKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_MistCoilHealed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Abaddon_AphoticShieldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostTripleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lich_ChainFrostBounces;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_EnragedKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Ursa_EarthshockKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LagunaBladeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_DragonSlaveKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LightStrikeArrayStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Barracks_Destroyed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_TemplarAssassin_MeldKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_TemplarAssassin_HeroesSlowed;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Sniper_AssassinationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Sniper_HeadshotStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EarthSpirit_SmashStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EarthSpirit_GripSilences;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowShaman_ShackleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowShaman_HexKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_EnemiesStomped;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_DoubleEdgeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Centaur_ReturnKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EmberSpirit_EnemiesChained;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_EmberSpirit_SleightOfFistMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Puck_OrbKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_VengefulSpirit_EnemiesStunned;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_RageKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_OpenWoundsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Lifestealer_InfestKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ElderTitan_SpiritKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ElderTitan_GoodStomps;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Clockwerk_RocketKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Clockwerk_BlindRocketKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_BallKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_DoubleRemnantKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_StormSpirit_VortexKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Tinker_DoubleMissileKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Tinker_LaserKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_SuicideKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_LandMineKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_StatisTrapStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Techies_RemoteMineKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_TripleRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_RequiemMultiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_QRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_WRazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_ShadowFiend_ERazeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Oracle_FatesEdictKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Oracle_FalsePromiseSaves;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEvent_Juggernaut_OmnislashKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SkeletonKing_SkeletonHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DarkWillow_CursedCrownTripleStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_ShallowGraveSaves;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_PoisonTouchKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ThreeManMeks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_PoisonAttackKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_CorrosiveSkinKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ThreeHeroVeils;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Viper_KillsDuringViperStrike;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_SolarCrestKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tiny_TreeThrowKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_BackstabKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Phoenix_ThreeHeroSupernovaStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Terrorblade_MetamorphosisKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_GreatFingerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_SpellsBlockedWithAghanims;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_ThreeManManaVoids;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ArcWarden_TempestDoubleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ArcWarden_SparkWraithKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bane_BrainSapKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bane_FiendsGripKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Batrider_TripleHeroFlamebreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Batrider_DoubleHeroLassoes;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Brewmaster_KillsDuringPrimalSplit;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bristleback_KillsUnderFourQuillStacks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Bristleback_TripleHeroNasalGoo;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Broodmother_SpiderlingHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Broodmother_KillsInsideWeb;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Centaur_ThreeHeroStampede;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ChaosKnight_RealityRiftKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Chen_KillsWithPenitence;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_TwoHeroCrystalNovas;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_CrystalMaiden_ThreeHeroFreezingFields;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Dazzle_ShadowWaveKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_SiphonKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DeathProphet_ExorcismKillsDuringEuls;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Disruptor_ThreeHeroKineticFieldStaticStorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Doom_InfernalBladeBurnKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DrowRanger_PrecisionAuraCreepTowerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_EmberSpirit_RemnantKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_EmberSpirit_SleightOfFistKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Enigma_MidnightPulseBlackHoleCombos;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Enigma_ThreeManBlackHoles;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_FacelessVoid_MultiHeroTimeDilation;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_ThreeHeroFlakCannon;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_HomingMissileKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Gyrocopter_RocketBarrageKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Huskar_KillsDuringLifeBreak;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Huskar_BurningSpearKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_MultiHeroIceWall;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_ThreeHeroEMP;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_ThreeHeroDeafeningBlast;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Invoker_MultiHeroChaosMeteor;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Jakiro_MultiHeroDualBreath;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Jakiro_IcePathMacropyreCombos;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_PulseNovaKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Leshrac_ThreeHeroLightningStorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lion_ThreeHeroFingerOfDeath;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_PoofKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Meepo_MultiHeroEarthbinds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NightStalker_NighttimeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Morphling_KillsDuringReplicate;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_OgreMagi_FireblastKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_OgreMagi_IgniteKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DominatingKillStreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_MegaKillStreaks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Alchemist_AghanimsGiven;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_VeilsLeadingToKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_DustLeadingToKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WitchDoctor_MultiHeroCaskStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Weaver_ShukuchiKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Windrunner_ShackleFocusFireKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_VengefulSpirit_VengeanceAuraIllusionKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tusk_WalrusPunchKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Tinker_MultiHeroLasers;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_TemplarAssassin_MultiHeroPsiBlades;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sven_KillsDuringGodsStrength;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Sniper_ThreeHeroShrapnels;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Slark_KillsDuringShadowDance;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ShadowShaman_MultiHeroEtherShocks;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ShadowShaman_SerpentWardShackleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_ThreeHeroTricksOfTheTrade;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Razor_EyeOfTheStormKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pugna_LifeDrainKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_ObsidianDestroyer_SanitysEclipseKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Oracle_MultiHeroFortunesEnd;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Omniknight_PurificationKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NightStalker_EnemyMissesUnderCripplingFear;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Warlock_ThreeHeroFatalBonds;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Riki_TricksOfTheTradeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_AftershockHits10;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_5HeroEchoslams;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LagunaBladeHeroKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Lina_LightStrikeHeroStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_FissureMultiStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Earthshaker_TotemKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pangolier_SwashbuckleKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Furion_EnemyHeroesTrapped;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Pangolier_HeartpiercerKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_MultiHeroStoneGaze;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Medusa_SplitShotKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_MultiHeroStarstorm;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mirana_KillsFromMoonlightShadow;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_MultiHeroSkewers;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_MultiHeroReversePolarity;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Magnus_HeroesSlowedWithShockwave;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_MultiHeroSong;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_NagaSiren_AlliesHealedBySong;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LoneDruid_MultiHeroRoar;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_LoneDruid_BattleCryKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_WinterWyvern_ThreeHeroCurses;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Antimage_SpellsBlockedWithCounterspell;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_EnemiesKilledInArena;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_MultiHeroGodsRebuke;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Mars_GodsRebukeKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Snapfire_LizardBlobsKills;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::kKillEaterEventType_Snapfire_TwoHeroCookieStuns;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::Custom_KillStreak;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_MIN;
constexpr CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_MAX;
constexpr int CMvpData_MvpDatum_MvpAccolade::MvpAccoladeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[4];
}
bool ELaneSelection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELaneSelectionFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[5];
}
bool ELaneSelectionFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 7:
    case 8:
    case 16:
    case 24:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPartyMatchmakingFlags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[6];
}
bool EPartyMatchmakingFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHighPriorityMMState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[7];
}
bool EHighPriorityMMState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyMemberCoachRequestState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[8];
}
bool ELobbyMemberCoachRequestState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[9];
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaPauseSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[10];
}
bool LobbyDotaPauseSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[11];
}
bool EReadyCheckStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EReadyCheckRequestResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[12];
}
bool EReadyCheckRequestResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EMatchBehaviorScoreVariance_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto[13];
}
bool EMatchBehaviorScoreVariance_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSODOTAPartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyMember>()._has_bits_);
  static void set_has_is_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_region_ping_failed_bitmask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tourney_buyin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tourney_prevent_until(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mm_data_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_has_hp_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_joined_from_partyfinder(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CSODOTAPartyMember::CSODOTAPartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  region_ping_codes_(arena),
  region_ping_times_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyMember)
}
CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      region_ping_codes_(from.region_ping_codes_),
      region_ping_times_(from.region_ping_times_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&region_ping_failed_bitmask_, &from.region_ping_failed_bitmask_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_) -
    reinterpret_cast<char*>(&region_ping_failed_bitmask_)) + sizeof(is_steam_china_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyMember)
}

void CSODOTAPartyMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_ping_failed_bitmask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_) -
    reinterpret_cast<char*>(&region_ping_failed_bitmask_)) + sizeof(is_steam_china_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAPartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAPartyMember::ArenaDtor(void* object) {
  CSODOTAPartyMember* _this = reinterpret_cast< CSODOTAPartyMember* >(object);
  (void)_this;
}
void CSODOTAPartyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAPartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_ping_codes_.Clear();
  region_ping_times_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&region_ping_failed_bitmask_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_priority_disabled_) -
        reinterpret_cast<char*>(&region_ping_failed_bitmask_)) + sizeof(high_priority_disabled_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_steam_china_) -
        reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(is_steam_china_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_coach = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_coach(&has_bits);
          is_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_ping_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_region_ping_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_region_ping_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_region_ping_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_ping_failed_bitmask = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_region_ping_failed_bitmask(&has_bits);
          region_ping_failed_bitmask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_skill_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tourney_skill_level(&has_bits);
          tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_buyin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tourney_buyin(&has_bits);
          tourney_buyin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_prevent_until = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tourney_prevent_until(&has_bits);
          tourney_prevent_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool joined_from_partyfinder = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_joined_from_partyfinder(&has_bits);
          joined_from_partyfinder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mm_data_valid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mm_data_valid(&has_bits);
          mm_data_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_hp_resource = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_has_hp_resource(&has_bits);
          has_hp_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_china = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_steam_china(&has_bits);
          is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAPartyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_coach(), target);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    int byte_size = _region_ping_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_region_ping_codes(), byte_size, target);
    }
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    int byte_size = _region_ping_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_region_ping_times(), byte_size, target);
    }
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_region_ping_failed_bitmask(), target);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tourney_skill_level(), target);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tourney_buyin(), target);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tourney_prevent_until(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 lane_selection_flags = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_lane_selection_flags(), target);
  }

  // optional bool joined_from_partyfinder = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_joined_from_partyfinder(), target);
  }

  // optional bool mm_data_valid = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_mm_data_valid(), target);
  }

  // optional bool high_priority_disabled = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_high_priority_disabled(), target);
  }

  // optional bool has_hp_resource = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_has_hp_resource(), target);
  }

  // optional bool is_steam_china = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyMember)
  return target;
}

size_t CSODOTAPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->region_ping_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _region_ping_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->region_ping_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _region_ping_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 region_ping_failed_bitmask = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region_ping_failed_bitmask());
    }

    // optional uint32 tourney_skill_level = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_skill_level());
    }

    // optional uint32 tourney_buyin = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_buyin());
    }

    // optional uint32 tourney_prevent_until = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_prevent_until());
    }

    // optional bool is_coach = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool mm_data_valid = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool high_priority_disabled = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 lane_selection_flags = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional bool has_hp_resource = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool joined_from_partyfinder = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_steam_china = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAPartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAPartyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAPartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_ping_codes_.MergeFrom(from.region_ping_codes_);
  region_ping_times_.MergeFrom(from.region_ping_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
    }
    if (cached_has_bits & 0x00000002u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      tourney_buyin_ = from.tourney_buyin_;
    }
    if (cached_has_bits & 0x00000008u) {
      tourney_prevent_until_ = from.tourney_prevent_until_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_coach_ = from.is_coach_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000040u) {
      mm_data_valid_ = from.mm_data_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      high_priority_disabled_ = from.high_priority_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_hp_resource_ = from.has_hp_resource_;
    }
    if (cached_has_bits & 0x00000400u) {
      joined_from_partyfinder_ = from.joined_from_partyfinder_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_steam_china_ = from.is_steam_china_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyMember::InternalSwap(CSODOTAPartyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_ping_codes_.InternalSwap(&other->region_ping_codes_);
  region_ping_times_.InternalSwap(&other->region_ping_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyMember, is_steam_china_)
      + sizeof(CSODOTAPartyMember::is_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyMember, region_ping_failed_bitmask_)>(
          reinterpret_cast<char*>(&region_ping_failed_bitmask_),
          reinterpret_cast<char*>(&other->region_ping_failed_bitmask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAParty>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_modes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effective_started_matchmaking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_raw_started_matchmaking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_attempt_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_attempt_num(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_low_priority_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_ui_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_team_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_match_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_match_disabled_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_matchmaking_max_range_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_matchlanguages(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_low_priority_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_open_for_join_requests(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_region_select_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_exclusive_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tourney_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tourney_schedule_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tourney_queue_deadline_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tourney_queue_deadline_state(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_party_builder_slots_to_fill(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_party_builder_match_groups(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_party_builder_start_time(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_solo_queue(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_bot_script_index(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_steam_clan_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::CMsgReadyCheckStatus& ready_check(const CSODOTAParty* msg);
  static void set_has_ready_check(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_game_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_custom_game_disabled_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_party_search_beacon_active(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_matchmaking_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_high_priority_state(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_lane_selections_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_game_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::CMsgReadyCheckStatus&
CSODOTAParty::_Internal::ready_check(const CSODOTAParty* msg) {
  return *msg->ready_check_;
}
CSODOTAParty::CSODOTAParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_ids_(arena),
  members_(arena),
  sent_invites_(arena),
  recv_invites_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAParty)
}
CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      member_ids_(from.member_ids_),
      members_(from.members_),
      sent_invites_(from.sent_invites_),
      recv_invites_(from.recv_invites_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  if (from._internal_has_ready_check()) {
    ready_check_ = new ::CMsgReadyCheckStatus(*from.ready_check_);
  } else {
    ready_check_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_difficulty_mask_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(custom_game_difficulty_mask_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAParty)
}

void CSODOTAParty::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ready_check_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_difficulty_mask_) -
    reinterpret_cast<char*>(&ready_check_)) + sizeof(custom_game_difficulty_mask_));
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:CSODOTAParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ready_check_;
}

void CSODOTAParty::ArenaDtor(void* object) {
  CSODOTAParty* _this = reinterpret_cast< CSODOTAParty* >(object);
  (void)_this;
}
void CSODOTAParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_ids_.Clear();
  members_.Clear();
  sent_invites_.Clear();
  recv_invites_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ready_check_ != nullptr);
      ready_check_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchgroups_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(matchgroups_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&low_priority_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchlanguages_) -
        reinterpret_cast<char*>(&low_priority_account_id_)) + sizeof(matchlanguages_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&raw_started_matchmaking_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tourney_division_id_) -
        reinterpret_cast<char*>(&raw_started_matchmaking_time_)) + sizeof(tourney_division_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tourney_schedule_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_base_logo_) -
        reinterpret_cast<char*>(&tourney_schedule_time_)) + sizeof(team_base_logo_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tourney_queue_deadline_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_builder_start_time_) -
        reinterpret_cast<char*>(&tourney_queue_deadline_state_)) + sizeof(party_builder_start_time_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&bot_script_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_difficulty_mask_) -
        reinterpret_cast<char*>(&bot_script_index_)) + sizeof(custom_game_difficulty_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 party_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_party_id(&_has_bits_);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_leader_id(&_has_bits_);
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 member_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_member_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_modes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_modes(&_has_bits_);
          game_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSODOTAParty.State state = 6 [default = UI];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTAParty_State_IsValid(val))) {
            _internal_set_state(static_cast<::CSODOTAParty_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 effective_started_matchmaking_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_effective_started_matchmaking_time(&_has_bits_);
          effective_started_matchmaking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_matchgroups(&_has_bits_);
          matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 low_priority_account_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_low_priority_account_id(&_has_bits_);
          low_priority_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_team_id(&_has_bits_);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_disabled_until_date = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_match_disabled_until_date(&_has_bits_);
          match_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_disabled_account_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_match_disabled_account_id(&_has_bits_);
          match_disabled_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_matchmaking_max_range_minutes(&_has_bits_);
          matchmaking_max_range_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchlanguages = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_matchlanguages(&_has_bits_);
          matchlanguages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyMember members = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 raw_started_matchmaking_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_raw_started_matchmaking_time(&_has_bits_);
          raw_started_matchmaking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attempt_start_time = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attempt_start_time(&_has_bits_);
          attempt_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attempt_num = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attempt_num(&_has_bits_);
          attempt_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 low_priority_games_remaining = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_low_priority_games_remaining(&_has_bits_);
          low_priority_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool open_for_join_requests = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_open_for_join_requests(&_has_bits_);
          open_for_join_requests_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite sent_invites = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sent_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite recv_invites = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_recv_invites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 account_flags = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_account_flags(&_has_bits_);
          account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 region_select_flags = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_region_select_flags(&_has_bits_);
          region_select_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exclusive_tournament_id = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_exclusive_tournament_id(&_has_bits_);
          exclusive_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_division_id = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tourney_division_id(&_has_bits_);
          tourney_division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_schedule_time = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_tourney_schedule_time(&_has_bits_);
          tourney_schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_skill_level = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tourney_skill_level(&_has_bits_);
          tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_bracket_round = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tourney_bracket_round(&_has_bits_);
          tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTAParty.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_ui_logo = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_team_ui_logo(&_has_bits_);
          team_ui_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_base_logo = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_team_base_logo(&_has_bits_);
          team_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_queue_deadline_time = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tourney_queue_deadline_time(&_has_bits_);
          tourney_queue_deadline_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETourneyQueueDeadlineState_IsValid(val))) {
            _internal_set_tourney_queue_deadline_state(static_cast<::ETourneyQueueDeadlineState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(55, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 party_builder_slots_to_fill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_party_builder_slots_to_fill(&_has_bits_);
          party_builder_slots_to_fill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_builder_match_groups = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_party_builder_match_groups(&_has_bits_);
          party_builder_match_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_builder_start_time = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_party_builder_start_time(&_has_bits_);
          party_builder_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool solo_queue = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_solo_queue(&_has_bits_);
          solo_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_script_index = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_bot_script_index(&_has_bits_);
          bot_script_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 steam_clan_account_id = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_steam_clan_account_id(&_has_bits_);
          steam_clan_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgReadyCheckStatus ready_check = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ready_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_disabled_until_date = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_custom_game_disabled_until_date(&_has_bits_);
          custom_game_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_disabled_account_id = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_custom_game_disabled_account_id(&_has_bits_);
          custom_game_disabled_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_challenge_match(&_has_bits_);
          is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool party_search_beacon_active = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_party_search_beacon_active(&_has_bits_);
          party_search_beacon_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchmaking_flags = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_matchmaking_flags(&_has_bits_);
          matchmaking_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EHighPriorityMMState_IsValid(val))) {
            _internal_set_high_priority_state(static_cast<::EHighPriorityMMState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(68, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool lane_selections_enabled = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lane_selections_enabled(&_has_bits_);
          lane_selections_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty_mask = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_custom_game_difficulty_mask(&_has_bits_);
          custom_game_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_china = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_steam_china(&_has_bits_);
          is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->_internal_member_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_member_ids(i), target);
  }

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_modes(), target);
  }

  // optional .CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_low_priority_account_id(), target);
  }

  // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_match_type(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_bot_difficulty(), target);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_matchlanguages(), target);
  }

  // repeated .CSODOTAPartyMember members = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_members(i), target, stream);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_low_priority_games_remaining(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_open_for_join_requests(), target);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sent_invites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_sent_invites(i), target, stream);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_recv_invites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, this->_internal_recv_invites(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_account_flags(), target);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_region_select_flags(), target);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_exclusive_tournament_id(), target);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_tourney_division_id(), target);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_tourney_schedule_time(), target);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_tourney_skill_level(), target);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_tourney_bracket_round(), target);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAParty.team_name");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_team_name(), target);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(52, this->_internal_team_ui_logo(), target);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(53, this->_internal_team_base_logo(), target);
  }

  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_tourney_queue_deadline_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      55, this->_internal_tourney_queue_deadline_state(), target);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_party_builder_slots_to_fill(), target);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_party_builder_match_groups(), target);
  }

  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_party_builder_start_time(), target);
  }

  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_solo_queue(), target);
  }

  // optional uint32 bot_script_index = 60;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_bot_script_index(), target);
  }

  // optional uint32 steam_clan_account_id = 61;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_steam_clan_account_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgReadyCheckStatus ready_check = 62;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        62, _Internal::ready_check(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_game_disabled_until_date = 63;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_custom_game_disabled_until_date(), target);
  }

  // optional uint32 custom_game_disabled_account_id = 64;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(64, this->_internal_custom_game_disabled_account_id(), target);
  }

  // optional bool is_challenge_match = 65;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_is_challenge_match(), target);
  }

  // optional bool party_search_beacon_active = 66;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_party_search_beacon_active(), target);
  }

  // optional uint32 matchmaking_flags = 67;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_matchmaking_flags(), target);
  }

  // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      68, this->_internal_high_priority_state(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lane_selections_enabled = 69;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_lane_selections_enabled(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_game_difficulty_mask = 70;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_custom_game_difficulty_mask(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_steam_china = 71;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_is_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAParty)
  return target;
}

size_t CSODOTAParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_member_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_member_ids_size());
    total_size += data_size;
  }

  // repeated .CSODOTAPartyMember members = 29;
  total_size += 2UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTAPartyInvite sent_invites = 41;
  total_size += 2UL * this->_internal_sent_invites_size();
  for (const auto& msg : this->sent_invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTAPartyInvite recv_invites = 42;
  total_size += 2UL * this->_internal_recv_invites_size();
  for (const auto& msg : this->recv_invites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 51;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional .CMsgReadyCheckStatus ready_check = 62;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ready_check_);
    }

    // optional uint64 party_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional fixed64 leader_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_modes());
    }

    // optional .CSODOTAParty.State state = 6 [default = UI];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effective_started_matchmaking_time());
    }

    // optional uint32 matchgroups = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchgroups());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 low_priority_account_id = 19;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_low_priority_account_id());
    }

    // optional .MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional .DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

    // optional uint32 team_id = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_account_id());
    }

    // optional uint32 matchmaking_max_range_minutes = 26;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchlanguages());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 raw_started_matchmaking_time = 32;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_raw_started_matchmaking_time());
    }

    // optional uint32 attempt_start_time = 33;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attempt_start_time());
    }

    // optional uint32 attempt_num = 34;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attempt_num());
    }

    // optional uint32 low_priority_games_remaining = 35;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_low_priority_games_remaining());
    }

    // optional uint32 account_flags = 43;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_flags());
    }

    // optional uint32 region_select_flags = 44;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region_select_flags());
    }

    // optional uint32 exclusive_tournament_id = 45;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exclusive_tournament_id());
    }

    // optional uint32 tourney_division_id = 47;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_division_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tourney_schedule_time = 48;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_schedule_time());
    }

    // optional uint32 tourney_skill_level = 49;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_skill_level());
    }

    // optional uint64 team_ui_logo = 52;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_ui_logo());
    }

    // optional uint32 tourney_bracket_round = 50;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_bracket_round());
    }

    // optional uint32 tourney_queue_deadline_time = 54;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_queue_deadline_time());
    }

    // optional bool lane_selections_enabled = 69;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_china = 71;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 team_base_logo = 53;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_base_logo());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tourney_queue_deadline_state());
    }

    // optional uint32 party_builder_slots_to_fill = 56;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_builder_slots_to_fill());
    }

    // optional uint32 party_builder_match_groups = 57;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_builder_match_groups());
    }

    // optional bool open_for_join_requests = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool solo_queue = 59;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 65;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool party_search_beacon_active = 66;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional uint32 party_builder_start_time = 58;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_builder_start_time());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 bot_script_index = 60;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_script_index());
    }

    // optional uint32 steam_clan_account_id = 61;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steam_clan_account_id());
    }

    // optional uint32 custom_game_disabled_until_date = 63;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_disabled_until_date());
    }

    // optional uint32 custom_game_disabled_account_id = 64;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_disabled_account_id());
    }

    // optional uint32 matchmaking_flags = 67;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchmaking_flags());
    }

    // optional .EHighPriorityMMState high_priority_state = 68 [default = k_EHighPriorityMM_Unknown];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_high_priority_state());
    }

    // optional uint32 custom_game_difficulty_mask = 70;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty_mask());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAParty)
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  sent_invites_.MergeFrom(from.sent_invites_);
  recv_invites_.MergeFrom(from.recv_invites_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ready_check()->::CMsgReadyCheckStatus::MergeFrom(from._internal_ready_check());
    }
    if (cached_has_bits & 0x00000004u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      effective_started_matchmaking_time_ = from.effective_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      matchgroups_ = from.matchgroups_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      low_priority_account_id_ = from.low_priority_account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000400u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000800u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      match_disabled_account_id_ = from.match_disabled_account_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      matchmaking_max_range_minutes_ = from.matchmaking_max_range_minutes_;
    }
    if (cached_has_bits & 0x00008000u) {
      matchlanguages_ = from.matchlanguages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      raw_started_matchmaking_time_ = from.raw_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      attempt_start_time_ = from.attempt_start_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      attempt_num_ = from.attempt_num_;
    }
    if (cached_has_bits & 0x00080000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x00100000u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      region_select_flags_ = from.region_select_flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      exclusive_tournament_id_ = from.exclusive_tournament_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      tourney_division_id_ = from.tourney_division_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tourney_schedule_time_ = from.tourney_schedule_time_;
    }
    if (cached_has_bits & 0x02000000u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x08000000u) {
      tourney_bracket_round_ = from.tourney_bracket_round_;
    }
    if (cached_has_bits & 0x10000000u) {
      tourney_queue_deadline_time_ = from.tourney_queue_deadline_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      lane_selections_enabled_ = from.lane_selections_enabled_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_steam_china_ = from.is_steam_china_;
    }
    if (cached_has_bits & 0x80000000u) {
      team_base_logo_ = from.team_base_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tourney_queue_deadline_state_ = from.tourney_queue_deadline_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      party_builder_slots_to_fill_ = from.party_builder_slots_to_fill_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_builder_match_groups_ = from.party_builder_match_groups_;
    }
    if (cached_has_bits & 0x00000008u) {
      open_for_join_requests_ = from.open_for_join_requests_;
    }
    if (cached_has_bits & 0x00000010u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      party_search_beacon_active_ = from.party_search_beacon_active_;
    }
    if (cached_has_bits & 0x00000080u) {
      party_builder_start_time_ = from.party_builder_start_time_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      bot_script_index_ = from.bot_script_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      steam_clan_account_id_ = from.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      custom_game_disabled_until_date_ = from.custom_game_disabled_until_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      custom_game_disabled_account_id_ = from.custom_game_disabled_account_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      matchmaking_flags_ = from.matchmaking_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      high_priority_state_ = from.high_priority_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      custom_game_difficulty_mask_ = from.custom_game_difficulty_mask_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSODOTAParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {
  return true;
}

void CSODOTAParty::InternalSwap(CSODOTAParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  member_ids_.InternalSwap(&other->member_ids_);
  members_.InternalSwap(&other->members_);
  sent_invites_.InternalSwap(&other->sent_invites_);
  recv_invites_.InternalSwap(&other->recv_invites_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAParty, custom_game_difficulty_mask_)
      + sizeof(CSODOTAParty::custom_game_difficulty_mask_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAParty, ready_check_)>(
          reinterpret_cast<char*>(&ready_check_),
          reinterpret_cast<char*>(&other->ready_check_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAPartyInvite_PartyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyInvite_PartyMember>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyInvite.PartyMember)
}
CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_coach_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_coach_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite.PartyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite_PartyMember::ArenaDtor(void* object) {
  CSODOTAPartyInvite_PartyMember* _this = reinterpret_cast< CSODOTAPartyInvite_PartyMember* >(object);
  (void)_this;
}
void CSODOTAPartyInvite_PartyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyInvite.PartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_coach_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(is_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyInvite_PartyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTAPartyInvite.PartyMember.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool is_coach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_coach(&has_bits);
          is_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAPartyInvite_PartyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite.PartyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.PartyMember.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite.PartyMember)
  return target;
}

size_t CSODOTAPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyInvite.PartyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite_PartyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAPartyInvite_PartyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAPartyInvite.PartyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAPartyInvite.PartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_coach_ = from.is_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite_PartyMember::InternalSwap(CSODOTAPartyInvite_PartyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, is_coach_)
      + sizeof(CSODOTAPartyInvite_PartyMember::is_coach_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAPartyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPartyInvite>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_low_priority_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_as_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_invite_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSODOTAPartyInvite::CSODOTAPartyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPartyInvite)
}
CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArena());
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_gid_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invite_gid_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTAPartyInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAPartyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite::ArenaDtor(void* object) {
  CSODOTAPartyInvite* _this = reinterpret_cast< CSODOTAPartyInvite* >(object);
  (void)_this;
}
void CSODOTAPartyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAPartyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invite_gid_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(invite_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPartyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTAPartyInvite.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTAPartyInvite.PartyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_priority_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_low_priority_status(&has_bits);
          low_priority_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool as_coach = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_as_coach(&has_bits);
          as_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invite_gid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_invite_gid(&has_bits);
          invite_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAPartyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPartyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTAPartyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_members(i), target, stream);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_invite_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPartyInvite)
  return target;
}

size_t CSODOTAPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPartyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAPartyInvite.PartyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional bool low_priority_status = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAPartyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAPartyInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAPartyInvite)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_priority_status_ = from.low_priority_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      as_coach_ = from.as_coach_;
    }
    if (cached_has_bits & 0x00000040u) {
      invite_gid_ = from.invite_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite::InternalSwap(CSODOTAPartyInvite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite, invite_gid_)
      + sizeof(CSODOTAPartyInvite::invite_gid_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPartyInvite, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPartyInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTALobbyInvite_LobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyInvite_LobbyMember>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyInvite.LobbyMember)
}
CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steam_id_ = PROTOBUF_ULONGLONG(0);
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite.LobbyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite_LobbyMember::ArenaDtor(void* object) {
  CSODOTALobbyInvite_LobbyMember* _this = reinterpret_cast< CSODOTALobbyInvite_LobbyMember* >(object);
  (void)_this;
}
void CSODOTALobbyInvite_LobbyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTALobbyInvite_LobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyInvite.LobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyInvite_LobbyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobbyInvite.LobbyMember.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTALobbyInvite_LobbyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite.LobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.LobbyMember.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite.LobbyMember)
  return target;
}

size_t CSODOTALobbyInvite_LobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyInvite.LobbyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite_LobbyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTALobbyInvite_LobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTALobbyInvite.LobbyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTALobbyInvite.LobbyMember)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite_LobbyMember::InternalSwap(CSODOTALobbyInvite_LobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTALobbyInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyInvite>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_invite_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSODOTALobbyInvite::CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyInvite)
}
CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sender_name()) {
    sender_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sender_name(), 
      GetArena());
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::SharedCtor() {
sender_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyInvite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTALobbyInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sender_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite::ArenaDtor(void* object) {
  CSODOTALobbyInvite* _this = reinterpret_cast< CSODOTALobbyInvite* >(object);
  (void)_this;
}
void CSODOTALobbyInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTALobbyInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTALobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sender_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_timestamp_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyInvite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string sender_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sender_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobbyInvite.sender_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 invite_gid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_invite_gid(&has_bits);
          invite_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTALobbyInvite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyInvite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender_name().data(), static_cast<int>(this->_internal_sender_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyInvite.sender_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sender_name(), target);
  }

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_members(i), target, stream);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyInvite)
  return target;
}

size_t CSODOTALobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyInvite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sender_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender_name());
    }

    // optional uint64 group_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_group_id());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobbyInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTALobbyInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTALobbyInvite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTALobbyInvite)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite::MergeFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sender_name(from._internal_sender_name());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      invite_gid_ = from.invite_gid_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite::InternalSwap(CSODOTALobbyInvite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  sender_name_.Swap(&other->sender_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_timestamp_)
      + sizeof(CSODOTALobbyInvite::custom_game_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobbyInvite, group_id_)>(
          reinterpret_cast<char*>(&group_id_),
          reinterpret_cast<char*>(&other->group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyInvite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeaverState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverState>()._has_bits_);
  static void set_has_lobby_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leaver_detected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discard_match_results(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mass_disconnect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgLeaverState::CMsgLeaverState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverState)
}
CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_state_, &from.lobby_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&mass_disconnect_) -
    reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverState)
}

void CMsgLeaverState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mass_disconnect_) -
    reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:CMsgLeaverState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeaverState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeaverState::ArenaDtor(void* object) {
  CMsgLeaverState* _this = reinterpret_cast< CMsgLeaverState* >(object);
  (void)_this;
}
void CMsgLeaverState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeaverState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeaverState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lobby_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mass_disconnect_) -
        reinterpret_cast<char*>(&lobby_state_)) + sizeof(mass_disconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lobby_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_state(&has_bits);
          lobby_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool leaver_detected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_leaver_detected(&has_bits);
          leaver_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_first_blood_happened(&has_bits);
          first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool discard_match_results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_discard_match_results(&has_bits);
          discard_match_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mass_disconnect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mass_disconnect(&has_bits);
          mass_disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeaverState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_state(), target);
  }

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_mass_disconnect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverState)
  return target;
}

size_t CMsgLeaverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 lobby_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_state());
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional bool leaver_detected = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeaverState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeaverState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeaverState)
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_state_ = from.lobby_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaver_detected_ = from.leaver_detected_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000010u) {
      discard_match_results_ = from.discard_match_results_;
    }
    if (cached_has_bits & 0x00000020u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {
  return true;
}

void CMsgLeaverState::InternalSwap(CMsgLeaverState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLeaverState, mass_disconnect_)
      + sizeof(CMsgLeaverState::mass_disconnect_)
      - PROTOBUF_FIELD_OFFSET(CMsgLeaverState, lobby_state_)>(
          reinterpret_cast<char*>(&lobby_state_),
          reinterpret_cast<char*>(&other->lobby_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyCoachFriendRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyCoachFriendRequest>()._has_bits_);
  static void set_has_coach_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyCoachFriendRequest)
}
CMsgLobbyCoachFriendRequest::CMsgLobbyCoachFriendRequest(const CMsgLobbyCoachFriendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coach_account_id_, &from.coach_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_state_) -
    reinterpret_cast<char*>(&coach_account_id_)) + sizeof(request_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyCoachFriendRequest)
}

void CMsgLobbyCoachFriendRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coach_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_state_) -
    reinterpret_cast<char*>(&coach_account_id_)) + sizeof(request_state_));
}

CMsgLobbyCoachFriendRequest::~CMsgLobbyCoachFriendRequest() {
  // @@protoc_insertion_point(destructor:CMsgLobbyCoachFriendRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyCoachFriendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyCoachFriendRequest::ArenaDtor(void* object) {
  CMsgLobbyCoachFriendRequest* _this = reinterpret_cast< CMsgLobbyCoachFriendRequest* >(object);
  (void)_this;
}
void CMsgLobbyCoachFriendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyCoachFriendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyCoachFriendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyCoachFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&coach_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_state_) -
        reinterpret_cast<char*>(&coach_account_id_)) + sizeof(request_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyCoachFriendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 coach_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_coach_account_id(&has_bits);
          coach_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELobbyMemberCoachRequestState_IsValid(val))) {
            _internal_set_request_state(static_cast<::ELobbyMemberCoachRequestState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyCoachFriendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyCoachFriendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 coach_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_coach_account_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_id(), target);
  }

  // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyCoachFriendRequest)
  return target;
}

size_t CMsgLobbyCoachFriendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyCoachFriendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 coach_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_account_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyCoachFriendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyCoachFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyCoachFriendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyCoachFriendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyCoachFriendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyCoachFriendRequest)
    MergeFrom(*source);
  }
}

void CMsgLobbyCoachFriendRequest::MergeFrom(const CMsgLobbyCoachFriendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyCoachFriendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      coach_account_id_ = from.coach_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      request_state_ = from.request_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyCoachFriendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyCoachFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyCoachFriendRequest::CopyFrom(const CMsgLobbyCoachFriendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyCoachFriendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyCoachFriendRequest::IsInitialized() const {
  return true;
}

void CMsgLobbyCoachFriendRequest::InternalSwap(CMsgLobbyCoachFriendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyCoachFriendRequest, request_state_)
      + sizeof(CMsgLobbyCoachFriendRequest::request_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyCoachFriendRequest, coach_account_id_)>(
          reinterpret_cast<char*>(&coach_account_id_),
          reinterpret_cast<char*>(&other->coach_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyCoachFriendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTALobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobbyMember>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_meta_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_meta_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_meta_xp_awarded(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_leaver_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_coach_team(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_coach_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_pwrd_cyber_cafe_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pwrd_cyber_cafe_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cameraman(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_search_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_favorite_team_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_rank_tier_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_can_earn_rewards(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_live_spectator_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_was_mvp_last_game(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_queue_point_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_reports_available(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_live_spectator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

void CSODOTALobbyMember::clear_pending_awards() {
  pending_awards_.Clear();
}
void CSODOTALobbyMember::clear_pending_awards_on_victory() {
  pending_awards_on_victory_.Clear();
}
CSODOTALobbyMember::CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  disabled_hero_id_(arena),
  enabled_hero_id_(arena),
  custom_game_product_ids_(arena),
  disabled_random_hero_bits_(arena),
  pending_awards_(arena),
  pending_awards_on_victory_(arena),
  coached_account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobbyMember)
}
CSODOTALobbyMember::CSODOTALobbyMember(const CSODOTALobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      disabled_hero_id_(from.disabled_hero_id_),
      enabled_hero_id_(from.enabled_hero_id_),
      custom_game_product_ids_(from.custom_game_product_ids_),
      disabled_random_hero_bits_(from.disabled_random_hero_bits_),
      pending_awards_(from.pending_awards_),
      pending_awards_on_victory_(from.pending_awards_on_victory_),
      coached_account_ids_(from.coached_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  pwrd_cyber_cafe_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pwrd_cyber_cafe_name()) {
    pwrd_cyber_cafe_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pwrd_cyber_cafe_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&coach_team_) -
    reinterpret_cast<char*>(&id_)) + sizeof(coach_team_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobbyMember)
}

void CSODOTALobbyMember::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pwrd_cyber_cafe_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&live_spectator_account_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(live_spectator_account_id_));
live_spectator_team_ = 5;
channel_ = 6u;
coach_team_ = 5;
}

CSODOTALobbyMember::~CSODOTALobbyMember() {
  // @@protoc_insertion_point(destructor:CSODOTALobbyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTALobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwrd_cyber_cafe_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyMember::ArenaDtor(void* object) {
  CSODOTALobbyMember* _this = reinterpret_cast< CSODOTALobbyMember* >(object);
  (void)_this;
}
void CSODOTALobbyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTALobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTALobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  custom_game_product_ids_.Clear();
  disabled_random_hero_bits_.Clear();
  pending_awards_.Clear();
  pending_awards_on_victory_.Clear();
  coached_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pwrd_cyber_cafe_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(party_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&meta_xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&search_match_type_) -
        reinterpret_cast<char*>(&meta_xp_)) + sizeof(search_match_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&cameraman_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_point_adjustment_) -
        reinterpret_cast<char*>(&cameraman_)) + sizeof(queue_point_adjustment_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&rank_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&live_spectator_account_id_) -
        reinterpret_cast<char*>(&rank_tier_)) + sizeof(live_spectator_account_id_));
    live_spectator_team_ = 5;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    channel_ = 6u;
    coach_team_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobbyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&_has_bits_);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobbyMember.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_slot(&_has_bits_);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 party_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_party_id(&_has_bits_);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meta_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_meta_level(&_has_bits_);
          meta_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meta_xp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_meta_xp(&_has_bits_);
          meta_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meta_xp_awarded = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_meta_xp_awarded(&_has_bits_);
          meta_xp_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALeaverStatus_t_IsValid(val))) {
            _internal_set_leaver_status(static_cast<::DOTALeaverStatus_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 channel = 17 [default = 6];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_channel(&_has_bits_);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 disabled_hero_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_disabled_hero_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_disabled_hero_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 enabled_hero_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_enabled_hero_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enabled_hero_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_coach_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 pwrd_cyber_cafe_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_pwrd_cyber_cafe_id(&_has_bits_);
          pwrd_cyber_cafe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pwrd_cyber_cafe_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_pwrd_cyber_cafe_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobbyMember.pwrd_cyber_cafe_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaver_actions = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_leaver_actions(&_has_bits_);
          leaver_actions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 rank_change = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_rank_change(&_has_bits_);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cameraman = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_cameraman(&_has_bits_);
          cameraman_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 custom_game_product_ids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_custom_game_product_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<248>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_custom_game_product_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_search_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 favorite_team_packed = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_favorite_team_packed(&_has_bits_);
          favorite_team_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_plus_subscriber(&_has_bits_);
          is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rank_tier_updated = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank_tier_updated(&_has_bits_);
          rank_tier_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lane_selection_flags(&_has_bits_);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_earn_rewards = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_earn_rewards(&_has_bits_);
          can_earn_rewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_live_spectator_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated fixed32 disabled_random_hero_bits = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_disabled_random_hero_bits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<333>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_disabled_random_hero_bits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coach_rating = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_coach_rating(&_has_bits_);
          coach_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_mvp_last_game = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_was_mvp_last_game(&_has_bits_);
          was_mvp_last_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPendingEventAward pending_awards = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pending_awards_on_victory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint32 queue_point_adjustment = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_queue_point_adjustment(&_has_bits_);
          queue_point_adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rank_tier = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rank_tier(&_has_bits_);
          rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 title = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_title(&_has_bits_);
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_id = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_guild_id(&_has_bits_);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reports_available = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_reports_available(&_has_bits_);
          reports_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 coached_account_ids = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_coached_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<424>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_coached_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_china = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_steam_china(&_has_bits_);
          is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 live_spectator_account_id = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_live_spectator_account_id(&_has_bits_);
          live_spectator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTALobbyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyMember.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_slot(), target);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_meta_xp_awarded(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_leaver_status(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 channel = 17 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_channel(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0, n = this->_internal_disabled_hero_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_disabled_hero_id(i), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0, n = this->_internal_enabled_hero_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_enabled_hero_id(i), target);
  }

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_coach_team(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwrd_cyber_cafe_id = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_pwrd_cyber_cafe_id(), target);
  }

  // optional string pwrd_cyber_cafe_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pwrd_cyber_cafe_name().data(), static_cast<int>(this->_internal_pwrd_cyber_cafe_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobbyMember.pwrd_cyber_cafe_name");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_pwrd_cyber_cafe_name(), target);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(29, this->_internal_rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0, n = this->_internal_custom_game_product_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_custom_game_product_ids(i), target);
  }

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_search_match_type(), target);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(35, this->_internal_favorite_team_packed(), target);
  }

  // optional bool is_plus_subscriber = 36;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_is_plus_subscriber(), target);
  }

  // optional bool rank_tier_updated = 37;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_rank_tier_updated(), target);
  }

  // optional uint32 lane_selection_flags = 38;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_lane_selection_flags(), target);
  }

  // optional bool can_earn_rewards = 39;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_can_earn_rewards(), target);
  }

  // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      40, this->_internal_live_spectator_team(), target);
  }

  // repeated fixed32 disabled_random_hero_bits = 41;
  for (int i = 0, n = this->_internal_disabled_random_hero_bits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(41, this->_internal_disabled_random_hero_bits(i), target);
  }

  // optional uint32 coach_rating = 42;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_coach_rating(), target);
  }

  // optional bool was_mvp_last_game = 43;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_was_mvp_last_game(), target);
  }

  // repeated .CMsgPendingEventAward pending_awards = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_awards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_pending_awards(i), target, stream);
  }

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_awards_on_victory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_pending_awards_on_victory(i), target, stream);
  }

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  // optional sint32 queue_point_adjustment = 47;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(47, this->_internal_queue_point_adjustment(), target);
  }

  // optional int32 rank_tier = 48;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_rank_tier(), target);
  }

  // optional uint32 title = 50;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_title(), target);
  }

  // optional uint32 guild_id = 51;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_guild_id(), target);
  }

  // optional uint32 reports_available = 52;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_reports_available(), target);
  }

  // repeated uint32 coached_account_ids = 53;
  for (int i = 0, n = this->_internal_coached_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_coached_account_ids(i), target);
  }

  // optional bool is_steam_china = 54;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_is_steam_china(), target);
  }

  // optional uint32 live_spectator_account_id = 55;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_live_spectator_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobbyMember)
  return target;
}

size_t CSODOTALobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobbyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 disabled_hero_id = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->disabled_hero_id_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_disabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->enabled_hero_id_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->custom_game_product_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_game_product_ids_size());
    total_size += data_size;
  }

  // repeated fixed32 disabled_random_hero_bits = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_disabled_random_hero_bits_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_disabled_random_hero_bits_size());
    total_size += data_size;
  }

  // repeated .CMsgPendingEventAward pending_awards = 44;
  total_size += 2UL * this->_internal_pending_awards_size();
  for (const auto& msg : this->pending_awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  total_size += 2UL * this->_internal_pending_awards_on_victory_size();
  for (const auto& msg : this->pending_awards_on_victory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 coached_account_ids = 53;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->coached_account_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_coached_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string pwrd_cyber_cafe_name = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pwrd_cyber_cafe_name());
    }

    // optional fixed64 id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 slot = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 meta_level = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_meta_level());
    }

    // optional uint64 party_id = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 meta_xp = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_meta_xp());
    }

    // optional uint32 meta_xp_awarded = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_meta_xp_awarded());
    }

    // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_leaver_status());
    }

    // optional uint32 pwrd_cyber_cafe_id = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pwrd_cyber_cafe_id());
    }

    // optional uint32 leaver_actions = 28;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaver_actions());
    }

    // optional sint32 rank_change = 29;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_rank_change());
    }

    // optional uint64 favorite_team_packed = 35;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_favorite_team_packed());
    }

    // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_search_match_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool cameraman = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_plus_subscriber = 36;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool rank_tier_updated = 37;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool can_earn_rewards = 39;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 lane_selection_flags = 38;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 coach_rating = 42;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_rating());
    }

    // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
    }

    // optional sint32 queue_point_adjustment = 47;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_queue_point_adjustment());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 rank_tier = 48;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rank_tier());
    }

    // optional bool was_mvp_last_game = 43;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_china = 54;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 title = 50;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_title());
    }

    // optional uint32 guild_id = 51;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 reports_available = 52;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reports_available());
    }

    // optional uint32 live_spectator_account_id = 55;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_live_spectator_account_id());
    }

    // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_live_spectator_team());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 channel = 17 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_coach_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobbyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTALobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTALobbyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTALobbyMember)
    MergeFrom(*source);
  }
}

void CSODOTALobbyMember::MergeFrom(const CSODOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  custom_game_product_ids_.MergeFrom(from.custom_game_product_ids_);
  disabled_random_hero_bits_.MergeFrom(from.disabled_random_hero_bits_);
  pending_awards_.MergeFrom(from.pending_awards_);
  pending_awards_on_victory_.MergeFrom(from.pending_awards_on_victory_);
  coached_account_ids_.MergeFrom(from.coached_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pwrd_cyber_cafe_name(from._internal_pwrd_cyber_cafe_name());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000020u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      meta_level_ = from.meta_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      party_id_ = from.party_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      meta_xp_ = from.meta_xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      meta_xp_awarded_ = from.meta_xp_awarded_;
    }
    if (cached_has_bits & 0x00000400u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      pwrd_cyber_cafe_id_ = from.pwrd_cyber_cafe_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      leaver_actions_ = from.leaver_actions_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00004000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    if (cached_has_bits & 0x00008000u) {
      search_match_type_ = from.search_match_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      cameraman_ = from.cameraman_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00040000u) {
      rank_tier_updated_ = from.rank_tier_updated_;
    }
    if (cached_has_bits & 0x00080000u) {
      can_earn_rewards_ = from.can_earn_rewards_;
    }
    if (cached_has_bits & 0x00100000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00200000u) {
      coach_rating_ = from.coach_rating_;
    }
    if (cached_has_bits & 0x00400000u) {
      rank_mmr_boost_type_ = from.rank_mmr_boost_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      queue_point_adjustment_ = from.queue_point_adjustment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      rank_tier_ = from.rank_tier_;
    }
    if (cached_has_bits & 0x02000000u) {
      was_mvp_last_game_ = from.was_mvp_last_game_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_steam_china_ = from.is_steam_china_;
    }
    if (cached_has_bits & 0x08000000u) {
      title_ = from.title_;
    }
    if (cached_has_bits & 0x10000000u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x20000000u) {
      reports_available_ = from.reports_available_;
    }
    if (cached_has_bits & 0x40000000u) {
      live_spectator_account_id_ = from.live_spectator_account_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      live_spectator_team_ = from.live_spectator_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000002u) {
      coach_team_ = from.coach_team_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSODOTALobbyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyMember::CopyFrom(const CSODOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyMember::InternalSwap(CSODOTALobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  disabled_hero_id_.InternalSwap(&other->disabled_hero_id_);
  enabled_hero_id_.InternalSwap(&other->enabled_hero_id_);
  custom_game_product_ids_.InternalSwap(&other->custom_game_product_ids_);
  disabled_random_hero_bits_.InternalSwap(&other->disabled_random_hero_bits_);
  pending_awards_.InternalSwap(&other->pending_awards_);
  pending_awards_on_victory_.InternalSwap(&other->pending_awards_on_victory_);
  coached_account_ids_.InternalSwap(&other->coached_account_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwrd_cyber_cafe_name_.Swap(&other->pwrd_cyber_cafe_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobbyMember, live_spectator_account_id_)
      + sizeof(CSODOTALobbyMember::live_spectator_account_id_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobbyMember, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
  swap(live_spectator_team_, other->live_spectator_team_);
  swap(channel_, other->channel_);
  swap(coach_team_, other->coach_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobbyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTeamDetails>()._has_bits_);
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_home_team(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_challenge_match_token_account(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CLobbyTeamDetails::CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyTeamDetails)
}
CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_match_token_account_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(challenge_match_token_account_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTeamDetails)
}

void CLobbyTeamDetails::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_match_token_account_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(challenge_match_token_account_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTeamDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLobbyTeamDetails::ArenaDtor(void* object) {
  CLobbyTeamDetails* _this = reinterpret_cast< CLobbyTeamDetails* >(object);
  (void)_this;
}
void CLobbyTeamDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyTeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&team_logo_)) + sizeof(team_id_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&team_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_match_token_account_) -
        reinterpret_cast<char*>(&team_complete_)) + sizeof(challenge_match_token_account_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTeamDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string team_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyTeamDetails.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyTeamDetails.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_base_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_base_logo(&has_bits);
          team_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_banner_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_banner_logo(&has_bits);
          team_banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool team_complete = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team_complete(&has_bits);
          team_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 rank_change = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_rank_change(&has_bits);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_home_team = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_home_team(&has_bits);
          is_home_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_challenge_match(&has_bits);
          is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 challenge_match_token_account = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_challenge_match_token_account(&has_bits);
          challenge_match_token_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyTeamDetails.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyTeamDetails.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyTeamDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_team_complete(), target);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(16, this->_internal_rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_home_team(), target);
  }

  // optional bool is_challenge_match = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_challenge_match(), target);
  }

  // optional uint64 challenge_match_token_account = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_challenge_match_token_account(), target);
  }

  // optional string team_logo_url = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_team_logo_url(), target);
  }

  // optional string team_abbreviation = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyTeamDetails.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTeamDetails)
  return target;
}

size_t CLobbyTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTeamDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_logo_url = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional string team_abbreviation = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_banner_logo());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool team_complete = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_home_team = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_challenge_match = 18;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 rank = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional sint32 rank_change = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_rank_change());
    }

    // optional uint64 challenge_match_token_account = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_challenge_match_token_account());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTeamDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyTeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyTeamDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyTeamDetails)
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_banner_logo_ = from.team_banner_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      team_complete_ = from.team_complete_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_home_team_ = from.is_home_team_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_challenge_match_ = from.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00001000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00002000u) {
      challenge_match_token_account_ = from.challenge_match_token_account_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTeamDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {
  return true;
}

void CLobbyTeamDetails::InternalSwap(CLobbyTeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTeamDetails, challenge_match_token_account_)
      + sizeof(CLobbyTeamDetails::challenge_match_token_account_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTeamDetails, team_logo_)>(
          reinterpret_cast<char*>(&team_logo_),
          reinterpret_cast<char*>(&other->team_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTeamDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyGuildDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyGuildDetails>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guild_primary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guild_secondary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_event(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guild_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_team_for_guild(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_guild_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CLobbyGuildDetails::CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyGuildDetails)
}
CLobbyGuildDetails::CLobbyGuildDetails(const CLobbyGuildDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guild_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guild_tag()) {
    guild_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guild_tag(), 
      GetArena());
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_weekly_percentile_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_weekly_percentile_));
  // @@protoc_insertion_point(copy_constructor:CLobbyGuildDetails)
}

void CLobbyGuildDetails::SharedCtor() {
guild_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guild_weekly_percentile_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_weekly_percentile_));
}

CLobbyGuildDetails::~CLobbyGuildDetails() {
  // @@protoc_insertion_point(destructor:CLobbyGuildDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyGuildDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  guild_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLobbyGuildDetails::ArenaDtor(void* object) {
  CLobbyGuildDetails* _this = reinterpret_cast< CLobbyGuildDetails* >(object);
  (void)_this;
}
void CLobbyGuildDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyGuildDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyGuildDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyGuildDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guild_tag_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_event_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_event_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&guild_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_weekly_percentile_) -
        reinterpret_cast<char*>(&guild_flags_)) + sizeof(guild_weekly_percentile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyGuildDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_primary_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guild_primary_color(&has_bits);
          guild_primary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_secondary_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_guild_secondary_color(&has_bits);
          guild_secondary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_guild_pattern(&has_bits);
          guild_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 guild_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_guild_logo(&has_bits);
          guild_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_guild_points(&has_bits);
          guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_guild_event(&has_bits);
          guild_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_guild_flags(&has_bits);
          guild_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team_for_guild(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string guild_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_guild_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyGuildDetails.guild_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyGuildDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyGuildDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 guild_primary_color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_primary_color(), target);
  }

  // optional uint32 guild_secondary_color = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_secondary_color(), target);
  }

  // optional uint32 guild_pattern = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_guild_pattern(), target);
  }

  // optional uint64 guild_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guild_logo(), target);
  }

  // optional uint32 guild_points = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_points(), target);
  }

  // optional uint32 guild_event = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_event(), target);
  }

  // optional uint32 guild_flags = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guild_flags(), target);
  }

  // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_team_for_guild(), target);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guild_tag().data(), static_cast<int>(this->_internal_guild_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyGuildDetails.guild_tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_guild_tag(), target);
  }

  // optional uint32 guild_weekly_percentile = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_guild_weekly_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyGuildDetails)
  return target;
}

size_t CLobbyGuildDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyGuildDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guild_tag = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guild_tag());
    }

    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 guild_primary_color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_primary_color());
    }

    // optional uint32 guild_secondary_color = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_secondary_color());
    }

    // optional uint32 guild_pattern = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_pattern());
    }

    // optional uint64 guild_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guild_logo());
    }

    // optional uint32 guild_points = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_points());
    }

    // optional uint32 guild_event = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_event());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 guild_flags = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_flags());
    }

    // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team_for_guild());
    }

    // optional uint32 guild_weekly_percentile = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_weekly_percentile());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyGuildDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyGuildDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyGuildDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyGuildDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyGuildDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyGuildDetails)
    MergeFrom(*source);
  }
}

void CLobbyGuildDetails::MergeFrom(const CLobbyGuildDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyGuildDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_guild_tag(from._internal_guild_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      guild_primary_color_ = from.guild_primary_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      guild_secondary_color_ = from.guild_secondary_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      guild_pattern_ = from.guild_pattern_;
    }
    if (cached_has_bits & 0x00000020u) {
      guild_logo_ = from.guild_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      guild_points_ = from.guild_points_;
    }
    if (cached_has_bits & 0x00000080u) {
      guild_event_ = from.guild_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      guild_flags_ = from.guild_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      team_for_guild_ = from.team_for_guild_;
    }
    if (cached_has_bits & 0x00000400u) {
      guild_weekly_percentile_ = from.guild_weekly_percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyGuildDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyGuildDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyGuildDetails::CopyFrom(const CLobbyGuildDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyGuildDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyGuildDetails::IsInitialized() const {
  return true;
}

void CLobbyGuildDetails::InternalSwap(CLobbyGuildDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guild_tag_.Swap(&other->guild_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyGuildDetails, guild_weekly_percentile_)
      + sizeof(CLobbyGuildDetails::guild_weekly_percentile_)
      - PROTOBUF_FIELD_OFFSET(CLobbyGuildDetails, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyGuildDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyTimedRewardDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyTimedRewardDetails>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_supply_crate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_timed_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:CLobbyTimedRewardDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyTimedRewardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CLobbyTimedRewardDetails::ArenaDtor(void* object) {
  CLobbyTimedRewardDetails* _this = reinterpret_cast< CLobbyTimedRewardDetails* >(object);
  (void)_this;
}
void CLobbyTimedRewardDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyTimedRewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyTimedRewardDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_supply_crate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_supply_crate(&has_bits);
          is_supply_crate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_timed_drop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_timed_drop(&has_bits);
          is_timed_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyTimedRewardDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyTimedRewardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyTimedRewardDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyTimedRewardDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyTimedRewardDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyTimedRewardDetails)
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_supply_crate_ = from.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_timed_drop_ = from.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTimedRewardDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_)
      + sizeof(CLobbyTimedRewardDetails::origin_)
      - PROTOBUF_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyBroadcastChannelInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyBroadcastChannelInfo>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyBroadcastChannelInfo)
}
CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_code()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channel_id_ = 0u;
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:CLobbyBroadcastChannelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CLobbyBroadcastChannelInfo::ArenaDtor(void* object) {
  CLobbyBroadcastChannelInfo* _this = reinterpret_cast< CLobbyBroadcastChannelInfo* >(object);
  (void)_this;
}
void CLobbyBroadcastChannelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyBroadcastChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyBroadcastChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmpty();
    }
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyBroadcastChannelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CLobbyBroadcastChannelInfo.language_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyBroadcastChannelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyBroadcastChannelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_id(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CLobbyBroadcastChannelInfo.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyBroadcastChannelInfo)
  return target;
}

size_t CLobbyBroadcastChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyBroadcastChannelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

    // optional uint32 channel_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyBroadcastChannelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyBroadcastChannelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyBroadcastChannelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyBroadcastChannelInfo)
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_code(from._internal_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {
  return true;
}

void CLobbyBroadcastChannelInfo::InternalSwap(CLobbyBroadcastChannelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CLobbyGuildChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CLobbyGuildChallenge>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_period_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CLobbyGuildChallenge::CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  eligible_account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLobbyGuildChallenge)
}
CLobbyGuildChallenge::CLobbyGuildChallenge(const CLobbyGuildChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      eligible_account_ids_(from.eligible_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_progress_at_start_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_at_start_));
  // @@protoc_insertion_point(copy_constructor:CLobbyGuildChallenge)
}

void CLobbyGuildChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_progress_at_start_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_at_start_));
}

CLobbyGuildChallenge::~CLobbyGuildChallenge() {
  // @@protoc_insertion_point(destructor:CLobbyGuildChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CLobbyGuildChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CLobbyGuildChallenge::ArenaDtor(void* object) {
  CLobbyGuildChallenge* _this = reinterpret_cast< CLobbyGuildChallenge* >(object);
  (void)_this;
}
void CLobbyGuildChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CLobbyGuildChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CLobbyGuildChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CLobbyGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eligible_account_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_progress_at_start_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_at_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CLobbyGuildChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_period_serial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_challenge_period_serial(&has_bits);
          challenge_period_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 eligible_account_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eligible_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_eligible_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLobbyGuildChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLobbyGuildChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_period_serial = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_period_serial(), target);
  }

  // optional uint32 challenge_progress_at_start = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_at_start(), target);
  }

  // repeated uint32 eligible_account_ids = 8;
  for (int i = 0, n = this->_internal_eligible_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_eligible_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLobbyGuildChallenge)
  return target;
}

size_t CLobbyGuildChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLobbyGuildChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 eligible_account_ids = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->eligible_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_eligible_account_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_period_serial = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_period_serial());
    }

    // optional uint32 challenge_progress_at_start = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_progress_at_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLobbyGuildChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLobbyGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyGuildChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLobbyGuildChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLobbyGuildChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLobbyGuildChallenge)
    MergeFrom(*source);
  }
}

void CLobbyGuildChallenge::MergeFrom(const CLobbyGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLobbyGuildChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eligible_account_ids_.MergeFrom(from.eligible_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_timestamp_ = from.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_period_serial_ = from.challenge_period_serial_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_progress_at_start_ = from.challenge_progress_at_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyGuildChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLobbyGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyGuildChallenge::CopyFrom(const CLobbyGuildChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLobbyGuildChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyGuildChallenge::IsInitialized() const {
  return true;
}

void CLobbyGuildChallenge::InternalSwap(CLobbyGuildChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  eligible_account_ids_.InternalSwap(&other->eligible_account_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CLobbyGuildChallenge, challenge_progress_at_start_)
      + sizeof(CLobbyGuildChallenge::challenge_progress_at_start_)
      - PROTOBUF_FIELD_OFFSET(CLobbyGuildChallenge, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CLobbyGuildChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTALobby_CExtraMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobby_CExtraMsg>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobby.CExtraMsg)
}
CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contents()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:CSODOTALobby.CExtraMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobby_CExtraMsg::ArenaDtor(void* object) {
  CSODOTALobby_CExtraMsg* _this = reinterpret_cast< CSODOTALobby_CExtraMsg* >(object);
  (void)_this;
}
void CSODOTALobby_CExtraMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTALobby_CExtraMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobby.CExtraMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contents_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobby_CExtraMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTALobby_CExtraMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby.CExtraMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby.CExtraMsg)
  return target;
}

size_t CSODOTALobby_CExtraMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobby.CExtraMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby_CExtraMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTALobby_CExtraMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTALobby.CExtraMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTALobby.CExtraMsg)
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contents(from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {
  return true;
}

void CSODOTALobby_CExtraMsg::InternalSwap(CSODOTALobby_CExtraMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.Swap(&other->contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTALobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTALobby>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leader_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_fill_with_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_intro_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tutorial_lesson(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_num_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_matchgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cm_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_allow_spectating(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_game_version(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_penalty_level_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_penalty_level_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_load_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_radiant_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_dire_series_wins(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_loot_generated(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_loot_awarded(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_allchat(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dota_tv_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_difficulty(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_lan(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_first_leaver_accountid(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::CDOTASaveGame& save_game(const CSODOTALobby* msg);
  static void set_has_save_game(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_mass_disconnect(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_custom_min_players(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_custom_max_players(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_custom_game_auto_created_lobby(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_previous_match_override(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_custom_game_uses_account_records(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_game_start_time(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_pause_setting(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_lobby_mvp_account_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_weekend_tourney_division_id(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_weekend_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_weekend_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_bot_radiant(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_bot_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_selection_priority_rules(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_series_previous_selection_priority_team_id(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_series_current_selection_priority_team_id(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_series_current_priority_team_choice(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_series_current_non_priority_team_choice(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_series_current_selection_priority_used_coin_toss(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_current_primary_event(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_custom_game_private_key(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_custom_game_penalties(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_match_duration(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_custom_game_browseable(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_league_phase(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_record_detailed_stats(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_experimental_gameplay_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_is_in_steam_china(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_with_scenario_save(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
};

const ::CDOTASaveGame&
CSODOTALobby::_Internal::save_game(const CSODOTALobby* msg) {
  return *msg->save_game_;
}
void CSODOTALobby::clear_save_game() {
  if (save_game_ != nullptr) save_game_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTALobby::clear_lobby_event_points() {
  lobby_event_points_.Clear();
}
CSODOTALobby::CSODOTALobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  v2_members_(arena),
  v2_left_members_(arena),
  pending_invites_(arena),
  team_details_(arena),
  timed_reward_details_(arena),
  broadcast_channel_info_(arena),
  extra_messages_(arena),
  previous_series_matches_(arena),
  event_progression_enabled_(arena),
  emergency_disabled_hero_ids_(arena),
  guild_challenges_(arena),
  guild_details_(arena),
  lobby_event_points_(arena),
  all_members_(arena),
  member_indices_(arena),
  left_member_indices_(arena),
  free_member_indices_(arena),
  requested_hero_ids_(arena),
  coach_friend_requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTALobby)
}
CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      v2_members_(from.v2_members_),
      v2_left_members_(from.v2_left_members_),
      pending_invites_(from.pending_invites_),
      team_details_(from.team_details_),
      timed_reward_details_(from.timed_reward_details_),
      broadcast_channel_info_(from.broadcast_channel_info_),
      extra_messages_(from.extra_messages_),
      previous_series_matches_(from.previous_series_matches_),
      event_progression_enabled_(from.event_progression_enabled_),
      emergency_disabled_hero_ids_(from.emergency_disabled_hero_ids_),
      guild_challenges_(from.guild_challenges_),
      guild_details_(from.guild_details_),
      lobby_event_points_(from.lobby_event_points_),
      all_members_(from.all_members_),
      member_indices_(from.member_indices_),
      left_member_indices_(from.left_member_indices_),
      free_member_indices_(from.free_member_indices_),
      requested_hero_ids_(from.requested_hero_ids_),
      coach_friend_requests_(from.coach_friend_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connect()) {
    connect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connect(), 
      GetArena());
  }
  game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_name()) {
    game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_name(), 
      GetArena());
  }
  pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pass_key()) {
    pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pass_key(), 
      GetArena());
  }
  custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_game_mode()) {
    custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_game_mode(), 
      GetArena());
  }
  custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_custom_map_name()) {
    custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_map_name(), 
      GetArena());
  }
  lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lan_host_ping_location()) {
    lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lan_host_ping_location(), 
      GetArena());
  }
  if (from._internal_has_save_game()) {
    save_game_ = new ::CDOTASaveGame(*from.save_game_);
  } else {
    save_game_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CSODOTALobby)
}

void CSODOTALobby::SharedCtor() {
connect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pass_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_game_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lan_host_ping_location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&save_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_in_steam_china_) -
    reinterpret_cast<char*>(&save_game_)) + sizeof(is_in_steam_china_));
lobby_type_ = -1;
allow_spectating_ = true;
bot_difficulty_radiant_ = 3;
bot_difficulty_dire_ = 3;
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:CSODOTALobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTALobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lan_host_ping_location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete save_game_;
}

void CSODOTALobby::ArenaDtor(void* object) {
  CSODOTALobby* _this = reinterpret_cast< CSODOTALobby* >(object);
  (void)_this;
}
void CSODOTALobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTALobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTALobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTALobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  v2_members_.Clear();
  v2_left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  previous_series_matches_.Clear();
  event_progression_enabled_.Clear();
  emergency_disabled_hero_ids_.Clear();
  guild_challenges_.Clear();
  guild_details_.Clear();
  lobby_event_points_.Clear();
  all_members_.Clear();
  member_indices_.Clear();
  left_member_indices_.Clear();
  free_member_indices_.Clear();
  requested_hero_ids_.Clear();
  coach_friend_requests_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      connect_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(save_game_ != nullptr);
      save_game_->Clear();
    }
  }
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_region_) -
        reinterpret_cast<char*>(&game_mode_)) + sizeof(server_region_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&game_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_id_) -
        reinterpret_cast<char*>(&game_state_)) + sizeof(match_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&cm_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_series_wins_) -
        reinterpret_cast<char*>(&cm_pick_)) + sizeof(radiant_series_wins_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dire_series_wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lan_) -
        reinterpret_cast<char*>(&dire_series_wins_)) + sizeof(lan_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&low_priority_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&low_priority_)) + sizeof(visibility_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&custom_game_crc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
        reinterpret_cast<char*>(&custom_game_crc_)) + sizeof(weekend_tourney_skill_level_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&weekend_tourney_bracket_round_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selection_priority_rules_) -
        reinterpret_cast<char*>(&weekend_tourney_bracket_round_)) + sizeof(selection_priority_rules_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&series_previous_selection_priority_team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_node_id_) -
        reinterpret_cast<char*>(&series_previous_selection_priority_team_id_)) + sizeof(league_node_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&match_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_in_steam_china_) -
        reinterpret_cast<char*>(&match_duration_)) + sizeof(is_in_steam_china_));
    lobby_type_ = -1;
    allow_spectating_ = true;
  }
  if (cached_has_bits & 0x00030000u) {
    bot_difficulty_radiant_ = 3;
    bot_difficulty_dire_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTALobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&_has_bits_);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember v2_members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_game_mode(&_has_bits_);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSODOTALobby.State state = 4 [default = UI];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTALobby_State_IsValid(val))) {
            _internal_set_state(static_cast<::CSODOTALobby_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string connect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_connect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.connect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_id = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_server_id(&_has_bits_);
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember v2_left_members = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_v2_left_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed64 pending_invites = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pending_invites(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_pending_invites(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 leader_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_leader_id(&_has_bits_);
          leader_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CSODOTALobby_LobbyType_IsValid(val))) {
            _internal_set_lobby_type(static_cast<::CSODOTALobby_LobbyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool allow_cheats = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_allow_cheats(&_has_bits_);
          allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fill_with_bots = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_fill_with_bots(&_has_bits_);
          fill_with_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool intro_mode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_intro_mode(&_has_bits_);
          intro_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_game_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.game_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTeamDetails team_details = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_team_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 tutorial_lesson = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_tutorial_lesson(&_has_bits_);
          tutorial_lesson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tournament_id(&_has_bits_);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tournament_game_id(&_has_bits_);
          tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_region = 21 [default = 0];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_server_region(&_has_bits_);
          server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 num_spectators = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_num_spectators(&_has_bits_);
          num_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matchgroup = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_matchgroup(&_has_bits_);
          matchgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CM_PICK_IsValid(val))) {
            _internal_set_cm_pick(static_cast<::DOTA_CM_PICK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(28, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_match_id(&_has_bits_);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_spectating = 31 [default = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_allow_spectating(&_has_bits_);
          allow_spectating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(36, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAGameVersion_IsValid(val))) {
            _internal_set_game_version(static_cast<::DOTAGameVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(37, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string pass_key = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.pass_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leagueid = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_leagueid(&_has_bits_);
          leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_penalty_level_radiant(&_has_bits_);
          penalty_level_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_penalty_level_dire(&_has_bits_);
          penalty_level_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 load_game_id = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_load_game_id(&_has_bits_);
          load_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_series_type(&_has_bits_);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_series_wins = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_radiant_series_wins(&_has_bits_);
          radiant_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_series_wins = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dire_series_wins(&_has_bits_);
          dire_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 loot_generated = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_loot_generated(&_has_bits_);
          loot_generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 loot_awarded = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_loot_awarded(&_has_bits_);
          loot_awarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allchat = 51 [default = false];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_allchat(&_has_bits_);
          allchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaTVDelay_IsValid(val))) {
            _internal_set_dota_tv_delay(static_cast<::LobbyDotaTVDelay>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string custom_game_mode = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.custom_game_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string custom_map_name = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.custom_map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_difficulty = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_custom_difficulty(&_has_bits_);
          custom_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lan = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_lan(&_has_bits_);
          lan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_broadcast_channel_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 first_leaver_accountid = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_first_leaver_accountid(&_has_bits_);
          first_leaver_accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_series_id(&_has_bits_);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_priority = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_low_priority(&_has_bits_);
          low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<498>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CDOTASaveGame save_game = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_first_blood_happened(&_has_bits_);
          first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mass_disconnect = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mass_disconnect(&_has_bits_);
          mass_disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_custom_game_id(&_has_bits_);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(70, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_min_players = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_custom_min_players(&_has_bits_);
          custom_min_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_max_players = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_custom_max_players(&_has_bits_);
          custom_max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyVisibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::DOTALobbyVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(75, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_custom_game_crc(&_has_bits_);
          custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool custom_game_auto_created_lobby = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_custom_game_auto_created_lobby(&_has_bits_);
          custom_game_auto_created_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_custom_game_timestamp(&_has_bits_);
          custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint64 previous_series_matches = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_previous_series_matches(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<648>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_previous_series_matches(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 previous_match_override = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_previous_match_override(&_has_bits_);
          previous_match_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_game_uses_account_records = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_custom_game_uses_account_records(&_has_bits_);
          custom_game_uses_account_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_start_time = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_game_start_time(&_has_bits_);
          game_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaPauseSetting_IsValid(val))) {
            _internal_set_pause_setting(static_cast<::LobbyDotaPauseSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(88, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_mvp_account_id = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_lobby_mvp_account_id(&_has_bits_);
          lobby_mvp_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_division_id = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_weekend_tourney_division_id(&_has_bits_);
          weekend_tourney_division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_skill_level = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_weekend_tourney_skill_level(&_has_bits_);
          weekend_tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_weekend_tourney_bracket_round(&_has_bits_);
          weekend_tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(93, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 bot_radiant = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_bot_radiant(&_has_bits_);
          bot_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bot_dire = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_bot_dire(&_has_bits_);
          bot_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EEvent event_progression_enabled = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
              _internal_add_event_progression_enabled(static_cast<::EEvent>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(96, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<768>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_event_progression_enabled(), ptr, ctx, ::EEvent_IsValid, &_internal_metadata_, 96);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityRules_IsValid(val))) {
            _internal_set_selection_priority_rules(static_cast<::DOTASelectionPriorityRules>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(97, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 series_previous_selection_priority_team_id = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_series_previous_selection_priority_team_id(&_has_bits_);
          series_previous_selection_priority_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_current_selection_priority_team_id = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_series_current_selection_priority_team_id(&_has_bits_);
          series_current_selection_priority_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityChoice_IsValid(val))) {
            _internal_set_series_current_priority_team_choice(static_cast<::DOTASelectionPriorityChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(100, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityChoice_IsValid(val))) {
            _internal_set_series_current_non_priority_team_choice(static_cast<::DOTASelectionPriorityChoice>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(101, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool series_current_selection_priority_used_coin_toss = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_series_current_selection_priority_used_coin_toss(&_has_bits_);
          series_current_selection_priority_used_coin_toss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_current_primary_event(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(103, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 emergency_disabled_hero_ids = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_emergency_disabled_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<840>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_emergency_disabled_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 custom_game_private_key = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_custom_game_private_key(&_has_bits_);
          custom_game_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool custom_game_penalties = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_custom_game_penalties(&_has_bits_);
          custom_game_penalties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSODOTALobby.lan_host_ping_location");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_league_node_id(&_has_bits_);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_duration = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_match_duration(&_has_bits_);
          match_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool custom_game_browseable = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_custom_game_browseable(&_has_bits_);
          custom_game_browseable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_phase = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_league_phase(&_has_bits_);
          league_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool record_detailed_stats = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_record_detailed_stats(&_has_bits_);
          record_detailed_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool experimental_gameplay_enabled = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_experimental_gameplay_enabled(&_has_bits_);
          experimental_gameplay_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyGuildChallenge guild_challenges = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guild_challenges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<938>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyGuildDetails guild_details = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_guild_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<946>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lobby_event_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<954>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember all_members = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_all_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<962>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 member_indices = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<968>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 left_member_indices = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_left_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<976>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_left_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 free_member_indices = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_free_member_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<984>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_free_member_indices(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 requested_hero_ids = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<992>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_requested_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_coach_friend_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1002>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_in_steam_china = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_is_in_steam_china(&_has_bits_);
          is_in_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool with_scenario_save = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_with_scenario_save(&_has_bits_);
          with_scenario_save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTALobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTALobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // repeated .CSODOTALobbyMember v2_members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v2_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_v2_members(i), target, stream);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_game_mode(), target);
  }

  // optional .CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connect().data(), static_cast<int>(this->_internal_connect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.connect");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_server_id(), target);
  }

  // repeated .CSODOTALobbyMember v2_left_members = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_v2_left_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_v2_left_members(i), target, stream);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0, n = this->_internal_pending_invites_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_pending_invites(i), target);
  }

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_leader_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_lobby_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_intro_mode(), target);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.game_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_team_details(i), target, stream);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_server_region(), target);
  }

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_matchgroup(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_match_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_allow_spectating(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      36, this->_internal_bot_difficulty_radiant(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->_internal_game_version(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_timed_reward_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, this->_internal_timed_reward_details(i), target, stream);
  }

  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.pass_key");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_pass_key(), target);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_radiant_series_wins(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_dire_series_wins(), target);
  }

  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_loot_awarded(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      53, this->_internal_dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_custom_map_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_lan(), target);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcast_channel_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, this->_internal_broadcast_channel_info(i), target, stream);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_series_id(), target);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_low_priority(), target);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, this->_internal_extra_messages(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        63, _Internal::save_game(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(67, this->_internal_mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(68, this->_internal_custom_game_id(), target);
  }

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      70, this->_internal_match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_custom_max_players(), target);
  }

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      75, this->_internal_visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(76, this->_internal_custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(77, this->_internal_custom_game_auto_created_lobby(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(80, this->_internal_custom_game_timestamp(), target);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0, n = this->_internal_previous_series_matches_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(81, this->_internal_previous_series_matches(i), target);
  }

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(82, this->_internal_previous_match_override(), target);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(83, this->_internal_custom_game_uses_account_records(), target);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(87, this->_internal_game_start_time(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      88, this->_internal_pause_setting(), target);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(89, this->_internal_lobby_mvp_account_id(), target);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(90, this->_internal_weekend_tourney_division_id(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_weekend_tourney_bracket_round(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      93, this->_internal_bot_difficulty_dire(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(94, this->_internal_bot_radiant(), target);
  }

  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(95, this->_internal_bot_dire(), target);
  }

  // repeated .EEvent event_progression_enabled = 96;
  for (int i = 0, n = this->_internal_event_progression_enabled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        96, this->_internal_event_progression_enabled(i), target);
  }

  // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      97, this->_internal_selection_priority_rules(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(98, this->_internal_series_previous_selection_priority_team_id(), target);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(99, this->_internal_series_current_selection_priority_team_id(), target);
  }

  // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      100, this->_internal_series_current_priority_team_choice(), target);
  }

  // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      101, this->_internal_series_current_non_priority_team_choice(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_series_current_selection_priority_used_coin_toss(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      103, this->_internal_current_primary_event(), target);
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  for (int i = 0, n = this->_internal_emergency_disabled_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(105, this->_internal_emergency_disabled_hero_ids(i), target);
  }

  // optional fixed64 custom_game_private_key = 106;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(106, this->_internal_custom_game_private_key(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool custom_game_penalties = 107;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(107, this->_internal_custom_game_penalties(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string lan_host_ping_location = 109;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSODOTALobby.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        109, this->_internal_lan_host_ping_location(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 league_node_id = 110;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(110, this->_internal_league_node_id(), target);
  }

  // optional uint32 match_duration = 111;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(111, this->_internal_match_duration(), target);
  }

  // optional bool custom_game_browseable = 112;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(112, this->_internal_custom_game_browseable(), target);
  }

  // optional uint32 league_phase = 113;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(113, this->_internal_league_phase(), target);
  }

  // optional bool record_detailed_stats = 114;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(114, this->_internal_record_detailed_stats(), target);
  }

  // optional bool experimental_gameplay_enabled = 116;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(116, this->_internal_experimental_gameplay_enabled(), target);
  }

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guild_challenges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(117, this->_internal_guild_challenges(i), target, stream);
  }

  // repeated .CLobbyGuildDetails guild_details = 118;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guild_details_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(118, this->_internal_guild_details(i), target, stream);
  }

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lobby_event_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(119, this->_internal_lobby_event_points(i), target, stream);
  }

  // repeated .CSODOTALobbyMember all_members = 120;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_all_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(120, this->_internal_all_members(i), target, stream);
  }

  // repeated uint32 member_indices = 121;
  for (int i = 0, n = this->_internal_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(121, this->_internal_member_indices(i), target);
  }

  // repeated uint32 left_member_indices = 122;
  for (int i = 0, n = this->_internal_left_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(122, this->_internal_left_member_indices(i), target);
  }

  // repeated uint32 free_member_indices = 123;
  for (int i = 0, n = this->_internal_free_member_indices_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(123, this->_internal_free_member_indices(i), target);
  }

  // repeated uint32 requested_hero_ids = 124;
  for (int i = 0, n = this->_internal_requested_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(124, this->_internal_requested_hero_ids(i), target);
  }

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coach_friend_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(125, this->_internal_coach_friend_requests(i), target, stream);
  }

  // optional bool is_in_steam_china = 126;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(126, this->_internal_is_in_steam_china(), target);
  }

  // optional bool with_scenario_save = 127;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(127, this->_internal_with_scenario_save(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTALobby)
  return target;
}

size_t CSODOTALobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTALobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTALobbyMember v2_members = 2;
  total_size += 1UL * this->_internal_v2_members_size();
  for (const auto& msg : this->v2_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobbyMember v2_left_members = 7;
  total_size += 1UL * this->_internal_v2_left_members_size();
  for (const auto& msg : this->v2_left_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 pending_invites = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_pending_invites_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pending_invites_size());
    total_size += data_size;
  }

  // repeated .CLobbyTeamDetails team_details = 17;
  total_size += 2UL * this->_internal_team_details_size();
  for (const auto& msg : this->team_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  total_size += 2UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  total_size += 2UL * this->_internal_broadcast_channel_info_size();
  for (const auto& msg : this->broadcast_channel_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  total_size += 2UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 previous_series_matches = 81;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->previous_series_matches_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_previous_series_matches_size());
    total_size += data_size;
  }

  // repeated .EEvent event_progression_enabled = 96;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_event_progression_enabled_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_event_progression_enabled(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated uint32 emergency_disabled_hero_ids = 105;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->emergency_disabled_hero_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_emergency_disabled_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  total_size += 2UL * this->_internal_guild_challenges_size();
  for (const auto& msg : this->guild_challenges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyGuildDetails guild_details = 118;
  total_size += 2UL * this->_internal_guild_details_size();
  for (const auto& msg : this->guild_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  total_size += 2UL * this->_internal_lobby_event_points_size();
  for (const auto& msg : this->lobby_event_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobbyMember all_members = 120;
  total_size += 2UL * this->_internal_all_members_size();
  for (const auto& msg : this->all_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 member_indices = 121;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->member_indices_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 left_member_indices = 122;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->left_member_indices_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_left_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 free_member_indices = 123;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->free_member_indices_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_free_member_indices_size());
    total_size += data_size;
  }

  // repeated uint32 requested_hero_ids = 124;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->requested_hero_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_requested_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  total_size += 2UL * this->_internal_coach_friend_requests_size();
  for (const auto& msg : this->coach_friend_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connect = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connect());
    }

    // optional string game_name = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string pass_key = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional string custom_game_mode = 54;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 109;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional .CDOTASaveGame save_game = 63;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *save_game_);
    }

    // optional uint64 lobby_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 game_mode = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional .CSODOTALobby.State state = 4 [default = UI];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional fixed64 leader_id = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional uint32 tutorial_lesson = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tutorial_lesson());
    }

    // optional uint32 tournament_id = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_game_id());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional uint32 num_spectators = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_spectators());
    }

    // optional bool allow_cheats = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool allchat = 51 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 matchgroup = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matchgroup());
    }

    // optional uint64 match_id = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cm_pick());
    }

    // optional .DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_version());
    }

    // optional uint32 leagueid = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_dire());
    }

    // optional uint32 load_game_id = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_load_game_id());
    }

    // optional uint32 series_type = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_series_wins());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 dire_series_wins = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_series_wins());
    }

    // optional uint32 loot_generated = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loot_awarded());
    }

    // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dota_tv_delay());
    }

    // optional uint32 custom_difficulty = 56;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_difficulty());
    }

    // optional uint32 first_leaver_accountid = 59;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional bool lan = 57;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool low_priority = 61;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool first_blood_happened = 65;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool mass_disconnect = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 68;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

    // optional uint32 custom_min_players = 71;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_min_players());
    }

    // optional uint32 custom_max_players = 72;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_max_players());
    }

    // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_visibility());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 custom_game_crc = 76;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint64 previous_match_override = 82;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_previous_match_override());
    }

    // optional fixed32 custom_game_timestamp = 80;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 game_start_time = 87;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_start_time());
    }

    // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pause_setting());
    }

    // optional uint32 lobby_mvp_account_id = 89;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_mvp_account_id());
    }

    // optional uint32 weekend_tourney_division_id = 90;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_division_id());
    }

    // optional uint32 weekend_tourney_skill_level = 91;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_skill_level());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 weekend_tourney_bracket_round = 92;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_bracket_round());
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_uses_account_records = 83;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool series_current_selection_priority_used_coin_toss = 102;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_penalties = 107;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 bot_radiant = 94;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bot_radiant());
    }

    // optional uint64 bot_dire = 95;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bot_dire());
    }

    // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_selection_priority_rules());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 series_previous_selection_priority_team_id = 98;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_previous_selection_priority_team_id());
    }

    // optional uint32 series_current_selection_priority_team_id = 99;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_current_selection_priority_team_id());
    }

    // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_series_current_priority_team_choice());
    }

    // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_series_current_non_priority_team_choice());
    }

    // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_primary_event());
    }

    // optional bool with_scenario_save = 127;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional fixed64 custom_game_private_key = 106;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional uint32 league_node_id = 110;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 match_duration = 111;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_duration());
    }

    // optional uint32 league_phase = 113;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_phase());
    }

    // optional bool custom_game_browseable = 112;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool record_detailed_stats = 114;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool experimental_gameplay_enabled = 116;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_in_steam_china = 126;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lobby_type());
    }

    // optional bool allow_spectating = 31 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTALobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTALobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTALobby)
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  v2_members_.MergeFrom(from.v2_members_);
  v2_left_members_.MergeFrom(from.v2_left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  previous_series_matches_.MergeFrom(from.previous_series_matches_);
  event_progression_enabled_.MergeFrom(from.event_progression_enabled_);
  emergency_disabled_hero_ids_.MergeFrom(from.emergency_disabled_hero_ids_);
  guild_challenges_.MergeFrom(from.guild_challenges_);
  guild_details_.MergeFrom(from.guild_details_);
  lobby_event_points_.MergeFrom(from.lobby_event_points_);
  all_members_.MergeFrom(from.all_members_);
  member_indices_.MergeFrom(from.member_indices_);
  left_member_indices_.MergeFrom(from.left_member_indices_);
  free_member_indices_.MergeFrom(from.free_member_indices_);
  requested_hero_ids_.MergeFrom(from.requested_hero_ids_);
  coach_friend_requests_.MergeFrom(from.coach_friend_requests_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connect(from._internal_connect());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_save_game()->::CDOTASaveGame::MergeFrom(from._internal_save_game());
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000400u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      tutorial_lesson_ = from.tutorial_lesson_;
    }
    if (cached_has_bits & 0x00002000u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00040000u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00080000u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00100000u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00200000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x00400000u) {
      matchgroup_ = from.matchgroup_;
    }
    if (cached_has_bits & 0x00800000u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      cm_pick_ = from.cm_pick_;
    }
    if (cached_has_bits & 0x02000000u) {
      game_version_ = from.game_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x08000000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x20000000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x80000000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      loot_generated_ = from.loot_generated_;
    }
    if (cached_has_bits & 0x00000004u) {
      loot_awarded_ = from.loot_awarded_;
    }
    if (cached_has_bits & 0x00000008u) {
      dota_tv_delay_ = from.dota_tv_delay_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      first_leaver_accountid_ = from.first_leaver_accountid_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      lan_ = from.lan_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      low_priority_ = from.low_priority_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000400u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    if (cached_has_bits & 0x00000800u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00002000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x00004000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00020000u) {
      previous_match_override_ = from.previous_match_override_;
    }
    if (cached_has_bits & 0x00040000u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      game_start_time_ = from.game_start_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x00200000u) {
      lobby_mvp_account_id_ = from.lobby_mvp_account_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      weekend_tourney_division_id_ = from.weekend_tourney_division_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_game_auto_created_lobby_ = from.custom_game_auto_created_lobby_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_game_uses_account_records_ = from.custom_game_uses_account_records_;
    }
    if (cached_has_bits & 0x08000000u) {
      series_current_selection_priority_used_coin_toss_ = from.series_current_selection_priority_used_coin_toss_;
    }
    if (cached_has_bits & 0x10000000u) {
      custom_game_penalties_ = from.custom_game_penalties_;
    }
    if (cached_has_bits & 0x20000000u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x40000000u) {
      bot_dire_ = from.bot_dire_;
    }
    if (cached_has_bits & 0x80000000u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      series_previous_selection_priority_team_id_ = from.series_previous_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_current_selection_priority_team_id_ = from.series_current_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_current_priority_team_choice_ = from.series_current_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000008u) {
      series_current_non_priority_team_choice_ = from.series_current_non_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000010u) {
      current_primary_event_ = from.current_primary_event_;
    }
    if (cached_has_bits & 0x00000020u) {
      with_scenario_save_ = from.with_scenario_save_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_game_private_key_ = from.custom_game_private_key_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_node_id_ = from.league_node_id_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      match_duration_ = from.match_duration_;
    }
    if (cached_has_bits & 0x00000200u) {
      league_phase_ = from.league_phase_;
    }
    if (cached_has_bits & 0x00000400u) {
      custom_game_browseable_ = from.custom_game_browseable_;
    }
    if (cached_has_bits & 0x00000800u) {
      record_detailed_stats_ = from.record_detailed_stats_;
    }
    if (cached_has_bits & 0x00001000u) {
      experimental_gameplay_enabled_ = from.experimental_gameplay_enabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_in_steam_china_ = from.is_in_steam_china_;
    }
    if (cached_has_bits & 0x00004000u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      allow_spectating_ = from.allow_spectating_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00020000u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CSODOTALobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {
  return true;
}

void CSODOTALobby::InternalSwap(CSODOTALobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  v2_members_.InternalSwap(&other->v2_members_);
  v2_left_members_.InternalSwap(&other->v2_left_members_);
  pending_invites_.InternalSwap(&other->pending_invites_);
  team_details_.InternalSwap(&other->team_details_);
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
  broadcast_channel_info_.InternalSwap(&other->broadcast_channel_info_);
  extra_messages_.InternalSwap(&other->extra_messages_);
  previous_series_matches_.InternalSwap(&other->previous_series_matches_);
  event_progression_enabled_.InternalSwap(&other->event_progression_enabled_);
  emergency_disabled_hero_ids_.InternalSwap(&other->emergency_disabled_hero_ids_);
  guild_challenges_.InternalSwap(&other->guild_challenges_);
  guild_details_.InternalSwap(&other->guild_details_);
  lobby_event_points_.InternalSwap(&other->lobby_event_points_);
  all_members_.InternalSwap(&other->all_members_);
  member_indices_.InternalSwap(&other->member_indices_);
  left_member_indices_.InternalSwap(&other->left_member_indices_);
  free_member_indices_.InternalSwap(&other->free_member_indices_);
  requested_hero_ids_.InternalSwap(&other->requested_hero_ids_);
  coach_friend_requests_.InternalSwap(&other->coach_friend_requests_);
  connect_.Swap(&other->connect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_name_.Swap(&other->game_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pass_key_.Swap(&other->pass_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_game_mode_.Swap(&other->custom_game_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  custom_map_name_.Swap(&other->custom_map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lan_host_ping_location_.Swap(&other->lan_host_ping_location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTALobby, is_in_steam_china_)
      + sizeof(CSODOTALobby::is_in_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CSODOTALobby, save_game_)>(
          reinterpret_cast<char*>(&save_game_),
          reinterpret_cast<char*>(&other->save_game_));
  swap(lobby_type_, other->lobby_type_);
  swap(allow_spectating_, other->allow_spectating_);
  swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTALobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyPlaytestDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyPlaytestDetails>()._has_bits_);
  static void set_has_json(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlaytestDetails)
}
CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_json()) {
    json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_json(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlaytestDetails)
}

void CMsgLobbyPlaytestDetails::SharedCtor() {
json_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgLobbyPlaytestDetails::~CMsgLobbyPlaytestDetails() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlaytestDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyPlaytestDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  json_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyPlaytestDetails::ArenaDtor(void* object) {
  CMsgLobbyPlaytestDetails* _this = reinterpret_cast< CMsgLobbyPlaytestDetails* >(object);
  (void)_this;
}
void CMsgLobbyPlaytestDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyPlaytestDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyPlaytestDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlaytestDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    json_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlaytestDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string json = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_json();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLobbyPlaytestDetails.json");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyPlaytestDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlaytestDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_json().data(), static_cast<int>(this->_internal_json().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLobbyPlaytestDetails.json");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_json(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlaytestDetails)
  return target;
}

size_t CMsgLobbyPlaytestDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlaytestDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string json = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_json());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlaytestDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlaytestDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyPlaytestDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyPlaytestDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyPlaytestDetails)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlaytestDetails::MergeFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json()) {
    _internal_set_json(from._internal_json());
  }
}

void CMsgLobbyPlaytestDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlaytestDetails::CopyFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlaytestDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyPlaytestDetails::InternalSwap(CMsgLobbyPlaytestDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  json_.Swap(&other->json_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlaytestDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReadyCheckStatus_ReadyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyCheckStatus_ReadyMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ready_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyCheckStatus.ReadyMember)
}
CMsgReadyCheckStatus_ReadyMember::CMsgReadyCheckStatus_ReadyMember(const CMsgReadyCheckStatus_ReadyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ready_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyCheckStatus.ReadyMember)
}

void CMsgReadyCheckStatus_ReadyMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ready_status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
}

CMsgReadyCheckStatus_ReadyMember::~CMsgReadyCheckStatus_ReadyMember() {
  // @@protoc_insertion_point(destructor:CMsgReadyCheckStatus.ReadyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReadyCheckStatus_ReadyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgReadyCheckStatus_ReadyMember::ArenaDtor(void* object) {
  CMsgReadyCheckStatus_ReadyMember* _this = reinterpret_cast< CMsgReadyCheckStatus_ReadyMember* >(object);
  (void)_this;
}
void CMsgReadyCheckStatus_ReadyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReadyCheckStatus_ReadyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReadyCheckStatus_ReadyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyCheckStatus.ReadyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ready_status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(ready_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyCheckStatus_ReadyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckStatus_IsValid(val))) {
            _internal_set_ready_status(static_cast<::EReadyCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReadyCheckStatus_ReadyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyCheckStatus.ReadyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ready_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyCheckStatus.ReadyMember)
  return target;
}

size_t CMsgReadyCheckStatus_ReadyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyCheckStatus.ReadyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional .EReadyCheckStatus ready_status = 2 [default = k_EReadyCheckStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ready_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyCheckStatus_ReadyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReadyCheckStatus.ReadyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyCheckStatus_ReadyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReadyCheckStatus_ReadyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReadyCheckStatus.ReadyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReadyCheckStatus.ReadyMember)
    MergeFrom(*source);
  }
}

void CMsgReadyCheckStatus_ReadyMember::MergeFrom(const CMsgReadyCheckStatus_ReadyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyCheckStatus.ReadyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ready_status_ = from.ready_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyCheckStatus_ReadyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReadyCheckStatus.ReadyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyCheckStatus_ReadyMember::CopyFrom(const CMsgReadyCheckStatus_ReadyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyCheckStatus.ReadyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus_ReadyMember::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus_ReadyMember::InternalSwap(CMsgReadyCheckStatus_ReadyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus_ReadyMember, ready_status_)
      + sizeof(CMsgReadyCheckStatus_ReadyMember::ready_status_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus_ReadyMember, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyCheckStatus_ReadyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgReadyCheckStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyCheckStatus>()._has_bits_);
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_finish_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_initiator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgReadyCheckStatus::CMsgReadyCheckStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ready_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyCheckStatus)
}
CMsgReadyCheckStatus::CMsgReadyCheckStatus(const CMsgReadyCheckStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ready_members_(from.ready_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&initiator_account_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyCheckStatus)
}

void CMsgReadyCheckStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initiator_account_id_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
}

CMsgReadyCheckStatus::~CMsgReadyCheckStatus() {
  // @@protoc_insertion_point(destructor:CMsgReadyCheckStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgReadyCheckStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgReadyCheckStatus::ArenaDtor(void* object) {
  CMsgReadyCheckStatus* _this = reinterpret_cast< CMsgReadyCheckStatus* >(object);
  (void)_this;
}
void CMsgReadyCheckStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgReadyCheckStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgReadyCheckStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyCheckStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initiator_account_id_) -
        reinterpret_cast<char*>(&start_timestamp_)) + sizeof(initiator_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyCheckStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 finish_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_finish_timestamp(&has_bits);
          finish_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initiator_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_initiator_account_id(&has_bits);
          initiator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ready_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgReadyCheckStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyCheckStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_timestamp(), target);
  }

  // optional uint32 finish_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_finish_timestamp(), target);
  }

  // optional uint32 initiator_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initiator_account_id(), target);
  }

  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ready_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ready_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyCheckStatus)
  return target;
}

size_t CMsgReadyCheckStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyCheckStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgReadyCheckStatus.ReadyMember ready_members = 4;
  total_size += 1UL * this->_internal_ready_members_size();
  for (const auto& msg : this->ready_members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_timestamp());
    }

    // optional uint32 finish_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_finish_timestamp());
    }

    // optional uint32 initiator_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initiator_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReadyCheckStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgReadyCheckStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyCheckStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgReadyCheckStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgReadyCheckStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgReadyCheckStatus)
    MergeFrom(*source);
  }
}

void CMsgReadyCheckStatus::MergeFrom(const CMsgReadyCheckStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyCheckStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ready_members_.MergeFrom(from.ready_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      finish_timestamp_ = from.finish_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      initiator_account_id_ = from.initiator_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyCheckStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgReadyCheckStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyCheckStatus::CopyFrom(const CMsgReadyCheckStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyCheckStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyCheckStatus::IsInitialized() const {
  return true;
}

void CMsgReadyCheckStatus::InternalSwap(CMsgReadyCheckStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ready_members_.InternalSwap(&other->ready_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus, initiator_account_id_)
      + sizeof(CMsgReadyCheckStatus::initiator_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyCheckStatus, start_timestamp_)>(
          reinterpret_cast<char*>(&start_timestamp_),
          reinterpret_cast<char*>(&other->start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyCheckStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyReadyCheckRequest::_Internal {
 public:
};

CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckRequest)
}
CMsgPartyReadyCheckRequest::CMsgPartyReadyCheckRequest(const CMsgPartyReadyCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckRequest)
}

void CMsgPartyReadyCheckRequest::SharedCtor() {
}

CMsgPartyReadyCheckRequest::~CMsgPartyReadyCheckRequest() {
  // @@protoc_insertion_point(destructor:CMsgPartyReadyCheckRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyReadyCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPartyReadyCheckRequest::ArenaDtor(void* object) {
  CMsgPartyReadyCheckRequest* _this = reinterpret_cast< CMsgPartyReadyCheckRequest* >(object);
  (void)_this;
}
void CMsgPartyReadyCheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyReadyCheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyReadyCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyReadyCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyReadyCheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyReadyCheckRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyReadyCheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyReadyCheckRequest)
  return target;
}

size_t CMsgPartyReadyCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyReadyCheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyReadyCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyReadyCheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyReadyCheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyReadyCheckRequest)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckRequest::MergeFrom(const CMsgPartyReadyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyReadyCheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPartyReadyCheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyReadyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckRequest::CopyFrom(const CMsgPartyReadyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyReadyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckRequest::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckRequest::InternalSwap(CMsgPartyReadyCheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyReadyCheckResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyReadyCheckResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckResponse)
}
CMsgPartyReadyCheckResponse::CMsgPartyReadyCheckResponse(const CMsgPartyReadyCheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckResponse)
}

void CMsgPartyReadyCheckResponse::SharedCtor() {
result_ = 0;
}

CMsgPartyReadyCheckResponse::~CMsgPartyReadyCheckResponse() {
  // @@protoc_insertion_point(destructor:CMsgPartyReadyCheckResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyReadyCheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPartyReadyCheckResponse::ArenaDtor(void* object) {
  CMsgPartyReadyCheckResponse* _this = reinterpret_cast< CMsgPartyReadyCheckResponse* >(object);
  (void)_this;
}
void CMsgPartyReadyCheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyReadyCheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyReadyCheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyReadyCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyReadyCheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckRequestResult_IsValid(val))) {
            _internal_set_result(static_cast<::EReadyCheckRequestResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyReadyCheckResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyReadyCheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyReadyCheckResponse)
  return target;
}

size_t CMsgPartyReadyCheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyReadyCheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EReadyCheckRequestResult result = 1 [default = k_EReadyCheckRequestResult_Success];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyReadyCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyReadyCheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyReadyCheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyReadyCheckResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckResponse::MergeFrom(const CMsgPartyReadyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyReadyCheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgPartyReadyCheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyReadyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckResponse::CopyFrom(const CMsgPartyReadyCheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyReadyCheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckResponse::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckResponse::InternalSwap(CMsgPartyReadyCheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyReadyCheckAcknowledge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyReadyCheckAcknowledge>()._has_bits_);
  static void set_has_ready_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyReadyCheckAcknowledge)
}
CMsgPartyReadyCheckAcknowledge::CMsgPartyReadyCheckAcknowledge(const CMsgPartyReadyCheckAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ready_status_ = from.ready_status_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyReadyCheckAcknowledge)
}

void CMsgPartyReadyCheckAcknowledge::SharedCtor() {
ready_status_ = 0;
}

CMsgPartyReadyCheckAcknowledge::~CMsgPartyReadyCheckAcknowledge() {
  // @@protoc_insertion_point(destructor:CMsgPartyReadyCheckAcknowledge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyReadyCheckAcknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPartyReadyCheckAcknowledge::ArenaDtor(void* object) {
  CMsgPartyReadyCheckAcknowledge* _this = reinterpret_cast< CMsgPartyReadyCheckAcknowledge* >(object);
  (void)_this;
}
void CMsgPartyReadyCheckAcknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyReadyCheckAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyReadyCheckAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyReadyCheckAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyReadyCheckAcknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EReadyCheckStatus_IsValid(val))) {
            _internal_set_ready_status(static_cast<::EReadyCheckStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyReadyCheckAcknowledge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyReadyCheckAcknowledge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ready_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyReadyCheckAcknowledge)
  return target;
}

size_t CMsgPartyReadyCheckAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyReadyCheckAcknowledge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EReadyCheckStatus ready_status = 1 [default = k_EReadyCheckStatus_Unknown];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ready_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyReadyCheckAcknowledge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyReadyCheckAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyReadyCheckAcknowledge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyReadyCheckAcknowledge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyReadyCheckAcknowledge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyReadyCheckAcknowledge)
    MergeFrom(*source);
  }
}

void CMsgPartyReadyCheckAcknowledge::MergeFrom(const CMsgPartyReadyCheckAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyReadyCheckAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ready_status()) {
    _internal_set_ready_status(from._internal_ready_status());
  }
}

void CMsgPartyReadyCheckAcknowledge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyReadyCheckAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyReadyCheckAcknowledge::CopyFrom(const CMsgPartyReadyCheckAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyReadyCheckAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyReadyCheckAcknowledge::IsInitialized() const {
  return true;
}

void CMsgPartyReadyCheckAcknowledge::InternalSwap(CMsgPartyReadyCheckAcknowledge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ready_status_, other->ready_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyReadyCheckAcknowledge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventGameDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventGameDetails>()._has_bits_);
  static void set_has_kv_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventGameDetails)
}
CMsgLobbyEventGameDetails::CMsgLobbyEventGameDetails(const CMsgLobbyEventGameDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kv_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kv_data()) {
    kv_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kv_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventGameDetails)
}

void CMsgLobbyEventGameDetails::SharedCtor() {
kv_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgLobbyEventGameDetails::~CMsgLobbyEventGameDetails() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventGameDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventGameDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  kv_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyEventGameDetails::ArenaDtor(void* object) {
  CMsgLobbyEventGameDetails* _this = reinterpret_cast< CMsgLobbyEventGameDetails* >(object);
  (void)_this;
}
void CMsgLobbyEventGameDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventGameDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventGameDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    kv_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventGameDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes kv_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_kv_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventGameDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventGameDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes kv_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_kv_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventGameDetails)
  return target;
}

size_t CMsgLobbyEventGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventGameDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes kv_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kv_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventGameDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventGameDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventGameDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventGameDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventGameDetails)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventGameDetails::MergeFrom(const CMsgLobbyEventGameDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv_data()) {
    _internal_set_kv_data(from._internal_kv_data());
  }
}

void CMsgLobbyEventGameDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventGameDetails::CopyFrom(const CMsgLobbyEventGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventGameDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyEventGameDetails::InternalSwap(CMsgLobbyEventGameDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  kv_data_.Swap(&other->kv_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventGameDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchMatchmakingStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchMatchmakingStats>()._has_bits_);
  static void set_has_average_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maximum_queue_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behavior_score_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchMatchmakingStats)
}
CMsgMatchMatchmakingStats::CMsgMatchMatchmakingStats(const CMsgMatchMatchmakingStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_queue_time_, &from.average_queue_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchMatchmakingStats)
}

void CMsgMatchMatchmakingStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&average_queue_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&behavior_score_variance_) -
    reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
}

CMsgMatchMatchmakingStats::~CMsgMatchMatchmakingStats() {
  // @@protoc_insertion_point(destructor:CMsgMatchMatchmakingStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchMatchmakingStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchMatchmakingStats::ArenaDtor(void* object) {
  CMsgMatchMatchmakingStats* _this = reinterpret_cast< CMsgMatchMatchmakingStats* >(object);
  (void)_this;
}
void CMsgMatchMatchmakingStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchMatchmakingStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchMatchmakingStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchMatchmakingStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&average_queue_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&behavior_score_variance_) -
        reinterpret_cast<char*>(&average_queue_time_)) + sizeof(behavior_score_variance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchMatchmakingStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 average_queue_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_average_queue_time(&has_bits);
          average_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maximum_queue_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maximum_queue_time(&has_bits);
          maximum_queue_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchBehaviorScoreVariance_IsValid(val))) {
            _internal_set_behavior_score_variance(static_cast<::EMatchBehaviorScoreVariance>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchMatchmakingStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchMatchmakingStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 average_queue_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_queue_time(), target);
  }

  // optional uint32 maximum_queue_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maximum_queue_time(), target);
  }

  // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_behavior_score_variance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchMatchmakingStats)
  return target;
}

size_t CMsgMatchMatchmakingStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchMatchmakingStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 average_queue_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_queue_time());
    }

    // optional uint32 maximum_queue_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maximum_queue_time());
    }

    // optional .EMatchBehaviorScoreVariance behavior_score_variance = 3 [default = k_EMatchBehaviorScoreVariance_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior_score_variance());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchMatchmakingStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchMatchmakingStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchMatchmakingStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchMatchmakingStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchMatchmakingStats)
    MergeFrom(*source);
  }
}

void CMsgMatchMatchmakingStats::MergeFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchMatchmakingStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      average_queue_time_ = from.average_queue_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      maximum_queue_time_ = from.maximum_queue_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      behavior_score_variance_ = from.behavior_score_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchMatchmakingStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchMatchmakingStats::CopyFrom(const CMsgMatchMatchmakingStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchMatchmakingStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchMatchmakingStats::IsInitialized() const {
  return true;
}

void CMsgMatchMatchmakingStats::InternalSwap(CMsgMatchMatchmakingStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, behavior_score_variance_)
      + sizeof(CMsgMatchMatchmakingStats::behavior_score_variance_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchMatchmakingStats, average_queue_time_)>(
          reinterpret_cast<char*>(&average_queue_time_),
          reinterpret_cast<char*>(&other->average_queue_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchMatchmakingStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMvpData_MvpDatum_MvpAccolade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMvpData_MvpDatum_MvpAccolade>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detail_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMvpData.MvpDatum.MvpAccolade)
}
CMvpData_MvpDatum_MvpAccolade::CMvpData_MvpDatum_MvpAccolade(const CMvpData_MvpDatum_MvpAccolade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&detail_value_, &from.detail_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&detail_value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMvpData.MvpDatum.MvpAccolade)
}

void CMvpData_MvpDatum_MvpAccolade::SharedCtor() {
detail_value_ = 0;
type_ = 1;
}

CMvpData_MvpDatum_MvpAccolade::~CMvpData_MvpDatum_MvpAccolade() {
  // @@protoc_insertion_point(destructor:CMvpData.MvpDatum.MvpAccolade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMvpData_MvpDatum_MvpAccolade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMvpData_MvpDatum_MvpAccolade::ArenaDtor(void* object) {
  CMvpData_MvpDatum_MvpAccolade* _this = reinterpret_cast< CMvpData_MvpDatum_MvpAccolade* >(object);
  (void)_this;
}
void CMvpData_MvpDatum_MvpAccolade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMvpData_MvpDatum_MvpAccolade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMvpData_MvpDatum_MvpAccolade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData.MvpDatum.MvpAccolade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    detail_value_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData_MvpDatum_MvpAccolade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType_IsValid(val))) {
            _internal_set_type(static_cast<::CMvpData_MvpDatum_MvpAccolade_MvpAccoladeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float detail_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_detail_value(&has_bits);
          detail_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMvpData_MvpDatum_MvpAccolade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData.MvpDatum.MvpAccolade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional float detail_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_detail_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData.MvpDatum.MvpAccolade)
  return target;
}

size_t CMvpData_MvpDatum_MvpAccolade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData.MvpDatum.MvpAccolade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float detail_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .CMvpData.MvpDatum.MvpAccolade.MvpAccoladeType type = 1 [default = kills];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMvpData_MvpDatum_MvpAccolade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMvpData.MvpDatum.MvpAccolade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMvpData_MvpDatum_MvpAccolade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMvpData_MvpDatum_MvpAccolade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMvpData.MvpDatum.MvpAccolade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMvpData.MvpDatum.MvpAccolade)
    MergeFrom(*source);
  }
}

void CMvpData_MvpDatum_MvpAccolade::MergeFrom(const CMvpData_MvpDatum_MvpAccolade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMvpData.MvpDatum.MvpAccolade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      detail_value_ = from.detail_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMvpData_MvpDatum_MvpAccolade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMvpData.MvpDatum.MvpAccolade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMvpData_MvpDatum_MvpAccolade::CopyFrom(const CMvpData_MvpDatum_MvpAccolade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData.MvpDatum.MvpAccolade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData_MvpDatum_MvpAccolade::IsInitialized() const {
  return true;
}

void CMvpData_MvpDatum_MvpAccolade::InternalSwap(CMvpData_MvpDatum_MvpAccolade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(detail_value_, other->detail_value_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData_MvpDatum_MvpAccolade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMvpData_MvpDatum::_Internal {
 public:
  using HasBits = decltype(std::declval<CMvpData_MvpDatum>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMvpData_MvpDatum::CMvpData_MvpDatum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accolades_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMvpData.MvpDatum)
}
CMvpData_MvpDatum::CMvpData_MvpDatum(const CMvpData_MvpDatum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      accolades_(from.accolades_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMvpData.MvpDatum)
}

void CMvpData_MvpDatum::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(account_id_));
}

CMvpData_MvpDatum::~CMvpData_MvpDatum() {
  // @@protoc_insertion_point(destructor:CMvpData.MvpDatum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMvpData_MvpDatum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMvpData_MvpDatum::ArenaDtor(void* object) {
  CMvpData_MvpDatum* _this = reinterpret_cast< CMvpData_MvpDatum* >(object);
  (void)_this;
}
void CMvpData_MvpDatum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMvpData_MvpDatum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMvpData_MvpDatum::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData.MvpDatum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accolades_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData_MvpDatum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accolades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMvpData_MvpDatum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData.MvpDatum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accolades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_accolades(i), target, stream);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData.MvpDatum)
  return target;
}

size_t CMvpData_MvpDatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData.MvpDatum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum.MvpAccolade accolades = 2;
  total_size += 1UL * this->_internal_accolades_size();
  for (const auto& msg : this->accolades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMvpData_MvpDatum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMvpData.MvpDatum)
  GOOGLE_DCHECK_NE(&from, this);
  const CMvpData_MvpDatum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMvpData_MvpDatum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMvpData.MvpDatum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMvpData.MvpDatum)
    MergeFrom(*source);
  }
}

void CMvpData_MvpDatum::MergeFrom(const CMvpData_MvpDatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMvpData.MvpDatum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accolades_.MergeFrom(from.accolades_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMvpData_MvpDatum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMvpData.MvpDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMvpData_MvpDatum::CopyFrom(const CMvpData_MvpDatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData.MvpDatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData_MvpDatum::IsInitialized() const {
  return true;
}

void CMvpData_MvpDatum::InternalSwap(CMvpData_MvpDatum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  accolades_.InternalSwap(&other->accolades_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMvpData_MvpDatum, account_id_)
      + sizeof(CMvpData_MvpDatum::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMvpData_MvpDatum, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData_MvpDatum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMvpData::_Internal {
 public:
};

CMvpData::CMvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mvps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMvpData)
}
CMvpData::CMvpData(const CMvpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mvps_(from.mvps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMvpData)
}

void CMvpData::SharedCtor() {
}

CMvpData::~CMvpData() {
  // @@protoc_insertion_point(destructor:CMvpData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMvpData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMvpData::ArenaDtor(void* object) {
  CMvpData* _this = reinterpret_cast< CMvpData* >(object);
  (void)_this;
}
void CMvpData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMvpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMvpData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMvpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMvpData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMvpData.MvpDatum mvps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mvps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMvpData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMvpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum mvps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mvps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mvps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMvpData)
  return target;
}

size_t CMvpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMvpData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMvpData.MvpDatum mvps = 1;
  total_size += 1UL * this->_internal_mvps_size();
  for (const auto& msg : this->mvps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMvpData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMvpData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMvpData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMvpData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMvpData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMvpData)
    MergeFrom(*source);
  }
}

void CMvpData::MergeFrom(const CMvpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMvpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvps_.MergeFrom(from.mvps_);
}

void CMvpData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMvpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMvpData::CopyFrom(const CMvpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMvpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMvpData::IsInitialized() const {
  return true;
}

void CMvpData::InternalSwap(CMvpData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mvps_.InternalSwap(&other->mvps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMvpData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSODOTAPartyMember* Arena::CreateMaybeMessage< ::CSODOTAPartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAParty* Arena::CreateMaybeMessage< ::CSODOTAParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAPartyInvite_PartyMember* Arena::CreateMaybeMessage< ::CSODOTAPartyInvite_PartyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyInvite_PartyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAPartyInvite* Arena::CreateMaybeMessage< ::CSODOTAPartyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPartyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyInvite_LobbyMember* Arena::CreateMaybeMessage< ::CSODOTALobbyInvite_LobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyInvite_LobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyInvite* Arena::CreateMaybeMessage< ::CSODOTALobbyInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverState* Arena::CreateMaybeMessage< ::CMsgLeaverState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyCoachFriendRequest* Arena::CreateMaybeMessage< ::CMsgLobbyCoachFriendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyCoachFriendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobbyMember* Arena::CreateMaybeMessage< ::CSODOTALobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTeamDetails* Arena::CreateMaybeMessage< ::CLobbyTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyGuildDetails* Arena::CreateMaybeMessage< ::CLobbyGuildDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyGuildDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage< ::CLobbyTimedRewardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyTimedRewardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyBroadcastChannelInfo* Arena::CreateMaybeMessage< ::CLobbyBroadcastChannelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyBroadcastChannelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CLobbyGuildChallenge* Arena::CreateMaybeMessage< ::CLobbyGuildChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CLobbyGuildChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobby_CExtraMsg* Arena::CreateMaybeMessage< ::CSODOTALobby_CExtraMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobby_CExtraMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTALobby* Arena::CreateMaybeMessage< ::CSODOTALobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTALobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlaytestDetails* Arena::CreateMaybeMessage< ::CMsgLobbyPlaytestDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlaytestDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyCheckStatus_ReadyMember* Arena::CreateMaybeMessage< ::CMsgReadyCheckStatus_ReadyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyCheckStatus_ReadyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyCheckStatus* Arena::CreateMaybeMessage< ::CMsgReadyCheckStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyCheckStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckRequest* Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckResponse* Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyReadyCheckAcknowledge* Arena::CreateMaybeMessage< ::CMsgPartyReadyCheckAcknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyReadyCheckAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventGameDetails* Arena::CreateMaybeMessage< ::CMsgLobbyEventGameDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventGameDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchMatchmakingStats* Arena::CreateMaybeMessage< ::CMsgMatchMatchmakingStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchMatchmakingStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData_MvpDatum_MvpAccolade* Arena::CreateMaybeMessage< ::CMvpData_MvpDatum_MvpAccolade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData_MvpDatum_MvpAccolade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData_MvpDatum* Arena::CreateMaybeMessage< ::CMvpData_MvpDatum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData_MvpDatum >(arena);
}
template<> PROTOBUF_NOINLINE ::CMvpData* Arena::CreateMaybeMessage< ::CMvpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMvpData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
