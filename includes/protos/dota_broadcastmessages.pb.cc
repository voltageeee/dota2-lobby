// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#include "dota_broadcastmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTABroadcastMsg::CDOTABroadcastMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(1)
{}
struct CDOTABroadcastMsgDefaultTypeInternal {
  constexpr CDOTABroadcastMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTABroadcastMsgDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTABroadcastMsgDefaultTypeInternal _CDOTABroadcastMsg_default_instance_;
constexpr CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal {
  constexpr CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
constexpr CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u){}
struct CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal {
  constexpr CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyReply_CLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
constexpr CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(PROTOBUF_ULONGLONG(0))
  , tournament_id_(0u)
  , tournament_game_id_(0u)
  , requires_pass_key_(false)
  , leader_account_id_(0u)
  , game_mode_(0u)
  , players_(0u){}
struct CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal {
  constexpr CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal() {}
  union {
    CDOTABroadcastMsg_LANLobbyReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fbroadcastmessages_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fbroadcastmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fbroadcastmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, type_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg, msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, members_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, name_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcastMsg_LANLobbyReply, players_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  0,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CDOTABroadcastMsg)},
  { 9, -1, sizeof(::CDOTABroadcastMsg_LANLobbyRequest)},
  { 14, 21, sizeof(::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember)},
  { 23, 37, sizeof(::CDOTABroadcastMsg_LANLobbyReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTABroadcastMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTABroadcastMsg_LANLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTABroadcastMsg_LANLobbyReply_default_instance_),
};

const char descriptor_table_protodef_dota_5fbroadcastmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034dota_broadcastmessages.proto\"`\n\021CDOTAB"
  "roadcastMsg\022>\n\004type\030\001 \002(\0162\027.EDotaBroadca"
  "stMessages:\027DOTA_BM_LANLobbyRequest\022\013\n\003m"
  "sg\030\002 \001(\014\"#\n!CDOTABroadcastMsg_LANLobbyRe"
  "quest\"\301\002\n\037CDOTABroadcastMsg_LANLobbyRepl"
  "y\022\n\n\002id\030\001 \001(\004\022\025\n\rtournament_id\030\002 \001(\r\022\032\n\022"
  "tournament_game_id\030\003 \001(\r\022>\n\007members\030\004 \003("
  "\0132-.CDOTABroadcastMsg_LANLobbyReply.CLob"
  "byMember\022\031\n\021requires_pass_key\030\005 \001(\010\022\031\n\021l"
  "eader_account_id\030\006 \001(\r\022\021\n\tgame_mode\030\007 \001("
  "\r\022\014\n\004name\030\010 \001(\t\022\017\n\007players\030\t \001(\r\0327\n\014CLob"
  "byMember\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_n"
  "ame\030\002 \001(\t*P\n\026EDotaBroadcastMessages\022\033\n\027D"
  "OTA_BM_LANLobbyRequest\020\001\022\031\n\025DOTA_BM_LANL"
  "obbyReply\020\002B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fbroadcastmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fbroadcastmessages_2eproto = {
  false, false, 578, descriptor_table_protodef_dota_5fbroadcastmessages_2eproto, "dota_broadcastmessages.proto", 
  &descriptor_table_dota_5fbroadcastmessages_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_dota_5fbroadcastmessages_2eproto::offsets,
  file_level_metadata_dota_5fbroadcastmessages_2eproto, file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto, file_level_service_descriptors_dota_5fbroadcastmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fbroadcastmessages_2eproto);
  return descriptor_table_dota_5fbroadcastmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fbroadcastmessages_2eproto(&descriptor_table_dota_5fbroadcastmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaBroadcastMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fbroadcastmessages_2eproto);
  return file_level_enum_descriptors_dota_5fbroadcastmessages_2eproto[0];
}
bool EDotaBroadcastMessages_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTABroadcastMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

CDOTABroadcastMsg::CDOTABroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg)
}
CDOTABroadcastMsg::CDOTABroadcastMsg(const CDOTABroadcastMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg)
}

void CDOTABroadcastMsg::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 1;
}

CDOTABroadcastMsg::~CDOTABroadcastMsg() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTABroadcastMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg::ArenaDtor(void* object) {
  CDOTABroadcastMsg* _this = reinterpret_cast< CDOTABroadcastMsg* >(object);
  (void)_this;
}
void CDOTABroadcastMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTABroadcastMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTABroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmpty();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDotaBroadcastMessages_IsValid(val))) {
            _internal_set_type(static_cast<::EDotaBroadcastMessages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTABroadcastMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg)
  return target;
}

size_t CDOTABroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg)
  size_t total_size = 0;

  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes msg = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTABroadcastMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTABroadcastMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTABroadcastMsg)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg::MergeFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg::CopyFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTABroadcastMsg::InternalSwap(CDOTABroadcastMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTABroadcastMsg_LANLobbyRequest::_Internal {
 public:
};

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyRequest)
}
CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyRequest)
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedCtor() {
}

CDOTABroadcastMsg_LANLobbyRequest::~CDOTABroadcastMsg_LANLobbyRequest() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTABroadcastMsg_LANLobbyRequest::ArenaDtor(void* object) {
  CDOTABroadcastMsg_LANLobbyRequest* _this = reinterpret_cast< CDOTABroadcastMsg_LANLobbyRequest* >(object);
  (void)_this;
}
void CDOTABroadcastMsg_LANLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTABroadcastMsg_LANLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTABroadcastMsg_LANLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg_LANLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg_LANLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTABroadcastMsg_LANLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyRequest)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg_LANLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTABroadcastMsg_LANLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTABroadcastMsg_LANLobbyRequest)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyRequest::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyRequest::InternalSwap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}
CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_ = 0u;
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ArenaDtor(void* object) {
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* _this = reinterpret_cast< CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* >(object);
  (void)_this;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    player_name_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTABroadcastMsg_LANLobbyReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcastMsg_LANLobbyReply>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcastMsg_LANLobbyReply)
}
CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&id_)) + sizeof(players_));
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcastMsg_LANLobbyReply)
}

void CDOTABroadcastMsg_LANLobbyReply::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&id_)) + sizeof(players_));
}

CDOTABroadcastMsg_LANLobbyReply::~CDOTABroadcastMsg_LANLobbyReply() {
  // @@protoc_insertion_point(destructor:CDOTABroadcastMsg_LANLobbyReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTABroadcastMsg_LANLobbyReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply::ArenaDtor(void* object) {
  CDOTABroadcastMsg_LANLobbyReply* _this = reinterpret_cast< CDOTABroadcastMsg_LANLobbyReply* >(object);
  (void)_this;
}
void CDOTABroadcastMsg_LANLobbyReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTABroadcastMsg_LANLobbyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTABroadcastMsg_LANLobbyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcastMsg_LANLobbyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_) -
        reinterpret_cast<char*>(&id_)) + sizeof(players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcastMsg_LANLobbyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tournament_game_id(&has_bits);
          tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_leader_account_id(&has_bits);
          leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTABroadcastMsg_LANLobbyReply.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTABroadcastMsg_LANLobbyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcastMsg_LANLobbyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tournament_game_id(), target);
  }

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_members(i), target, stream);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_leader_account_id(), target);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_mode(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcastMsg_LANLobbyReply.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcastMsg_LANLobbyReply)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcastMsg_LANLobbyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 tournament_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_game_id());
    }

    // optional bool requires_pass_key = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leader_account_id());
    }

    // optional uint32 game_mode = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 players = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTABroadcastMsg_LANLobbyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTABroadcastMsg_LANLobbyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTABroadcastMsg_LANLobbyReply)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_ = from.players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply::InternalSwap(CDOTABroadcastMsg_LANLobbyReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, players_)
      + sizeof(CDOTABroadcastMsg_LANLobbyReply::players_)
      - PROTOBUF_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcastMsg_LANLobbyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg* Arena::CreateMaybeMessage< ::CDOTABroadcastMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyRequest* Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcastMsg_LANLobbyReply* Arena::CreateMaybeMessage< ::CDOTABroadcastMsg_LANLobbyReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcastMsg_LANLobbyReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
