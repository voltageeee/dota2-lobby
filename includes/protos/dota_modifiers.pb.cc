// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_modifiers.proto

#include "dota_modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : portal_loop_appear_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , portal_loop_disappear_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hero_loop_appear_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hero_loop_disappear_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , illusion_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_ids_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lua_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , v_start_(nullptr)
  , v_end_(nullptr)
  , parent_(0)
  , index_(0)
  , serial_num_(0)
  , modifier_class_(0)
  , ability_level_(0)
  , stack_count_(0)
  , creation_time_(0)
  , caster_(0)
  , ability_(0)
  , armor_(0)
  , fade_time_(0)
  , channel_time_(0)
  , movement_speed_(0)
  , subtle_(false)
  , aura_(false)
  , active_(false)
  , activity_(0)
  , damage_(0)
  , range_(0)
  , dd_modifier_index_(0)
  , dd_ability_id_(0)
  , attack_speed_(0)
  , aura_owner_(0)
  , bonus_all_stats_(0)
  , bonus_health_(0)
  , bonus_mana_(0)
  , entry_type_(1)

  , duration_(-1){}
struct CDOTAModifierBuffTableEntryDefaultTypeInternal {
  constexpr CDOTAModifierBuffTableEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAModifierBuffTableEntryDefaultTypeInternal() {}
  union {
    CDOTAModifierBuffTableEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAModifierBuffTableEntryDefaultTypeInternal _CDOTAModifierBuffTableEntry_default_instance_;
constexpr CDOTALuaModifierEntry::CDOTALuaModifierEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modifier_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , modifier_type_(0){}
struct CDOTALuaModifierEntryDefaultTypeInternal {
  constexpr CDOTALuaModifierEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTALuaModifierEntryDefaultTypeInternal() {}
  union {
    CDOTALuaModifierEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTALuaModifierEntryDefaultTypeInternal _CDOTALuaModifierEntry_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fmodifiers_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fmodifiers_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fmodifiers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fmodifiers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, entry_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, parent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, serial_num_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, modifier_class_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, ability_level_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, stack_count_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, creation_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, caster_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, ability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, armor_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, fade_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, subtle_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, channel_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, v_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, v_end_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, portal_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, portal_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, hero_loop_appear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, hero_loop_disappear_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, aura_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, activity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, damage_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, range_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, dd_modifier_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, dd_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, illusion_label_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, player_ids_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, lua_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, attack_speed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, aura_owner_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, bonus_all_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, bonus_health_),
  PROTOBUF_FIELD_OFFSET(::CDOTAModifierBuffTableEntry, bonus_mana_),
  35,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  36,
  16,
  17,
  18,
  19,
  22,
  20,
  7,
  8,
  0,
  1,
  2,
  3,
  21,
  23,
  25,
  26,
  27,
  28,
  29,
  4,
  24,
  5,
  6,
  30,
  31,
  32,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, modifier_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTALuaModifierEntry, modifier_filename_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 42, sizeof(::CDOTAModifierBuffTableEntry)},
  { 79, 86, sizeof(::CDOTALuaModifierEntry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAModifierBuffTableEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTALuaModifierEntry_default_instance_),
};

const char descriptor_table_protodef_dota_5fmodifiers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024dota_modifiers.proto\032\026networkbasetypes"
  ".proto\"\352\006\n\033CDOTAModifierBuffTableEntry\022N"
  "\n\nentry_type\030\001 \002(\0162\031.DOTA_MODIFIER_ENTRY"
  "_TYPE:\037DOTA_MODIFIER_ENTRY_TYPE_ACTIVE\022\016"
  "\n\006parent\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\022\n\nserial_"
  "num\030\004 \002(\005\022\026\n\016modifier_class\030\005 \001(\005\022\025\n\rabi"
  "lity_level\030\006 \001(\005\022\023\n\013stack_count\030\007 \001(\005\022\025\n"
  "\rcreation_time\030\010 \001(\002\022\024\n\010duration\030\t \001(\002:\002"
  "-1\022\016\n\006caster\030\n \001(\005\022\017\n\007ability\030\013 \001(\005\022\r\n\005a"
  "rmor\030\014 \001(\005\022\021\n\tfade_time\030\r \001(\002\022\016\n\006subtle\030"
  "\016 \001(\010\022\024\n\014channel_time\030\017 \001(\002\022\034\n\007v_start\030\020"
  " \001(\0132\013.CMsgVector\022\032\n\005v_end\030\021 \001(\0132\013.CMsgV"
  "ector\022\032\n\022portal_loop_appear\030\022 \001(\t\022\035\n\025por"
  "tal_loop_disappear\030\023 \001(\t\022\030\n\020hero_loop_ap"
  "pear\030\024 \001(\t\022\033\n\023hero_loop_disappear\030\025 \001(\t\022"
  "\026\n\016movement_speed\030\026 \001(\005\022\014\n\004aura\030\027 \001(\010\022\020\n"
  "\010activity\030\030 \001(\005\022\016\n\006damage\030\031 \001(\005\022\r\n\005range"
  "\030\032 \001(\005\022\031\n\021dd_modifier_index\030\033 \001(\005\022\025\n\rdd_"
  "ability_id\030\034 \001(\005\022\026\n\016illusion_label\030\035 \001(\t"
  "\022\016\n\006active\030\036 \001(\010\022\022\n\nplayer_ids\030\037 \001(\t\022\020\n\010"
  "lua_name\030  \001(\t\022\024\n\014attack_speed\030! \001(\005\022\022\n\n"
  "aura_owner\030\" \001(\005\022\027\n\017bonus_all_stats\030# \001("
  "\005\022\024\n\014bonus_health\030$ \001(\005\022\022\n\nbonus_mana\030% "
  "\001(\005\"I\n\025CDOTALuaModifierEntry\022\025\n\rmodifier"
  "_type\030\001 \002(\005\022\031\n\021modifier_filename\030\002 \002(\t*e"
  "\n\030DOTA_MODIFIER_ENTRY_TYPE\022#\n\037DOTA_MODIF"
  "IER_ENTRY_TYPE_ACTIVE\020\001\022$\n DOTA_MODIFIER"
  "_ENTRY_TYPE_REMOVED\020\002B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fmodifiers_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fmodifiers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fmodifiers_2eproto = {
  false, false, 1108, descriptor_table_protodef_dota_5fmodifiers_2eproto, "dota_modifiers.proto", 
  &descriptor_table_dota_5fmodifiers_2eproto_once, descriptor_table_dota_5fmodifiers_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_dota_5fmodifiers_2eproto::offsets,
  file_level_metadata_dota_5fmodifiers_2eproto, file_level_enum_descriptors_dota_5fmodifiers_2eproto, file_level_service_descriptors_dota_5fmodifiers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fmodifiers_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmodifiers_2eproto);
  return descriptor_table_dota_5fmodifiers_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fmodifiers_2eproto(&descriptor_table_dota_5fmodifiers_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_MODIFIER_ENTRY_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmodifiers_2eproto);
  return file_level_enum_descriptors_dota_5fmodifiers_2eproto[0];
}
bool DOTA_MODIFIER_ENTRY_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CDOTAModifierBuffTableEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAModifierBuffTableEntry>()._has_bits_);
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_serial_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_modifier_class(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_fade_time(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_subtle(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_channel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::CMsgVector& v_start(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_start(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgVector& v_end(const CDOTAModifierBuffTableEntry* msg);
  static void set_has_v_end(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_portal_loop_appear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_portal_loop_disappear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_loop_appear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_loop_disappear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_aura(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dd_modifier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_dd_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_illusion_label(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_player_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lua_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_attack_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_aura_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_bonus_all_stats(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_bonus_health(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_bonus_mana(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0x00000e00) ^ 0x00000e00)
       | ((has_bits[1] & 0x00000008) ^ 0x00000008)) != 0;
  }
};

const ::CMsgVector&
CDOTAModifierBuffTableEntry::_Internal::v_start(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->v_start_;
}
const ::CMsgVector&
CDOTAModifierBuffTableEntry::_Internal::v_end(const CDOTAModifierBuffTableEntry* msg) {
  return *msg->v_end_;
}
void CDOTAModifierBuffTableEntry::clear_v_start() {
  if (v_start_ != nullptr) v_start_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAModifierBuffTableEntry::clear_v_end() {
  if (v_end_ != nullptr) v_end_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAModifierBuffTableEntry)
}
CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(const CDOTAModifierBuffTableEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  portal_loop_appear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_portal_loop_appear()) {
    portal_loop_appear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_portal_loop_appear(), 
      GetArena());
  }
  portal_loop_disappear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_portal_loop_disappear()) {
    portal_loop_disappear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_portal_loop_disappear(), 
      GetArena());
  }
  hero_loop_appear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_loop_appear()) {
    hero_loop_appear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_loop_appear(), 
      GetArena());
  }
  hero_loop_disappear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero_loop_disappear()) {
    hero_loop_disappear_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero_loop_disappear(), 
      GetArena());
  }
  illusion_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_illusion_label()) {
    illusion_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_illusion_label(), 
      GetArena());
  }
  player_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_ids()) {
    player_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_ids(), 
      GetArena());
  }
  lua_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lua_name()) {
    lua_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lua_name(), 
      GetArena());
  }
  if (from._internal_has_v_start()) {
    v_start_ = new ::CMsgVector(*from.v_start_);
  } else {
    v_start_ = nullptr;
  }
  if (from._internal_has_v_end()) {
    v_end_ = new ::CMsgVector(*from.v_end_);
  } else {
    v_end_ = nullptr;
  }
  ::memcpy(&parent_, &from.parent_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CDOTAModifierBuffTableEntry)
}

void CDOTAModifierBuffTableEntry::SharedCtor() {
portal_loop_appear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
portal_loop_disappear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hero_loop_appear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hero_loop_disappear_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
illusion_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_ids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lua_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&v_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bonus_mana_) -
    reinterpret_cast<char*>(&v_start_)) + sizeof(bonus_mana_));
entry_type_ = 1;
duration_ = -1;
}

CDOTAModifierBuffTableEntry::~CDOTAModifierBuffTableEntry() {
  // @@protoc_insertion_point(destructor:CDOTAModifierBuffTableEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAModifierBuffTableEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  portal_loop_appear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  portal_loop_disappear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_loop_appear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_loop_disappear_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  illusion_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_ids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lua_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete v_start_;
  if (this != internal_default_instance()) delete v_end_;
}

void CDOTAModifierBuffTableEntry::ArenaDtor(void* object) {
  CDOTAModifierBuffTableEntry* _this = reinterpret_cast< CDOTAModifierBuffTableEntry* >(object);
  (void)_this;
}
void CDOTAModifierBuffTableEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAModifierBuffTableEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAModifierBuffTableEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAModifierBuffTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      portal_loop_appear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      portal_loop_disappear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      hero_loop_appear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hero_loop_disappear_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      illusion_label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      player_ids_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      lua_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(v_start_ != nullptr);
      v_start_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(v_end_ != nullptr);
    v_end_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&parent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_) -
        reinterpret_cast<char*>(&parent_)) + sizeof(creation_time_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&caster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aura_) -
        reinterpret_cast<char*>(&caster_)) + sizeof(aura_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&active_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aura_owner_) -
        reinterpret_cast<char*>(&active_)) + sizeof(aura_owner_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&bonus_all_stats_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bonus_mana_) -
        reinterpret_cast<char*>(&bonus_all_stats_)) + sizeof(bonus_mana_));
    entry_type_ = 1;
    duration_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAModifierBuffTableEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_MODIFIER_ENTRY_TYPE_IsValid(val))) {
            _internal_set_entry_type(static_cast<::DOTA_MODIFIER_ENTRY_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_parent(&_has_bits_);
          parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_index(&_has_bits_);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 serial_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_serial_num(&_has_bits_);
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 modifier_class = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_modifier_class(&_has_bits_);
          modifier_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ability_level(&_has_bits_);
          ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stack_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stack_count(&_has_bits_);
          stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float creation_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_creation_time(&_has_bits_);
          creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float duration = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_duration(&_has_bits_);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 caster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_caster(&_has_bits_);
          caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ability(&_has_bits_);
          ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 armor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_armor(&_has_bits_);
          armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fade_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_fade_time(&_has_bits_);
          fade_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool subtle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_subtle(&_has_bits_);
          subtle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float channel_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_channel_time(&_has_bits_);
          channel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector v_start = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector v_end = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_v_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string portal_loop_appear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_portal_loop_appear();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.portal_loop_appear");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string portal_loop_disappear = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_portal_loop_disappear();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.portal_loop_disappear");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_loop_appear = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_hero_loop_appear();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.hero_loop_appear");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero_loop_disappear = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_hero_loop_disappear();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.hero_loop_disappear");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 movement_speed = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_movement_speed(&_has_bits_);
          movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool aura = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_aura(&_has_bits_);
          aura_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 activity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_activity(&_has_bits_);
          activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_damage(&_has_bits_);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_range(&_has_bits_);
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dd_modifier_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_dd_modifier_index(&_has_bits_);
          dd_modifier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dd_ability_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_dd_ability_id(&_has_bits_);
          dd_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string illusion_label = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_illusion_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.illusion_label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_active(&_has_bits_);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_ids = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_player_ids();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.player_ids");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lua_name = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_lua_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAModifierBuffTableEntry.lua_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attack_speed = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attack_speed(&_has_bits_);
          attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aura_owner = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_aura_owner(&_has_bits_);
          aura_owner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bonus_all_stats = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bonus_all_stats(&_has_bits_);
          bonus_all_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bonus_health = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bonus_health(&_has_bits_);
          bonus_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bonus_mana = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bonus_mana(&_has_bits_);
          bonus_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAModifierBuffTableEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAModifierBuffTableEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_entry_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 parent = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent(), target);
  }

  // required int32 index = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // required int32 serial_num = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serial_num(), target);
  }

  // optional int32 modifier_class = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_modifier_class(), target);
  }

  // optional int32 ability_level = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ability_level(), target);
  }

  // optional int32 stack_count = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_stack_count(), target);
  }

  // optional float creation_time = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_creation_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float duration = 9 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 caster = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_caster(), target);
  }

  // optional int32 ability = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_ability(), target);
  }

  // optional int32 armor = 12;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_armor(), target);
  }

  // optional float fade_time = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_fade_time(), target);
  }

  // optional bool subtle = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_subtle(), target);
  }

  // optional float channel_time = 15;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_channel_time(), target);
  }

  // optional .CMsgVector v_start = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::v_start(this), target, stream);
  }

  // optional .CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::v_end(this), target, stream);
  }

  // optional string portal_loop_appear = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_portal_loop_appear().data(), static_cast<int>(this->_internal_portal_loop_appear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.portal_loop_appear");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_portal_loop_appear(), target);
  }

  // optional string portal_loop_disappear = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_portal_loop_disappear().data(), static_cast<int>(this->_internal_portal_loop_disappear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.portal_loop_disappear");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_portal_loop_disappear(), target);
  }

  // optional string hero_loop_appear = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_loop_appear().data(), static_cast<int>(this->_internal_hero_loop_appear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.hero_loop_appear");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_hero_loop_appear(), target);
  }

  // optional string hero_loop_disappear = 21;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_loop_disappear().data(), static_cast<int>(this->_internal_hero_loop_disappear().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.hero_loop_disappear");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_hero_loop_disappear(), target);
  }

  // optional int32 movement_speed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_movement_speed(), target);
  }

  // optional bool aura = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_aura(), target);
  }

  // optional int32 activity = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_activity(), target);
  }

  // optional int32 damage = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_damage(), target);
  }

  // optional int32 range = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_range(), target);
  }

  // optional int32 dd_modifier_index = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_dd_modifier_index(), target);
  }

  // optional int32 dd_ability_id = 28;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_dd_ability_id(), target);
  }

  // optional string illusion_label = 29;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_illusion_label().data(), static_cast<int>(this->_internal_illusion_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.illusion_label");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_illusion_label(), target);
  }

  // optional bool active = 30;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_active(), target);
  }

  // optional string player_ids = 31;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_ids().data(), static_cast<int>(this->_internal_player_ids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.player_ids");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_player_ids(), target);
  }

  // optional string lua_name = 32;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lua_name().data(), static_cast<int>(this->_internal_lua_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAModifierBuffTableEntry.lua_name");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_lua_name(), target);
  }

  // optional int32 attack_speed = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_attack_speed(), target);
  }

  // optional int32 aura_owner = 34;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_aura_owner(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 bonus_all_stats = 35;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_bonus_all_stats(), target);
  }

  // optional int32 bonus_health = 36;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_bonus_health(), target);
  }

  // optional int32 bonus_mana = 37;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_bonus_mana(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAModifierBuffTableEntry)
  return target;
}

size_t CDOTAModifierBuffTableEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if (_internal_has_parent()) {
    // required int32 parent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent());
  }

  if (_internal_has_index()) {
    // required int32 index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (_internal_has_serial_num()) {
    // required int32 serial_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serial_num());
  }

  if (_internal_has_entry_type()) {
    // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_entry_type());
  }

  return total_size;
}
size_t CDOTAModifierBuffTableEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAModifierBuffTableEntry)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0x00000e00) ^ 0x00000e00)
       | ((_has_bits_[1] & 0x00000008) ^ 0x00000008)) == 0) {  // All required fields are present.
    // required int32 parent = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent());

    // required int32 index = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());

    // required int32 serial_num = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serial_num());

    // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1 [default = DOTA_MODIFIER_ENTRY_TYPE_ACTIVE];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_entry_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string portal_loop_appear = 18;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_portal_loop_appear());
    }

    // optional string portal_loop_disappear = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_portal_loop_disappear());
    }

    // optional string hero_loop_appear = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_loop_appear());
    }

    // optional string hero_loop_disappear = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_loop_disappear());
    }

    // optional string illusion_label = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_illusion_label());
    }

    // optional string player_ids = 31;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_ids());
    }

    // optional string lua_name = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lua_name());
    }

    // optional .CMsgVector v_start = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *v_start_);
    }

  }
  // optional .CMsgVector v_end = 17;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *v_end_);
  }

  if (cached_has_bits & 0x0000f000u) {
    // optional int32 modifier_class = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_modifier_class());
    }

    // optional int32 ability_level = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_level());
    }

    // optional int32 stack_count = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stack_count());
    }

    // optional float creation_time = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 caster = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster());
    }

    // optional int32 ability = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability());
    }

    // optional int32 armor = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_armor());
    }

    // optional float fade_time = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float channel_time = 15;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional int32 movement_speed = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_movement_speed());
    }

    // optional bool subtle = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool aura = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool active = 30;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 activity = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_activity());
    }

    // optional int32 damage = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_damage());
    }

    // optional int32 range = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range());
    }

    // optional int32 dd_modifier_index = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dd_modifier_index());
    }

    // optional int32 dd_ability_id = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dd_ability_id());
    }

    // optional int32 attack_speed = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attack_speed());
    }

    // optional int32 aura_owner = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_aura_owner());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 bonus_all_stats = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bonus_all_stats());
    }

    // optional int32 bonus_health = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bonus_health());
    }

    // optional int32 bonus_mana = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bonus_mana());
    }

  }
  // optional float duration = 9 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAModifierBuffTableEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAModifierBuffTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAModifierBuffTableEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAModifierBuffTableEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAModifierBuffTableEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAModifierBuffTableEntry)
    MergeFrom(*source);
  }
}

void CDOTAModifierBuffTableEntry::MergeFrom(const CDOTAModifierBuffTableEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAModifierBuffTableEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_portal_loop_appear(from._internal_portal_loop_appear());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_portal_loop_disappear(from._internal_portal_loop_disappear());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_hero_loop_appear(from._internal_hero_loop_appear());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hero_loop_disappear(from._internal_hero_loop_disappear());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_illusion_label(from._internal_illusion_label());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_player_ids(from._internal_player_ids());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_lua_name(from._internal_lua_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_v_start()->::CMsgVector::MergeFrom(from._internal_v_start());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_v_end()->::CMsgVector::MergeFrom(from._internal_v_end());
    }
    if (cached_has_bits & 0x00000200u) {
      parent_ = from.parent_;
    }
    if (cached_has_bits & 0x00000400u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000800u) {
      serial_num_ = from.serial_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      modifier_class_ = from.modifier_class_;
    }
    if (cached_has_bits & 0x00002000u) {
      ability_level_ = from.ability_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      creation_time_ = from.creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      caster_ = from.caster_;
    }
    if (cached_has_bits & 0x00020000u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00040000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00080000u) {
      fade_time_ = from.fade_time_;
    }
    if (cached_has_bits & 0x00100000u) {
      channel_time_ = from.channel_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      movement_speed_ = from.movement_speed_;
    }
    if (cached_has_bits & 0x00400000u) {
      subtle_ = from.subtle_;
    }
    if (cached_has_bits & 0x00800000u) {
      aura_ = from.aura_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x02000000u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x04000000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x10000000u) {
      dd_modifier_index_ = from.dd_modifier_index_;
    }
    if (cached_has_bits & 0x20000000u) {
      dd_ability_id_ = from.dd_ability_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      attack_speed_ = from.attack_speed_;
    }
    if (cached_has_bits & 0x80000000u) {
      aura_owner_ = from.aura_owner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      bonus_all_stats_ = from.bonus_all_stats_;
    }
    if (cached_has_bits & 0x00000002u) {
      bonus_health_ = from.bonus_health_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_mana_ = from.bonus_mana_;
    }
    if (cached_has_bits & 0x00000008u) {
      entry_type_ = from.entry_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CDOTAModifierBuffTableEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAModifierBuffTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAModifierBuffTableEntry::CopyFrom(const CDOTAModifierBuffTableEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAModifierBuffTableEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAModifierBuffTableEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAModifierBuffTableEntry::InternalSwap(CDOTAModifierBuffTableEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  portal_loop_appear_.Swap(&other->portal_loop_appear_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  portal_loop_disappear_.Swap(&other->portal_loop_disappear_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hero_loop_appear_.Swap(&other->hero_loop_appear_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hero_loop_disappear_.Swap(&other->hero_loop_disappear_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  illusion_label_.Swap(&other->illusion_label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  player_ids_.Swap(&other->player_ids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lua_name_.Swap(&other->lua_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAModifierBuffTableEntry, bonus_mana_)
      + sizeof(CDOTAModifierBuffTableEntry::bonus_mana_)
      - PROTOBUF_FIELD_OFFSET(CDOTAModifierBuffTableEntry, v_start_)>(
          reinterpret_cast<char*>(&v_start_),
          reinterpret_cast<char*>(&other->v_start_));
  swap(entry_type_, other->entry_type_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAModifierBuffTableEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTALuaModifierEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTALuaModifierEntry>()._has_bits_);
  static void set_has_modifier_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_modifier_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CDOTALuaModifierEntry::CDOTALuaModifierEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTALuaModifierEntry)
}
CDOTALuaModifierEntry::CDOTALuaModifierEntry(const CDOTALuaModifierEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modifier_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modifier_filename()) {
    modifier_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_modifier_filename(), 
      GetArena());
  }
  modifier_type_ = from.modifier_type_;
  // @@protoc_insertion_point(copy_constructor:CDOTALuaModifierEntry)
}

void CDOTALuaModifierEntry::SharedCtor() {
modifier_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
modifier_type_ = 0;
}

CDOTALuaModifierEntry::~CDOTALuaModifierEntry() {
  // @@protoc_insertion_point(destructor:CDOTALuaModifierEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTALuaModifierEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modifier_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTALuaModifierEntry::ArenaDtor(void* object) {
  CDOTALuaModifierEntry* _this = reinterpret_cast< CDOTALuaModifierEntry* >(object);
  (void)_this;
}
void CDOTALuaModifierEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTALuaModifierEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTALuaModifierEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTALuaModifierEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    modifier_filename_.ClearNonDefaultToEmpty();
  }
  modifier_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTALuaModifierEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 modifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_modifier_type(&has_bits);
          modifier_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modifier_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_modifier_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTALuaModifierEntry.modifier_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTALuaModifierEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTALuaModifierEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 modifier_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modifier_type(), target);
  }

  // required string modifier_filename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modifier_filename().data(), static_cast<int>(this->_internal_modifier_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTALuaModifierEntry.modifier_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_modifier_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTALuaModifierEntry)
  return target;
}

size_t CDOTALuaModifierEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (_internal_has_modifier_filename()) {
    // required string modifier_filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifier_filename());
  }

  if (_internal_has_modifier_type()) {
    // required int32 modifier_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modifier_type());
  }

  return total_size;
}
size_t CDOTALuaModifierEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTALuaModifierEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string modifier_filename = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifier_filename());

    // required int32 modifier_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modifier_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTALuaModifierEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTALuaModifierEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALuaModifierEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTALuaModifierEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTALuaModifierEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTALuaModifierEntry)
    MergeFrom(*source);
  }
}

void CDOTALuaModifierEntry::MergeFrom(const CDOTALuaModifierEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTALuaModifierEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modifier_filename(from._internal_modifier_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      modifier_type_ = from.modifier_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALuaModifierEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTALuaModifierEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALuaModifierEntry::CopyFrom(const CDOTALuaModifierEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTALuaModifierEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALuaModifierEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTALuaModifierEntry::InternalSwap(CDOTALuaModifierEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modifier_filename_.Swap(&other->modifier_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(modifier_type_, other->modifier_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTALuaModifierEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAModifierBuffTableEntry* Arena::CreateMaybeMessage< ::CDOTAModifierBuffTableEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAModifierBuffTableEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTALuaModifierEntry* Arena::CreateMaybeMessage< ::CDOTALuaModifierEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTALuaModifierEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
