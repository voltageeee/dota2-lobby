// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenetworkingui.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworkingui_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworkingui_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages.pb.h"
#include "steamdatagram_messages_sdr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamenetworkingui_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamenetworkingui_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamenetworkingui_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fgamenetworkingui_2eproto_metadata_getter(int index);
class CGameNetworkingUI_ConnectionState;
struct CGameNetworkingUI_ConnectionStateDefaultTypeInternal;
extern CGameNetworkingUI_ConnectionStateDefaultTypeInternal _CGameNetworkingUI_ConnectionState_default_instance_;
class CGameNetworkingUI_GlobalState;
struct CGameNetworkingUI_GlobalStateDefaultTypeInternal;
extern CGameNetworkingUI_GlobalStateDefaultTypeInternal _CGameNetworkingUI_GlobalState_default_instance_;
class CGameNetworkingUI_Message;
struct CGameNetworkingUI_MessageDefaultTypeInternal;
extern CGameNetworkingUI_MessageDefaultTypeInternal _CGameNetworkingUI_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CGameNetworkingUI_ConnectionState* Arena::CreateMaybeMessage<::CGameNetworkingUI_ConnectionState>(Arena*);
template<> ::CGameNetworkingUI_GlobalState* Arena::CreateMaybeMessage<::CGameNetworkingUI_GlobalState>(Arena*);
template<> ::CGameNetworkingUI_Message* Arena::CreateMaybeMessage<::CGameNetworkingUI_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CGameNetworkingUI_GlobalState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworkingUI_GlobalState) */ {
 public:
  inline CGameNetworkingUI_GlobalState() : CGameNetworkingUI_GlobalState(nullptr) {}
  virtual ~CGameNetworkingUI_GlobalState();
  explicit constexpr CGameNetworkingUI_GlobalState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworkingUI_GlobalState(const CGameNetworkingUI_GlobalState& from);
  CGameNetworkingUI_GlobalState(CGameNetworkingUI_GlobalState&& from) noexcept
    : CGameNetworkingUI_GlobalState() {
    *this = ::std::move(from);
  }

  inline CGameNetworkingUI_GlobalState& operator=(const CGameNetworkingUI_GlobalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_GlobalState& operator=(CGameNetworkingUI_GlobalState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNetworkingUI_GlobalState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworkingUI_GlobalState* internal_default_instance() {
    return reinterpret_cast<const CGameNetworkingUI_GlobalState*>(
               &_CGameNetworkingUI_GlobalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGameNetworkingUI_GlobalState& a, CGameNetworkingUI_GlobalState& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworkingUI_GlobalState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_GlobalState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNetworkingUI_GlobalState* New() const final {
    return CreateMaybeMessage<CGameNetworkingUI_GlobalState>(nullptr);
  }

  CGameNetworkingUI_GlobalState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNetworkingUI_GlobalState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNetworkingUI_GlobalState& from);
  void MergeFrom(const CGameNetworkingUI_GlobalState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworkingUI_GlobalState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworkingUI_GlobalState";
  }
  protected:
  explicit CGameNetworkingUI_GlobalState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenetworkingui_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_GlobalState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};
// -------------------------------------------------------------------

class CGameNetworkingUI_ConnectionState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworkingUI_ConnectionState) */ {
 public:
  inline CGameNetworkingUI_ConnectionState() : CGameNetworkingUI_ConnectionState(nullptr) {}
  virtual ~CGameNetworkingUI_ConnectionState();
  explicit constexpr CGameNetworkingUI_ConnectionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworkingUI_ConnectionState(const CGameNetworkingUI_ConnectionState& from);
  CGameNetworkingUI_ConnectionState(CGameNetworkingUI_ConnectionState&& from) noexcept
    : CGameNetworkingUI_ConnectionState() {
    *this = ::std::move(from);
  }

  inline CGameNetworkingUI_ConnectionState& operator=(const CGameNetworkingUI_ConnectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_ConnectionState& operator=(CGameNetworkingUI_ConnectionState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNetworkingUI_ConnectionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworkingUI_ConnectionState* internal_default_instance() {
    return reinterpret_cast<const CGameNetworkingUI_ConnectionState*>(
               &_CGameNetworkingUI_ConnectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CGameNetworkingUI_ConnectionState& a, CGameNetworkingUI_ConnectionState& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworkingUI_ConnectionState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_ConnectionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNetworkingUI_ConnectionState* New() const final {
    return CreateMaybeMessage<CGameNetworkingUI_ConnectionState>(nullptr);
  }

  CGameNetworkingUI_ConnectionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNetworkingUI_ConnectionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNetworkingUI_ConnectionState& from);
  void MergeFrom(const CGameNetworkingUI_ConnectionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworkingUI_ConnectionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworkingUI_ConnectionState";
  }
  protected:
  explicit CGameNetworkingUI_ConnectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenetworkingui_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionKeyFieldNumber = 1,
    kIdentityLocalFieldNumber = 4,
    kIdentityRemoteFieldNumber = 5,
    kCloseMessageFieldNumber = 15,
    kStatusLocTokenFieldNumber = 16,
    kSdrpopidLocalFieldNumber = 21,
    kSdrpopidRemoteFieldNumber = 22,
    kAddressRemoteFieldNumber = 23,
    kP2PRoutingFieldNumber = 24,
    kE2EQualityLocalFieldNumber = 30,
    kE2EQualityRemoteFieldNumber = 31,
    kFrontQualityLocalFieldNumber = 40,
    kFrontQualityRemoteFieldNumber = 41,
    kAppidFieldNumber = 2,
    kConnectionIdLocalFieldNumber = 3,
    kConnectionStateFieldNumber = 10,
    kStartTimeFieldNumber = 12,
    kCloseTimeFieldNumber = 13,
    kCloseReasonFieldNumber = 14,
    kTransportKindFieldNumber = 20,
    kPingInteriorFieldNumber = 25,
    kPingRemoteFrontFieldNumber = 26,
    kPingDefaultInternetRouteFieldNumber = 27,
    kE2EQualityRemoteInstantaneousTimeFieldNumber = 32,
    kE2EQualityRemoteLifetimeTimeFieldNumber = 33,
    kFrontQualityRemoteInstantaneousTimeFieldNumber = 42,
    kFrontQualityRemoteLifetimeTimeFieldNumber = 43,
  };
  // optional string connection_key = 1;
  bool has_connection_key() const;
  private:
  bool _internal_has_connection_key() const;
  public:
  void clear_connection_key();
  const std::string& connection_key() const;
  void set_connection_key(const std::string& value);
  void set_connection_key(std::string&& value);
  void set_connection_key(const char* value);
  void set_connection_key(const char* value, size_t size);
  std::string* mutable_connection_key();
  std::string* release_connection_key();
  void set_allocated_connection_key(std::string* connection_key);
  private:
  const std::string& _internal_connection_key() const;
  void _internal_set_connection_key(const std::string& value);
  std::string* _internal_mutable_connection_key();
  public:

  // optional string identity_local = 4;
  bool has_identity_local() const;
  private:
  bool _internal_has_identity_local() const;
  public:
  void clear_identity_local();
  const std::string& identity_local() const;
  void set_identity_local(const std::string& value);
  void set_identity_local(std::string&& value);
  void set_identity_local(const char* value);
  void set_identity_local(const char* value, size_t size);
  std::string* mutable_identity_local();
  std::string* release_identity_local();
  void set_allocated_identity_local(std::string* identity_local);
  private:
  const std::string& _internal_identity_local() const;
  void _internal_set_identity_local(const std::string& value);
  std::string* _internal_mutable_identity_local();
  public:

  // optional string identity_remote = 5;
  bool has_identity_remote() const;
  private:
  bool _internal_has_identity_remote() const;
  public:
  void clear_identity_remote();
  const std::string& identity_remote() const;
  void set_identity_remote(const std::string& value);
  void set_identity_remote(std::string&& value);
  void set_identity_remote(const char* value);
  void set_identity_remote(const char* value, size_t size);
  std::string* mutable_identity_remote();
  std::string* release_identity_remote();
  void set_allocated_identity_remote(std::string* identity_remote);
  private:
  const std::string& _internal_identity_remote() const;
  void _internal_set_identity_remote(const std::string& value);
  std::string* _internal_mutable_identity_remote();
  public:

  // optional string close_message = 15;
  bool has_close_message() const;
  private:
  bool _internal_has_close_message() const;
  public:
  void clear_close_message();
  const std::string& close_message() const;
  void set_close_message(const std::string& value);
  void set_close_message(std::string&& value);
  void set_close_message(const char* value);
  void set_close_message(const char* value, size_t size);
  std::string* mutable_close_message();
  std::string* release_close_message();
  void set_allocated_close_message(std::string* close_message);
  private:
  const std::string& _internal_close_message() const;
  void _internal_set_close_message(const std::string& value);
  std::string* _internal_mutable_close_message();
  public:

  // optional string status_loc_token = 16;
  bool has_status_loc_token() const;
  private:
  bool _internal_has_status_loc_token() const;
  public:
  void clear_status_loc_token();
  const std::string& status_loc_token() const;
  void set_status_loc_token(const std::string& value);
  void set_status_loc_token(std::string&& value);
  void set_status_loc_token(const char* value);
  void set_status_loc_token(const char* value, size_t size);
  std::string* mutable_status_loc_token();
  std::string* release_status_loc_token();
  void set_allocated_status_loc_token(std::string* status_loc_token);
  private:
  const std::string& _internal_status_loc_token() const;
  void _internal_set_status_loc_token(const std::string& value);
  std::string* _internal_mutable_status_loc_token();
  public:

  // optional string sdrpopid_local = 21;
  bool has_sdrpopid_local() const;
  private:
  bool _internal_has_sdrpopid_local() const;
  public:
  void clear_sdrpopid_local();
  const std::string& sdrpopid_local() const;
  void set_sdrpopid_local(const std::string& value);
  void set_sdrpopid_local(std::string&& value);
  void set_sdrpopid_local(const char* value);
  void set_sdrpopid_local(const char* value, size_t size);
  std::string* mutable_sdrpopid_local();
  std::string* release_sdrpopid_local();
  void set_allocated_sdrpopid_local(std::string* sdrpopid_local);
  private:
  const std::string& _internal_sdrpopid_local() const;
  void _internal_set_sdrpopid_local(const std::string& value);
  std::string* _internal_mutable_sdrpopid_local();
  public:

  // optional string sdrpopid_remote = 22;
  bool has_sdrpopid_remote() const;
  private:
  bool _internal_has_sdrpopid_remote() const;
  public:
  void clear_sdrpopid_remote();
  const std::string& sdrpopid_remote() const;
  void set_sdrpopid_remote(const std::string& value);
  void set_sdrpopid_remote(std::string&& value);
  void set_sdrpopid_remote(const char* value);
  void set_sdrpopid_remote(const char* value, size_t size);
  std::string* mutable_sdrpopid_remote();
  std::string* release_sdrpopid_remote();
  void set_allocated_sdrpopid_remote(std::string* sdrpopid_remote);
  private:
  const std::string& _internal_sdrpopid_remote() const;
  void _internal_set_sdrpopid_remote(const std::string& value);
  std::string* _internal_mutable_sdrpopid_remote();
  public:

  // optional string address_remote = 23;
  bool has_address_remote() const;
  private:
  bool _internal_has_address_remote() const;
  public:
  void clear_address_remote();
  const std::string& address_remote() const;
  void set_address_remote(const std::string& value);
  void set_address_remote(std::string&& value);
  void set_address_remote(const char* value);
  void set_address_remote(const char* value, size_t size);
  std::string* mutable_address_remote();
  std::string* release_address_remote();
  void set_allocated_address_remote(std::string* address_remote);
  private:
  const std::string& _internal_address_remote() const;
  void _internal_set_address_remote(const std::string& value);
  std::string* _internal_mutable_address_remote();
  public:

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
  bool has_p2p_routing() const;
  private:
  bool _internal_has_p2p_routing() const;
  public:
  void clear_p2p_routing();
  const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing() const;
  ::CMsgSteamDatagramP2PRoutingSummary* release_p2p_routing();
  ::CMsgSteamDatagramP2PRoutingSummary* mutable_p2p_routing();
  void set_allocated_p2p_routing(::CMsgSteamDatagramP2PRoutingSummary* p2p_routing);
  private:
  const ::CMsgSteamDatagramP2PRoutingSummary& _internal_p2p_routing() const;
  ::CMsgSteamDatagramP2PRoutingSummary* _internal_mutable_p2p_routing();
  public:
  void unsafe_arena_set_allocated_p2p_routing(
      ::CMsgSteamDatagramP2PRoutingSummary* p2p_routing);
  ::CMsgSteamDatagramP2PRoutingSummary* unsafe_arena_release_p2p_routing();

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
  bool has_e2e_quality_local() const;
  private:
  bool _internal_has_e2e_quality_local() const;
  public:
  void clear_e2e_quality_local();
  const ::CMsgSteamDatagramConnectionQuality& e2e_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* release_e2e_quality_local();
  ::CMsgSteamDatagramConnectionQuality* mutable_e2e_quality_local();
  void set_allocated_e2e_quality_local(::CMsgSteamDatagramConnectionQuality* e2e_quality_local);
  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_e2e_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* _internal_mutable_e2e_quality_local();
  public:
  void unsafe_arena_set_allocated_e2e_quality_local(
      ::CMsgSteamDatagramConnectionQuality* e2e_quality_local);
  ::CMsgSteamDatagramConnectionQuality* unsafe_arena_release_e2e_quality_local();

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
  bool has_e2e_quality_remote() const;
  private:
  bool _internal_has_e2e_quality_remote() const;
  public:
  void clear_e2e_quality_remote();
  const ::CMsgSteamDatagramConnectionQuality& e2e_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* release_e2e_quality_remote();
  ::CMsgSteamDatagramConnectionQuality* mutable_e2e_quality_remote();
  void set_allocated_e2e_quality_remote(::CMsgSteamDatagramConnectionQuality* e2e_quality_remote);
  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_e2e_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* _internal_mutable_e2e_quality_remote();
  public:
  void unsafe_arena_set_allocated_e2e_quality_remote(
      ::CMsgSteamDatagramConnectionQuality* e2e_quality_remote);
  ::CMsgSteamDatagramConnectionQuality* unsafe_arena_release_e2e_quality_remote();

  // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
  bool has_front_quality_local() const;
  private:
  bool _internal_has_front_quality_local() const;
  public:
  void clear_front_quality_local();
  const ::CMsgSteamDatagramConnectionQuality& front_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* release_front_quality_local();
  ::CMsgSteamDatagramConnectionQuality* mutable_front_quality_local();
  void set_allocated_front_quality_local(::CMsgSteamDatagramConnectionQuality* front_quality_local);
  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_front_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* _internal_mutable_front_quality_local();
  public:
  void unsafe_arena_set_allocated_front_quality_local(
      ::CMsgSteamDatagramConnectionQuality* front_quality_local);
  ::CMsgSteamDatagramConnectionQuality* unsafe_arena_release_front_quality_local();

  // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
  bool has_front_quality_remote() const;
  private:
  bool _internal_has_front_quality_remote() const;
  public:
  void clear_front_quality_remote();
  const ::CMsgSteamDatagramConnectionQuality& front_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* release_front_quality_remote();
  ::CMsgSteamDatagramConnectionQuality* mutable_front_quality_remote();
  void set_allocated_front_quality_remote(::CMsgSteamDatagramConnectionQuality* front_quality_remote);
  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_front_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* _internal_mutable_front_quality_remote();
  public:
  void unsafe_arena_set_allocated_front_quality_remote(
      ::CMsgSteamDatagramConnectionQuality* front_quality_remote);
  ::CMsgSteamDatagramConnectionQuality* unsafe_arena_release_front_quality_remote();

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 connection_id_local = 3;
  bool has_connection_id_local() const;
  private:
  bool _internal_has_connection_id_local() const;
  public:
  void clear_connection_id_local();
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_id_local() const;
  void set_connection_id_local(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connection_id_local() const;
  void _internal_set_connection_id_local(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 connection_state = 10;
  bool has_connection_state() const;
  private:
  bool _internal_has_connection_state() const;
  public:
  void clear_connection_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_state() const;
  void set_connection_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connection_state() const;
  void _internal_set_connection_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_time = 12;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 close_time = 13;
  bool has_close_time() const;
  private:
  bool _internal_has_close_time() const;
  public:
  void clear_close_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 close_time() const;
  void set_close_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_close_time() const;
  void _internal_set_close_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 close_reason = 14;
  bool has_close_reason() const;
  private:
  bool _internal_has_close_reason() const;
  public:
  void clear_close_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 close_reason() const;
  void set_close_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_close_reason() const;
  void _internal_set_close_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 transport_kind = 20;
  bool has_transport_kind() const;
  private:
  bool _internal_has_transport_kind() const;
  public:
  void clear_transport_kind();
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_kind() const;
  void set_transport_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transport_kind() const;
  void _internal_set_transport_kind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping_interior = 25;
  bool has_ping_interior() const;
  private:
  bool _internal_has_ping_interior() const;
  public:
  void clear_ping_interior();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_interior() const;
  void set_ping_interior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping_interior() const;
  void _internal_set_ping_interior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping_remote_front = 26;
  bool has_ping_remote_front() const;
  private:
  bool _internal_has_ping_remote_front() const;
  public:
  void clear_ping_remote_front();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_remote_front() const;
  void set_ping_remote_front(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping_remote_front() const;
  void _internal_set_ping_remote_front(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping_default_internet_route = 27;
  bool has_ping_default_internet_route() const;
  private:
  bool _internal_has_ping_default_internet_route() const;
  public:
  void clear_ping_default_internet_route();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_default_internet_route() const;
  void set_ping_default_internet_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping_default_internet_route() const;
  void _internal_set_ping_default_internet_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 e2e_quality_remote_instantaneous_time = 32;
  bool has_e2e_quality_remote_instantaneous_time() const;
  private:
  bool _internal_has_e2e_quality_remote_instantaneous_time() const;
  public:
  void clear_e2e_quality_remote_instantaneous_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 e2e_quality_remote_instantaneous_time() const;
  void set_e2e_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e2e_quality_remote_instantaneous_time() const;
  void _internal_set_e2e_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 e2e_quality_remote_lifetime_time = 33;
  bool has_e2e_quality_remote_lifetime_time() const;
  private:
  bool _internal_has_e2e_quality_remote_lifetime_time() const;
  public:
  void clear_e2e_quality_remote_lifetime_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 e2e_quality_remote_lifetime_time() const;
  void set_e2e_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e2e_quality_remote_lifetime_time() const;
  void _internal_set_e2e_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 front_quality_remote_instantaneous_time = 42;
  bool has_front_quality_remote_instantaneous_time() const;
  private:
  bool _internal_has_front_quality_remote_instantaneous_time() const;
  public:
  void clear_front_quality_remote_instantaneous_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 front_quality_remote_instantaneous_time() const;
  void set_front_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_front_quality_remote_instantaneous_time() const;
  void _internal_set_front_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 front_quality_remote_lifetime_time = 43;
  bool has_front_quality_remote_lifetime_time() const;
  private:
  bool _internal_has_front_quality_remote_lifetime_time() const;
  public:
  void clear_front_quality_remote_lifetime_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 front_quality_remote_lifetime_time() const;
  void set_front_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_front_quality_remote_lifetime_time() const;
  void _internal_set_front_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_ConnectionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_local_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_remote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_loc_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdrpopid_local_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdrpopid_remote_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_remote_;
  ::CMsgSteamDatagramP2PRoutingSummary* p2p_routing_;
  ::CMsgSteamDatagramConnectionQuality* e2e_quality_local_;
  ::CMsgSteamDatagramConnectionQuality* e2e_quality_remote_;
  ::CMsgSteamDatagramConnectionQuality* front_quality_local_;
  ::CMsgSteamDatagramConnectionQuality* front_quality_remote_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_id_local_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 close_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 close_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transport_kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_interior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_remote_front_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_default_internet_route_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e2e_quality_remote_instantaneous_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e2e_quality_remote_lifetime_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 front_quality_remote_instantaneous_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 front_quality_remote_lifetime_time_;
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};
// -------------------------------------------------------------------

class CGameNetworkingUI_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CGameNetworkingUI_Message) */ {
 public:
  inline CGameNetworkingUI_Message() : CGameNetworkingUI_Message(nullptr) {}
  virtual ~CGameNetworkingUI_Message();
  explicit constexpr CGameNetworkingUI_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CGameNetworkingUI_Message(const CGameNetworkingUI_Message& from);
  CGameNetworkingUI_Message(CGameNetworkingUI_Message&& from) noexcept
    : CGameNetworkingUI_Message() {
    *this = ::std::move(from);
  }

  inline CGameNetworkingUI_Message& operator=(const CGameNetworkingUI_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_Message& operator=(CGameNetworkingUI_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameNetworkingUI_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const CGameNetworkingUI_Message* internal_default_instance() {
    return reinterpret_cast<const CGameNetworkingUI_Message*>(
               &_CGameNetworkingUI_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CGameNetworkingUI_Message& a, CGameNetworkingUI_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameNetworkingUI_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameNetworkingUI_Message* New() const final {
    return CreateMaybeMessage<CGameNetworkingUI_Message>(nullptr);
  }

  CGameNetworkingUI_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameNetworkingUI_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameNetworkingUI_Message& from);
  void MergeFrom(const CGameNetworkingUI_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameNetworkingUI_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CGameNetworkingUI_Message";
  }
  protected:
  explicit CGameNetworkingUI_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fgamenetworkingui_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionStateFieldNumber = 1,
  };
  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  int connection_state_size() const;
  private:
  int _internal_connection_state_size() const;
  public:
  void clear_connection_state();
  ::CGameNetworkingUI_ConnectionState* mutable_connection_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState >*
      mutable_connection_state();
  private:
  const ::CGameNetworkingUI_ConnectionState& _internal_connection_state(int index) const;
  ::CGameNetworkingUI_ConnectionState* _internal_add_connection_state();
  public:
  const ::CGameNetworkingUI_ConnectionState& connection_state(int index) const;
  ::CGameNetworkingUI_ConnectionState* add_connection_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState >&
      connection_state() const;

  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState > connection_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGameNetworkingUI_GlobalState

// -------------------------------------------------------------------

// CGameNetworkingUI_ConnectionState

// optional string connection_key = 1;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_connection_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_connection_key() const {
  return _internal_has_connection_key();
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_key() {
  connection_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::connection_key() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_key)
  return _internal_connection_key();
}
inline void CGameNetworkingUI_ConnectionState::set_connection_key(const std::string& value) {
  _internal_set_connection_key(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_key)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_connection_key() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.connection_key)
  return _internal_mutable_connection_key();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_connection_key() const {
  return connection_key_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_connection_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.connection_key)
}
inline void CGameNetworkingUI_ConnectionState::set_connection_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.connection_key)
}
inline void CGameNetworkingUI_ConnectionState::set_connection_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.connection_key)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_connection_key() {
  _has_bits_[0] |= 0x00000001u;
  return connection_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_connection_key() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.connection_key)
  if (!_internal_has_connection_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return connection_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_connection_key(std::string* connection_key) {
  if (connection_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.connection_key)
}

// optional uint32 appid = 2;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_appid() const {
  return _internal_has_appid();
}
inline void CGameNetworkingUI_ConnectionState::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::appid() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.appid)
  return _internal_appid();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  appid_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.appid)
}

// optional fixed32 connection_id_local = 3;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_connection_id_local() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_connection_id_local() const {
  return _internal_has_connection_id_local();
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_id_local() {
  connection_id_local_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_connection_id_local() const {
  return connection_id_local_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::connection_id_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_id_local)
  return _internal_connection_id_local();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_id_local(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  connection_id_local_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_connection_id_local(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connection_id_local(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_id_local)
}

// optional string identity_local = 4;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_identity_local() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_identity_local() const {
  return _internal_has_identity_local();
}
inline void CGameNetworkingUI_ConnectionState::clear_identity_local() {
  identity_local_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::identity_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.identity_local)
  return _internal_identity_local();
}
inline void CGameNetworkingUI_ConnectionState::set_identity_local(const std::string& value) {
  _internal_set_identity_local(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.identity_local)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_identity_local() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.identity_local)
  return _internal_mutable_identity_local();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_identity_local() const {
  return identity_local_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_identity_local(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  identity_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_identity_local(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  identity_local_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.identity_local)
}
inline void CGameNetworkingUI_ConnectionState::set_identity_local(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  identity_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.identity_local)
}
inline void CGameNetworkingUI_ConnectionState::set_identity_local(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  identity_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.identity_local)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_identity_local() {
  _has_bits_[0] |= 0x00000002u;
  return identity_local_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_identity_local() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.identity_local)
  if (!_internal_has_identity_local()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return identity_local_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_identity_local(std::string* identity_local) {
  if (identity_local != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  identity_local_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_local,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.identity_local)
}

// optional string identity_remote = 5;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_identity_remote() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_identity_remote() const {
  return _internal_has_identity_remote();
}
inline void CGameNetworkingUI_ConnectionState::clear_identity_remote() {
  identity_remote_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::identity_remote() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.identity_remote)
  return _internal_identity_remote();
}
inline void CGameNetworkingUI_ConnectionState::set_identity_remote(const std::string& value) {
  _internal_set_identity_remote(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.identity_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_identity_remote() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.identity_remote)
  return _internal_mutable_identity_remote();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_identity_remote() const {
  return identity_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_identity_remote(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  identity_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_identity_remote(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  identity_remote_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.identity_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_identity_remote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  identity_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.identity_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_identity_remote(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  identity_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.identity_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_identity_remote() {
  _has_bits_[0] |= 0x00000004u;
  return identity_remote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_identity_remote() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.identity_remote)
  if (!_internal_has_identity_remote()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return identity_remote_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_identity_remote(std::string* identity_remote) {
  if (identity_remote != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  identity_remote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_remote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.identity_remote)
}

// optional uint32 connection_state = 10;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_connection_state() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_connection_state() const {
  return _internal_has_connection_state();
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_state() {
  connection_state_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_connection_state() const {
  return connection_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::connection_state() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_state)
  return _internal_connection_state();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  connection_state_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_connection_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connection_state(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_state)
}

// optional uint32 start_time = 12;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_start_time() const {
  return _internal_has_start_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::start_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.start_time)
  return _internal_start_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  start_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.start_time)
}

// optional uint32 close_time = 13;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_close_time() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_close_time() const {
  return _internal_has_close_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_close_time() {
  close_time_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_close_time() const {
  return close_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::close_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_time)
  return _internal_close_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  close_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_close_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_close_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_time)
}

// optional uint32 close_reason = 14;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_close_reason() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_close_reason() const {
  return _internal_has_close_reason();
}
inline void CGameNetworkingUI_ConnectionState::clear_close_reason() {
  close_reason_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_close_reason() const {
  return close_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::close_reason() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_reason)
  return _internal_close_reason();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  close_reason_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_close_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_close_reason(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_reason)
}

// optional string close_message = 15;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_close_message() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_close_message() const {
  return _internal_has_close_message();
}
inline void CGameNetworkingUI_ConnectionState::clear_close_message() {
  close_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::close_message() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_message)
  return _internal_close_message();
}
inline void CGameNetworkingUI_ConnectionState::set_close_message(const std::string& value) {
  _internal_set_close_message(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_message)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_close_message() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.close_message)
  return _internal_mutable_close_message();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_close_message() const {
  return close_message_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_message(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_close_message(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  close_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.close_message)
}
inline void CGameNetworkingUI_ConnectionState::set_close_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.close_message)
}
inline void CGameNetworkingUI_ConnectionState::set_close_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.close_message)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_close_message() {
  _has_bits_[0] |= 0x00000008u;
  return close_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_close_message() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.close_message)
  if (!_internal_has_close_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return close_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_close_message(std::string* close_message) {
  if (close_message != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  close_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.close_message)
}

// optional string status_loc_token = 16;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_status_loc_token() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_status_loc_token() const {
  return _internal_has_status_loc_token();
}
inline void CGameNetworkingUI_ConnectionState::clear_status_loc_token() {
  status_loc_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::status_loc_token() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.status_loc_token)
  return _internal_status_loc_token();
}
inline void CGameNetworkingUI_ConnectionState::set_status_loc_token(const std::string& value) {
  _internal_set_status_loc_token(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.status_loc_token)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_status_loc_token() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.status_loc_token)
  return _internal_mutable_status_loc_token();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_status_loc_token() const {
  return status_loc_token_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_status_loc_token(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  status_loc_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_status_loc_token(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  status_loc_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.status_loc_token)
}
inline void CGameNetworkingUI_ConnectionState::set_status_loc_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  status_loc_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.status_loc_token)
}
inline void CGameNetworkingUI_ConnectionState::set_status_loc_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  status_loc_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.status_loc_token)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_status_loc_token() {
  _has_bits_[0] |= 0x00000010u;
  return status_loc_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_status_loc_token() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.status_loc_token)
  if (!_internal_has_status_loc_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return status_loc_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_status_loc_token(std::string* status_loc_token) {
  if (status_loc_token != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  status_loc_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_loc_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.status_loc_token)
}

// optional uint32 transport_kind = 20;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_transport_kind() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_transport_kind() const {
  return _internal_has_transport_kind();
}
inline void CGameNetworkingUI_ConnectionState::clear_transport_kind() {
  transport_kind_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_transport_kind() const {
  return transport_kind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::transport_kind() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.transport_kind)
  return _internal_transport_kind();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_transport_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  transport_kind_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_transport_kind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transport_kind(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.transport_kind)
}

// optional string sdrpopid_local = 21;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_sdrpopid_local() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_sdrpopid_local() const {
  return _internal_has_sdrpopid_local();
}
inline void CGameNetworkingUI_ConnectionState::clear_sdrpopid_local() {
  sdrpopid_local_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::sdrpopid_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  return _internal_sdrpopid_local();
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_local(const std::string& value) {
  _internal_set_sdrpopid_local(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_sdrpopid_local() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  return _internal_mutable_sdrpopid_local();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_sdrpopid_local() const {
  return sdrpopid_local_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_sdrpopid_local(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  sdrpopid_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_local(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  sdrpopid_local_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_local(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  sdrpopid_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_local(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  sdrpopid_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_sdrpopid_local() {
  _has_bits_[0] |= 0x00000020u;
  return sdrpopid_local_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_sdrpopid_local() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  if (!_internal_has_sdrpopid_local()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return sdrpopid_local_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_sdrpopid_local(std::string* sdrpopid_local) {
  if (sdrpopid_local != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  sdrpopid_local_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdrpopid_local,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}

// optional string sdrpopid_remote = 22;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_sdrpopid_remote() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_sdrpopid_remote() const {
  return _internal_has_sdrpopid_remote();
}
inline void CGameNetworkingUI_ConnectionState::clear_sdrpopid_remote() {
  sdrpopid_remote_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::sdrpopid_remote() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  return _internal_sdrpopid_remote();
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_remote(const std::string& value) {
  _internal_set_sdrpopid_remote(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_sdrpopid_remote() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  return _internal_mutable_sdrpopid_remote();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_sdrpopid_remote() const {
  return sdrpopid_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_sdrpopid_remote(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  sdrpopid_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_remote(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  sdrpopid_remote_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_remote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  sdrpopid_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_sdrpopid_remote(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  sdrpopid_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_sdrpopid_remote() {
  _has_bits_[0] |= 0x00000040u;
  return sdrpopid_remote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_sdrpopid_remote() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  if (!_internal_has_sdrpopid_remote()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return sdrpopid_remote_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_sdrpopid_remote(std::string* sdrpopid_remote) {
  if (sdrpopid_remote != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  sdrpopid_remote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdrpopid_remote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}

// optional string address_remote = 23;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_address_remote() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_address_remote() const {
  return _internal_has_address_remote();
}
inline void CGameNetworkingUI_ConnectionState::clear_address_remote() {
  address_remote_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::address_remote() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.address_remote)
  return _internal_address_remote();
}
inline void CGameNetworkingUI_ConnectionState::set_address_remote(const std::string& value) {
  _internal_set_address_remote(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.address_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::mutable_address_remote() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.address_remote)
  return _internal_mutable_address_remote();
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_address_remote() const {
  return address_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_address_remote(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  address_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_address_remote(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  address_remote_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CGameNetworkingUI_ConnectionState.address_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_address_remote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  address_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CGameNetworkingUI_ConnectionState.address_remote)
}
inline void CGameNetworkingUI_ConnectionState::set_address_remote(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  address_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CGameNetworkingUI_ConnectionState.address_remote)
}
inline std::string* CGameNetworkingUI_ConnectionState::_internal_mutable_address_remote() {
  _has_bits_[0] |= 0x00000080u;
  return address_remote_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CGameNetworkingUI_ConnectionState::release_address_remote() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.address_remote)
  if (!_internal_has_address_remote()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return address_remote_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_address_remote(std::string* address_remote) {
  if (address_remote != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  address_remote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address_remote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.address_remote)
}

// optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_p2p_routing() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || p2p_routing_ != nullptr);
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_p2p_routing() const {
  return _internal_has_p2p_routing();
}
inline const ::CMsgSteamDatagramP2PRoutingSummary& CGameNetworkingUI_ConnectionState::_internal_p2p_routing() const {
  const ::CMsgSteamDatagramP2PRoutingSummary* p = p2p_routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramP2PRoutingSummary&>(
      ::_CMsgSteamDatagramP2PRoutingSummary_default_instance_);
}
inline const ::CMsgSteamDatagramP2PRoutingSummary& CGameNetworkingUI_ConnectionState::p2p_routing() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.p2p_routing)
  return _internal_p2p_routing();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_p2p_routing(
    ::CMsgSteamDatagramP2PRoutingSummary* p2p_routing) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p2p_routing_);
  }
  p2p_routing_ = p2p_routing;
  if (p2p_routing) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.p2p_routing)
}
inline ::CMsgSteamDatagramP2PRoutingSummary* CGameNetworkingUI_ConnectionState::release_p2p_routing() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgSteamDatagramP2PRoutingSummary* temp = p2p_routing_;
  p2p_routing_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* CGameNetworkingUI_ConnectionState::unsafe_arena_release_p2p_routing() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.p2p_routing)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgSteamDatagramP2PRoutingSummary* temp = p2p_routing_;
  p2p_routing_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* CGameNetworkingUI_ConnectionState::_internal_mutable_p2p_routing() {
  _has_bits_[0] |= 0x00000100u;
  if (p2p_routing_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramP2PRoutingSummary>(GetArena());
    p2p_routing_ = p;
  }
  return p2p_routing_;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* CGameNetworkingUI_ConnectionState::mutable_p2p_routing() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.p2p_routing)
  return _internal_mutable_p2p_routing();
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_p2p_routing(::CMsgSteamDatagramP2PRoutingSummary* p2p_routing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(p2p_routing_);
  }
  if (p2p_routing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p2p_routing)->GetArena();
    if (message_arena != submessage_arena) {
      p2p_routing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2p_routing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  p2p_routing_ = p2p_routing;
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.p2p_routing)
}

// optional uint32 ping_interior = 25;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_ping_interior() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_ping_interior() const {
  return _internal_has_ping_interior();
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_interior() {
  ping_interior_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_ping_interior() const {
  return ping_interior_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::ping_interior() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_interior)
  return _internal_ping_interior();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_interior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  ping_interior_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_ping_interior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping_interior(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_interior)
}

// optional uint32 ping_remote_front = 26;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_ping_remote_front() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_ping_remote_front() const {
  return _internal_has_ping_remote_front();
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_remote_front() {
  ping_remote_front_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_ping_remote_front() const {
  return ping_remote_front_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::ping_remote_front() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_remote_front)
  return _internal_ping_remote_front();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_remote_front(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  ping_remote_front_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_ping_remote_front(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping_remote_front(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_remote_front)
}

// optional uint32 ping_default_internet_route = 27;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_ping_default_internet_route() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_ping_default_internet_route() const {
  return _internal_has_ping_default_internet_route();
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_default_internet_route() {
  ping_default_internet_route_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::_internal_ping_default_internet_route() const {
  return ping_default_internet_route_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CGameNetworkingUI_ConnectionState::ping_default_internet_route() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_default_internet_route)
  return _internal_ping_default_internet_route();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_default_internet_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  ping_default_internet_route_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_ping_default_internet_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping_default_internet_route(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_default_internet_route)
}

// optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_e2e_quality_local() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || e2e_quality_local_ != nullptr);
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_local() const {
  return _internal_has_e2e_quality_local();
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_e2e_quality_local() const {
  const ::CMsgSteamDatagramConnectionQuality* p = e2e_quality_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(
      ::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::e2e_quality_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_local)
  return _internal_e2e_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_e2e_quality_local(
    ::CMsgSteamDatagramConnectionQuality* e2e_quality_local) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_local_);
  }
  e2e_quality_local_ = e2e_quality_local;
  if (e2e_quality_local) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_local)
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::release_e2e_quality_local() {
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgSteamDatagramConnectionQuality* temp = e2e_quality_local_;
  e2e_quality_local_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::unsafe_arena_release_e2e_quality_local() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.e2e_quality_local)
  _has_bits_[0] &= ~0x00000200u;
  ::CMsgSteamDatagramConnectionQuality* temp = e2e_quality_local_;
  e2e_quality_local_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::_internal_mutable_e2e_quality_local() {
  _has_bits_[0] |= 0x00000200u;
  if (e2e_quality_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(GetArena());
    e2e_quality_local_ = p;
  }
  return e2e_quality_local_;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::mutable_e2e_quality_local() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.e2e_quality_local)
  return _internal_mutable_e2e_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_e2e_quality_local(::CMsgSteamDatagramConnectionQuality* e2e_quality_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_local_);
  }
  if (e2e_quality_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_local)->GetArena();
    if (message_arena != submessage_arena) {
      e2e_quality_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2e_quality_local, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  e2e_quality_local_ = e2e_quality_local;
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_local)
}

// optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_e2e_quality_remote() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || e2e_quality_remote_ != nullptr);
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote() const {
  return _internal_has_e2e_quality_remote();
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote() const {
  const ::CMsgSteamDatagramConnectionQuality* p = e2e_quality_remote_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(
      ::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::e2e_quality_remote() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
  return _internal_e2e_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_e2e_quality_remote(
    ::CMsgSteamDatagramConnectionQuality* e2e_quality_remote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_remote_);
  }
  e2e_quality_remote_ = e2e_quality_remote;
  if (e2e_quality_remote) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::release_e2e_quality_remote() {
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgSteamDatagramConnectionQuality* temp = e2e_quality_remote_;
  e2e_quality_remote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::unsafe_arena_release_e2e_quality_remote() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
  _has_bits_[0] &= ~0x00000400u;
  ::CMsgSteamDatagramConnectionQuality* temp = e2e_quality_remote_;
  e2e_quality_remote_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::_internal_mutable_e2e_quality_remote() {
  _has_bits_[0] |= 0x00000400u;
  if (e2e_quality_remote_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(GetArena());
    e2e_quality_remote_ = p;
  }
  return e2e_quality_remote_;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::mutable_e2e_quality_remote() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
  return _internal_mutable_e2e_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_e2e_quality_remote(::CMsgSteamDatagramConnectionQuality* e2e_quality_remote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_remote_);
  }
  if (e2e_quality_remote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(e2e_quality_remote)->GetArena();
    if (message_arena != submessage_arena) {
      e2e_quality_remote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, e2e_quality_remote, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  e2e_quality_remote_ = e2e_quality_remote;
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
}

// optional uint64 e2e_quality_remote_instantaneous_time = 32;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_e2e_quality_remote_instantaneous_time() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote_instantaneous_time() const {
  return _internal_has_e2e_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote_instantaneous_time() {
  e2e_quality_remote_instantaneous_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote_instantaneous_time() const {
  return e2e_quality_remote_instantaneous_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::e2e_quality_remote_instantaneous_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote_instantaneous_time)
  return _internal_e2e_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_e2e_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00800000u;
  e2e_quality_remote_instantaneous_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_e2e_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e2e_quality_remote_instantaneous_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.e2e_quality_remote_instantaneous_time)
}

// optional uint64 e2e_quality_remote_lifetime_time = 33;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_e2e_quality_remote_lifetime_time() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote_lifetime_time() const {
  return _internal_has_e2e_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote_lifetime_time() {
  e2e_quality_remote_lifetime_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote_lifetime_time() const {
  return e2e_quality_remote_lifetime_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::e2e_quality_remote_lifetime_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote_lifetime_time)
  return _internal_e2e_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_e2e_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x01000000u;
  e2e_quality_remote_lifetime_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_e2e_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e2e_quality_remote_lifetime_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.e2e_quality_remote_lifetime_time)
}

// optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_front_quality_local() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || front_quality_local_ != nullptr);
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_local() const {
  return _internal_has_front_quality_local();
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_front_quality_local() const {
  const ::CMsgSteamDatagramConnectionQuality* p = front_quality_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(
      ::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::front_quality_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_local)
  return _internal_front_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_front_quality_local(
    ::CMsgSteamDatagramConnectionQuality* front_quality_local) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_local_);
  }
  front_quality_local_ = front_quality_local;
  if (front_quality_local) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_local)
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::release_front_quality_local() {
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgSteamDatagramConnectionQuality* temp = front_quality_local_;
  front_quality_local_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::unsafe_arena_release_front_quality_local() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.front_quality_local)
  _has_bits_[0] &= ~0x00000800u;
  ::CMsgSteamDatagramConnectionQuality* temp = front_quality_local_;
  front_quality_local_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::_internal_mutable_front_quality_local() {
  _has_bits_[0] |= 0x00000800u;
  if (front_quality_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(GetArena());
    front_quality_local_ = p;
  }
  return front_quality_local_;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::mutable_front_quality_local() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.front_quality_local)
  return _internal_mutable_front_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_front_quality_local(::CMsgSteamDatagramConnectionQuality* front_quality_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_local_);
  }
  if (front_quality_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_local)->GetArena();
    if (message_arena != submessage_arena) {
      front_quality_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_quality_local, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  front_quality_local_ = front_quality_local;
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_local)
}

// optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_front_quality_remote() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || front_quality_remote_ != nullptr);
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote() const {
  return _internal_has_front_quality_remote();
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_front_quality_remote() const {
  const ::CMsgSteamDatagramConnectionQuality* p = front_quality_remote_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(
      ::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::front_quality_remote() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote)
  return _internal_front_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_front_quality_remote(
    ::CMsgSteamDatagramConnectionQuality* front_quality_remote) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_remote_);
  }
  front_quality_remote_ = front_quality_remote;
  if (front_quality_remote) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_remote)
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::release_front_quality_remote() {
  _has_bits_[0] &= ~0x00001000u;
  ::CMsgSteamDatagramConnectionQuality* temp = front_quality_remote_;
  front_quality_remote_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::unsafe_arena_release_front_quality_remote() {
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.front_quality_remote)
  _has_bits_[0] &= ~0x00001000u;
  ::CMsgSteamDatagramConnectionQuality* temp = front_quality_remote_;
  front_quality_remote_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::_internal_mutable_front_quality_remote() {
  _has_bits_[0] |= 0x00001000u;
  if (front_quality_remote_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(GetArena());
    front_quality_remote_ = p;
  }
  return front_quality_remote_;
}
inline ::CMsgSteamDatagramConnectionQuality* CGameNetworkingUI_ConnectionState::mutable_front_quality_remote() {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.front_quality_remote)
  return _internal_mutable_front_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_front_quality_remote(::CMsgSteamDatagramConnectionQuality* front_quality_remote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_remote_);
  }
  if (front_quality_remote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_quality_remote)->GetArena();
    if (message_arena != submessage_arena) {
      front_quality_remote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_quality_remote, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  front_quality_remote_ = front_quality_remote;
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_remote)
}

// optional uint64 front_quality_remote_instantaneous_time = 42;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_front_quality_remote_instantaneous_time() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote_instantaneous_time() const {
  return _internal_has_front_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_front_quality_remote_instantaneous_time() {
  front_quality_remote_instantaneous_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::_internal_front_quality_remote_instantaneous_time() const {
  return front_quality_remote_instantaneous_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::front_quality_remote_instantaneous_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote_instantaneous_time)
  return _internal_front_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_front_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x02000000u;
  front_quality_remote_instantaneous_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_front_quality_remote_instantaneous_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_front_quality_remote_instantaneous_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.front_quality_remote_instantaneous_time)
}

// optional uint64 front_quality_remote_lifetime_time = 43;
inline bool CGameNetworkingUI_ConnectionState::_internal_has_front_quality_remote_lifetime_time() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote_lifetime_time() const {
  return _internal_has_front_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::clear_front_quality_remote_lifetime_time() {
  front_quality_remote_lifetime_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::_internal_front_quality_remote_lifetime_time() const {
  return front_quality_remote_lifetime_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CGameNetworkingUI_ConnectionState::front_quality_remote_lifetime_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote_lifetime_time)
  return _internal_front_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_front_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x04000000u;
  front_quality_remote_lifetime_time_ = value;
}
inline void CGameNetworkingUI_ConnectionState::set_front_quality_remote_lifetime_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_front_quality_remote_lifetime_time(value);
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.front_quality_remote_lifetime_time)
}

// -------------------------------------------------------------------

// CGameNetworkingUI_Message

// repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
inline int CGameNetworkingUI_Message::_internal_connection_state_size() const {
  return connection_state_.size();
}
inline int CGameNetworkingUI_Message::connection_state_size() const {
  return _internal_connection_state_size();
}
inline void CGameNetworkingUI_Message::clear_connection_state() {
  connection_state_.Clear();
}
inline ::CGameNetworkingUI_ConnectionState* CGameNetworkingUI_Message::mutable_connection_state(int index) {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_Message.connection_state)
  return connection_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState >*
CGameNetworkingUI_Message::mutable_connection_state() {
  // @@protoc_insertion_point(field_mutable_list:CGameNetworkingUI_Message.connection_state)
  return &connection_state_;
}
inline const ::CGameNetworkingUI_ConnectionState& CGameNetworkingUI_Message::_internal_connection_state(int index) const {
  return connection_state_.Get(index);
}
inline const ::CGameNetworkingUI_ConnectionState& CGameNetworkingUI_Message::connection_state(int index) const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_Message.connection_state)
  return _internal_connection_state(index);
}
inline ::CGameNetworkingUI_ConnectionState* CGameNetworkingUI_Message::_internal_add_connection_state() {
  return connection_state_.Add();
}
inline ::CGameNetworkingUI_ConnectionState* CGameNetworkingUI_Message::add_connection_state() {
  // @@protoc_insertion_point(field_add:CGameNetworkingUI_Message.connection_state)
  return _internal_add_connection_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState >&
CGameNetworkingUI_Message::connection_state() const {
  // @@protoc_insertion_point(field_list:CGameNetworkingUI_Message.connection_state)
  return connection_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fgamenetworkingui_2eproto
