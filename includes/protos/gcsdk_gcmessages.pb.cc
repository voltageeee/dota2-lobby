// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcsdk_gcmessages.proto

#include "gcsdk_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CExtraMsgBlock::CExtraMsgBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0u)
  , is_compressed_(false)
  , msg_key_(PROTOBUF_ULONGLONG(0)){}
struct CExtraMsgBlockDefaultTypeInternal {
  constexpr CExtraMsgBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CExtraMsgBlockDefaultTypeInternal() {}
  union {
    CExtraMsgBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CExtraMsgBlockDefaultTypeInternal _CExtraMsgBlock_default_instance_;
constexpr CMsgGCAssertJobData::CMsgGCAssertJobData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCAssertJobDataDefaultTypeInternal {
  constexpr CMsgGCAssertJobDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCAssertJobDataDefaultTypeInternal() {}
  union {
    CMsgGCAssertJobData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCAssertJobDataDefaultTypeInternal _CMsgGCAssertJobData_default_instance_;
constexpr CMsgGCConCommand::CMsgGCConCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCConCommandDefaultTypeInternal {
  constexpr CMsgGCConCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCConCommandDefaultTypeInternal() {}
  union {
    CMsgGCConCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCConCommandDefaultTypeInternal _CMsgGCConCommand_default_instance_;
constexpr CMsgSDOAssert_Request::CMsgSDOAssert_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_()
  , requesting_job_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgSDOAssert_RequestDefaultTypeInternal {
  constexpr CMsgSDOAssert_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSDOAssert_RequestDefaultTypeInternal() {}
  union {
    CMsgSDOAssert_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSDOAssert_RequestDefaultTypeInternal _CMsgSDOAssert_Request_default_instance_;
constexpr CMsgSDOAssert::CMsgSDOAssert(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_()
  , sdo_type_(0){}
struct CMsgSDOAssertDefaultTypeInternal {
  constexpr CMsgSDOAssertDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSDOAssertDefaultTypeInternal() {}
  union {
    CMsgSDOAssert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSDOAssertDefaultTypeInternal _CMsgSDOAssert_default_instance_;
constexpr CMsgSHA1Digest::CMsgSHA1Digest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block1_(PROTOBUF_ULONGLONG(0))
  , block2_(PROTOBUF_ULONGLONG(0))
  , block3_(0u){}
struct CMsgSHA1DigestDefaultTypeInternal {
  constexpr CMsgSHA1DigestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSHA1DigestDefaultTypeInternal() {}
  union {
    CMsgSHA1Digest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSHA1DigestDefaultTypeInternal _CMsgSHA1Digest_default_instance_;
constexpr CMsgSOIDOwner::CMsgSOIDOwner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(PROTOBUF_ULONGLONG(0))
  , type_(0u){}
struct CMsgSOIDOwnerDefaultTypeInternal {
  constexpr CMsgSOIDOwnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOIDOwnerDefaultTypeInternal() {}
  union {
    CMsgSOIDOwner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOIDOwnerDefaultTypeInternal _CMsgSOIDOwner_default_instance_;
constexpr CMsgSOSingleObject::CMsgSOSingleObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , type_id_(0)
  , service_id_(0u){}
struct CMsgSOSingleObjectDefaultTypeInternal {
  constexpr CMsgSOSingleObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOSingleObjectDefaultTypeInternal() {}
  union {
    CMsgSOSingleObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOSingleObjectDefaultTypeInternal _CMsgSOSingleObject_default_instance_;
constexpr CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_id_(0){}
struct CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal {
  constexpr CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal() {}
  union {
    CMsgSOMultipleObjects_SingleObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOMultipleObjects_SingleObjectDefaultTypeInternal _CMsgSOMultipleObjects_SingleObject_default_instance_;
constexpr CMsgSOMultipleObjects::CMsgSOMultipleObjects(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_modified_()
  , objects_added_()
  , objects_removed_()
  , owner_soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u){}
struct CMsgSOMultipleObjectsDefaultTypeInternal {
  constexpr CMsgSOMultipleObjectsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOMultipleObjectsDefaultTypeInternal() {}
  union {
    CMsgSOMultipleObjects _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOMultipleObjectsDefaultTypeInternal _CMsgSOMultipleObjects_default_instance_;
constexpr CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_data_()
  , type_id_(0){}
struct CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal {
  constexpr CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscribed_SubscribedType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscribed_SubscribedTypeDefaultTypeInternal _CMsgSOCacheSubscribed_SubscribedType_default_instance_;
constexpr CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , service_list_()
  , owner_soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , sync_version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u){}
struct CMsgSOCacheSubscribedDefaultTypeInternal {
  constexpr CMsgSOCacheSubscribedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscribedDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscribedDefaultTypeInternal _CMsgSOCacheSubscribed_default_instance_;
constexpr CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_list_()
  , owner_soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , sync_version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u){}
struct CMsgSOCacheSubscribedUpToDateDefaultTypeInternal {
  constexpr CMsgSOCacheSubscribedUpToDateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscribedUpToDateDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscribedUpToDate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscribedUpToDateDefaultTypeInternal _CMsgSOCacheSubscribedUpToDate_default_instance_;
constexpr CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_soid_(nullptr){}
struct CMsgSOCacheUnsubscribedDefaultTypeInternal {
  constexpr CMsgSOCacheUnsubscribedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheUnsubscribedDefaultTypeInternal() {}
  union {
    CMsgSOCacheUnsubscribed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheUnsubscribedDefaultTypeInternal _CMsgSOCacheUnsubscribed_default_instance_;
constexpr CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_list_()
  , owner_soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , sync_version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u){}
struct CMsgSOCacheSubscriptionCheckDefaultTypeInternal {
  constexpr CMsgSOCacheSubscriptionCheckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscriptionCheckDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscriptionCheck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscriptionCheckDefaultTypeInternal _CMsgSOCacheSubscriptionCheck_default_instance_;
constexpr CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_soid_(nullptr){}
struct CMsgSOCacheSubscriptionRefreshDefaultTypeInternal {
  constexpr CMsgSOCacheSubscriptionRefreshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheSubscriptionRefreshDefaultTypeInternal() {}
  union {
    CMsgSOCacheSubscriptionRefresh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheSubscriptionRefreshDefaultTypeInternal _CMsgSOCacheSubscriptionRefresh_default_instance_;
constexpr CMsgSOCacheVersion::CMsgSOCacheVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSOCacheVersionDefaultTypeInternal {
  constexpr CMsgSOCacheVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheVersionDefaultTypeInternal() {}
  union {
    CMsgSOCacheVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheVersionDefaultTypeInternal _CMsgSOCacheVersion_default_instance_;
constexpr CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamids_()
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msgtype_(0u){}
struct CMsgGCMultiplexMessageDefaultTypeInternal {
  constexpr CMsgGCMultiplexMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMultiplexMessageDefaultTypeInternal() {}
  union {
    CMsgGCMultiplexMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMultiplexMessageDefaultTypeInternal _CMsgGCMultiplexMessage_default_instance_;
constexpr CMsgGCToGCSubGCStarting::CMsgGCToGCSubGCStarting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_index_(0u){}
struct CMsgGCToGCSubGCStartingDefaultTypeInternal {
  constexpr CMsgGCToGCSubGCStartingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCSubGCStartingDefaultTypeInternal() {}
  union {
    CMsgGCToGCSubGCStarting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCSubGCStartingDefaultTypeInternal _CMsgGCToGCSubGCStarting_default_instance_;
constexpr CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_instances_()
  , dir_index_(0u){}
struct CGCToGCMsgMasterAck_ProcessDefaultTypeInternal {
  constexpr CGCToGCMsgMasterAck_ProcessDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgMasterAck_ProcessDefaultTypeInternal() {}
  union {
    CGCToGCMsgMasterAck_Process _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgMasterAck_ProcessDefaultTypeInternal _CGCToGCMsgMasterAck_Process_default_instance_;
constexpr CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_()
  , machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , process_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dir_index_(0u){}
struct CGCToGCMsgMasterAckDefaultTypeInternal {
  constexpr CGCToGCMsgMasterAckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgMasterAckDefaultTypeInternal() {}
  union {
    CGCToGCMsgMasterAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgMasterAckDefaultTypeInternal _CGCToGCMsgMasterAck_default_instance_;
constexpr CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CGCToGCMsgMasterAck_ResponseDefaultTypeInternal {
  constexpr CGCToGCMsgMasterAck_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgMasterAck_ResponseDefaultTypeInternal() {}
  union {
    CGCToGCMsgMasterAck_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgMasterAck_ResponseDefaultTypeInternal _CGCToGCMsgMasterAck_Response_default_instance_;
constexpr CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_initial_startup_(false){}
struct CMsgGCToGCUniverseStartupDefaultTypeInternal {
  constexpr CMsgGCToGCUniverseStartupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUniverseStartupDefaultTypeInternal() {}
  union {
    CMsgGCToGCUniverseStartup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUniverseStartupDefaultTypeInternal _CMsgGCToGCUniverseStartup_default_instance_;
constexpr CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(0){}
struct CMsgGCToGCUniverseStartupResponseDefaultTypeInternal {
  constexpr CMsgGCToGCUniverseStartupResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUniverseStartupResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCUniverseStartupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUniverseStartupResponseDefaultTypeInternal _CMsgGCToGCUniverseStartupResponse_default_instance_;
constexpr CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dir_index_(0u){}
struct CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal {
  constexpr CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal() {}
  union {
    CGCToGCMsgMasterStartupComplete_GCInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgMasterStartupComplete_GCInfoDefaultTypeInternal _CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_;
constexpr CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gc_info_(){}
struct CGCToGCMsgMasterStartupCompleteDefaultTypeInternal {
  constexpr CGCToGCMsgMasterStartupCompleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgMasterStartupCompleteDefaultTypeInternal() {}
  union {
    CGCToGCMsgMasterStartupComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgMasterStartupCompleteDefaultTypeInternal _CGCToGCMsgMasterStartupComplete_default_instance_;
constexpr CGCToGCMsgRouted::CGCToGCMsgRouted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_id_(PROTOBUF_ULONGLONG(0))
  , msg_type_(0u){}
struct CGCToGCMsgRoutedDefaultTypeInternal {
  constexpr CGCToGCMsgRoutedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgRoutedDefaultTypeInternal() {}
  union {
    CGCToGCMsgRouted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgRoutedDefaultTypeInternal _CGCToGCMsgRouted_default_instance_;
constexpr CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : net_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_type_(0u){}
struct CGCToGCMsgRoutedReplyDefaultTypeInternal {
  constexpr CGCToGCMsgRoutedReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCToGCMsgRoutedReplyDefaultTypeInternal() {}
  union {
    CGCToGCMsgRoutedReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCToGCMsgRoutedReplyDefaultTypeInternal _CGCToGCMsgRoutedReply_default_instance_;
constexpr CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , ip_(0u)
  , trusted_(false){}
struct CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal {
  constexpr CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal() {}
  union {
    CMsgGCUpdateSubGCSessionInfo_CMsgUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCUpdateSubGCSessionInfo_CMsgUpdateDefaultTypeInternal _CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_;
constexpr CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : updates_(){}
struct CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal {
  constexpr CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal() {}
  union {
    CMsgGCUpdateSubGCSessionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCUpdateSubGCSessionInfoDefaultTypeInternal _CMsgGCUpdateSubGCSessionInfo_default_instance_;
constexpr CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCRequestSubGCSessionInfoDefaultTypeInternal {
  constexpr CMsgGCRequestSubGCSessionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestSubGCSessionInfoDefaultTypeInternal() {}
  union {
    CMsgGCRequestSubGCSessionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestSubGCSessionInfoDefaultTypeInternal _CMsgGCRequestSubGCSessionInfo_default_instance_;
constexpr CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(0u)
  , port_(0u)
  , trusted_(false)
  , success_(false){}
struct CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal {
  constexpr CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestSubGCSessionInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestSubGCSessionInfoResponseDefaultTypeInternal _CMsgGCRequestSubGCSessionInfoResponse_default_instance_;
constexpr CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soid_(nullptr)
  , version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u)
  , cached_file_version_(0u){}
struct CMsgSOCacheHaveVersionDefaultTypeInternal {
  constexpr CMsgSOCacheHaveVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSOCacheHaveVersionDefaultTypeInternal() {}
  union {
    CMsgSOCacheHaveVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSOCacheHaveVersionDefaultTypeInternal _CMsgSOCacheHaveVersion_default_instance_;
constexpr CMsgClientHello::CMsgClientHello(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socache_have_versions_()
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamdatagram_login_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , platform_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u)
  , client_session_need_(0u)
  , client_launcher_(0)

  , client_language_(0u)
  , engine_(0)

  , platform_id_(0u)
  , os_type_(0)
  , render_system_(0u)
  , render_system_req_(0u)
  , screen_width_(0u)
  , screen_height_(0u)
  , screen_refresh_(0u)
  , render_width_(0u)
  , render_height_(0u)
  , swap_width_(0u)
  , swap_height_(0u)
  , is_steam_china_(false)
  , is_steam_china_client_(false){}
struct CMsgClientHelloDefaultTypeInternal {
  constexpr CMsgClientHelloDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientHelloDefaultTypeInternal() {}
  union {
    CMsgClientHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientHelloDefaultTypeInternal _CMsgClientHello_default_instance_;
constexpr CMsgClientWelcome_Location::CMsgClientWelcome_Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latitude_(0)
  , longitude_(0){}
struct CMsgClientWelcome_LocationDefaultTypeInternal {
  constexpr CMsgClientWelcome_LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientWelcome_LocationDefaultTypeInternal() {}
  union {
    CMsgClientWelcome_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientWelcome_LocationDefaultTypeInternal _CMsgClientWelcome_Location_default_instance_;
constexpr CMsgClientWelcome::CMsgClientWelcome(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outofdate_subscribed_caches_()
  , uptodate_subscribed_caches_()
  , game_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , save_game_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , items_game_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txn_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_data2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , balance_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , additional_welcome_msgs_(nullptr)
  , version_(0u)
  , item_schema_crc_(0u)
  , gc_socache_file_version_(0u)
  , rtime32_gc_welcome_timestamp_(0u)
  , currency_(0u)
  , balance_(0u)
  , has_accepted_china_ssa_(false)
  , is_banned_steam_china_(false){}
struct CMsgClientWelcomeDefaultTypeInternal {
  constexpr CMsgClientWelcomeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientWelcomeDefaultTypeInternal() {}
  union {
    CMsgClientWelcome _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientWelcomeDefaultTypeInternal _CMsgClientWelcome_default_instance_;
constexpr CMsgConnectionStatus::CMsgConnectionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , client_session_need_(0u)
  , queue_position_(0)
  , queue_size_(0)
  , wait_seconds_(0)
  , estimated_wait_seconds_remaining_(0){}
struct CMsgConnectionStatusDefaultTypeInternal {
  constexpr CMsgConnectionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConnectionStatusDefaultTypeInternal() {}
  union {
    CMsgConnectionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConnectionStatusDefaultTypeInternal _CMsgConnectionStatus_default_instance_;
constexpr CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(PROTOBUF_ULONGLONG(0))
  , service_id_(0u){}
struct CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal {
  constexpr CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal() {}
  union {
    CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCSOCacheSubscribe_CMsgHaveVersionsDefaultTypeInternal _CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_;
constexpr CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : have_versions_()
  , subscriber_(PROTOBUF_ULONGLONG(0))
  , subscribe_to_id_(PROTOBUF_ULONGLONG(0))
  , sync_version_(PROTOBUF_ULONGLONG(0))
  , subscribe_to_type_(0u){}
struct CMsgGCToGCSOCacheSubscribeDefaultTypeInternal {
  constexpr CMsgGCToGCSOCacheSubscribeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCSOCacheSubscribeDefaultTypeInternal() {}
  union {
    CMsgGCToGCSOCacheSubscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCSOCacheSubscribeDefaultTypeInternal _CMsgGCToGCSOCacheSubscribe_default_instance_;
constexpr CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscriber_(PROTOBUF_ULONGLONG(0))
  , unsubscribe_from_id_(PROTOBUF_ULONGLONG(0))
  , unsubscribe_from_type_(0u){}
struct CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal {
  constexpr CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal() {}
  union {
    CMsgGCToGCSOCacheUnsubscribe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCSOCacheUnsubscribeDefaultTypeInternal _CMsgGCToGCSOCacheUnsubscribe_default_instance_;
constexpr CMsgGCClientPing::CMsgGCClientPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCClientPingDefaultTypeInternal {
  constexpr CMsgGCClientPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCClientPingDefaultTypeInternal() {}
  union {
    CMsgGCClientPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCClientPingDefaultTypeInternal _CMsgGCClientPing_default_instance_;
constexpr CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_details_(nullptr)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , age_seconds_(0u){}
struct CMsgGCToGCForwardAccountDetailsDefaultTypeInternal {
  constexpr CMsgGCToGCForwardAccountDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCForwardAccountDetailsDefaultTypeInternal() {}
  union {
    CMsgGCToGCForwardAccountDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCForwardAccountDetailsDefaultTypeInternal _CMsgGCToGCForwardAccountDetails_default_instance_;
constexpr CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_account_details_(nullptr)
  , account_id_(0u){}
struct CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCLoadSessionSOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCLoadSessionSOCacheDefaultTypeInternal _CMsgGCToGCLoadSessionSOCache_default_instance_;
constexpr CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal {
  constexpr CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCLoadSessionSOCacheResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCLoadSessionSOCacheResponseDefaultTypeInternal _CMsgGCToGCLoadSessionSOCacheResponse_default_instance_;
constexpr CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_sessions_(0u)
  , server_sessions_(0u)
  , in_logon_surge_(false){}
struct CMsgGCToGCUpdateSessionStatsDefaultTypeInternal {
  constexpr CMsgGCToGCUpdateSessionStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSessionStatsDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSessionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUpdateSessionStatsDefaultTypeInternal _CMsgGCToGCUpdateSessionStats_default_instance_;
constexpr CMsgGCToClientRequestDropped::CMsgGCToClientRequestDropped(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToClientRequestDroppedDefaultTypeInternal {
  constexpr CMsgGCToClientRequestDroppedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestDroppedDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestDropped _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientRequestDroppedDefaultTypeInternal _CMsgGCToClientRequestDropped_default_instance_;
constexpr CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gameitemid_(0u){}
struct CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal {
  constexpr CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal() {}
  union {
    CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_PopulateItemDescriptions_Request_SingleItemDescriptionDefaultTypeInternal _CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_;
constexpr CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptions_()
  , language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal {
  constexpr CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal() {}
  union {
    CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlockDefaultTypeInternal _CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_;
constexpr CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : languages_()
  , appid_(0u){}
struct CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal {
  constexpr CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_PopulateItemDescriptions_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_PopulateItemDescriptions_RequestDefaultTypeInternal _CWorkshop_PopulateItemDescriptions_Request_default_instance_;
constexpr CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , gameitemid_(0u){}
struct CWorkshop_GetContributors_RequestDefaultTypeInternal {
  constexpr CWorkshop_GetContributors_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetContributors_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetContributors_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetContributors_RequestDefaultTypeInternal _CWorkshop_GetContributors_Request_default_instance_;
constexpr CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contributors_(){}
struct CWorkshop_GetContributors_ResponseDefaultTypeInternal {
  constexpr CWorkshop_GetContributors_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetContributors_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetContributors_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetContributors_ResponseDefaultTypeInternal _CWorkshop_GetContributors_Response_default_instance_;
constexpr CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rule_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workshop_file_id_(PROTOBUF_ULONGLONG(0))
  , revenue_percentage_(0)
  , rule_type_(1u){}
struct CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal {
  constexpr CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal() {}
  union {
    CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRuleDefaultTypeInternal _CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_;
constexpr CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rule_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workshop_file_id_(PROTOBUF_ULONGLONG(0)){}
struct CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRuleDefaultTypeInternal {
  constexpr CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRuleDefaultTypeInternal() {}
  union {
    CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRuleDefaultTypeInternal _CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule_default_instance_;
constexpr CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rule_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , revenue_percentage_(0){}
struct CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal {
  constexpr CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal() {}
  union {
    CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRuleDefaultTypeInternal _CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_;
constexpr CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : associated_workshop_files_()
  , partner_accounts_()
  , associated_workshop_file_for_direct_payments_(nullptr)
  , appid_(0u)
  , gameitemid_(0u)
  , validate_only_(false)
  , make_workshop_files_subscribable_(false){}
struct CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal {
  constexpr CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_SetItemPaymentRules_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_SetItemPaymentRules_RequestDefaultTypeInternal _CWorkshop_SetItemPaymentRules_Request_default_instance_;
constexpr CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validation_errors_(){}
struct CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal {
  constexpr CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_SetItemPaymentRules_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_SetItemPaymentRules_ResponseDefaultTypeInternal _CWorkshop_SetItemPaymentRules_Response_default_instance_;
constexpr CCommunity_GetClanAnnouncements_Request::CCommunity_GetClanAnnouncements_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_tags_()
  , language_preference_()
  , steamid_(PROTOBUF_ULONGLONG(0))
  , offset_(0u)
  , count_(0u)
  , maxchars_(0u)
  , strip_html_(false)
  , require_no_tags_(false)
  , hidden_only_(false)
  , only_gid_(false)
  , rtime_oldest_date_(0u)
  , include_hidden_(false)
  , include_partner_events_(false){}
struct CCommunity_GetClanAnnouncements_RequestDefaultTypeInternal {
  constexpr CCommunity_GetClanAnnouncements_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanAnnouncements_RequestDefaultTypeInternal() {}
  union {
    CCommunity_GetClanAnnouncements_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanAnnouncements_RequestDefaultTypeInternal _CCommunity_GetClanAnnouncements_Request_default_instance_;
constexpr CCommunity_GetClanAnnouncements_Response::CCommunity_GetClanAnnouncements_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcements_()
  , maxchars_(0u)
  , strip_html_(false){}
struct CCommunity_GetClanAnnouncements_ResponseDefaultTypeInternal {
  constexpr CCommunity_GetClanAnnouncements_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCommunity_GetClanAnnouncements_ResponseDefaultTypeInternal() {}
  union {
    CCommunity_GetClanAnnouncements_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCommunity_GetClanAnnouncements_ResponseDefaultTypeInternal _CCommunity_GetClanAnnouncements_Response_default_instance_;
constexpr CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(PROTOBUF_ULONGLONG(0))
  , broadcast_id_(PROTOBUF_ULONGLONG(0))
  , appid_(0u){}
struct CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal {
  constexpr CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal() {}
  union {
    CBroadcast_PostGameDataFrame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CBroadcast_PostGameDataFrame_RequestDefaultTypeInternal _CBroadcast_PostGameDataFrame_Request_default_instance_;
constexpr CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : objects_()
  , type_(0u)
  , service_id_(0u){}
struct CMsgSerializedSOCache_TypeCacheDefaultTypeInternal {
  constexpr CMsgSerializedSOCache_TypeCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSerializedSOCache_TypeCacheDefaultTypeInternal() {}
  union {
    CMsgSerializedSOCache_TypeCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSerializedSOCache_TypeCacheDefaultTypeInternal _CMsgSerializedSOCache_TypeCache_default_instance_;
constexpr CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(PROTOBUF_ULONGLONG(0))
  , service_(0u){}
struct CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal {
  constexpr CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal() {}
  union {
    CMsgSerializedSOCache_Cache_Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSerializedSOCache_Cache_VersionDefaultTypeInternal _CMsgSerializedSOCache_Cache_Version_default_instance_;
constexpr CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : versions_()
  , type_caches_()
  , id_(PROTOBUF_ULONGLONG(0))
  , type_(0u){}
struct CMsgSerializedSOCache_CacheDefaultTypeInternal {
  constexpr CMsgSerializedSOCache_CacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSerializedSOCache_CacheDefaultTypeInternal() {}
  union {
    CMsgSerializedSOCache_Cache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSerializedSOCache_CacheDefaultTypeInternal _CMsgSerializedSOCache_Cache_default_instance_;
constexpr CMsgSerializedSOCache::CMsgSerializedSOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : caches_()
  , file_version_(0u)
  , gc_socache_file_version_(0u){}
struct CMsgSerializedSOCacheDefaultTypeInternal {
  constexpr CMsgSerializedSOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSerializedSOCacheDefaultTypeInternal() {}
  union {
    CMsgSerializedSOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSerializedSOCacheDefaultTypeInternal _CMsgSerializedSOCache_default_instance_;
constexpr CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convar_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , poll_id_(0u){}
struct CMsgGCToClientPollConvarRequestDefaultTypeInternal {
  constexpr CMsgGCToClientPollConvarRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPollConvarRequestDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollConvarRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPollConvarRequestDefaultTypeInternal _CMsgGCToClientPollConvarRequest_default_instance_;
constexpr CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : convar_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , poll_id_(0u){}
struct CMsgGCToClientPollConvarResponseDefaultTypeInternal {
  constexpr CMsgGCToClientPollConvarResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientPollConvarResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientPollConvarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientPollConvarResponseDefaultTypeInternal _CMsgGCToClientPollConvarResponse_default_instance_;
constexpr CGCMsgCompressedMsgToClient::CGCMsgCompressedMsgToClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compressed_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(0u){}
struct CGCMsgCompressedMsgToClientDefaultTypeInternal {
  constexpr CGCMsgCompressedMsgToClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgCompressedMsgToClientDefaultTypeInternal() {}
  union {
    CGCMsgCompressedMsgToClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgCompressedMsgToClientDefaultTypeInternal _CGCMsgCompressedMsgToClient_default_instance_;
constexpr CMsgGCToGCMasterBroadcastMessage::CMsgGCToGCMasterBroadcastMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , users_per_second_(0u)
  , send_to_users_(false)
  , send_to_servers_(false)
  , msg_id_(0u){}
struct CMsgGCToGCMasterBroadcastMessageDefaultTypeInternal {
  constexpr CMsgGCToGCMasterBroadcastMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterBroadcastMessageDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterBroadcastMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterBroadcastMessageDefaultTypeInternal _CMsgGCToGCMasterBroadcastMessage_default_instance_;
constexpr CMsgGCToGCMasterSubscribeToCache::CMsgGCToGCMasterSubscribeToCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_()
  , steam_ids_()
  , soid_id_(PROTOBUF_ULONGLONG(0))
  , soid_type_(0u){}
struct CMsgGCToGCMasterSubscribeToCacheDefaultTypeInternal {
  constexpr CMsgGCToGCMasterSubscribeToCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterSubscribeToCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterSubscribeToCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterSubscribeToCacheDefaultTypeInternal _CMsgGCToGCMasterSubscribeToCache_default_instance_;
constexpr CMsgGCToGCMasterSubscribeToCacheResponse::CMsgGCToGCMasterSubscribeToCacheResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCMasterSubscribeToCacheResponseDefaultTypeInternal {
  constexpr CMsgGCToGCMasterSubscribeToCacheResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterSubscribeToCacheResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterSubscribeToCacheResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterSubscribeToCacheResponseDefaultTypeInternal _CMsgGCToGCMasterSubscribeToCacheResponse_default_instance_;
constexpr CMsgGCToGCMasterSubscribeToCacheAsync::CMsgGCToGCMasterSubscribeToCacheAsync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscribe_msg_(nullptr){}
struct CMsgGCToGCMasterSubscribeToCacheAsyncDefaultTypeInternal {
  constexpr CMsgGCToGCMasterSubscribeToCacheAsyncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterSubscribeToCacheAsyncDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterSubscribeToCacheAsync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterSubscribeToCacheAsyncDefaultTypeInternal _CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_;
constexpr CMsgGCToGCMasterUnsubscribeFromCache::CMsgGCToGCMasterUnsubscribeFromCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_()
  , steam_ids_()
  , soid_id_(PROTOBUF_ULONGLONG(0))
  , soid_type_(0u){}
struct CMsgGCToGCMasterUnsubscribeFromCacheDefaultTypeInternal {
  constexpr CMsgGCToGCMasterUnsubscribeFromCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterUnsubscribeFromCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterUnsubscribeFromCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterUnsubscribeFromCacheDefaultTypeInternal _CMsgGCToGCMasterUnsubscribeFromCache_default_instance_;
constexpr CMsgGCToGCMasterDestroyCache::CMsgGCToGCMasterDestroyCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soid_id_(PROTOBUF_ULONGLONG(0))
  , soid_type_(0u){}
struct CMsgGCToGCMasterDestroyCacheDefaultTypeInternal {
  constexpr CMsgGCToGCMasterDestroyCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCMasterDestroyCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCMasterDestroyCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCMasterDestroyCacheDefaultTypeInternal _CMsgGCToGCMasterDestroyCache_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gcsdk_5fgcmessages_2eproto[72];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gcsdk_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gcsdk_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, contents_),
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, msg_key_),
  PROTOBUF_FIELD_OFFSET(::CExtraMsgBlock, is_compressed_),
  1,
  0,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCAssertJobData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAssertJobData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAssertJobData, message_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAssertJobData, message_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCConCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCConCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCConCommand, command_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert_Request, key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert_Request, requesting_job_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSDOAssert, requests_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSHA1Digest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSHA1Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSHA1Digest, block1_),
  PROTOBUF_FIELD_OFFSET(::CMsgSHA1Digest, block2_),
  PROTOBUF_FIELD_OFFSET(::CMsgSHA1Digest, block3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOIDOwner, id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, object_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOSingleObject, service_id_),
  3,
  0,
  2,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects_SingleObject, object_data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_modified_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_added_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, objects_removed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOMultipleObjects, service_id_),
  ~0u,
  1,
  ~0u,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed_SubscribedType, object_data_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, objects_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, service_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribed, sync_version_),
  ~0u,
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, service_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscribedUpToDate, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheUnsubscribed, owner_soid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, owner_soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, service_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionCheck, sync_version_),
  1,
  0,
  3,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheSubscriptionRefresh, owner_soid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheVersion, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMultiplexMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMultiplexMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMultiplexMessage, msgtype_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMultiplexMessage, payload_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMultiplexMessage, steamids_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSubGCStarting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSubGCStarting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSubGCStarting, dir_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Process, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Process, dir_index_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Process, type_instances_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, dir_index_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, process_name_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck, directory_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterAck_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartup, is_initial_startup_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartupResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUniverseStartupResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, dir_index_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete_GCInfo, machine_name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgMasterStartupComplete, gc_info_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRouted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRouted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRouted, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRouted, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRouted, net_message_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRoutedReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRoutedReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRoutedReply, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CGCToGCMsgRoutedReply, net_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCUpdateSubGCSessionInfo, updates_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfo, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, trusted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestSubGCSessionInfoResponse, success_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, soid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSOCacheHaveVersion, cached_file_version_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, socache_have_versions_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_session_need_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_launcher_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, secret_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, client_language_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, engine_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, steamdatagram_login_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, platform_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, game_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_system_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_system_req_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, screen_refresh_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, render_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, swap_width_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, swap_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, is_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, is_steam_china_client_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientHello, platform_name_),
  4,
  ~0u,
  5,
  6,
  0,
  7,
  8,
  1,
  9,
  2,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome_Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome_Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome_Location, country_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, outofdate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, uptodate_subscribed_caches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, save_game_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, item_schema_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, items_game_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, gc_socache_file_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, txn_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, game_data2_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, rtime32_gc_welcome_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, balance_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, has_accepted_china_ssa_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, is_banned_steam_china_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientWelcome, additional_welcome_msgs_),
  8,
  0,
  ~0u,
  ~0u,
  6,
  1,
  9,
  2,
  10,
  3,
  4,
  11,
  12,
  13,
  5,
  14,
  15,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, client_session_need_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, queue_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, queue_size_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, wait_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectionStatus, estimated_wait_seconds_remaining_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, subscribe_to_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, sync_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, have_versions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheSubscribe, subscribe_to_type_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_type_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCForwardAccountDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCForwardAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCForwardAccountDetails, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCForwardAccountDetails, account_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCForwardAccountDetails, age_seconds_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCLoadSessionSOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCLoadSessionSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCLoadSessionSOCache, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCLoadSessionSOCache, forward_account_details_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCLoadSessionSOCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSessionStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSessionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSessionStats, user_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSessionStats, server_sessions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSessionStats, in_logon_surge_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestDropped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, gameitemid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription, item_description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, language_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock, descriptions_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_PopulateItemDescriptions_Request, languages_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Request, gameitemid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetContributors_Response, contributors_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_description_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, rule_type_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule, workshop_file_id_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule, rule_description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, rule_description_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, gameitemid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, associated_workshop_files_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, partner_accounts_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, validate_only_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, make_workshop_files_subscribable_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Request, associated_workshop_file_for_direct_payments_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_SetItemPaymentRules_Response, validation_errors_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, offset_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, count_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, maxchars_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, strip_html_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, required_tags_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, require_no_tags_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, language_preference_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, hidden_only_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, only_gid_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, rtime_oldest_date_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, include_hidden_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Request, include_partner_events_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Response, maxchars_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Response, strip_html_),
  PROTOBUF_FIELD_OFFSET(::CCommunity_GetClanAnnouncements_Response, announcements_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, broadcast_id_),
  PROTOBUF_FIELD_OFFSET(::CBroadcast_PostGameDataFrame_Request, frame_data_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_TypeCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_TypeCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_TypeCache, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_TypeCache, objects_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_TypeCache, service_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache_Version, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache_Version, service_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache_Version, version_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, versions_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache_Cache, type_caches_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache, file_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache, caches_),
  PROTOBUF_FIELD_OFFSET(::CMsgSerializedSOCache, gc_socache_file_version_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarRequest, convar_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarRequest, poll_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarResponse, poll_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientPollConvarResponse, convar_value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgCompressedMsgToClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgCompressedMsgToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCMsgCompressedMsgToClient, msg_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgCompressedMsgToClient, compressed_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, users_per_second_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, send_to_users_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, send_to_servers_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, msg_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterBroadcastMessage, msg_data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, soid_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCache, steam_ids_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCacheAsync, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCacheAsync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterSubscribeToCacheAsync, subscribe_msg_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, soid_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterUnsubscribeFromCache, steam_ids_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterDestroyCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterDestroyCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterDestroyCache, soid_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCMasterDestroyCache, soid_id_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CExtraMsgBlock)},
  { 13, 20, sizeof(::CMsgGCAssertJobData)},
  { 22, 28, sizeof(::CMsgGCConCommand)},
  { 29, 36, sizeof(::CMsgSDOAssert_Request)},
  { 38, 45, sizeof(::CMsgSDOAssert)},
  { 47, 55, sizeof(::CMsgSHA1Digest)},
  { 58, 65, sizeof(::CMsgSOIDOwner)},
  { 67, 77, sizeof(::CMsgSOSingleObject)},
  { 82, 89, sizeof(::CMsgSOMultipleObjects_SingleObject)},
  { 91, 102, sizeof(::CMsgSOMultipleObjects)},
  { 108, 115, sizeof(::CMsgSOCacheSubscribed_SubscribedType)},
  { 117, 128, sizeof(::CMsgSOCacheSubscribed)},
  { 134, 144, sizeof(::CMsgSOCacheSubscribedUpToDate)},
  { 149, 155, sizeof(::CMsgSOCacheUnsubscribed)},
  { 156, 166, sizeof(::CMsgSOCacheSubscriptionCheck)},
  { 171, 177, sizeof(::CMsgSOCacheSubscriptionRefresh)},
  { 178, 184, sizeof(::CMsgSOCacheVersion)},
  { 185, 193, sizeof(::CMsgGCMultiplexMessage)},
  { 196, 202, sizeof(::CMsgGCToGCSubGCStarting)},
  { 203, 210, sizeof(::CGCToGCMsgMasterAck_Process)},
  { 212, 221, sizeof(::CGCToGCMsgMasterAck)},
  { 225, 231, sizeof(::CGCToGCMsgMasterAck_Response)},
  { 232, 238, sizeof(::CMsgGCToGCUniverseStartup)},
  { 239, 245, sizeof(::CMsgGCToGCUniverseStartupResponse)},
  { 246, 253, sizeof(::CGCToGCMsgMasterStartupComplete_GCInfo)},
  { 255, -1, sizeof(::CGCToGCMsgMasterStartupComplete)},
  { 261, 269, sizeof(::CGCToGCMsgRouted)},
  { 272, 279, sizeof(::CGCToGCMsgRoutedReply)},
  { 281, 289, sizeof(::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate)},
  { 292, -1, sizeof(::CMsgGCUpdateSubGCSessionInfo)},
  { 298, 304, sizeof(::CMsgGCRequestSubGCSessionInfo)},
  { 305, 314, sizeof(::CMsgGCRequestSubGCSessionInfoResponse)},
  { 318, 327, sizeof(::CMsgSOCacheHaveVersion)},
  { 331, 359, sizeof(::CMsgClientHello)},
  { 382, 390, sizeof(::CMsgClientWelcome_Location)},
  { 393, 416, sizeof(::CMsgClientWelcome)},
  { 434, 445, sizeof(::CMsgConnectionStatus)},
  { 451, 458, sizeof(::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions)},
  { 460, 470, sizeof(::CMsgGCToGCSOCacheSubscribe)},
  { 475, 483, sizeof(::CMsgGCToGCSOCacheUnsubscribe)},
  { 486, -1, sizeof(::CMsgGCClientPing)},
  { 491, 499, sizeof(::CMsgGCToGCForwardAccountDetails)},
  { 502, 509, sizeof(::CMsgGCToGCLoadSessionSOCache)},
  { 511, -1, sizeof(::CMsgGCToGCLoadSessionSOCacheResponse)},
  { 516, 524, sizeof(::CMsgGCToGCUpdateSessionStats)},
  { 527, -1, sizeof(::CMsgGCToClientRequestDropped)},
  { 532, 539, sizeof(::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription)},
  { 541, 548, sizeof(::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock)},
  { 550, 557, sizeof(::CWorkshop_PopulateItemDescriptions_Request)},
  { 559, 566, sizeof(::CWorkshop_GetContributors_Request)},
  { 568, -1, sizeof(::CWorkshop_GetContributors_Response)},
  { 574, 583, sizeof(::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule)},
  { 587, 594, sizeof(::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule)},
  { 596, 604, sizeof(::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule)},
  { 607, 619, sizeof(::CWorkshop_SetItemPaymentRules_Request)},
  { 626, -1, sizeof(::CWorkshop_SetItemPaymentRules_Response)},
  { 632, 650, sizeof(::CCommunity_GetClanAnnouncements_Request)},
  { 663, 671, sizeof(::CCommunity_GetClanAnnouncements_Response)},
  { 674, 683, sizeof(::CBroadcast_PostGameDataFrame_Request)},
  { 687, 695, sizeof(::CMsgSerializedSOCache_TypeCache)},
  { 698, 705, sizeof(::CMsgSerializedSOCache_Cache_Version)},
  { 707, 716, sizeof(::CMsgSerializedSOCache_Cache)},
  { 720, 728, sizeof(::CMsgSerializedSOCache)},
  { 731, 738, sizeof(::CMsgGCToClientPollConvarRequest)},
  { 740, 747, sizeof(::CMsgGCToClientPollConvarResponse)},
  { 749, 756, sizeof(::CGCMsgCompressedMsgToClient)},
  { 758, 768, sizeof(::CMsgGCToGCMasterBroadcastMessage)},
  { 773, 782, sizeof(::CMsgGCToGCMasterSubscribeToCache)},
  { 786, -1, sizeof(::CMsgGCToGCMasterSubscribeToCacheResponse)},
  { 791, 797, sizeof(::CMsgGCToGCMasterSubscribeToCacheAsync)},
  { 798, 807, sizeof(::CMsgGCToGCMasterUnsubscribeFromCache)},
  { 811, 818, sizeof(::CMsgGCToGCMasterDestroyCache)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CExtraMsgBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCAssertJobData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCConCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSDOAssert_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSDOAssert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSHA1Digest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOIDOwner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOSingleObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOMultipleObjects_SingleObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOMultipleObjects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscribed_SubscribedType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscribed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscribedUpToDate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheUnsubscribed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscriptionCheck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheSubscriptionRefresh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMultiplexMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCSubGCStarting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgMasterAck_Process_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgMasterAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgMasterAck_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUniverseStartup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUniverseStartupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgMasterStartupComplete_GCInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgMasterStartupComplete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgRouted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCToGCMsgRoutedReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCUpdateSubGCSessionInfo_CMsgUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCUpdateSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestSubGCSessionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestSubGCSessionInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSOCacheHaveVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientHello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientWelcome_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientWelcome_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConnectionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCSOCacheSubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCSOCacheUnsubscribe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCClientPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCForwardAccountDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCLoadSessionSOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCLoadSessionSOCacheResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUpdateSessionStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientRequestDropped_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_PopulateItemDescriptions_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetContributors_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetContributors_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_SetItemPaymentRules_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_SetItemPaymentRules_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanAnnouncements_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCommunity_GetClanAnnouncements_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CBroadcast_PostGameDataFrame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSerializedSOCache_TypeCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSerializedSOCache_Cache_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSerializedSOCache_Cache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSerializedSOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPollConvarRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientPollConvarResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgCompressedMsgToClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterBroadcastMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterSubscribeToCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterSubscribeToCacheResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterSubscribeToCacheAsync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterUnsubscribeFromCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCMasterDestroyCache_default_instance_),
};

const char descriptor_table_protodef_gcsdk_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026gcsdk_gcmessages.proto\032\023steammessages."
  "proto\032\030steammessages_base.proto\"\\\n\016CExtr"
  "aMsgBlock\022\020\n\010msg_type\030\001 \001(\r\022\020\n\010contents\030"
  "\002 \001(\014\022\017\n\007msg_key\030\003 \001(\004\022\025\n\ris_compressed\030"
  "\004 \001(\010\"A\n\023CMsgGCAssertJobData\022\024\n\014message_"
  "type\030\001 \001(\t\022\024\n\014message_data\030\002 \001(\014\"#\n\020CMsg"
  "GCConCommand\022\017\n\007command\030\001 \001(\t\"{\n\rCMsgSDO"
  "Assert\022\020\n\010sdo_type\030\001 \001(\005\022(\n\010requests\030\002 \003"
  "(\0132\026.CMsgSDOAssert.Request\032.\n\007Request\022\013\n"
  "\003key\030\001 \003(\004\022\026\n\016requesting_job\030\002 \001(\t\"@\n\016CM"
  "sgSHA1Digest\022\016\n\006block1\030\001 \002(\006\022\016\n\006block2\030\002"
  " \002(\006\022\016\n\006block3\030\003 \002(\007\")\n\rCMsgSOIDOwner\022\014\n"
  "\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\"\203\001\n\022CMsgSOSingle"
  "Object\022\017\n\007type_id\030\002 \001(\005\022\023\n\013object_data\030\003"
  " \001(\014\022\017\n\007version\030\004 \001(\006\022\"\n\nowner_soid\030\005 \001("
  "\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\006 \001(\r\"\333\002"
  "\n\025CMsgSOMultipleObjects\022=\n\020objects_modif"
  "ied\030\002 \003(\0132#.CMsgSOMultipleObjects.Single"
  "Object\022\017\n\007version\030\003 \001(\006\022:\n\robjects_added"
  "\030\004 \003(\0132#.CMsgSOMultipleObjects.SingleObj"
  "ect\022<\n\017objects_removed\030\005 \003(\0132#.CMsgSOMul"
  "tipleObjects.SingleObject\022\"\n\nowner_soid\030"
  "\006 \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\007 \001("
  "\r\032@\n\014SingleObject\022\017\n\007type_id\030\001 \001(\005\022\023\n\013ob"
  "ject_data\030\002 \001(\014:\n\200\246\035\200\002\210\246\035\200\010\"\374\001\n\025CMsgSOCa"
  "cheSubscribed\0226\n\007objects\030\002 \003(\0132%.CMsgSOC"
  "acheSubscribed.SubscribedType\022\017\n\007version"
  "\030\003 \001(\006\022\"\n\nowner_soid\030\004 \001(\0132\016.CMsgSOIDOwn"
  "er\022\022\n\nservice_id\030\005 \001(\r\022\024\n\014service_list\030\006"
  " \003(\r\022\024\n\014sync_version\030\007 \001(\006\0326\n\016Subscribed"
  "Type\022\017\n\007type_id\030\001 \001(\005\022\023\n\013object_data\030\002 \003"
  "(\014\"\224\001\n\035CMsgSOCacheSubscribedUpToDate\022\017\n\007"
  "version\030\001 \001(\006\022\"\n\nowner_soid\030\002 \001(\0132\016.CMsg"
  "SOIDOwner\022\022\n\nservice_id\030\003 \001(\r\022\024\n\014service"
  "_list\030\004 \003(\r\022\024\n\014sync_version\030\005 \001(\006\"=\n\027CMs"
  "gSOCacheUnsubscribed\022\"\n\nowner_soid\030\002 \001(\013"
  "2\016.CMsgSOIDOwner\"\223\001\n\034CMsgSOCacheSubscrip"
  "tionCheck\022\017\n\007version\030\002 \001(\006\022\"\n\nowner_soid"
  "\030\003 \001(\0132\016.CMsgSOIDOwner\022\022\n\nservice_id\030\004 \001"
  "(\r\022\024\n\014service_list\030\005 \003(\r\022\024\n\014sync_version"
  "\030\006 \001(\006\"D\n\036CMsgSOCacheSubscriptionRefresh"
  "\022\"\n\nowner_soid\030\002 \001(\0132\016.CMsgSOIDOwner\"%\n\022"
  "CMsgSOCacheVersion\022\017\n\007version\030\001 \001(\006\"L\n\026C"
  "MsgGCMultiplexMessage\022\017\n\007msgtype\030\001 \001(\r\022\017"
  "\n\007payload\030\002 \001(\014\022\020\n\010steamids\030\003 \003(\006\",\n\027CMs"
  "gGCToGCSubGCStarting\022\021\n\tdir_index\030\001 \001(\r\""
  "\273\001\n\023CGCToGCMsgMasterAck\022\021\n\tdir_index\030\001 \001"
  "(\r\022\024\n\014machine_name\030\003 \001(\t\022\024\n\014process_name"
  "\030\004 \001(\t\022/\n\tdirectory\030\006 \003(\0132\034.CGCToGCMsgMa"
  "sterAck.Process\0324\n\007Process\022\021\n\tdir_index\030"
  "\001 \001(\r\022\026\n\016type_instances\030\002 \003(\r\"2\n\034CGCToGC"
  "MsgMasterAck_Response\022\022\n\007eresult\030\001 \001(\005:\001"
  "2\"7\n\031CMsgGCToGCUniverseStartup\022\032\n\022is_ini"
  "tial_startup\030\001 \001(\010\"4\n!CMsgGCToGCUniverse"
  "StartupResponse\022\017\n\007eresult\030\001 \001(\005\"\216\001\n\037CGC"
  "ToGCMsgMasterStartupComplete\0228\n\007gc_info\030"
  "\001 \003(\0132\'.CGCToGCMsgMasterStartupComplete."
  "GCInfo\0321\n\006GCInfo\022\021\n\tdir_index\030\001 \001(\r\022\024\n\014m"
  "achine_name\030\002 \001(\t\"L\n\020CGCToGCMsgRouted\022\020\n"
  "\010msg_type\030\001 \001(\r\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013ne"
  "t_message\030\003 \001(\014\">\n\025CGCToGCMsgRoutedReply"
  "\022\020\n\010msg_type\030\001 \001(\r\022\023\n\013net_message\030\002 \001(\014\""
  "\225\001\n\034CMsgGCUpdateSubGCSessionInfo\0229\n\007upda"
  "tes\030\001 \003(\0132(.CMsgGCUpdateSubGCSessionInfo"
  ".CMsgUpdate\032:\n\nCMsgUpdate\022\017\n\007steamid\030\001 \001"
  "(\006\022\n\n\002ip\030\002 \001(\007\022\017\n\007trusted\030\003 \001(\010\"0\n\035CMsgG"
  "CRequestSubGCSessionInfo\022\017\n\007steamid\030\001 \001("
  "\006\"c\n%CMsgGCRequestSubGCSessionInfoRespon"
  "se\022\n\n\002ip\030\001 \001(\007\022\017\n\007trusted\030\002 \001(\010\022\014\n\004port\030"
  "\003 \001(\r\022\017\n\007success\030\004 \001(\010\"x\n\026CMsgSOCacheHav"
  "eVersion\022\034\n\004soid\030\001 \001(\0132\016.CMsgSOIDOwner\022\017"
  "\n\007version\030\002 \001(\006\022\022\n\nservice_id\030\003 \001(\r\022\033\n\023c"
  "ached_file_version\030\004 \001(\r\"\377\004\n\017CMsgClientH"
  "ello\022\017\n\007version\030\001 \001(\r\0226\n\025socache_have_ve"
  "rsions\030\002 \003(\0132\027.CMsgSOCacheHaveVersion\022\033\n"
  "\023client_session_need\030\003 \001(\r\022:\n\017client_lau"
  "ncher\030\004 \001(\0162\023.PartnerAccountType:\014PARTNE"
  "R_NONE\022\022\n\nsecret_key\030\005 \001(\t\022\027\n\017client_lan"
  "guage\030\006 \001(\r\022-\n\006engine\030\007 \001(\0162\016.ESourceEng"
  "ine:\rk_ESE_Source1\022\033\n\023steamdatagram_logi"
  "n\030\010 \001(\014\022\023\n\013platform_id\030\t \001(\r\022\020\n\010game_msg"
  "\030\n \001(\014\022\017\n\007os_type\030\013 \001(\005\022\025\n\rrender_system"
  "\030\014 \001(\r\022\031\n\021render_system_req\030\r \001(\r\022\024\n\014scr"
  "een_width\030\016 \001(\r\022\025\n\rscreen_height\030\017 \001(\r\022\026"
  "\n\016screen_refresh\030\020 \001(\r\022\024\n\014render_width\030\021"
  " \001(\r\022\025\n\rrender_height\030\022 \001(\r\022\022\n\nswap_widt"
  "h\030\023 \001(\r\022\023\n\013swap_height\030\024 \001(\r\022\026\n\016is_steam"
  "_china\030\026 \001(\010\022\035\n\025is_steam_china_client\030\030 "
  "\001(\010\022\025\n\rplatform_name\030\027 \001(\t\"\216\005\n\021CMsgClien"
  "tWelcome\022\017\n\007version\030\001 \001(\r\022\021\n\tgame_data\030\002"
  " \001(\014\022;\n\033outofdate_subscribed_caches\030\003 \003("
  "\0132\026.CMsgSOCacheSubscribed\022A\n\032uptodate_su"
  "bscribed_caches\030\004 \003(\0132\035.CMsgSOCacheSubsc"
  "riptionCheck\022-\n\010location\030\005 \001(\0132\033.CMsgCli"
  "entWelcome.Location\022\025\n\rsave_game_key\030\006 \001"
  "(\014\022\027\n\017item_schema_crc\030\007 \001(\007\022\026\n\016items_gam"
  "e_url\030\010 \001(\t\022\037\n\027gc_socache_file_version\030\t"
  " \001(\r\022\030\n\020txn_country_code\030\n \001(\t\022\022\n\ngame_d"
  "ata2\030\013 \001(\014\022$\n\034rtime32_gc_welcome_timesta"
  "mp\030\014 \001(\r\022\020\n\010currency\030\r \001(\r\022\017\n\007balance\030\016 "
  "\001(\r\022\023\n\013balance_url\030\017 \001(\t\022\036\n\026has_accepted"
  "_china_ssa\030\020 \001(\010\022\035\n\025is_banned_steam_chin"
  "a\030\021 \001(\010\0220\n\027additional_welcome_msgs\030\022 \001(\013"
  "2\017.CExtraMsgBlock\032@\n\010Location\022\020\n\010latitud"
  "e\030\001 \001(\002\022\021\n\tlongitude\030\002 \001(\002\022\017\n\007country\030\003 "
  "\001(\t\"\345\001\n\024CMsgConnectionStatus\022D\n\006status\030\001"
  " \001(\0162\023.GCConnectionStatus:\037GCConnectionS"
  "tatus_HAVE_SESSION\022\033\n\023client_session_nee"
  "d\030\002 \001(\r\022\026\n\016queue_position\030\003 \001(\005\022\022\n\nqueue"
  "_size\030\004 \001(\005\022\024\n\014wait_seconds\030\005 \001(\005\022(\n est"
  "imated_wait_seconds_remaining\030\006 \001(\005\"\370\001\n\032"
  "CMsgGCToGCSOCacheSubscribe\022\022\n\nsubscriber"
  "\030\001 \001(\006\022\027\n\017subscribe_to_id\030\002 \001(\006\022\024\n\014sync_"
  "version\030\003 \001(\006\022C\n\rhave_versions\030\004 \003(\0132,.C"
  "MsgGCToGCSOCacheSubscribe.CMsgHaveVersio"
  "ns\022\031\n\021subscribe_to_type\030\005 \001(\r\0327\n\020CMsgHav"
  "eVersions\022\022\n\nservice_id\030\001 \001(\r\022\017\n\007version"
  "\030\002 \001(\004\"n\n\034CMsgGCToGCSOCacheUnsubscribe\022\022"
  "\n\nsubscriber\030\001 \001(\006\022\033\n\023unsubscribe_from_i"
  "d\030\002 \001(\006\022\035\n\025unsubscribe_from_type\030\003 \001(\r\"\022"
  "\n\020CMsgGCClientPing\"\212\001\n\037CMsgGCToGCForward"
  "AccountDetails\022\017\n\007steamid\030\001 \001(\006\022A\n\017accou"
  "nt_details\030\002 \001(\0132(.CGCSystemMsg_GetAccou"
  "ntDetails_Response\022\023\n\013age_seconds\030\003 \001(\r\""
  "u\n\034CMsgGCToGCLoadSessionSOCache\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022A\n\027forward_account_details\030\002"
  " \001(\0132 .CMsgGCToGCForwardAccountDetails\"&"
  "\n$CMsgGCToGCLoadSessionSOCacheResponse\"f"
  "\n\034CMsgGCToGCUpdateSessionStats\022\025\n\ruser_s"
  "essions\030\001 \001(\r\022\027\n\017server_sessions\030\002 \001(\r\022\026"
  "\n\016in_logon_surge\030\003 \001(\010\"\036\n\034CMsgGCToClient"
  "RequestDropped\"\355\002\n*CWorkshop_PopulateIte"
  "mDescriptions_Request\022\r\n\005appid\030\001 \001(\r\022\\\n\t"
  "languages\030\002 \003(\0132I.CWorkshop_PopulateItem"
  "Descriptions_Request.ItemDescriptionsLan"
  "guageBlock\032E\n\025SingleItemDescription\022\022\n\ng"
  "ameitemid\030\001 \001(\r\022\030\n\020item_description\030\002 \001("
  "\t\032\212\001\n\035ItemDescriptionsLanguageBlock\022\020\n\010l"
  "anguage\030\001 \001(\t\022W\n\014descriptions\030\002 \003(\0132A.CW"
  "orkshop_PopulateItemDescriptions_Request"
  ".SingleItemDescription\"F\n!CWorkshop_GetC"
  "ontributors_Request\022\r\n\005appid\030\001 \001(\r\022\022\n\nga"
  "meitemid\030\002 \001(\r\":\n\"CWorkshop_GetContribut"
  "ors_Response\022\024\n\014contributors\030\001 \003(\006\"\365\005\n%C"
  "Workshop_SetItemPaymentRules_Request\022\r\n\005"
  "appid\030\001 \001(\r\022\022\n\ngameitemid\030\002 \001(\r\022a\n\031assoc"
  "iated_workshop_files\030\003 \003(\0132>.CWorkshop_S"
  "etItemPaymentRules_Request.WorkshopItemP"
  "aymentRule\022W\n\020partner_accounts\030\004 \003(\0132=.C"
  "Workshop_SetItemPaymentRules_Request.Par"
  "tnerItemPaymentRule\022\025\n\rvalidate_only\030\005 \001"
  "(\010\022(\n make_workshop_files_subscribable\030\006"
  " \001(\010\022v\n,associated_workshop_file_for_dir"
  "ect_payments\030\007 \001(\0132@.CWorkshop_SetItemPa"
  "ymentRules_Request.WorkshopDirectPayment"
  "Rule\032\177\n\027WorkshopItemPaymentRule\022\030\n\020works"
  "hop_file_id\030\001 \001(\004\022\032\n\022revenue_percentage\030"
  "\002 \001(\002\022\030\n\020rule_description\030\003 \001(\t\022\024\n\trule_"
  "type\030\004 \001(\r:\0011\032O\n\031WorkshopDirectPaymentRu"
  "le\022\030\n\020workshop_file_id\030\001 \001(\004\022\030\n\020rule_des"
  "cription\030\002 \001(\t\032b\n\026PartnerItemPaymentRule"
  "\022\022\n\naccount_id\030\001 \001(\r\022\032\n\022revenue_percenta"
  "ge\030\002 \001(\002\022\030\n\020rule_description\030\003 \001(\t\"C\n&CW"
  "orkshop_SetItemPaymentRules_Response\022\031\n\021"
  "validation_errors\030\001 \003(\t\"\306\002\n\'CCommunity_G"
  "etClanAnnouncements_Request\022\017\n\007steamid\030\001"
  " \001(\004\022\016\n\006offset\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\022\020\n\010m"
  "axchars\030\004 \001(\r\022\022\n\nstrip_html\030\005 \001(\010\022\025\n\rreq"
  "uired_tags\030\006 \003(\t\022\027\n\017require_no_tags\030\007 \001("
  "\010\022\033\n\023language_preference\030\010 \003(\r\022\023\n\013hidden"
  "_only\030\t \001(\010\022\020\n\010only_gid\030\n \001(\010\022\031\n\021rtime_o"
  "ldest_date\030\013 \001(\r\022\026\n\016include_hidden\030\014 \001(\010"
  "\022\036\n\026include_partner_events\030\r \001(\010\"\211\001\n(CCo"
  "mmunity_GetClanAnnouncements_Response\022\020\n"
  "\010maxchars\030\001 \001(\r\022\022\n\nstrip_html\030\002 \001(\010\0227\n\ra"
  "nnouncements\030\003 \003(\0132 .CCommunity_ClanAnno"
  "uncementInfo\"p\n$CBroadcast_PostGameDataF"
  "rame_Request\022\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002"
  " \001(\006\022\024\n\014broadcast_id\030\003 \001(\006\022\022\n\nframe_data"
  "\030\004 \001(\014\"\374\002\n\025CMsgSerializedSOCache\022\024\n\014file"
  "_version\030\001 \001(\r\022,\n\006caches\030\002 \003(\0132\034.CMsgSer"
  "ializedSOCache.Cache\022\037\n\027gc_socache_file_"
  "version\030\003 \001(\r\032>\n\tTypeCache\022\014\n\004type\030\001 \001(\r"
  "\022\017\n\007objects\030\002 \003(\014\022\022\n\nservice_id\030\003 \001(\r\032\275\001"
  "\n\005Cache\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\0226\n\010ver"
  "sions\030\003 \003(\0132$.CMsgSerializedSOCache.Cach"
  "e.Version\0225\n\013type_caches\030\004 \003(\0132 .CMsgSer"
  "ializedSOCache.TypeCache\032+\n\007Version\022\017\n\007s"
  "ervice\030\001 \001(\r\022\017\n\007version\030\002 \001(\004\"G\n\037CMsgGCT"
  "oClientPollConvarRequest\022\023\n\013convar_name\030"
  "\001 \001(\t\022\017\n\007poll_id\030\002 \001(\r\"I\n CMsgGCToClient"
  "PollConvarResponse\022\017\n\007poll_id\030\001 \001(\r\022\024\n\014c"
  "onvar_value\030\002 \001(\t\"E\n\033CGCMsgCompressedMsg"
  "ToClient\022\016\n\006msg_id\030\001 \001(\r\022\026\n\016compressed_m"
  "sg\030\002 \001(\014\"\216\001\n CMsgGCToGCMasterBroadcastMe"
  "ssage\022\030\n\020users_per_second\030\001 \001(\r\022\025\n\rsend_"
  "to_users\030\002 \001(\010\022\027\n\017send_to_servers\030\003 \001(\010\022"
  "\016\n\006msg_id\030\004 \001(\r\022\020\n\010msg_data\030\005 \001(\014\"n\n CMs"
  "gGCToGCMasterSubscribeToCache\022\021\n\tsoid_ty"
  "pe\030\001 \001(\r\022\017\n\007soid_id\030\002 \001(\006\022\023\n\013account_ids"
  "\030\003 \003(\r\022\021\n\tsteam_ids\030\004 \003(\006\"*\n(CMsgGCToGCM"
  "asterSubscribeToCacheResponse\"a\n%CMsgGCT"
  "oGCMasterSubscribeToCacheAsync\0228\n\rsubscr"
  "ibe_msg\030\001 \001(\0132!.CMsgGCToGCMasterSubscrib"
  "eToCache\"r\n$CMsgGCToGCMasterUnsubscribeF"
  "romCache\022\021\n\tsoid_type\030\001 \001(\r\022\017\n\007soid_id\030\002"
  " \001(\006\022\023\n\013account_ids\030\003 \003(\r\022\021\n\tsteam_ids\030\004"
  " \003(\006\"B\n\034CMsgGCToGCMasterDestroyCache\022\021\n\t"
  "soid_type\030\001 \001(\r\022\017\n\007soid_id\030\002 \001(\006*5\n\rESou"
  "rceEngine\022\021\n\rk_ESE_Source1\020\000\022\021\n\rk_ESE_So"
  "urce2\020\001*V\n\022PartnerAccountType\022\020\n\014PARTNER"
  "_NONE\020\000\022\031\n\025PARTNER_PERFECT_WORLD\020\001\022\023\n\017PA"
  "RTNER_INVALID\020\003*\240\002\n\022GCConnectionStatus\022#"
  "\n\037GCConnectionStatus_HAVE_SESSION\020\000\022$\n G"
  "CConnectionStatus_GC_GOING_DOWN\020\001\022!\n\035GCC"
  "onnectionStatus_NO_SESSION\020\002\0220\n,GCConnec"
  "tionStatus_NO_SESSION_IN_LOGON_QUEUE\020\003\022\037"
  "\n\033GCConnectionStatus_NO_STEAM\020\004\022 \n\034GCCon"
  "nectionStatus_SUSPENDED\020\005\022\'\n#GCConnectio"
  "nStatus_STEAM_GOING_DOWN\020\006B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gcsdk_5fgcmessages_2eproto_deps[2] = {
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gcsdk_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gcsdk_5fgcmessages_2eproto = {
  false, false, 8793, descriptor_table_protodef_gcsdk_5fgcmessages_2eproto, "gcsdk_gcmessages.proto", 
  &descriptor_table_gcsdk_5fgcmessages_2eproto_once, descriptor_table_gcsdk_5fgcmessages_2eproto_deps, 2, 72,
  schemas, file_default_instances, TableStruct_gcsdk_5fgcmessages_2eproto::offsets,
  file_level_metadata_gcsdk_5fgcmessages_2eproto, file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto, file_level_service_descriptors_gcsdk_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_gcsdk_5fgcmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsdk_5fgcmessages_2eproto);
  return descriptor_table_gcsdk_5fgcmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gcsdk_5fgcmessages_2eproto(&descriptor_table_gcsdk_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESourceEngine_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[0];
}
bool ESourceEngine_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PartnerAccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[1];
}
bool PartnerAccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCConnectionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gcsdk_5fgcmessages_2eproto);
  return file_level_enum_descriptors_gcsdk_5fgcmessages_2eproto[2];
}
bool GCConnectionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CExtraMsgBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CExtraMsgBlock>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_compressed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CExtraMsgBlock::CExtraMsgBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CExtraMsgBlock)
}
CExtraMsgBlock::CExtraMsgBlock(const CExtraMsgBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contents()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArena());
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_key_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_key_));
  // @@protoc_insertion_point(copy_constructor:CExtraMsgBlock)
}

void CExtraMsgBlock::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&msg_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_key_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_key_));
}

CExtraMsgBlock::~CExtraMsgBlock() {
  // @@protoc_insertion_point(destructor:CExtraMsgBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CExtraMsgBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CExtraMsgBlock::ArenaDtor(void* object) {
  CExtraMsgBlock* _this = reinterpret_cast< CExtraMsgBlock* >(object);
  (void)_this;
}
void CExtraMsgBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CExtraMsgBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CExtraMsgBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CExtraMsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    contents_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&msg_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_key_) -
        reinterpret_cast<char*>(&msg_type_)) + sizeof(msg_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CExtraMsgBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 msg_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msg_key(&has_bits);
          msg_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_compressed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_compressed(&has_bits);
          is_compressed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CExtraMsgBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CExtraMsgBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  // optional uint64 msg_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_msg_key(), target);
  }

  // optional bool is_compressed = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_compressed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CExtraMsgBlock)
  return target;
}

size_t CExtraMsgBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CExtraMsgBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contents());
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_type());
    }

    // optional bool is_compressed = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 msg_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_msg_key());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CExtraMsgBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CExtraMsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CExtraMsgBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CExtraMsgBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CExtraMsgBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CExtraMsgBlock)
    MergeFrom(*source);
  }
}

void CExtraMsgBlock::MergeFrom(const CExtraMsgBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CExtraMsgBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_contents(from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_compressed_ = from.is_compressed_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_key_ = from.msg_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CExtraMsgBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CExtraMsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CExtraMsgBlock::CopyFrom(const CExtraMsgBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CExtraMsgBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CExtraMsgBlock::IsInitialized() const {
  return true;
}

void CExtraMsgBlock::InternalSwap(CExtraMsgBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  contents_.Swap(&other->contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CExtraMsgBlock, msg_key_)
      + sizeof(CExtraMsgBlock::msg_key_)
      - PROTOBUF_FIELD_OFFSET(CExtraMsgBlock, msg_type_)>(
          reinterpret_cast<char*>(&msg_type_),
          reinterpret_cast<char*>(&other->msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CExtraMsgBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCAssertJobData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCAssertJobData>()._has_bits_);
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCAssertJobData::CMsgGCAssertJobData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCAssertJobData)
}
CMsgGCAssertJobData::CMsgGCAssertJobData(const CMsgGCAssertJobData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_type()) {
    message_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_type(), 
      GetArena());
  }
  message_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_data()) {
    message_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCAssertJobData)
}

void CMsgGCAssertJobData::SharedCtor() {
message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCAssertJobData::~CMsgGCAssertJobData() {
  // @@protoc_insertion_point(destructor:CMsgGCAssertJobData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCAssertJobData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCAssertJobData::ArenaDtor(void* object) {
  CMsgGCAssertJobData* _this = reinterpret_cast< CMsgGCAssertJobData* >(object);
  (void)_this;
}
void CMsgGCAssertJobData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCAssertJobData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCAssertJobData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCAssertJobData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCAssertJobData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCAssertJobData.message_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes message_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCAssertJobData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCAssertJobData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCAssertJobData.message_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_type(), target);
  }

  // optional bytes message_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCAssertJobData)
  return target;
}

size_t CMsgGCAssertJobData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCAssertJobData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
    }

    // optional bytes message_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCAssertJobData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCAssertJobData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCAssertJobData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCAssertJobData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCAssertJobData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCAssertJobData)
    MergeFrom(*source);
  }
}

void CMsgGCAssertJobData::MergeFrom(const CMsgGCAssertJobData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCAssertJobData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_type(from._internal_message_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_data(from._internal_message_data());
    }
  }
}

void CMsgGCAssertJobData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCAssertJobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCAssertJobData::CopyFrom(const CMsgGCAssertJobData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCAssertJobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCAssertJobData::IsInitialized() const {
  return true;
}

void CMsgGCAssertJobData::InternalSwap(CMsgGCAssertJobData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_data_.Swap(&other->message_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCAssertJobData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCConCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCConCommand>()._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCConCommand::CMsgGCConCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCConCommand)
}
CMsgGCConCommand::CMsgGCConCommand(const CMsgGCConCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_command()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCConCommand)
}

void CMsgGCConCommand::SharedCtor() {
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgGCConCommand::~CMsgGCConCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCConCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCConCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCConCommand::ArenaDtor(void* object) {
  CMsgGCConCommand* _this = reinterpret_cast< CMsgGCConCommand* >(object);
  (void)_this;
}
void CMsgGCConCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCConCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCConCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCConCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCConCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCConCommand.command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCConCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCConCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCConCommand.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCConCommand)
  return target;
}

size_t CMsgGCConCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCConCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string command = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCConCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCConCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCConCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCConCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCConCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCConCommand)
    MergeFrom(*source);
  }
}

void CMsgGCConCommand::MergeFrom(const CMsgGCConCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCConCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_command()) {
    _internal_set_command(from._internal_command());
  }
}

void CMsgGCConCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCConCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCConCommand::CopyFrom(const CMsgGCConCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCConCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCConCommand::IsInitialized() const {
  return true;
}

void CMsgGCConCommand::InternalSwap(CMsgGCConCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCConCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSDOAssert_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSDOAssert_Request>()._has_bits_);
  static void set_has_requesting_job(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSDOAssert_Request::CMsgSDOAssert_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSDOAssert.Request)
}
CMsgSDOAssert_Request::CMsgSDOAssert_Request(const CMsgSDOAssert_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      key_(from.key_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requesting_job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesting_job()) {
    requesting_job_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requesting_job(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSDOAssert.Request)
}

void CMsgSDOAssert_Request::SharedCtor() {
requesting_job_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgSDOAssert_Request::~CMsgSDOAssert_Request() {
  // @@protoc_insertion_point(destructor:CMsgSDOAssert.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSDOAssert_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  requesting_job_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSDOAssert_Request::ArenaDtor(void* object) {
  CMsgSDOAssert_Request* _this = reinterpret_cast< CMsgSDOAssert_Request* >(object);
  (void)_this;
}
void CMsgSDOAssert_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSDOAssert_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSDOAssert_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSDOAssert.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    requesting_job_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSDOAssert_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requesting_job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_requesting_job();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSDOAssert.Request.requesting_job");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSDOAssert_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSDOAssert.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 key = 1;
  for (int i = 0, n = this->_internal_key_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string requesting_job = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesting_job().data(), static_cast<int>(this->_internal_requesting_job().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSDOAssert.Request.requesting_job");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requesting_job(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSDOAssert.Request)
  return target;
}

size_t CMsgSDOAssert_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSDOAssert.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->key_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_key_size());
    total_size += data_size;
  }

  // optional string requesting_job = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesting_job());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSDOAssert_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSDOAssert.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSDOAssert_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSDOAssert_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSDOAssert.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSDOAssert.Request)
    MergeFrom(*source);
  }
}

void CMsgSDOAssert_Request::MergeFrom(const CMsgSDOAssert_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSDOAssert.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_.MergeFrom(from.key_);
  if (from._internal_has_requesting_job()) {
    _internal_set_requesting_job(from._internal_requesting_job());
  }
}

void CMsgSDOAssert_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSDOAssert.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSDOAssert_Request::CopyFrom(const CMsgSDOAssert_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSDOAssert.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSDOAssert_Request::IsInitialized() const {
  return true;
}

void CMsgSDOAssert_Request::InternalSwap(CMsgSDOAssert_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.InternalSwap(&other->key_);
  requesting_job_.Swap(&other->requesting_job_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSDOAssert_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSDOAssert::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSDOAssert>()._has_bits_);
  static void set_has_sdo_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSDOAssert::CMsgSDOAssert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSDOAssert)
}
CMsgSDOAssert::CMsgSDOAssert(const CMsgSDOAssert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sdo_type_ = from.sdo_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSDOAssert)
}

void CMsgSDOAssert::SharedCtor() {
sdo_type_ = 0;
}

CMsgSDOAssert::~CMsgSDOAssert() {
  // @@protoc_insertion_point(destructor:CMsgSDOAssert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSDOAssert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSDOAssert::ArenaDtor(void* object) {
  CMsgSDOAssert* _this = reinterpret_cast< CMsgSDOAssert* >(object);
  (void)_this;
}
void CMsgSDOAssert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSDOAssert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSDOAssert::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSDOAssert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  sdo_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSDOAssert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sdo_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdo_type(&has_bits);
          sdo_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSDOAssert.Request requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSDOAssert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSDOAssert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sdo_type(), target);
  }

  // repeated .CMsgSDOAssert.Request requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSDOAssert)
  return target;
}

size_t CMsgSDOAssert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSDOAssert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSDOAssert.Request requests = 2;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 sdo_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sdo_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSDOAssert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSDOAssert)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSDOAssert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSDOAssert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSDOAssert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSDOAssert)
    MergeFrom(*source);
  }
}

void CMsgSDOAssert::MergeFrom(const CMsgSDOAssert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSDOAssert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
  if (from._internal_has_sdo_type()) {
    _internal_set_sdo_type(from._internal_sdo_type());
  }
}

void CMsgSDOAssert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSDOAssert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSDOAssert::CopyFrom(const CMsgSDOAssert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSDOAssert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSDOAssert::IsInitialized() const {
  return true;
}

void CMsgSDOAssert::InternalSwap(CMsgSDOAssert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requests_.InternalSwap(&other->requests_);
  swap(sdo_type_, other->sdo_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSDOAssert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSHA1Digest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSHA1Digest>()._has_bits_);
  static void set_has_block1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_block3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CMsgSHA1Digest::CMsgSHA1Digest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSHA1Digest)
}
CMsgSHA1Digest::CMsgSHA1Digest(const CMsgSHA1Digest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block1_, &from.block1_,
    static_cast<size_t>(reinterpret_cast<char*>(&block3_) -
    reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
  // @@protoc_insertion_point(copy_constructor:CMsgSHA1Digest)
}

void CMsgSHA1Digest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&block3_) -
    reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
}

CMsgSHA1Digest::~CMsgSHA1Digest() {
  // @@protoc_insertion_point(destructor:CMsgSHA1Digest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSHA1Digest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSHA1Digest::ArenaDtor(void* object) {
  CMsgSHA1Digest* _this = reinterpret_cast< CMsgSHA1Digest* >(object);
  (void)_this;
}
void CMsgSHA1Digest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSHA1Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSHA1Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSHA1Digest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&block1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block3_) -
        reinterpret_cast<char*>(&block1_)) + sizeof(block3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSHA1Digest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required fixed64 block1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_block1(&has_bits);
          block1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed64 block2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_block2(&has_bits);
          block2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required fixed32 block3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_block3(&has_bits);
          block3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSHA1Digest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSHA1Digest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required fixed64 block1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_block1(), target);
  }

  // required fixed64 block2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_block2(), target);
  }

  // required fixed32 block3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_block3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSHA1Digest)
  return target;
}

size_t CMsgSHA1Digest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgSHA1Digest)
  size_t total_size = 0;

  if (_internal_has_block1()) {
    // required fixed64 block1 = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_block2()) {
    // required fixed64 block2 = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_block3()) {
    // required fixed32 block3 = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgSHA1Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSHA1Digest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 block1 = 1;
    total_size += 1 + 8;

    // required fixed64 block2 = 2;
    total_size += 1 + 8;

    // required fixed32 block3 = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSHA1Digest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSHA1Digest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSHA1Digest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSHA1Digest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSHA1Digest)
    MergeFrom(*source);
  }
}

void CMsgSHA1Digest::MergeFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSHA1Digest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      block1_ = from.block1_;
    }
    if (cached_has_bits & 0x00000002u) {
      block2_ = from.block2_;
    }
    if (cached_has_bits & 0x00000004u) {
      block3_ = from.block3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSHA1Digest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSHA1Digest::CopyFrom(const CMsgSHA1Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSHA1Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSHA1Digest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgSHA1Digest::InternalSwap(CMsgSHA1Digest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSHA1Digest, block3_)
      + sizeof(CMsgSHA1Digest::block3_)
      - PROTOBUF_FIELD_OFFSET(CMsgSHA1Digest, block1_)>(
          reinterpret_cast<char*>(&block1_),
          reinterpret_cast<char*>(&other->block1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSHA1Digest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOIDOwner::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOIDOwner>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOIDOwner::CMsgSOIDOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOIDOwner)
}
CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOIDOwner)
}

void CMsgSOIDOwner::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  // @@protoc_insertion_point(destructor:CMsgSOIDOwner)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOIDOwner::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSOIDOwner::ArenaDtor(void* object) {
  CMsgSOIDOwner* _this = reinterpret_cast< CMsgSOIDOwner* >(object);
  (void)_this;
}
void CMsgSOIDOwner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOIDOwner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOIDOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOIDOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOIDOwner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOIDOwner::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOIDOwner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOIDOwner)
  return target;
}

size_t CMsgSOIDOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOIDOwner)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOIDOwner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOIDOwner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOIDOwner)
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOIDOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOIDOwner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOIDOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {
  return true;
}

void CMsgSOIDOwner::InternalSwap(CMsgSOIDOwner* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOIDOwner, type_)
      + sizeof(CMsgSOIDOwner::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOIDOwner, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOIDOwner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOSingleObject::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOSingleObject>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_object_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOSingleObject* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOSingleObject::_Internal::owner_soid(const CMsgSOSingleObject* msg) {
  return *msg->owner_soid_;
}
CMsgSOSingleObject::CMsgSOSingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOSingleObject)
}
CMsgSOSingleObject::CMsgSOSingleObject(const CMsgSOSingleObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object_data()) {
    object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_data(), 
      GetArena());
  }
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOSingleObject)
}

void CMsgSOSingleObject::SharedCtor() {
object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOSingleObject::~CMsgSOSingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOSingleObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOSingleObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOSingleObject::ArenaDtor(void* object) {
  CMsgSOSingleObject* _this = reinterpret_cast< CMsgSOSingleObject* >(object);
  (void)_this;
}
void CMsgSOSingleObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOSingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOSingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOSingleObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      object_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(owner_soid_ != nullptr);
      owner_soid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOSingleObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes object_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_object_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOSingleObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOSingleObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // optional bytes object_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_object_data(), target);
  }

  // optional fixed64 version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOSingleObject)
  return target;
}

size_t CMsgSOSingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOSingleObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes object_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_object_data());
    }

    // optional .CMsgSOIDOwner owner_soid = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 type_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type_id());
    }

    // optional uint32 service_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOSingleObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOSingleObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOSingleObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOSingleObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOSingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOSingleObject::MergeFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOSingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_data(from._internal_object_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOSingleObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOSingleObject::CopyFrom(const CMsgSOSingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOSingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOSingleObject::IsInitialized() const {
  return true;
}

void CMsgSOSingleObject::InternalSwap(CMsgSOSingleObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.Swap(&other->object_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOSingleObject, service_id_)
      + sizeof(CMsgSOSingleObject::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOSingleObject, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOSingleObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOMultipleObjects_SingleObject::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOMultipleObjects_SingleObject>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_object_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOMultipleObjects.SingleObject)
}
CMsgSOMultipleObjects_SingleObject::CMsgSOMultipleObjects_SingleObject(const CMsgSOMultipleObjects_SingleObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_object_data()) {
    object_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_object_data(), 
      GetArena());
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects.SingleObject)
}

void CMsgSOMultipleObjects_SingleObject::SharedCtor() {
object_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_id_ = 0;
}

CMsgSOMultipleObjects_SingleObject::~CMsgSOMultipleObjects_SingleObject() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects.SingleObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOMultipleObjects_SingleObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  object_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSOMultipleObjects_SingleObject::ArenaDtor(void* object) {
  CMsgSOMultipleObjects_SingleObject* _this = reinterpret_cast< CMsgSOMultipleObjects_SingleObject* >(object);
  (void)_this;
}
void CMsgSOMultipleObjects_SingleObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOMultipleObjects_SingleObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOMultipleObjects_SingleObject::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects.SingleObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    object_data_.ClearNonDefaultToEmpty();
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOMultipleObjects_SingleObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes object_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_object_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOMultipleObjects_SingleObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects.SingleObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_id(), target);
  }

  // optional bytes object_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_object_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects.SingleObject)
  return target;
}

size_t CMsgSOMultipleObjects_SingleObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects.SingleObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes object_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_object_data());
    }

    // optional int32 type_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects_SingleObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOMultipleObjects_SingleObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOMultipleObjects.SingleObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOMultipleObjects.SingleObject)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects_SingleObject::MergeFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects.SingleObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_object_data(from._internal_object_data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects_SingleObject::CopyFrom(const CMsgSOMultipleObjects_SingleObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects.SingleObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects_SingleObject::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects_SingleObject::InternalSwap(CMsgSOMultipleObjects_SingleObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.Swap(&other->object_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOMultipleObjects_SingleObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOMultipleObjects::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOMultipleObjects>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOMultipleObjects* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOMultipleObjects::_Internal::owner_soid(const CMsgSOMultipleObjects* msg) {
  return *msg->owner_soid_;
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_modified_(arena),
  objects_added_(arena),
  objects_removed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOMultipleObjects)
}
CMsgSOMultipleObjects::CMsgSOMultipleObjects(const CMsgSOMultipleObjects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_modified_(from.objects_modified_),
      objects_added_(from.objects_added_),
      objects_removed_(from.objects_removed_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOMultipleObjects)
}

void CMsgSOMultipleObjects::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOMultipleObjects::~CMsgSOMultipleObjects() {
  // @@protoc_insertion_point(destructor:CMsgSOMultipleObjects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOMultipleObjects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOMultipleObjects::ArenaDtor(void* object) {
  CMsgSOMultipleObjects* _this = reinterpret_cast< CMsgSOMultipleObjects* >(object);
  (void)_this;
}
void CMsgSOMultipleObjects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOMultipleObjects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOMultipleObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOMultipleObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_modified_.Clear();
  objects_added_.Clear();
  objects_removed_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOMultipleObjects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_modified(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_added(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOMultipleObjects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOMultipleObjects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_modified_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects_modified(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_version(), target);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_added_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_objects_added(i), target, stream);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_removed_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_objects_removed(i), target, stream);
  }

  // optional .CMsgSOIDOwner owner_soid = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOMultipleObjects)
  return target;
}

size_t CMsgSOMultipleObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOMultipleObjects)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOMultipleObjects.SingleObject objects_modified = 2;
  total_size += 1UL * this->_internal_objects_modified_size();
  for (const auto& msg : this->objects_modified_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_added = 4;
  total_size += 1UL * this->_internal_objects_added_size();
  for (const auto& msg : this->objects_added_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOMultipleObjects.SingleObject objects_removed = 5;
  total_size += 1UL * this->_internal_objects_removed_size();
  for (const auto& msg : this->objects_removed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgSOIDOwner owner_soid = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOMultipleObjects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOMultipleObjects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOMultipleObjects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOMultipleObjects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOMultipleObjects)
    MergeFrom(*source);
  }
}

void CMsgSOMultipleObjects::MergeFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOMultipleObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_modified_.MergeFrom(from.objects_modified_);
  objects_added_.MergeFrom(from.objects_added_);
  objects_removed_.MergeFrom(from.objects_removed_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOMultipleObjects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOMultipleObjects::CopyFrom(const CMsgSOMultipleObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOMultipleObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOMultipleObjects::IsInitialized() const {
  return true;
}

void CMsgSOMultipleObjects::InternalSwap(CMsgSOMultipleObjects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_modified_.InternalSwap(&other->objects_modified_);
  objects_added_.InternalSwap(&other->objects_added_);
  objects_removed_.InternalSwap(&other->objects_removed_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOMultipleObjects, service_id_)
      + sizeof(CMsgSOMultipleObjects::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOMultipleObjects, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOMultipleObjects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheSubscribed_SubscribedType::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscribed_SubscribedType>()._has_bits_);
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscribed.SubscribedType)
}
CMsgSOCacheSubscribed_SubscribedType::CMsgSOCacheSubscribed_SubscribedType(const CMsgSOCacheSubscribed_SubscribedType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_data_(from.object_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed.SubscribedType)
}

void CMsgSOCacheSubscribed_SubscribedType::SharedCtor() {
type_id_ = 0;
}

CMsgSOCacheSubscribed_SubscribedType::~CMsgSOCacheSubscribed_SubscribedType() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed.SubscribedType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheSubscribed_SubscribedType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSOCacheSubscribed_SubscribedType::ArenaDtor(void* object) {
  CMsgSOCacheSubscribed_SubscribedType* _this = reinterpret_cast< CMsgSOCacheSubscribed_SubscribedType* >(object);
  (void)_this;
}
void CMsgSOCacheSubscribed_SubscribedType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscribed_SubscribedType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscribed_SubscribedType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed.SubscribedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_data_.Clear();
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscribed_SubscribedType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes object_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_object_data();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheSubscribed_SubscribedType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed.SubscribedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_id(), target);
  }

  // repeated bytes object_data = 2;
  for (int i = 0, n = this->_internal_object_data_size(); i < n; i++) {
    const auto& s = this->_internal_object_data(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed.SubscribedType)
  return target;
}

size_t CMsgSOCacheSubscribed_SubscribedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed.SubscribedType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes object_data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(object_data_.size());
  for (int i = 0, n = object_data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      object_data_.Get(i));
  }

  // optional int32 type_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed_SubscribedType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheSubscribed_SubscribedType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribed.SubscribedType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribed.SubscribedType)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed_SubscribedType::MergeFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed.SubscribedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_data_.MergeFrom(from.object_data_);
  if (from._internal_has_type_id()) {
    _internal_set_type_id(from._internal_type_id());
  }
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed_SubscribedType::CopyFrom(const CMsgSOCacheSubscribed_SubscribedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed.SubscribedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed_SubscribedType::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed_SubscribedType::InternalSwap(CMsgSOCacheSubscribed_SubscribedType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_data_.InternalSwap(&other->object_data_);
  swap(type_id_, other->type_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscribed_SubscribedType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheSubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscribed>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscribed* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheSubscribed::_Internal::owner_soid(const CMsgSOCacheSubscribed* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena),
  service_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscribed)
}
CMsgSOCacheSubscribed::CMsgSOCacheSubscribed(const CMsgSOCacheSubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribed)
}

void CMsgSOCacheSubscribed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribed::~CMsgSOCacheSubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheSubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribed::ArenaDtor(void* object) {
  CMsgSOCacheSubscribed* _this = reinterpret_cast< CMsgSOCacheSubscribed* >(object);
  (void)_this;
}
void CMsgSOCacheSubscribed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscribed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sync_version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_sync_version(&has_bits);
          sync_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheSubscribed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_objects(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_service_id(), target);
  }

  // repeated uint32 service_list = 6;
  for (int i = 0, n = this->_internal_service_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_service_list(i), target);
  }

  // optional fixed64 sync_version = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_sync_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribed)
  return target;
}

size_t CMsgSOCacheSubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed.SubscribedType objects = 2;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 service_list = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner owner_soid = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheSubscribed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribed::MergeFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribed::CopyFrom(const CMsgSOCacheSubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribed::InternalSwap(CMsgSOCacheSubscribed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  service_list_.InternalSwap(&other->service_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribed, service_id_)
      + sizeof(CMsgSOCacheSubscribed::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribed, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscribed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheSubscribedUpToDate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscribedUpToDate>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscribedUpToDate* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheSubscribedUpToDate::_Internal::owner_soid(const CMsgSOCacheSubscribedUpToDate* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  service_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscribedUpToDate)
}
CMsgSOCacheSubscribedUpToDate::CMsgSOCacheSubscribedUpToDate(const CMsgSOCacheSubscribedUpToDate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscribedUpToDate)
}

void CMsgSOCacheSubscribedUpToDate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscribedUpToDate::~CMsgSOCacheSubscribedUpToDate() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscribedUpToDate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheSubscribedUpToDate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscribedUpToDate::ArenaDtor(void* object) {
  CMsgSOCacheSubscribedUpToDate* _this = reinterpret_cast< CMsgSOCacheSubscribedUpToDate* >(object);
  (void)_this;
}
void CMsgSOCacheSubscribedUpToDate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscribedUpToDate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscribedUpToDate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscribedUpToDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscribedUpToDate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sync_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_sync_version(&has_bits);
          sync_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheSubscribedUpToDate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscribedUpToDate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_id(), target);
  }

  // repeated uint32 service_list = 4;
  for (int i = 0, n = this->_internal_service_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_service_list(i), target);
  }

  // optional fixed64 sync_version = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_sync_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscribedUpToDate)
  return target;
}

size_t CMsgSOCacheSubscribedUpToDate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscribedUpToDate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_list = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner owner_soid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscribedUpToDate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheSubscribedUpToDate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscribedUpToDate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscribedUpToDate)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscribedUpToDate::MergeFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscribedUpToDate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscribedUpToDate::CopyFrom(const CMsgSOCacheSubscribedUpToDate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscribedUpToDate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscribedUpToDate::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscribedUpToDate::InternalSwap(CMsgSOCacheSubscribedUpToDate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_list_.InternalSwap(&other->service_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, service_id_)
      + sizeof(CMsgSOCacheSubscribedUpToDate::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscribedUpToDate, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscribedUpToDate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheUnsubscribed::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheUnsubscribed>()._has_bits_);
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheUnsubscribed* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheUnsubscribed::_Internal::owner_soid(const CMsgSOCacheUnsubscribed* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheUnsubscribed)
}
CMsgSOCacheUnsubscribed::CMsgSOCacheUnsubscribed(const CMsgSOCacheUnsubscribed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheUnsubscribed)
}

void CMsgSOCacheUnsubscribed::SharedCtor() {
owner_soid_ = nullptr;
}

CMsgSOCacheUnsubscribed::~CMsgSOCacheUnsubscribed() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheUnsubscribed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheUnsubscribed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheUnsubscribed::ArenaDtor(void* object) {
  CMsgSOCacheUnsubscribed* _this = reinterpret_cast< CMsgSOCacheUnsubscribed* >(object);
  (void)_this;
}
void CMsgSOCacheUnsubscribed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheUnsubscribed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheUnsubscribed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheUnsubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheUnsubscribed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheUnsubscribed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheUnsubscribed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_soid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheUnsubscribed)
  return target;
}

size_t CMsgSOCacheUnsubscribed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheUnsubscribed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSOIDOwner owner_soid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_soid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheUnsubscribed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheUnsubscribed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheUnsubscribed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheUnsubscribed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheUnsubscribed)
    MergeFrom(*source);
  }
}

void CMsgSOCacheUnsubscribed::MergeFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheUnsubscribed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_soid()) {
    _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
  }
}

void CMsgSOCacheUnsubscribed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheUnsubscribed::CopyFrom(const CMsgSOCacheUnsubscribed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheUnsubscribed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheUnsubscribed::IsInitialized() const {
  return true;
}

void CMsgSOCacheUnsubscribed::InternalSwap(CMsgSOCacheUnsubscribed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_soid_, other->owner_soid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheUnsubscribed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheSubscriptionCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscriptionCheck>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscriptionCheck* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sync_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheSubscriptionCheck::_Internal::owner_soid(const CMsgSOCacheSubscriptionCheck* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  service_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscriptionCheck)
}
CMsgSOCacheSubscriptionCheck::CMsgSOCacheSubscriptionCheck(const CMsgSOCacheSubscriptionCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      service_list_(from.service_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionCheck)
}

void CMsgSOCacheSubscriptionCheck::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&owner_soid_)) + sizeof(service_id_));
}

CMsgSOCacheSubscriptionCheck::~CMsgSOCacheSubscriptionCheck() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionCheck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheSubscriptionCheck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionCheck::ArenaDtor(void* object) {
  CMsgSOCacheSubscriptionCheck* _this = reinterpret_cast< CMsgSOCacheSubscriptionCheck* >(object);
  (void)_this;
}
void CMsgSOCacheSubscriptionCheck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscriptionCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscriptionCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscriptionCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscriptionCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSOIDOwner owner_soid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 service_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_service_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_service_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sync_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_sync_version(&has_bits);
          sync_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheSubscriptionCheck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_version(), target);
  }

  // optional .CMsgSOIDOwner owner_soid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::owner_soid(this), target, stream);
  }

  // optional uint32 service_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_service_id(), target);
  }

  // repeated uint32 service_list = 5;
  for (int i = 0, n = this->_internal_service_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_service_list(i), target);
  }

  // optional fixed64 sync_version = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_sync_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionCheck)
  return target;
}

size_t CMsgSOCacheSubscriptionCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscriptionCheck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 service_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->service_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner owner_soid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_soid_);
    }

    // optional fixed64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionCheck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheSubscriptionCheck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscriptionCheck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscriptionCheck)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionCheck::MergeFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscriptionCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_list_.MergeFrom(from.service_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionCheck::CopyFrom(const CMsgSOCacheSubscriptionCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscriptionCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionCheck::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionCheck::InternalSwap(CMsgSOCacheSubscriptionCheck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  service_list_.InternalSwap(&other->service_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, service_id_)
      + sizeof(CMsgSOCacheSubscriptionCheck::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheSubscriptionCheck, owner_soid_)>(
          reinterpret_cast<char*>(&owner_soid_),
          reinterpret_cast<char*>(&other->owner_soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscriptionCheck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheSubscriptionRefresh::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheSubscriptionRefresh>()._has_bits_);
  static const ::CMsgSOIDOwner& owner_soid(const CMsgSOCacheSubscriptionRefresh* msg);
  static void set_has_owner_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheSubscriptionRefresh::_Internal::owner_soid(const CMsgSOCacheSubscriptionRefresh* msg) {
  return *msg->owner_soid_;
}
CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheSubscriptionRefresh)
}
CMsgSOCacheSubscriptionRefresh::CMsgSOCacheSubscriptionRefresh(const CMsgSOCacheSubscriptionRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_soid()) {
    owner_soid_ = new ::CMsgSOIDOwner(*from.owner_soid_);
  } else {
    owner_soid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheSubscriptionRefresh)
}

void CMsgSOCacheSubscriptionRefresh::SharedCtor() {
owner_soid_ = nullptr;
}

CMsgSOCacheSubscriptionRefresh::~CMsgSOCacheSubscriptionRefresh() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheSubscriptionRefresh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheSubscriptionRefresh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_soid_;
}

void CMsgSOCacheSubscriptionRefresh::ArenaDtor(void* object) {
  CMsgSOCacheSubscriptionRefresh* _this = reinterpret_cast< CMsgSOCacheSubscriptionRefresh* >(object);
  (void)_this;
}
void CMsgSOCacheSubscriptionRefresh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheSubscriptionRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheSubscriptionRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheSubscriptionRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_soid_ != nullptr);
    owner_soid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheSubscriptionRefresh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSOIDOwner owner_soid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheSubscriptionRefresh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheSubscriptionRefresh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner owner_soid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_soid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheSubscriptionRefresh)
  return target;
}

size_t CMsgSOCacheSubscriptionRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheSubscriptionRefresh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSOIDOwner owner_soid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_soid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheSubscriptionRefresh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheSubscriptionRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheSubscriptionRefresh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheSubscriptionRefresh)
    MergeFrom(*source);
  }
}

void CMsgSOCacheSubscriptionRefresh::MergeFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheSubscriptionRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_soid()) {
    _internal_mutable_owner_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_owner_soid());
  }
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheSubscriptionRefresh::CopyFrom(const CMsgSOCacheSubscriptionRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheSubscriptionRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheSubscriptionRefresh::IsInitialized() const {
  return true;
}

void CMsgSOCacheSubscriptionRefresh::InternalSwap(CMsgSOCacheSubscriptionRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_soid_, other->owner_soid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheSubscriptionRefresh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheVersion>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSOCacheVersion::CMsgSOCacheVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheVersion)
}
CMsgSOCacheVersion::CMsgSOCacheVersion(const CMsgSOCacheVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheVersion)
}

void CMsgSOCacheVersion::SharedCtor() {
version_ = PROTOBUF_ULONGLONG(0);
}

CMsgSOCacheVersion::~CMsgSOCacheVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSOCacheVersion::ArenaDtor(void* object) {
  CMsgSOCacheVersion* _this = reinterpret_cast< CMsgSOCacheVersion* >(object);
  (void)_this;
}
void CMsgSOCacheVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheVersion)
  return target;
}

size_t CMsgSOCacheVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheVersion::MergeFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void CMsgSOCacheVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheVersion::CopyFrom(const CMsgSOCacheVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheVersion::InternalSwap(CMsgSOCacheVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCMultiplexMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMultiplexMessage>()._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steamids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCMultiplexMessage)
}
CMsgGCMultiplexMessage::CMsgGCMultiplexMessage(const CMsgGCMultiplexMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArena());
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMultiplexMessage)
}

void CMsgGCMultiplexMessage::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msgtype_ = 0u;
}

CMsgGCMultiplexMessage::~CMsgGCMultiplexMessage() {
  // @@protoc_insertion_point(destructor:CMsgGCMultiplexMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCMultiplexMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMultiplexMessage::ArenaDtor(void* object) {
  CMsgGCMultiplexMessage* _this = reinterpret_cast< CMsgGCMultiplexMessage* >(object);
  (void)_this;
}
void CMsgGCMultiplexMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMultiplexMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMultiplexMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMultiplexMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payload_.ClearNonDefaultToEmpty();
  }
  msgtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMultiplexMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msgtype(&has_bits);
          msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steamids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCMultiplexMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMultiplexMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msgtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  // repeated fixed64 steamids = 3;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMultiplexMessage)
  return target;
}

size_t CMsgGCMultiplexMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMultiplexMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes payload = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional uint32 msgtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCMultiplexMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCMultiplexMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCMultiplexMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCMultiplexMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCMultiplexMessage)
    MergeFrom(*source);
  }
}

void CMsgGCMultiplexMessage::MergeFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMultiplexMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCMultiplexMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCMultiplexMessage::CopyFrom(const CMsgGCMultiplexMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMultiplexMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMultiplexMessage::IsInitialized() const {
  return true;
}

void CMsgGCMultiplexMessage::InternalSwap(CMsgGCMultiplexMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steamids_.InternalSwap(&other->steamids_);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msgtype_, other->msgtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMultiplexMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCSubGCStarting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSubGCStarting>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCSubGCStarting::CMsgGCToGCSubGCStarting(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSubGCStarting)
}
CMsgGCToGCSubGCStarting::CMsgGCToGCSubGCStarting(const CMsgGCToGCSubGCStarting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSubGCStarting)
}

void CMsgGCToGCSubGCStarting::SharedCtor() {
dir_index_ = 0u;
}

CMsgGCToGCSubGCStarting::~CMsgGCToGCSubGCStarting() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSubGCStarting)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCSubGCStarting::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCSubGCStarting::ArenaDtor(void* object) {
  CMsgGCToGCSubGCStarting* _this = reinterpret_cast< CMsgGCToGCSubGCStarting* >(object);
  (void)_this;
}
void CMsgGCToGCSubGCStarting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCSubGCStarting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCSubGCStarting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSubGCStarting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSubGCStarting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCSubGCStarting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSubGCStarting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSubGCStarting)
  return target;
}

size_t CMsgGCToGCSubGCStarting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSubGCStarting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dir_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSubGCStarting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSubGCStarting)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSubGCStarting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCSubGCStarting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSubGCStarting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSubGCStarting)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSubGCStarting::MergeFrom(const CMsgGCToGCSubGCStarting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSubGCStarting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dir_index()) {
    _internal_set_dir_index(from._internal_dir_index());
  }
}

void CMsgGCToGCSubGCStarting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSubGCStarting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSubGCStarting::CopyFrom(const CMsgGCToGCSubGCStarting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSubGCStarting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSubGCStarting::IsInitialized() const {
  return true;
}

void CMsgGCToGCSubGCStarting::InternalSwap(CMsgGCToGCSubGCStarting* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSubGCStarting::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgMasterAck_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgMasterAck_Process>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_instances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgMasterAck.Process)
}
CGCToGCMsgMasterAck_Process::CGCToGCMsgMasterAck_Process(const CGCToGCMsgMasterAck_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      type_instances_(from.type_instances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck.Process)
}

void CGCToGCMsgMasterAck_Process::SharedCtor() {
dir_index_ = 0u;
}

CGCToGCMsgMasterAck_Process::~CGCToGCMsgMasterAck_Process() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck.Process)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgMasterAck_Process::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGCToGCMsgMasterAck_Process::ArenaDtor(void* object) {
  CGCToGCMsgMasterAck_Process* _this = reinterpret_cast< CGCToGCMsgMasterAck_Process* >(object);
  (void)_this;
}
void CGCToGCMsgMasterAck_Process::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgMasterAck_Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgMasterAck_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterAck.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_instances_.Clear();
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgMasterAck_Process::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 type_instances = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_type_instances(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_type_instances(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgMasterAck_Process::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  // repeated uint32 type_instances = 2;
  for (int i = 0, n = this->_internal_type_instances_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type_instances(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck.Process)
  return target;
}

size_t CGCToGCMsgMasterAck_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterAck.Process)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 type_instances = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->type_instances_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_type_instances_size());
    total_size += data_size;
  }

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dir_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Process* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgMasterAck_Process>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterAck.Process)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterAck.Process)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Process::MergeFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterAck.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_instances_.MergeFrom(from.type_instances_);
  if (from._internal_has_dir_index()) {
    _internal_set_dir_index(from._internal_dir_index());
  }
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Process::CopyFrom(const CGCToGCMsgMasterAck_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterAck.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Process::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Process::InternalSwap(CGCToGCMsgMasterAck_Process* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_instances_.InternalSwap(&other->type_instances_);
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgMasterAck_Process::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgMasterAck::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgMasterAck>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  directory_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgMasterAck)
}
CGCToGCMsgMasterAck::CGCToGCMsgMasterAck(const CGCToGCMsgMasterAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      directory_(from.directory_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArena());
  }
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_process_name()) {
    process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_name(), 
      GetArena());
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck)
}

void CGCToGCMsgMasterAck::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dir_index_ = 0u;
}

CGCToGCMsgMasterAck::~CGCToGCMsgMasterAck() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgMasterAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterAck::ArenaDtor(void* object) {
  CGCToGCMsgMasterAck* _this = reinterpret_cast< CGCToGCMsgMasterAck* >(object);
  (void)_this;
}
void CGCToGCMsgMasterAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgMasterAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgMasterAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      process_name_.ClearNonDefaultToEmpty();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgMasterAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCToGCMsgMasterAck.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string process_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCToGCMsgMasterAck.process_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CGCToGCMsgMasterAck.Process directory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_directory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgMasterAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  // optional string machine_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.machine_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine_name(), target);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterAck.process_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_process_name(), target);
  }

  // repeated .CGCToGCMsgMasterAck.Process directory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_directory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_directory(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck)
  return target;
}

size_t CGCToGCMsgMasterAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterAck)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCToGCMsgMasterAck.Process directory = 6;
  total_size += 1UL * this->_internal_directory_size();
  for (const auto& msg : this->directory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string machine_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string process_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_process_name());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgMasterAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterAck)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck::MergeFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directory_.MergeFrom(from.directory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_process_name(from._internal_process_name());
    }
    if (cached_has_bits & 0x00000004u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck::CopyFrom(const CGCToGCMsgMasterAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck::InternalSwap(CGCToGCMsgMasterAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  directory_.InternalSwap(&other->directory_);
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgMasterAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgMasterAck_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgMasterAck_Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgMasterAck_Response)
}
CGCToGCMsgMasterAck_Response::CGCToGCMsgMasterAck_Response(const CGCToGCMsgMasterAck_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterAck_Response)
}

void CGCToGCMsgMasterAck_Response::SharedCtor() {
eresult_ = 2;
}

CGCToGCMsgMasterAck_Response::~CGCToGCMsgMasterAck_Response() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterAck_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgMasterAck_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGCToGCMsgMasterAck_Response::ArenaDtor(void* object) {
  CGCToGCMsgMasterAck_Response* _this = reinterpret_cast< CGCToGCMsgMasterAck_Response* >(object);
  (void)_this;
}
void CGCToGCMsgMasterAck_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgMasterAck_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgMasterAck_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterAck_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgMasterAck_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgMasterAck_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterAck_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterAck_Response)
  return target;
}

size_t CGCToGCMsgMasterAck_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterAck_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterAck_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgMasterAck_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterAck_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterAck_Response)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterAck_Response::MergeFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterAck_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterAck_Response::CopyFrom(const CGCToGCMsgMasterAck_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterAck_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterAck_Response::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterAck_Response::InternalSwap(CGCToGCMsgMasterAck_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgMasterAck_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUniverseStartup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUniverseStartup>()._has_bits_);
  static void set_has_is_initial_startup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUniverseStartup)
}
CMsgGCToGCUniverseStartup::CMsgGCToGCUniverseStartup(const CMsgGCToGCUniverseStartup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_initial_startup_ = from.is_initial_startup_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUniverseStartup)
}

void CMsgGCToGCUniverseStartup::SharedCtor() {
is_initial_startup_ = false;
}

CMsgGCToGCUniverseStartup::~CMsgGCToGCUniverseStartup() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUniverseStartup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUniverseStartup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCUniverseStartup::ArenaDtor(void* object) {
  CMsgGCToGCUniverseStartup* _this = reinterpret_cast< CMsgGCToGCUniverseStartup* >(object);
  (void)_this;
}
void CMsgGCToGCUniverseStartup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUniverseStartup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUniverseStartup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUniverseStartup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_initial_startup_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUniverseStartup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_initial_startup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_initial_startup(&has_bits);
          is_initial_startup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUniverseStartup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUniverseStartup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_initial_startup = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_initial_startup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUniverseStartup)
  return target;
}

size_t CMsgGCToGCUniverseStartup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUniverseStartup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_initial_startup = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUniverseStartup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUniverseStartup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUniverseStartup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUniverseStartup)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartup::MergeFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUniverseStartup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_initial_startup()) {
    _internal_set_is_initial_startup(from._internal_is_initial_startup());
  }
}

void CMsgGCToGCUniverseStartup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartup::CopyFrom(const CMsgGCToGCUniverseStartup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUniverseStartup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartup::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartup::InternalSwap(CMsgGCToGCUniverseStartup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_initial_startup_, other->is_initial_startup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUniverseStartup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUniverseStartupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUniverseStartupResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUniverseStartupResponse)
}
CMsgGCToGCUniverseStartupResponse::CMsgGCToGCUniverseStartupResponse(const CMsgGCToGCUniverseStartupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUniverseStartupResponse)
}

void CMsgGCToGCUniverseStartupResponse::SharedCtor() {
eresult_ = 0;
}

CMsgGCToGCUniverseStartupResponse::~CMsgGCToGCUniverseStartupResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUniverseStartupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUniverseStartupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCUniverseStartupResponse::ArenaDtor(void* object) {
  CMsgGCToGCUniverseStartupResponse* _this = reinterpret_cast< CMsgGCToGCUniverseStartupResponse* >(object);
  (void)_this;
}
void CMsgGCToGCUniverseStartupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUniverseStartupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUniverseStartupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUniverseStartupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUniverseStartupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUniverseStartupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUniverseStartupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUniverseStartupResponse)
  return target;
}

size_t CMsgGCToGCUniverseStartupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUniverseStartupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUniverseStartupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUniverseStartupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUniverseStartupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUniverseStartupResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUniverseStartupResponse::MergeFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUniverseStartupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUniverseStartupResponse::CopyFrom(const CMsgGCToGCUniverseStartupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUniverseStartupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUniverseStartupResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCUniverseStartupResponse::InternalSwap(CMsgGCToGCUniverseStartupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUniverseStartupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgMasterStartupComplete_GCInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgMasterStartupComplete_GCInfo>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}
CGCToGCMsgMasterStartupComplete_GCInfo::CGCToGCMsgMasterStartupComplete_GCInfo(const CGCToGCMsgMasterStartupComplete_GCInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArena());
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete.GCInfo)
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedCtor() {
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dir_index_ = 0u;
}

CGCToGCMsgMasterStartupComplete_GCInfo::~CGCToGCMsgMasterStartupComplete_GCInfo() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete.GCInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgMasterStartupComplete_GCInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgMasterStartupComplete_GCInfo::ArenaDtor(void* object) {
  CGCToGCMsgMasterStartupComplete_GCInfo* _this = reinterpret_cast< CGCToGCMsgMasterStartupComplete_GCInfo* >(object);
  (void)_this;
}
void CGCToGCMsgMasterStartupComplete_GCInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgMasterStartupComplete_GCInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    machine_name_.ClearNonDefaultToEmpty();
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgMasterStartupComplete_GCInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgMasterStartupComplete_GCInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  // optional string machine_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCToGCMsgMasterStartupComplete.GCInfo.machine_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_machine_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete.GCInfo)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete_GCInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string machine_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete_GCInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgMasterStartupComplete_GCInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterStartupComplete.GCInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterStartupComplete.GCInfo)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::MergeFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00000002u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete_GCInfo::CopyFrom(const CGCToGCMsgMasterStartupComplete_GCInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterStartupComplete.GCInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete_GCInfo::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete_GCInfo::InternalSwap(CGCToGCMsgMasterStartupComplete_GCInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgMasterStartupComplete_GCInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgMasterStartupComplete::_Internal {
 public:
};

CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gc_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgMasterStartupComplete)
}
CGCToGCMsgMasterStartupComplete::CGCToGCMsgMasterStartupComplete(const CGCToGCMsgMasterStartupComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gc_info_(from.gc_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgMasterStartupComplete)
}

void CGCToGCMsgMasterStartupComplete::SharedCtor() {
}

CGCToGCMsgMasterStartupComplete::~CGCToGCMsgMasterStartupComplete() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgMasterStartupComplete)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgMasterStartupComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGCToGCMsgMasterStartupComplete::ArenaDtor(void* object) {
  CGCToGCMsgMasterStartupComplete* _this = reinterpret_cast< CGCToGCMsgMasterStartupComplete* >(object);
  (void)_this;
}
void CGCToGCMsgMasterStartupComplete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgMasterStartupComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgMasterStartupComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgMasterStartupComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gc_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgMasterStartupComplete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gc_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgMasterStartupComplete::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgMasterStartupComplete)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gc_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_gc_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgMasterStartupComplete)
  return target;
}

size_t CGCToGCMsgMasterStartupComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgMasterStartupComplete)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCToGCMsgMasterStartupComplete.GCInfo gc_info = 1;
  total_size += 1UL * this->_internal_gc_info_size();
  for (const auto& msg : this->gc_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgMasterStartupComplete* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgMasterStartupComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgMasterStartupComplete)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgMasterStartupComplete)
    MergeFrom(*source);
  }
}

void CGCToGCMsgMasterStartupComplete::MergeFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgMasterStartupComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gc_info_.MergeFrom(from.gc_info_);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgMasterStartupComplete::CopyFrom(const CGCToGCMsgMasterStartupComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgMasterStartupComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgMasterStartupComplete::IsInitialized() const {
  return true;
}

void CGCToGCMsgMasterStartupComplete::InternalSwap(CGCToGCMsgMasterStartupComplete* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gc_info_.InternalSwap(&other->gc_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgMasterStartupComplete::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgRouted::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgRouted>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_net_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCToGCMsgRouted::CGCToGCMsgRouted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgRouted)
}
CGCToGCMsgRouted::CGCToGCMsgRouted(const CGCToGCMsgRouted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_net_message()) {
    net_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net_message(), 
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRouted)
}

void CGCToGCMsgRouted::SharedCtor() {
net_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
}

CGCToGCMsgRouted::~CGCToGCMsgRouted() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRouted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgRouted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  net_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRouted::ArenaDtor(void* object) {
  CGCToGCMsgRouted* _this = reinterpret_cast< CGCToGCMsgRouted* >(object);
  (void)_this;
}
void CGCToGCMsgRouted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgRouted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgRouted::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgRouted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    net_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_type_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgRouted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes net_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_net_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgRouted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRouted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional bytes net_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_net_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRouted)
  return target;
}

size_t CGCToGCMsgRouted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgRouted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes net_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_net_message());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgRouted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRouted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgRouted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgRouted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgRouted)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRouted::MergeFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgRouted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_net_message(from._internal_net_message());
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRouted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRouted::CopyFrom(const CGCToGCMsgRouted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgRouted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRouted::IsInitialized() const {
  return true;
}

void CGCToGCMsgRouted::InternalSwap(CGCToGCMsgRouted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  net_message_.Swap(&other->net_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCToGCMsgRouted, msg_type_)
      + sizeof(CGCToGCMsgRouted::msg_type_)
      - PROTOBUF_FIELD_OFFSET(CGCToGCMsgRouted, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgRouted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCToGCMsgRoutedReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCToGCMsgRoutedReply>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_net_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCToGCMsgRoutedReply)
}
CGCToGCMsgRoutedReply::CGCToGCMsgRoutedReply(const CGCToGCMsgRoutedReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  net_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_net_message()) {
    net_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_net_message(), 
      GetArena());
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CGCToGCMsgRoutedReply)
}

void CGCToGCMsgRoutedReply::SharedCtor() {
net_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_type_ = 0u;
}

CGCToGCMsgRoutedReply::~CGCToGCMsgRoutedReply() {
  // @@protoc_insertion_point(destructor:CGCToGCMsgRoutedReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCToGCMsgRoutedReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  net_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCToGCMsgRoutedReply::ArenaDtor(void* object) {
  CGCToGCMsgRoutedReply* _this = reinterpret_cast< CGCToGCMsgRoutedReply* >(object);
  (void)_this;
}
void CGCToGCMsgRoutedReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCToGCMsgRoutedReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCToGCMsgRoutedReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCToGCMsgRoutedReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    net_message_.ClearNonDefaultToEmpty();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCToGCMsgRoutedReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes net_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_net_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCToGCMsgRoutedReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCToGCMsgRoutedReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional bytes net_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_net_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCToGCMsgRoutedReply)
  return target;
}

size_t CGCToGCMsgRoutedReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCToGCMsgRoutedReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes net_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_net_message());
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCToGCMsgRoutedReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCToGCMsgRoutedReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCToGCMsgRoutedReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCToGCMsgRoutedReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCToGCMsgRoutedReply)
    MergeFrom(*source);
  }
}

void CGCToGCMsgRoutedReply::MergeFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCToGCMsgRoutedReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_net_message(from._internal_net_message());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCToGCMsgRoutedReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCToGCMsgRoutedReply::CopyFrom(const CGCToGCMsgRoutedReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCToGCMsgRoutedReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCToGCMsgRoutedReply::IsInitialized() const {
  return true;
}

void CGCToGCMsgRoutedReply::InternalSwap(CGCToGCMsgRoutedReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  net_message_.Swap(&other->net_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_type_, other->msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCToGCMsgRoutedReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}
CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trusted_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
}

CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::~CMsgGCUpdateSubGCSessionInfo_CMsgUpdate() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ArenaDtor(void* object) {
  CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* _this = reinterpret_cast< CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* >(object);
  (void)_this;
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trusted_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool trusted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_trusted(&has_bits);
          trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ip(), target);
  }

  // optional bool trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed32 ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool trusted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCUpdateSubGCSessionInfo_CMsgUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::MergeFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::CopyFrom(const CMsgGCUpdateSubGCSessionInfo_CMsgUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCUpdateSubGCSessionInfo.CMsgUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::InternalSwap(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, trusted_)
      + sizeof(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::trusted_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCUpdateSubGCSessionInfo_CMsgUpdate, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCUpdateSubGCSessionInfo_CMsgUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCUpdateSubGCSessionInfo::_Internal {
 public:
};

CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCUpdateSubGCSessionInfo)
}
CMsgGCUpdateSubGCSessionInfo::CMsgGCUpdateSubGCSessionInfo(const CMsgGCUpdateSubGCSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCUpdateSubGCSessionInfo)
}

void CMsgGCUpdateSubGCSessionInfo::SharedCtor() {
}

CMsgGCUpdateSubGCSessionInfo::~CMsgGCUpdateSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCUpdateSubGCSessionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCUpdateSubGCSessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCUpdateSubGCSessionInfo::ArenaDtor(void* object) {
  CMsgGCUpdateSubGCSessionInfo* _this = reinterpret_cast< CMsgGCUpdateSubGCSessionInfo* >(object);
  (void)_this;
}
void CMsgGCUpdateSubGCSessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCUpdateSubGCSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCUpdateSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCUpdateSubGCSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCUpdateSubGCSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCUpdateSubGCSessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCUpdateSubGCSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCUpdateSubGCSessionInfo)
  return target;
}

size_t CMsgGCUpdateSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCUpdateSubGCSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCUpdateSubGCSessionInfo.CMsgUpdate updates = 1;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCUpdateSubGCSessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCUpdateSubGCSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCUpdateSubGCSessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCUpdateSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCUpdateSubGCSessionInfo::MergeFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCUpdateSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCUpdateSubGCSessionInfo::CopyFrom(const CMsgGCUpdateSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCUpdateSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCUpdateSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCUpdateSubGCSessionInfo::InternalSwap(CMsgGCUpdateSubGCSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCUpdateSubGCSessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestSubGCSessionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestSubGCSessionInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestSubGCSessionInfo)
}
CMsgGCRequestSubGCSessionInfo::CMsgGCRequestSubGCSessionInfo(const CMsgGCRequestSubGCSessionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfo)
}

void CMsgGCRequestSubGCSessionInfo::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCRequestSubGCSessionInfo::~CMsgGCRequestSubGCSessionInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestSubGCSessionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestSubGCSessionInfo::ArenaDtor(void* object) {
  CMsgGCRequestSubGCSessionInfo* _this = reinterpret_cast< CMsgGCRequestSubGCSessionInfo* >(object);
  (void)_this;
}
void CMsgGCRequestSubGCSessionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestSubGCSessionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestSubGCSessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestSubGCSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestSubGCSessionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestSubGCSessionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfo)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestSubGCSessionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestSubGCSessionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestSubGCSessionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestSubGCSessionInfo)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfo::MergeFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestSubGCSessionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfo::CopyFrom(const CMsgGCRequestSubGCSessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestSubGCSessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfo::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfo::InternalSwap(CMsgGCRequestSubGCSessionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestSubGCSessionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestSubGCSessionInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestSubGCSessionInfoResponse>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestSubGCSessionInfoResponse)
}
CMsgGCRequestSubGCSessionInfoResponse::CMsgGCRequestSubGCSessionInfoResponse(const CMsgGCRequestSubGCSessionInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestSubGCSessionInfoResponse)
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(success_));
}

CMsgGCRequestSubGCSessionInfoResponse::~CMsgGCRequestSubGCSessionInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestSubGCSessionInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestSubGCSessionInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestSubGCSessionInfoResponse::ArenaDtor(void* object) {
  CMsgGCRequestSubGCSessionInfoResponse* _this = reinterpret_cast< CMsgGCRequestSubGCSessionInfoResponse* >(object);
  (void)_this;
}
void CMsgGCRequestSubGCSessionInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestSubGCSessionInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestSubGCSessionInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestSubGCSessionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&success_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(success_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestSubGCSessionInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool trusted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trusted(&has_bits);
          trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestSubGCSessionInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestSubGCSessionInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 ip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ip(), target);
  }

  // optional bool trusted = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_trusted(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestSubGCSessionInfoResponse)
  return target;
}

size_t CMsgGCRequestSubGCSessionInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestSubGCSessionInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 port = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port());
    }

    // optional bool trusted = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestSubGCSessionInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestSubGCSessionInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestSubGCSessionInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestSubGCSessionInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::MergeFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      trusted_ = from.trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestSubGCSessionInfoResponse::CopyFrom(const CMsgGCRequestSubGCSessionInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestSubGCSessionInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestSubGCSessionInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestSubGCSessionInfoResponse::InternalSwap(CMsgGCRequestSubGCSessionInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, success_)
      + sizeof(CMsgGCRequestSubGCSessionInfoResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestSubGCSessionInfoResponse, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestSubGCSessionInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSOCacheHaveVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSOCacheHaveVersion>()._has_bits_);
  static const ::CMsgSOIDOwner& soid(const CMsgSOCacheHaveVersion* msg);
  static void set_has_soid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cached_file_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSOIDOwner&
CMsgSOCacheHaveVersion::_Internal::soid(const CMsgSOCacheHaveVersion* msg) {
  return *msg->soid_;
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSOCacheHaveVersion)
}
CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_soid()) {
    soid_ = new ::CMsgSOIDOwner(*from.soid_);
  } else {
    soid_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSOCacheHaveVersion)
}

void CMsgSOCacheHaveVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cached_file_version_) -
    reinterpret_cast<char*>(&soid_)) + sizeof(cached_file_version_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  // @@protoc_insertion_point(destructor:CMsgSOCacheHaveVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete soid_;
}

void CMsgSOCacheHaveVersion::ArenaDtor(void* object) {
  CMsgSOCacheHaveVersion* _this = reinterpret_cast< CMsgSOCacheHaveVersion* >(object);
  (void)_this;
}
void CMsgSOCacheHaveVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSOCacheHaveVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSOCacheHaveVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(soid_ != nullptr);
    soid_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cached_file_version_) -
        reinterpret_cast<char*>(&version_)) + sizeof(cached_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSOCacheHaveVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_soid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cached_file_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cached_file_version(&has_bits);
          cached_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSOCacheHaveVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSOCacheHaveVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSOIDOwner soid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::soid(this), target, stream);
  }

  // optional fixed64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_version(), target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_id(), target);
  }

  // optional uint32 cached_file_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cached_file_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSOCacheHaveVersion)
  return target;
}

size_t CMsgSOCacheHaveVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSOCacheHaveVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgSOIDOwner soid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soid_);
    }

    // optional fixed64 version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

    // optional uint32 cached_file_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cached_file_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSOCacheHaveVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSOCacheHaveVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSOCacheHaveVersion)
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSOCacheHaveVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_soid()->::CMsgSOIDOwner::MergeFrom(from._internal_soid());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cached_file_version_ = from.cached_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSOCacheHaveVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {
  return true;
}

void CMsgSOCacheHaveVersion::InternalSwap(CMsgSOCacheHaveVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSOCacheHaveVersion, cached_file_version_)
      + sizeof(CMsgSOCacheHaveVersion::cached_file_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_)>(
          reinterpret_cast<char*>(&soid_),
          reinterpret_cast<char*>(&other->soid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientHello::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientHello>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_session_need(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_client_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secret_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_language(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_steamdatagram_login(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_platform_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_game_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_render_system(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_render_system_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_screen_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_screen_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_screen_refresh(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_render_width(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_render_height(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_swap_width(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_swap_height(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_is_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_is_steam_china_client(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_platform_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientHello::CMsgClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  socache_have_versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientHello)
}
CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      socache_have_versions_(from.socache_have_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret_key()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArena());
  }
  steamdatagram_login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steamdatagram_login()) {
    steamdatagram_login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamdatagram_login(), 
      GetArena());
  }
  game_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_msg()) {
    game_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_msg(), 
      GetArena());
  }
  platform_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_platform_name()) {
    platform_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform_name(), 
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_client_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_steam_china_client_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientHello)
}

void CMsgClientHello::SharedCtor() {
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamdatagram_login_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
platform_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_steam_china_client_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_steam_china_client_));
}

CMsgClientHello::~CMsgClientHello() {
  // @@protoc_insertion_point(destructor:CMsgClientHello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamdatagram_login_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientHello::ArenaDtor(void* object) {
  CMsgClientHello* _this = reinterpret_cast< CMsgClientHello* >(object);
  (void)_this;
}
void CMsgClientHello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientHello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  socache_have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      secret_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      steamdatagram_login_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      game_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      platform_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_language_) -
        reinterpret_cast<char*>(&version_)) + sizeof(client_language_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&engine_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_refresh_) -
        reinterpret_cast<char*>(&engine_)) + sizeof(screen_refresh_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&render_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_steam_china_client_) -
        reinterpret_cast<char*>(&render_width_)) + sizeof(is_steam_china_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientHello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socache_have_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 client_session_need = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_session_need(&has_bits);
          client_session_need_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PartnerAccountType_IsValid(val))) {
            _internal_set_client_launcher(static_cast<::PartnerAccountType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string secret_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientHello.secret_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_client_language(&has_bits);
          client_language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ESourceEngine_IsValid(val))) {
            _internal_set_engine(static_cast<::ESourceEngine>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes steamdatagram_login = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_steamdatagram_login();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platform_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_platform_id(&has_bits);
          platform_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes game_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_game_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 os_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_os_type(&has_bits);
          os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 render_system = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_render_system(&has_bits);
          render_system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 render_system_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_render_system_req(&has_bits);
          render_system_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_width = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_screen_width(&has_bits);
          screen_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_height = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_screen_height(&has_bits);
          screen_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_refresh = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_screen_refresh(&has_bits);
          screen_refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 render_width = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_render_width(&has_bits);
          render_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 render_height = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_render_height(&has_bits);
          render_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 swap_width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_swap_width(&has_bits);
          swap_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 swap_height = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_swap_height(&has_bits);
          swap_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_china = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_steam_china(&has_bits);
          is_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string platform_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_platform_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientHello.platform_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_china_client = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_steam_china_client(&has_bits);
          is_steam_china_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientHello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientHello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_socache_have_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_socache_have_versions(i), target, stream);
  }

  // optional uint32 client_session_need = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_session_need(), target);
  }

  // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_client_launcher(), target);
  }

  // optional string secret_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_secret_key().data(), static_cast<int>(this->_internal_secret_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.secret_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_secret_key(), target);
  }

  // optional uint32 client_language = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_client_language(), target);
  }

  // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_engine(), target);
  }

  // optional bytes steamdatagram_login = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_steamdatagram_login(), target);
  }

  // optional uint32 platform_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_platform_id(), target);
  }

  // optional bytes game_msg = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_game_msg(), target);
  }

  // optional int32 os_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_os_type(), target);
  }

  // optional uint32 render_system = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_render_system(), target);
  }

  // optional uint32 render_system_req = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_render_system_req(), target);
  }

  // optional uint32 screen_width = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_screen_width(), target);
  }

  // optional uint32 screen_height = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_screen_height(), target);
  }

  // optional uint32 screen_refresh = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_screen_refresh(), target);
  }

  // optional uint32 render_width = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_render_width(), target);
  }

  // optional uint32 render_height = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_render_height(), target);
  }

  // optional uint32 swap_width = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_swap_width(), target);
  }

  // optional uint32 swap_height = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_swap_height(), target);
  }

  // optional bool is_steam_china = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_steam_china(), target);
  }

  // optional string platform_name = 23;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_platform_name().data(), static_cast<int>(this->_internal_platform_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientHello.platform_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_platform_name(), target);
  }

  // optional bool is_steam_china_client = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_steam_china_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientHello)
  return target;
}

size_t CMsgClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientHello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1UL * this->_internal_socache_have_versions_size();
  for (const auto& msg : this->socache_have_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string secret_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_secret_key());
    }

    // optional bytes steamdatagram_login = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steamdatagram_login());
    }

    // optional bytes game_msg = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_msg());
    }

    // optional string platform_name = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform_name());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 client_session_need = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_session_need());
    }

    // optional .PartnerAccountType client_launcher = 4 [default = PARTNER_NONE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_client_launcher());
    }

    // optional uint32 client_language = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_language());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .ESourceEngine engine = 7 [default = k_ESE_Source1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_engine());
    }

    // optional uint32 platform_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platform_id());
    }

    // optional int32 os_type = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_os_type());
    }

    // optional uint32 render_system = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_system());
    }

    // optional uint32 render_system_req = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_system_req());
    }

    // optional uint32 screen_width = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_width());
    }

    // optional uint32 screen_height = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_height());
    }

    // optional uint32 screen_refresh = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_screen_refresh());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 render_width = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_width());
    }

    // optional uint32 render_height = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_render_height());
    }

    // optional uint32 swap_width = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swap_width());
    }

    // optional uint32 swap_height = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swap_height());
    }

    // optional bool is_steam_china = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_china_client = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientHello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientHello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientHello)
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_secret_key(from._internal_secret_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_steamdatagram_login(from._internal_steamdatagram_login());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_game_msg(from._internal_game_msg());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_platform_name(from._internal_platform_name());
    }
    if (cached_has_bits & 0x00000010u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_launcher_ = from.client_launcher_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_language_ = from.client_language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000200u) {
      platform_id_ = from.platform_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      render_system_ = from.render_system_;
    }
    if (cached_has_bits & 0x00001000u) {
      render_system_req_ = from.render_system_req_;
    }
    if (cached_has_bits & 0x00002000u) {
      screen_width_ = from.screen_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      screen_height_ = from.screen_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      screen_refresh_ = from.screen_refresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      render_width_ = from.render_width_;
    }
    if (cached_has_bits & 0x00020000u) {
      render_height_ = from.render_height_;
    }
    if (cached_has_bits & 0x00040000u) {
      swap_width_ = from.swap_width_;
    }
    if (cached_has_bits & 0x00080000u) {
      swap_height_ = from.swap_height_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_steam_china_ = from.is_steam_china_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_steam_china_client_ = from.is_steam_china_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientHello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {
  return true;
}

void CMsgClientHello::InternalSwap(CMsgClientHello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  socache_have_versions_.InternalSwap(&other->socache_have_versions_);
  secret_key_.Swap(&other->secret_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steamdatagram_login_.Swap(&other->steamdatagram_login_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_msg_.Swap(&other->game_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_name_.Swap(&other->platform_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientHello, is_steam_china_client_)
      + sizeof(CMsgClientHello::is_steam_china_client_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientHello, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientHello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientWelcome_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientWelcome_Location>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientWelcome_Location::CMsgClientWelcome_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientWelcome.Location)
}
CMsgClientWelcome_Location::CMsgClientWelcome_Location(const CMsgClientWelcome_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientWelcome.Location)
}

void CMsgClientWelcome_Location::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

CMsgClientWelcome_Location::~CMsgClientWelcome_Location() {
  // @@protoc_insertion_point(destructor:CMsgClientWelcome.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientWelcome_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientWelcome_Location::ArenaDtor(void* object) {
  CMsgClientWelcome_Location* _this = reinterpret_cast< CMsgClientWelcome_Location* >(object);
  (void)_this;
}
void CMsgClientWelcome_Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientWelcome_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientWelcome_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientWelcome.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientWelcome_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientWelcome.Location.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientWelcome_Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientWelcome.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float latitude = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // optional float longitude = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // optional string country = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.Location.country");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientWelcome.Location)
  return target;
}

size_t CMsgClientWelcome_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientWelcome.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional float latitude = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWelcome_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientWelcome_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientWelcome.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientWelcome.Location)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome_Location::MergeFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientWelcome.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome_Location::CopyFrom(const CMsgClientWelcome_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientWelcome.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome_Location::IsInitialized() const {
  return true;
}

void CMsgClientWelcome_Location::InternalSwap(CMsgClientWelcome_Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientWelcome_Location, longitude_)
      + sizeof(CMsgClientWelcome_Location::longitude_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientWelcome_Location, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientWelcome_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientWelcome::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientWelcome>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgClientWelcome_Location& location(const CMsgClientWelcome* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_save_game_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_schema_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_items_game_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_socache_file_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_txn_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_gc_welcome_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_balance_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_accepted_china_ssa(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_banned_steam_china(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::CExtraMsgBlock& additional_welcome_msgs(const CMsgClientWelcome* msg);
  static void set_has_additional_welcome_msgs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgClientWelcome_Location&
CMsgClientWelcome::_Internal::location(const CMsgClientWelcome* msg) {
  return *msg->location_;
}
const ::CExtraMsgBlock&
CMsgClientWelcome::_Internal::additional_welcome_msgs(const CMsgClientWelcome* msg) {
  return *msg->additional_welcome_msgs_;
}
CMsgClientWelcome::CMsgClientWelcome(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outofdate_subscribed_caches_(arena),
  uptodate_subscribed_caches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientWelcome)
}
CMsgClientWelcome::CMsgClientWelcome(const CMsgClientWelcome& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      outofdate_subscribed_caches_(from.outofdate_subscribed_caches_),
      uptodate_subscribed_caches_(from.uptodate_subscribed_caches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_data()) {
    game_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data(), 
      GetArena());
  }
  save_game_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_save_game_key()) {
    save_game_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_save_game_key(), 
      GetArena());
  }
  items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_items_game_url()) {
    items_game_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_items_game_url(), 
      GetArena());
  }
  txn_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_txn_country_code()) {
    txn_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txn_country_code(), 
      GetArena());
  }
  game_data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_data2()) {
    game_data2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_data2(), 
      GetArena());
  }
  balance_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_balance_url()) {
    balance_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_balance_url(), 
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::CMsgClientWelcome_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_additional_welcome_msgs()) {
    additional_welcome_msgs_ = new ::CExtraMsgBlock(*from.additional_welcome_msgs_);
  } else {
    additional_welcome_msgs_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_banned_steam_china_) -
    reinterpret_cast<char*>(&version_)) + sizeof(is_banned_steam_china_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientWelcome)
}

void CMsgClientWelcome::SharedCtor() {
game_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
save_game_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
items_game_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
txn_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
balance_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_banned_steam_china_) -
    reinterpret_cast<char*>(&location_)) + sizeof(is_banned_steam_china_));
}

CMsgClientWelcome::~CMsgClientWelcome() {
  // @@protoc_insertion_point(destructor:CMsgClientWelcome)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientWelcome::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  save_game_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  balance_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete additional_welcome_msgs_;
}

void CMsgClientWelcome::ArenaDtor(void* object) {
  CMsgClientWelcome* _this = reinterpret_cast< CMsgClientWelcome* >(object);
  (void)_this;
}
void CMsgClientWelcome::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientWelcome::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientWelcome::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientWelcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outofdate_subscribed_caches_.Clear();
  uptodate_subscribed_caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      game_data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      save_game_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      items_game_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      txn_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      game_data2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      balance_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(additional_welcome_msgs_ != nullptr);
      additional_welcome_msgs_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_banned_steam_china_) -
        reinterpret_cast<char*>(&version_)) + sizeof(is_banned_steam_china_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientWelcome::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes game_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_game_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outofdate_subscribed_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uptodate_subscribed_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientWelcome.Location location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes save_game_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_save_game_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 item_schema_crc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_item_schema_crc(&has_bits);
          item_schema_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string items_game_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_items_game_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientWelcome.items_game_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gc_socache_file_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_gc_socache_file_version(&has_bits);
          gc_socache_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string txn_country_code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_txn_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientWelcome.txn_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes game_data2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_game_data2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime32_gc_welcome_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rtime32_gc_welcome_timestamp(&has_bits);
          rtime32_gc_welcome_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currency = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string balance_url = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_balance_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientWelcome.balance_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_accepted_china_ssa = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_has_accepted_china_ssa(&has_bits);
          has_accepted_china_ssa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_banned_steam_china = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_banned_steam_china(&has_bits);
          is_banned_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CExtraMsgBlock additional_welcome_msgs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_welcome_msgs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientWelcome::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientWelcome)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_game_data(), target);
  }

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outofdate_subscribed_caches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_outofdate_subscribed_caches(i), target, stream);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uptodate_subscribed_caches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_uptodate_subscribed_caches(i), target, stream);
  }

  // optional .CMsgClientWelcome.Location location = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::location(this), target, stream);
  }

  // optional bytes save_game_key = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_save_game_key(), target);
  }

  // optional fixed32 item_schema_crc = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_item_schema_crc(), target);
  }

  // optional string items_game_url = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_items_game_url().data(), static_cast<int>(this->_internal_items_game_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.items_game_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_items_game_url(), target);
  }

  // optional uint32 gc_socache_file_version = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_gc_socache_file_version(), target);
  }

  // optional string txn_country_code = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_txn_country_code().data(), static_cast<int>(this->_internal_txn_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.txn_country_code");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_txn_country_code(), target);
  }

  // optional bytes game_data2 = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_game_data2(), target);
  }

  // optional uint32 rtime32_gc_welcome_timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rtime32_gc_welcome_timestamp(), target);
  }

  // optional uint32 currency = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_currency(), target);
  }

  // optional uint32 balance = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_balance(), target);
  }

  // optional string balance_url = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_balance_url().data(), static_cast<int>(this->_internal_balance_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientWelcome.balance_url");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_balance_url(), target);
  }

  // optional bool has_accepted_china_ssa = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_has_accepted_china_ssa(), target);
  }

  // optional bool is_banned_steam_china = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_banned_steam_china(), target);
  }

  // optional .CExtraMsgBlock additional_welcome_msgs = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::additional_welcome_msgs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientWelcome)
  return target;
}

size_t CMsgClientWelcome::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientWelcome)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSOCacheSubscribed outofdate_subscribed_caches = 3;
  total_size += 1UL * this->_internal_outofdate_subscribed_caches_size();
  for (const auto& msg : this->outofdate_subscribed_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSOCacheSubscriptionCheck uptodate_subscribed_caches = 4;
  total_size += 1UL * this->_internal_uptodate_subscribed_caches_size();
  for (const auto& msg : this->uptodate_subscribed_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data());
    }

    // optional bytes save_game_key = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_save_game_key());
    }

    // optional string items_game_url = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_items_game_url());
    }

    // optional string txn_country_code = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_txn_country_code());
    }

    // optional bytes game_data2 = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_game_data2());
    }

    // optional string balance_url = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_balance_url());
    }

    // optional .CMsgClientWelcome.Location location = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .CExtraMsgBlock additional_welcome_msgs = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *additional_welcome_msgs_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional fixed32 item_schema_crc = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 gc_socache_file_version = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gc_socache_file_version());
    }

    // optional uint32 rtime32_gc_welcome_timestamp = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime32_gc_welcome_timestamp());
    }

    // optional uint32 currency = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_currency());
    }

    // optional uint32 balance = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance());
    }

    // optional bool has_accepted_china_ssa = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_banned_steam_china = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientWelcome::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientWelcome* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientWelcome>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientWelcome)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientWelcome)
    MergeFrom(*source);
  }
}

void CMsgClientWelcome::MergeFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientWelcome)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outofdate_subscribed_caches_.MergeFrom(from.outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.MergeFrom(from.uptodate_subscribed_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_game_data(from._internal_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_save_game_key(from._internal_save_game_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_items_game_url(from._internal_items_game_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_txn_country_code(from._internal_txn_country_code());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_game_data2(from._internal_game_data2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_balance_url(from._internal_balance_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_location()->::CMsgClientWelcome_Location::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_additional_welcome_msgs()->::CExtraMsgBlock::MergeFrom(from._internal_additional_welcome_msgs());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000200u) {
      item_schema_crc_ = from.item_schema_crc_;
    }
    if (cached_has_bits & 0x00000400u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      rtime32_gc_welcome_timestamp_ = from.rtime32_gc_welcome_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      currency_ = from.currency_;
    }
    if (cached_has_bits & 0x00002000u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_accepted_china_ssa_ = from.has_accepted_china_ssa_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_banned_steam_china_ = from.is_banned_steam_china_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientWelcome::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientWelcome::CopyFrom(const CMsgClientWelcome& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientWelcome)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientWelcome::IsInitialized() const {
  return true;
}

void CMsgClientWelcome::InternalSwap(CMsgClientWelcome* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outofdate_subscribed_caches_.InternalSwap(&other->outofdate_subscribed_caches_);
  uptodate_subscribed_caches_.InternalSwap(&other->uptodate_subscribed_caches_);
  game_data_.Swap(&other->game_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  save_game_key_.Swap(&other->save_game_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  items_game_url_.Swap(&other->items_game_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  txn_country_code_.Swap(&other->txn_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_data2_.Swap(&other->game_data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  balance_url_.Swap(&other->balance_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientWelcome, is_banned_steam_china_)
      + sizeof(CMsgClientWelcome::is_banned_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientWelcome, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientWelcome::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgConnectionStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectionStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_session_need(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_queue_position(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wait_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_estimated_wait_seconds_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgConnectionStatus::CMsgConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectionStatus)
}
CMsgConnectionStatus::CMsgConnectionStatus(const CMsgConnectionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectionStatus)
}

void CMsgConnectionStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
    reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
}

CMsgConnectionStatus::~CMsgConnectionStatus() {
  // @@protoc_insertion_point(destructor:CMsgConnectionStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConnectionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgConnectionStatus::ArenaDtor(void* object) {
  CMsgConnectionStatus* _this = reinterpret_cast< CMsgConnectionStatus* >(object);
  (void)_this;
}
void CMsgConnectionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConnectionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estimated_wait_seconds_remaining_) -
        reinterpret_cast<char*>(&status_)) + sizeof(estimated_wait_seconds_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GCConnectionStatus_IsValid(val))) {
            _internal_set_status(static_cast<::GCConnectionStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 client_session_need = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_session_need(&has_bits);
          client_session_need_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 queue_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_queue_position(&has_bits);
          queue_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 queue_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_queue_size(&has_bits);
          queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wait_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wait_seconds(&has_bits);
          wait_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 estimated_wait_seconds_remaining = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_estimated_wait_seconds_remaining(&has_bits);
          estimated_wait_seconds_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConnectionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional uint32 client_session_need = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_session_need(), target);
  }

  // optional int32 queue_position = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_queue_position(), target);
  }

  // optional int32 queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_queue_size(), target);
  }

  // optional int32 wait_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wait_seconds(), target);
  }

  // optional int32 estimated_wait_seconds_remaining = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_estimated_wait_seconds_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectionStatus)
  return target;
}

size_t CMsgConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .GCConnectionStatus status = 1 [default = GCConnectionStatus_HAVE_SESSION];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional uint32 client_session_need = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_session_need());
    }

    // optional int32 queue_position = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_queue_position());
    }

    // optional int32 queue_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_queue_size());
    }

    // optional int32 wait_seconds = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wait_seconds());
    }

    // optional int32 estimated_wait_seconds_remaining = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_estimated_wait_seconds_remaining());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConnectionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConnectionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConnectionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConnectionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConnectionStatus)
    MergeFrom(*source);
  }
}

void CMsgConnectionStatus::MergeFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_session_need_ = from.client_session_need_;
    }
    if (cached_has_bits & 0x00000004u) {
      queue_position_ = from.queue_position_;
    }
    if (cached_has_bits & 0x00000008u) {
      queue_size_ = from.queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      wait_seconds_ = from.wait_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      estimated_wait_seconds_remaining_ = from.estimated_wait_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConnectionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConnectionStatus::CopyFrom(const CMsgConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectionStatus::IsInitialized() const {
  return true;
}

void CMsgConnectionStatus::InternalSwap(CMsgConnectionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectionStatus, estimated_wait_seconds_remaining_)
      + sizeof(CMsgConnectionStatus::estimated_wait_seconds_remaining_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectionStatus, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>()._has_bits_);
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}
CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
}

CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::~CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ArenaDtor(void* object) {
  CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* _this = reinterpret_cast< CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* >(object);
  (void)_this;
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_id(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_version());
    }

    // optional uint32 service_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::MergeFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::CopyFrom(const CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::InternalSwap(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, service_id_)
      + sizeof(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCSOCacheSubscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSOCacheSubscribe>()._has_bits_);
  static void set_has_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subscribe_to_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sync_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_subscribe_to_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  have_versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSOCacheSubscribe)
}
CMsgGCToGCSOCacheSubscribe::CMsgGCToGCSOCacheSubscribe(const CMsgGCToGCSOCacheSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      have_versions_(from.have_versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&subscribe_to_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheSubscribe)
}

void CMsgGCToGCSOCacheSubscribe::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subscriber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subscribe_to_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
}

CMsgGCToGCSOCacheSubscribe::~CMsgGCToGCSOCacheSubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheSubscribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCSOCacheSubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCSOCacheSubscribe::ArenaDtor(void* object) {
  CMsgGCToGCSOCacheSubscribe* _this = reinterpret_cast< CMsgGCToGCSOCacheSubscribe* >(object);
  (void)_this;
}
void CMsgGCToGCSOCacheSubscribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCSOCacheSubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCSOCacheSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  have_versions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subscribe_to_type_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(subscribe_to_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSOCacheSubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 subscriber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_subscriber(&has_bits);
          subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 subscribe_to_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_subscribe_to_id(&has_bits);
          subscribe_to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sync_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_sync_version(&has_bits);
          sync_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_have_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 subscribe_to_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_subscribe_to_type(&has_bits);
          subscribe_to_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCSOCacheSubscribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheSubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_subscriber(), target);
  }

  // optional fixed64 subscribe_to_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_subscribe_to_id(), target);
  }

  // optional fixed64 sync_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_sync_version(), target);
  }

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_have_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_have_versions(i), target, stream);
  }

  // optional uint32 subscribe_to_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_subscribe_to_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheSubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheSubscribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCSOCacheSubscribe.CMsgHaveVersions have_versions = 4;
  total_size += 1UL * this->_internal_have_versions_size();
  for (const auto& msg : this->have_versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 subscriber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 subscribe_to_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 sync_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 subscribe_to_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subscribe_to_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheSubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCSOCacheSubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheSubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheSubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheSubscribe::MergeFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheSubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  have_versions_.MergeFrom(from.have_versions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      subscribe_to_id_ = from.subscribe_to_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_version_ = from.sync_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscribe_to_type_ = from.subscribe_to_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheSubscribe::CopyFrom(const CMsgGCToGCSOCacheSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheSubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheSubscribe::InternalSwap(CMsgGCToGCSOCacheSubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  have_versions_.InternalSwap(&other->have_versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscribe_to_type_)
      + sizeof(CMsgGCToGCSOCacheSubscribe::subscribe_to_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheSubscribe, subscriber_)>(
          reinterpret_cast<char*>(&subscriber_),
          reinterpret_cast<char*>(&other->subscriber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSOCacheSubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCSOCacheUnsubscribe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSOCacheUnsubscribe>()._has_bits_);
  static void set_has_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unsubscribe_from_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unsubscribe_from_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSOCacheUnsubscribe)
}
CMsgGCToGCSOCacheUnsubscribe::CMsgGCToGCSOCacheUnsubscribe(const CMsgGCToGCSOCacheUnsubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&subscriber_, &from.subscriber_,
    static_cast<size_t>(reinterpret_cast<char*>(&unsubscribe_from_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSOCacheUnsubscribe)
}

void CMsgGCToGCSOCacheUnsubscribe::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subscriber_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unsubscribe_from_type_) -
    reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
}

CMsgGCToGCSOCacheUnsubscribe::~CMsgGCToGCSOCacheUnsubscribe() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSOCacheUnsubscribe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCSOCacheUnsubscribe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCSOCacheUnsubscribe::ArenaDtor(void* object) {
  CMsgGCToGCSOCacheUnsubscribe* _this = reinterpret_cast< CMsgGCToGCSOCacheUnsubscribe* >(object);
  (void)_this;
}
void CMsgGCToGCSOCacheUnsubscribe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCSOCacheUnsubscribe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCSOCacheUnsubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSOCacheUnsubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&subscriber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unsubscribe_from_type_) -
        reinterpret_cast<char*>(&subscriber_)) + sizeof(unsubscribe_from_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSOCacheUnsubscribe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 subscriber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_subscriber(&has_bits);
          subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 unsubscribe_from_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_unsubscribe_from_id(&has_bits);
          unsubscribe_from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 unsubscribe_from_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unsubscribe_from_type(&has_bits);
          unsubscribe_from_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCSOCacheUnsubscribe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSOCacheUnsubscribe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 subscriber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_subscriber(), target);
  }

  // optional fixed64 unsubscribe_from_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_unsubscribe_from_id(), target);
  }

  // optional uint32 unsubscribe_from_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unsubscribe_from_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSOCacheUnsubscribe)
  return target;
}

size_t CMsgGCToGCSOCacheUnsubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSOCacheUnsubscribe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 subscriber = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 unsubscribe_from_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 unsubscribe_from_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unsubscribe_from_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSOCacheUnsubscribe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCSOCacheUnsubscribe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSOCacheUnsubscribe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSOCacheUnsubscribe)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSOCacheUnsubscribe::MergeFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSOCacheUnsubscribe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_ = from.subscriber_;
    }
    if (cached_has_bits & 0x00000002u) {
      unsubscribe_from_id_ = from.unsubscribe_from_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unsubscribe_from_type_ = from.unsubscribe_from_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSOCacheUnsubscribe::CopyFrom(const CMsgGCToGCSOCacheUnsubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSOCacheUnsubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSOCacheUnsubscribe::IsInitialized() const {
  return true;
}

void CMsgGCToGCSOCacheUnsubscribe::InternalSwap(CMsgGCToGCSOCacheUnsubscribe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, unsubscribe_from_type_)
      + sizeof(CMsgGCToGCSOCacheUnsubscribe::unsubscribe_from_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCSOCacheUnsubscribe, subscriber_)>(
          reinterpret_cast<char*>(&subscriber_),
          reinterpret_cast<char*>(&other->subscriber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSOCacheUnsubscribe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCClientPing::_Internal {
 public:
};

CMsgGCClientPing::CMsgGCClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCClientPing)
}
CMsgGCClientPing::CMsgGCClientPing(const CMsgGCClientPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCClientPing)
}

void CMsgGCClientPing::SharedCtor() {
}

CMsgGCClientPing::~CMsgGCClientPing() {
  // @@protoc_insertion_point(destructor:CMsgGCClientPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCClientPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCClientPing::ArenaDtor(void* object) {
  CMsgGCClientPing* _this = reinterpret_cast< CMsgGCClientPing* >(object);
  (void)_this;
}
void CMsgGCClientPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCClientPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCClientPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCClientPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCClientPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCClientPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCClientPing)
  return target;
}

size_t CMsgGCClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCClientPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCClientPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCClientPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCClientPing)
    MergeFrom(*source);
  }
}

void CMsgGCClientPing::MergeFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCClientPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientPing::CopyFrom(const CMsgGCClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientPing::IsInitialized() const {
  return true;
}

void CMsgGCClientPing::InternalSwap(CMsgGCClientPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCClientPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCForwardAccountDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCForwardAccountDetails>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CGCSystemMsg_GetAccountDetails_Response& account_details(const CMsgGCToGCForwardAccountDetails* msg);
  static void set_has_account_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CGCSystemMsg_GetAccountDetails_Response&
CMsgGCToGCForwardAccountDetails::_Internal::account_details(const CMsgGCToGCForwardAccountDetails* msg) {
  return *msg->account_details_;
}
void CMsgGCToGCForwardAccountDetails::clear_account_details() {
  if (account_details_ != nullptr) account_details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCForwardAccountDetails)
}
CMsgGCToGCForwardAccountDetails::CMsgGCToGCForwardAccountDetails(const CMsgGCToGCForwardAccountDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_account_details()) {
    account_details_ = new ::CGCSystemMsg_GetAccountDetails_Response(*from.account_details_);
  } else {
    account_details_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_seconds_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(age_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCForwardAccountDetails)
}

void CMsgGCToGCForwardAccountDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&age_seconds_) -
    reinterpret_cast<char*>(&account_details_)) + sizeof(age_seconds_));
}

CMsgGCToGCForwardAccountDetails::~CMsgGCToGCForwardAccountDetails() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCForwardAccountDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCForwardAccountDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete account_details_;
}

void CMsgGCToGCForwardAccountDetails::ArenaDtor(void* object) {
  CMsgGCToGCForwardAccountDetails* _this = reinterpret_cast< CMsgGCToGCForwardAccountDetails* >(object);
  (void)_this;
}
void CMsgGCToGCForwardAccountDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCForwardAccountDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCForwardAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCForwardAccountDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(account_details_ != nullptr);
    account_details_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&age_seconds_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(age_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCForwardAccountDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CGCSystemMsg_GetAccountDetails_Response account_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 age_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_age_seconds(&has_bits);
          age_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCForwardAccountDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCForwardAccountDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional .CGCSystemMsg_GetAccountDetails_Response account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::account_details(this), target, stream);
  }

  // optional uint32 age_seconds = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_age_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCForwardAccountDetails)
  return target;
}

size_t CMsgGCToGCForwardAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCForwardAccountDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CGCSystemMsg_GetAccountDetails_Response account_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *account_details_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 age_seconds = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_age_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCForwardAccountDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCForwardAccountDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCForwardAccountDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCForwardAccountDetails)
    MergeFrom(*source);
  }
}

void CMsgGCToGCForwardAccountDetails::MergeFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCForwardAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_account_details()->::CGCSystemMsg_GetAccountDetails_Response::MergeFrom(from._internal_account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      age_seconds_ = from.age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCForwardAccountDetails::CopyFrom(const CMsgGCToGCForwardAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCForwardAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCForwardAccountDetails::IsInitialized() const {
  return true;
}

void CMsgGCToGCForwardAccountDetails::InternalSwap(CMsgGCToGCForwardAccountDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, age_seconds_)
      + sizeof(CMsgGCToGCForwardAccountDetails::age_seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCForwardAccountDetails, account_details_)>(
          reinterpret_cast<char*>(&account_details_),
          reinterpret_cast<char*>(&other->account_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCForwardAccountDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCLoadSessionSOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCLoadSessionSOCache>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCToGCForwardAccountDetails& forward_account_details(const CMsgGCToGCLoadSessionSOCache* msg);
  static void set_has_forward_account_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCToGCForwardAccountDetails&
CMsgGCToGCLoadSessionSOCache::_Internal::forward_account_details(const CMsgGCToGCLoadSessionSOCache* msg) {
  return *msg->forward_account_details_;
}
CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCLoadSessionSOCache)
}
CMsgGCToGCLoadSessionSOCache::CMsgGCToGCLoadSessionSOCache(const CMsgGCToGCLoadSessionSOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_forward_account_details()) {
    forward_account_details_ = new ::CMsgGCToGCForwardAccountDetails(*from.forward_account_details_);
  } else {
    forward_account_details_ = nullptr;
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCLoadSessionSOCache)
}

void CMsgGCToGCLoadSessionSOCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_account_details_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&forward_account_details_)) + sizeof(account_id_));
}

CMsgGCToGCLoadSessionSOCache::~CMsgGCToGCLoadSessionSOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCLoadSessionSOCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCLoadSessionSOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete forward_account_details_;
}

void CMsgGCToGCLoadSessionSOCache::ArenaDtor(void* object) {
  CMsgGCToGCLoadSessionSOCache* _this = reinterpret_cast< CMsgGCToGCLoadSessionSOCache* >(object);
  (void)_this;
}
void CMsgGCToGCLoadSessionSOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCLoadSessionSOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCLoadSessionSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCLoadSessionSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(forward_account_details_ != nullptr);
    forward_account_details_->Clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCLoadSessionSOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgGCToGCForwardAccountDetails forward_account_details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_account_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCLoadSessionSOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCLoadSessionSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgGCToGCForwardAccountDetails forward_account_details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::forward_account_details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCLoadSessionSOCache)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCLoadSessionSOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCToGCForwardAccountDetails forward_account_details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forward_account_details_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCLoadSessionSOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCLoadSessionSOCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCLoadSessionSOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCache::MergeFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCLoadSessionSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_forward_account_details()->::CMsgGCToGCForwardAccountDetails::MergeFrom(from._internal_forward_account_details());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCache::CopyFrom(const CMsgGCToGCLoadSessionSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCLoadSessionSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCache::InternalSwap(CMsgGCToGCLoadSessionSOCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, account_id_)
      + sizeof(CMsgGCToGCLoadSessionSOCache::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCLoadSessionSOCache, forward_account_details_)>(
          reinterpret_cast<char*>(&forward_account_details_),
          reinterpret_cast<char*>(&other->forward_account_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCLoadSessionSOCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCLoadSessionSOCacheResponse::_Internal {
 public:
};

CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCLoadSessionSOCacheResponse)
}
CMsgGCToGCLoadSessionSOCacheResponse::CMsgGCToGCLoadSessionSOCacheResponse(const CMsgGCToGCLoadSessionSOCacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCLoadSessionSOCacheResponse)
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedCtor() {
}

CMsgGCToGCLoadSessionSOCacheResponse::~CMsgGCToGCLoadSessionSOCacheResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCLoadSessionSOCacheResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCLoadSessionSOCacheResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCLoadSessionSOCacheResponse::ArenaDtor(void* object) {
  CMsgGCToGCLoadSessionSOCacheResponse* _this = reinterpret_cast< CMsgGCToGCLoadSessionSOCacheResponse* >(object);
  (void)_this;
}
void CMsgGCToGCLoadSessionSOCacheResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCLoadSessionSOCacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCLoadSessionSOCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCLoadSessionSOCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCLoadSessionSOCacheResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCLoadSessionSOCacheResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCLoadSessionSOCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCLoadSessionSOCacheResponse)
  return target;
}

size_t CMsgGCToGCLoadSessionSOCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCLoadSessionSOCacheResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCLoadSessionSOCacheResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCLoadSessionSOCacheResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCLoadSessionSOCacheResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCLoadSessionSOCacheResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCLoadSessionSOCacheResponse::MergeFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCLoadSessionSOCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCLoadSessionSOCacheResponse::CopyFrom(const CMsgGCToGCLoadSessionSOCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCLoadSessionSOCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCLoadSessionSOCacheResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCLoadSessionSOCacheResponse::InternalSwap(CMsgGCToGCLoadSessionSOCacheResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCLoadSessionSOCacheResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUpdateSessionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSessionStats>()._has_bits_);
  static void set_has_user_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_in_logon_surge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSessionStats)
}
CMsgGCToGCUpdateSessionStats::CMsgGCToGCUpdateSessionStats(const CMsgGCToGCUpdateSessionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_sessions_, &from.user_sessions_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_logon_surge_) -
    reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSessionStats)
}

void CMsgGCToGCUpdateSessionStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_sessions_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_logon_surge_) -
    reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
}

CMsgGCToGCUpdateSessionStats::~CMsgGCToGCUpdateSessionStats() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSessionStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUpdateSessionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCUpdateSessionStats::ArenaDtor(void* object) {
  CMsgGCToGCUpdateSessionStats* _this = reinterpret_cast< CMsgGCToGCUpdateSessionStats* >(object);
  (void)_this;
}
void CMsgGCToGCUpdateSessionStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUpdateSessionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUpdateSessionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSessionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_sessions_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_logon_surge_) -
        reinterpret_cast<char*>(&user_sessions_)) + sizeof(in_logon_surge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSessionStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 user_sessions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_sessions(&has_bits);
          user_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_sessions(&has_bits);
          server_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_logon_surge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_logon_surge(&has_bits);
          in_logon_surge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUpdateSessionStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSessionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_sessions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_sessions(), target);
  }

  // optional uint32 server_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_server_sessions(), target);
  }

  // optional bool in_logon_surge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_in_logon_surge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSessionStats)
  return target;
}

size_t CMsgGCToGCUpdateSessionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSessionStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 user_sessions = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_sessions());
    }

    // optional uint32 server_sessions = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_sessions());
    }

    // optional bool in_logon_surge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSessionStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUpdateSessionStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUpdateSessionStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUpdateSessionStats)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSessionStats::MergeFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSessionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_sessions_ = from.server_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_logon_surge_ = from.in_logon_surge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSessionStats::CopyFrom(const CMsgGCToGCUpdateSessionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSessionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSessionStats::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSessionStats::InternalSwap(CMsgGCToGCUpdateSessionStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, in_logon_surge_)
      + sizeof(CMsgGCToGCUpdateSessionStats::in_logon_surge_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSessionStats, user_sessions_)>(
          reinterpret_cast<char*>(&user_sessions_),
          reinterpret_cast<char*>(&other->user_sessions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSessionStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientRequestDropped::_Internal {
 public:
};

CMsgGCToClientRequestDropped::CMsgGCToClientRequestDropped(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestDropped)
}
CMsgGCToClientRequestDropped::CMsgGCToClientRequestDropped(const CMsgGCToClientRequestDropped& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestDropped)
}

void CMsgGCToClientRequestDropped::SharedCtor() {
}

CMsgGCToClientRequestDropped::~CMsgGCToClientRequestDropped() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientRequestDropped)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientRequestDropped::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientRequestDropped::ArenaDtor(void* object) {
  CMsgGCToClientRequestDropped* _this = reinterpret_cast< CMsgGCToClientRequestDropped* >(object);
  (void)_this;
}
void CMsgGCToClientRequestDropped::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientRequestDropped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientRequestDropped::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientRequestDropped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientRequestDropped::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientRequestDropped::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientRequestDropped)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientRequestDropped)
  return target;
}

size_t CMsgGCToClientRequestDropped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientRequestDropped)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientRequestDropped::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientRequestDropped)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientRequestDropped* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientRequestDropped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientRequestDropped)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientRequestDropped)
    MergeFrom(*source);
  }
}

void CMsgGCToClientRequestDropped::MergeFrom(const CMsgGCToClientRequestDropped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientRequestDropped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToClientRequestDropped::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientRequestDropped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientRequestDropped::CopyFrom(const CMsgGCToClientRequestDropped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientRequestDropped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestDropped::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestDropped::InternalSwap(CMsgGCToClientRequestDropped* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestDropped::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription>()._has_bits_);
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}
CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_description()) {
    item_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_description(), 
      GetArena());
  }
  gameitemid_ = from.gameitemid_;
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedCtor() {
item_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gameitemid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::~CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ArenaDtor(void* object) {
  CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* _this = reinterpret_cast< CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* >(object);
  (void)_this;
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_description_.ClearNonDefaultToEmpty();
  }
  gameitemid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 gameitemid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gameitemid(&has_bits);
          gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gameitemid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gameitemid(), target);
  }

  // optional string item_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_description().data(), static_cast<int>(this->_internal_item_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription.item_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string item_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_description());
    }

    // optional uint32 gameitemid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gameitemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_description(from._internal_item_description());
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_description_.Swap(&other->item_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(gameitemid_, other->gameitemid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  descriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}
CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      descriptions_(from.descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language()) {
    language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedCtor() {
language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::~CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ArenaDtor(void* object) {
  CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* _this = reinterpret_cast< CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* >(object);
  (void)_this;
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    language_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string language = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_PopulateItemDescriptions_Request.SingleItemDescription descriptions = 2;
  total_size += 1UL * this->_internal_descriptions_size();
  for (const auto& msg : this->descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptions_.MergeFrom(from.descriptions_);
  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::InternalSwap(CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  descriptions_.InternalSwap(&other->descriptions_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_PopulateItemDescriptions_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_PopulateItemDescriptions_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  languages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_PopulateItemDescriptions_Request)
}
CWorkshop_PopulateItemDescriptions_Request::CWorkshop_PopulateItemDescriptions_Request(const CWorkshop_PopulateItemDescriptions_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      languages_(from.languages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CWorkshop_PopulateItemDescriptions_Request)
}

void CWorkshop_PopulateItemDescriptions_Request::SharedCtor() {
appid_ = 0u;
}

CWorkshop_PopulateItemDescriptions_Request::~CWorkshop_PopulateItemDescriptions_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_PopulateItemDescriptions_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_PopulateItemDescriptions_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_PopulateItemDescriptions_Request::ArenaDtor(void* object) {
  CWorkshop_PopulateItemDescriptions_Request* _this = reinterpret_cast< CWorkshop_PopulateItemDescriptions_Request* >(object);
  (void)_this;
}
void CWorkshop_PopulateItemDescriptions_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_PopulateItemDescriptions_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_PopulateItemDescriptions_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_PopulateItemDescriptions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  languages_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_PopulateItemDescriptions_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_PopulateItemDescriptions_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_PopulateItemDescriptions_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_languages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_languages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_PopulateItemDescriptions_Request)
  return target;
}

size_t CWorkshop_PopulateItemDescriptions_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_PopulateItemDescriptions_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_PopulateItemDescriptions_Request.ItemDescriptionsLanguageBlock languages = 2;
  total_size += 1UL * this->_internal_languages_size();
  for (const auto& msg : this->languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_PopulateItemDescriptions_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_PopulateItemDescriptions_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_PopulateItemDescriptions_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_PopulateItemDescriptions_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_PopulateItemDescriptions_Request::MergeFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_PopulateItemDescriptions_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  languages_.MergeFrom(from.languages_);
  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_PopulateItemDescriptions_Request::CopyFrom(const CWorkshop_PopulateItemDescriptions_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_PopulateItemDescriptions_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_PopulateItemDescriptions_Request::IsInitialized() const {
  return true;
}

void CWorkshop_PopulateItemDescriptions_Request::InternalSwap(CWorkshop_PopulateItemDescriptions_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  languages_.InternalSwap(&other->languages_);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_PopulateItemDescriptions_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetContributors_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetContributors_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetContributors_Request)
}
CWorkshop_GetContributors_Request::CWorkshop_GetContributors_Request(const CWorkshop_GetContributors_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetContributors_Request)
}

void CWorkshop_GetContributors_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gameitemid_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
}

CWorkshop_GetContributors_Request::~CWorkshop_GetContributors_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetContributors_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetContributors_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetContributors_Request::ArenaDtor(void* object) {
  CWorkshop_GetContributors_Request* _this = reinterpret_cast< CWorkshop_GetContributors_Request* >(object);
  (void)_this;
}
void CWorkshop_GetContributors_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetContributors_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetContributors_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetContributors_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gameitemid_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(gameitemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetContributors_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gameitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameitemid(&has_bits);
          gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetContributors_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetContributors_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameitemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetContributors_Request)
  return target;
}

size_t CWorkshop_GetContributors_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetContributors_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gameitemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetContributors_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetContributors_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetContributors_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetContributors_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Request::MergeFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetContributors_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gameitemid_ = from.gameitemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetContributors_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Request::CopyFrom(const CWorkshop_GetContributors_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetContributors_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Request::InternalSwap(CWorkshop_GetContributors_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetContributors_Request, gameitemid_)
      + sizeof(CWorkshop_GetContributors_Request::gameitemid_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetContributors_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetContributors_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetContributors_Response::_Internal {
 public:
};

CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  contributors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetContributors_Response)
}
CWorkshop_GetContributors_Response::CWorkshop_GetContributors_Response(const CWorkshop_GetContributors_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contributors_(from.contributors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetContributors_Response)
}

void CWorkshop_GetContributors_Response::SharedCtor() {
}

CWorkshop_GetContributors_Response::~CWorkshop_GetContributors_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetContributors_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetContributors_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetContributors_Response::ArenaDtor(void* object) {
  CWorkshop_GetContributors_Response* _this = reinterpret_cast< CWorkshop_GetContributors_Response* >(object);
  (void)_this;
}
void CWorkshop_GetContributors_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetContributors_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetContributors_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetContributors_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contributors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetContributors_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 contributors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_contributors(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_contributors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetContributors_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetContributors_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  for (int i = 0, n = this->_internal_contributors_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_contributors(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetContributors_Response)
  return target;
}

size_t CWorkshop_GetContributors_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetContributors_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 contributors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_contributors_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_contributors_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetContributors_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetContributors_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetContributors_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetContributors_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetContributors_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_GetContributors_Response::MergeFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetContributors_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contributors_.MergeFrom(from.contributors_);
}

void CWorkshop_GetContributors_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetContributors_Response::CopyFrom(const CWorkshop_GetContributors_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetContributors_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetContributors_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetContributors_Response::InternalSwap(CWorkshop_GetContributors_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  contributors_.InternalSwap(&other->contributors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetContributors_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule>()._has_bits_);
  static void set_has_workshop_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_revenue_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rule_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rule_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rule_description()) {
    rule_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rule_description(), 
      GetArena());
  }
  ::memcpy(&workshop_file_id_, &from.workshop_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_type_) -
    reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(rule_type_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedCtor() {
rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workshop_file_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(revenue_percentage_));
rule_type_ = 1u;
}

CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rule_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ArenaDtor(void* object) {
  CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* _this = reinterpret_cast< CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* >(object);
  (void)_this;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rule_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&workshop_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_percentage_) -
        reinterpret_cast<char*>(&workshop_file_id_)) + sizeof(revenue_percentage_));
    rule_type_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 workshop_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_workshop_file_id(&has_bits);
          workshop_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float revenue_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_revenue_percentage(&has_bits);
          revenue_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string rule_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rule_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rule_type = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rule_type(&has_bits);
          rule_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_workshop_file_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rule_description().data(), static_cast<int>(this->_internal_rule_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule.rule_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rule_description(), target);
  }

  // optional uint32 rule_type = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rule_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string rule_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rule_description());
    }

    // optional uint64 workshop_file_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_workshop_file_id());
    }

    // optional float revenue_percentage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 rule_type = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rule_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rule_description(from._internal_rule_description());
    }
    if (cached_has_bits & 0x00000002u) {
      workshop_file_id_ = from.workshop_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      rule_type_ = from.rule_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_description_.Swap(&other->rule_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, revenue_percentage_)
      + sizeof(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::revenue_percentage_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule, workshop_file_id_)>(
          reinterpret_cast<char*>(&workshop_file_id_),
          reinterpret_cast<char*>(&other->workshop_file_id_));
  swap(rule_type_, other->rule_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule>()._has_bits_);
  static void set_has_workshop_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rule_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule(const CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rule_description()) {
    rule_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rule_description(), 
      GetArena());
  }
  workshop_file_id_ = from.workshop_file_id_;
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::SharedCtor() {
rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workshop_file_id_ = PROTOBUF_ULONGLONG(0);
}

CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::~CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rule_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::ArenaDtor(void* object) {
  CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule* _this = reinterpret_cast< CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule* >(object);
  (void)_this;
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rule_description_.ClearNonDefaultToEmpty();
  }
  workshop_file_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 workshop_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_workshop_file_id(&has_bits);
          workshop_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rule_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rule_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule.rule_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 workshop_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_workshop_file_id(), target);
  }

  // optional string rule_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rule_description().data(), static_cast<int>(this->_internal_rule_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule.rule_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rule_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rule_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rule_description());
    }

    // optional uint64 workshop_file_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_workshop_file_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rule_description(from._internal_rule_description());
    }
    if (cached_has_bits & 0x00000002u) {
      workshop_file_id_ = from.workshop_file_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_description_.Swap(&other->rule_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(workshop_file_id_, other->workshop_file_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_revenue_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rule_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}
CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rule_description()) {
    rule_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rule_description(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedCtor() {
rule_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revenue_percentage_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
}

CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::~CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rule_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ArenaDtor(void* object) {
  CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* _this = reinterpret_cast< CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* >(object);
  (void)_this;
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rule_description_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_percentage_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(revenue_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float revenue_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_revenue_percentage(&has_bits);
          revenue_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string rule_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rule_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional float revenue_percentage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_revenue_percentage(), target);
  }

  // optional string rule_description = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rule_description().data(), static_cast<int>(this->_internal_rule_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule.rule_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rule_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rule_description = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rule_description());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional float revenue_percentage = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::MergeFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rule_description(from._internal_rule_description());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_percentage_ = from.revenue_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::CopyFrom(const CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::InternalSwap(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_description_.Swap(&other->rule_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, revenue_percentage_)
      + sizeof(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::revenue_percentage_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_SetItemPaymentRules_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_SetItemPaymentRules_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gameitemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_validate_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_make_workshop_files_subscribable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule& associated_workshop_file_for_direct_payments(const CWorkshop_SetItemPaymentRules_Request* msg);
  static void set_has_associated_workshop_file_for_direct_payments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule&
CWorkshop_SetItemPaymentRules_Request::_Internal::associated_workshop_file_for_direct_payments(const CWorkshop_SetItemPaymentRules_Request* msg) {
  return *msg->associated_workshop_file_for_direct_payments_;
}
CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  associated_workshop_files_(arena),
  partner_accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_SetItemPaymentRules_Request)
}
CWorkshop_SetItemPaymentRules_Request::CWorkshop_SetItemPaymentRules_Request(const CWorkshop_SetItemPaymentRules_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      associated_workshop_files_(from.associated_workshop_files_),
      partner_accounts_(from.partner_accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_associated_workshop_file_for_direct_payments()) {
    associated_workshop_file_for_direct_payments_ = new ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule(*from.associated_workshop_file_for_direct_payments_);
  } else {
    associated_workshop_file_for_direct_payments_ = nullptr;
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&make_workshop_files_subscribable_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(make_workshop_files_subscribable_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Request)
}

void CWorkshop_SetItemPaymentRules_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&associated_workshop_file_for_direct_payments_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&make_workshop_files_subscribable_) -
    reinterpret_cast<char*>(&associated_workshop_file_for_direct_payments_)) + sizeof(make_workshop_files_subscribable_));
}

CWorkshop_SetItemPaymentRules_Request::~CWorkshop_SetItemPaymentRules_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_SetItemPaymentRules_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete associated_workshop_file_for_direct_payments_;
}

void CWorkshop_SetItemPaymentRules_Request::ArenaDtor(void* object) {
  CWorkshop_SetItemPaymentRules_Request* _this = reinterpret_cast< CWorkshop_SetItemPaymentRules_Request* >(object);
  (void)_this;
}
void CWorkshop_SetItemPaymentRules_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_SetItemPaymentRules_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_SetItemPaymentRules_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_SetItemPaymentRules_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_workshop_files_.Clear();
  partner_accounts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(associated_workshop_file_for_direct_payments_ != nullptr);
    associated_workshop_file_for_direct_payments_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&make_workshop_files_subscribable_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(make_workshop_files_subscribable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_SetItemPaymentRules_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gameitemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gameitemid(&has_bits);
          gameitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_associated_workshop_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partner_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool validate_only = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_validate_only(&has_bits);
          validate_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool make_workshop_files_subscribable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_make_workshop_files_subscribable(&has_bits);
          make_workshop_files_subscribable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule associated_workshop_file_for_direct_payments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_associated_workshop_file_for_direct_payments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_SetItemPaymentRules_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 gameitemid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gameitemid(), target);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_associated_workshop_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_associated_workshop_files(i), target, stream);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partner_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_partner_accounts(i), target, stream);
  }

  // optional bool validate_only = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_validate_only(), target);
  }

  // optional bool make_workshop_files_subscribable = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_make_workshop_files_subscribable(), target);
  }

  // optional .CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule associated_workshop_file_for_direct_payments = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::associated_workshop_file_for_direct_payments(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Request)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_SetItemPaymentRules_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_SetItemPaymentRules_Request.WorkshopItemPaymentRule associated_workshop_files = 3;
  total_size += 1UL * this->_internal_associated_workshop_files_size();
  for (const auto& msg : this->associated_workshop_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CWorkshop_SetItemPaymentRules_Request.PartnerItemPaymentRule partner_accounts = 4;
  total_size += 1UL * this->_internal_partner_accounts_size();
  for (const auto& msg : this->partner_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CWorkshop_SetItemPaymentRules_Request.WorkshopDirectPaymentRule associated_workshop_file_for_direct_payments = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *associated_workshop_file_for_direct_payments_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 gameitemid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gameitemid());
    }

    // optional bool validate_only = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool make_workshop_files_subscribable = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_SetItemPaymentRules_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_SetItemPaymentRules_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Request::MergeFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_SetItemPaymentRules_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_workshop_files_.MergeFrom(from.associated_workshop_files_);
  partner_accounts_.MergeFrom(from.partner_accounts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_associated_workshop_file_for_direct_payments()->::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule::MergeFrom(from._internal_associated_workshop_file_for_direct_payments());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameitemid_ = from.gameitemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      validate_only_ = from.validate_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      make_workshop_files_subscribable_ = from.make_workshop_files_subscribable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Request::CopyFrom(const CWorkshop_SetItemPaymentRules_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_SetItemPaymentRules_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Request::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Request::InternalSwap(CWorkshop_SetItemPaymentRules_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  associated_workshop_files_.InternalSwap(&other->associated_workshop_files_);
  partner_accounts_.InternalSwap(&other->partner_accounts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, make_workshop_files_subscribable_)
      + sizeof(CWorkshop_SetItemPaymentRules_Request::make_workshop_files_subscribable_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_SetItemPaymentRules_Request, associated_workshop_file_for_direct_payments_)>(
          reinterpret_cast<char*>(&associated_workshop_file_for_direct_payments_),
          reinterpret_cast<char*>(&other->associated_workshop_file_for_direct_payments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_SetItemPaymentRules_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_SetItemPaymentRules_Response::_Internal {
 public:
};

CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  validation_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_SetItemPaymentRules_Response)
}
CWorkshop_SetItemPaymentRules_Response::CWorkshop_SetItemPaymentRules_Response(const CWorkshop_SetItemPaymentRules_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validation_errors_(from.validation_errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_SetItemPaymentRules_Response)
}

void CWorkshop_SetItemPaymentRules_Response::SharedCtor() {
}

CWorkshop_SetItemPaymentRules_Response::~CWorkshop_SetItemPaymentRules_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_SetItemPaymentRules_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_SetItemPaymentRules_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_SetItemPaymentRules_Response::ArenaDtor(void* object) {
  CWorkshop_SetItemPaymentRules_Response* _this = reinterpret_cast< CWorkshop_SetItemPaymentRules_Response* >(object);
  (void)_this;
}
void CWorkshop_SetItemPaymentRules_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_SetItemPaymentRules_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_SetItemPaymentRules_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_SetItemPaymentRules_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validation_errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_SetItemPaymentRules_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string validation_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_validation_errors();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_SetItemPaymentRules_Response.validation_errors");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_SetItemPaymentRules_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_SetItemPaymentRules_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string validation_errors = 1;
  for (int i = 0, n = this->_internal_validation_errors_size(); i < n; i++) {
    const auto& s = this->_internal_validation_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_SetItemPaymentRules_Response.validation_errors");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_SetItemPaymentRules_Response)
  return target;
}

size_t CWorkshop_SetItemPaymentRules_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_SetItemPaymentRules_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string validation_errors = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(validation_errors_.size());
  for (int i = 0, n = validation_errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      validation_errors_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_SetItemPaymentRules_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_SetItemPaymentRules_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_SetItemPaymentRules_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_SetItemPaymentRules_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_SetItemPaymentRules_Response::MergeFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_SetItemPaymentRules_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validation_errors_.MergeFrom(from.validation_errors_);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_SetItemPaymentRules_Response::CopyFrom(const CWorkshop_SetItemPaymentRules_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_SetItemPaymentRules_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_SetItemPaymentRules_Response::IsInitialized() const {
  return true;
}

void CWorkshop_SetItemPaymentRules_Response::InternalSwap(CWorkshop_SetItemPaymentRules_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  validation_errors_.InternalSwap(&other->validation_errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_SetItemPaymentRules_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanAnnouncements_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanAnnouncements_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_maxchars(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_strip_html(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_require_no_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hidden_only(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_only_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rtime_oldest_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_include_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_include_partner_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CCommunity_GetClanAnnouncements_Request::CCommunity_GetClanAnnouncements_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  required_tags_(arena),
  language_preference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanAnnouncements_Request)
}
CCommunity_GetClanAnnouncements_Request::CCommunity_GetClanAnnouncements_Request(const CCommunity_GetClanAnnouncements_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      required_tags_(from.required_tags_),
      language_preference_(from.language_preference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_partner_events_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_partner_events_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanAnnouncements_Request)
}

void CCommunity_GetClanAnnouncements_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&include_partner_events_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(include_partner_events_));
}

CCommunity_GetClanAnnouncements_Request::~CCommunity_GetClanAnnouncements_Request() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanAnnouncements_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanAnnouncements_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanAnnouncements_Request::ArenaDtor(void* object) {
  CCommunity_GetClanAnnouncements_Request* _this = reinterpret_cast< CCommunity_GetClanAnnouncements_Request* >(object);
  (void)_this;
}
void CCommunity_GetClanAnnouncements_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanAnnouncements_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanAnnouncements_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanAnnouncements_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  required_tags_.Clear();
  language_preference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_gid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(only_gid_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&rtime_oldest_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_partner_events_) -
        reinterpret_cast<char*>(&rtime_oldest_date_)) + sizeof(include_partner_events_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanAnnouncements_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxchars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maxchars(&has_bits);
          maxchars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool strip_html = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_strip_html(&has_bits);
          strip_html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string required_tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCommunity_GetClanAnnouncements_Request.required_tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool require_no_tags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_require_no_tags(&has_bits);
          require_no_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 language_preference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_language_preference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_language_preference(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hidden_only = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hidden_only(&has_bits);
          hidden_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool only_gid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_only_gid(&has_bits);
          only_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rtime_oldest_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_rtime_oldest_date(&has_bits);
          rtime_oldest_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_hidden = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_include_hidden(&has_bits);
          include_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool include_partner_events = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_include_partner_events(&has_bits);
          include_partner_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanAnnouncements_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanAnnouncements_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  // optional uint32 maxchars = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxchars(), target);
  }

  // optional bool strip_html = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_strip_html(), target);
  }

  // repeated string required_tags = 6;
  for (int i = 0, n = this->_internal_required_tags_size(); i < n; i++) {
    const auto& s = this->_internal_required_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCommunity_GetClanAnnouncements_Request.required_tags");
    target = stream->WriteString(6, s, target);
  }

  // optional bool require_no_tags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_require_no_tags(), target);
  }

  // repeated uint32 language_preference = 8;
  for (int i = 0, n = this->_internal_language_preference_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_language_preference(i), target);
  }

  // optional bool hidden_only = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_hidden_only(), target);
  }

  // optional bool only_gid = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_only_gid(), target);
  }

  // optional uint32 rtime_oldest_date = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_rtime_oldest_date(), target);
  }

  // optional bool include_hidden = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_include_hidden(), target);
  }

  // optional bool include_partner_events = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_include_partner_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanAnnouncements_Request)
  return target;
}

size_t CCommunity_GetClanAnnouncements_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanAnnouncements_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string required_tags = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_tags_.size());
  for (int i = 0, n = required_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_tags_.Get(i));
  }

  // repeated uint32 language_preference = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->language_preference_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_language_preference_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint32 offset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offset());
    }

    // optional uint32 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

    // optional uint32 maxchars = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxchars());
    }

    // optional bool strip_html = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool require_no_tags = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool hidden_only = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool only_gid = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 rtime_oldest_date = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rtime_oldest_date());
    }

    // optional bool include_hidden = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool include_partner_events = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanAnnouncements_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanAnnouncements_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanAnnouncements_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanAnnouncements_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanAnnouncements_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanAnnouncements_Request)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanAnnouncements_Request::MergeFrom(const CCommunity_GetClanAnnouncements_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanAnnouncements_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  required_tags_.MergeFrom(from.required_tags_);
  language_preference_.MergeFrom(from.language_preference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      maxchars_ = from.maxchars_;
    }
    if (cached_has_bits & 0x00000010u) {
      strip_html_ = from.strip_html_;
    }
    if (cached_has_bits & 0x00000020u) {
      require_no_tags_ = from.require_no_tags_;
    }
    if (cached_has_bits & 0x00000040u) {
      hidden_only_ = from.hidden_only_;
    }
    if (cached_has_bits & 0x00000080u) {
      only_gid_ = from.only_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      rtime_oldest_date_ = from.rtime_oldest_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      include_hidden_ = from.include_hidden_;
    }
    if (cached_has_bits & 0x00000400u) {
      include_partner_events_ = from.include_partner_events_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanAnnouncements_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanAnnouncements_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanAnnouncements_Request::CopyFrom(const CCommunity_GetClanAnnouncements_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanAnnouncements_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanAnnouncements_Request::IsInitialized() const {
  return true;
}

void CCommunity_GetClanAnnouncements_Request::InternalSwap(CCommunity_GetClanAnnouncements_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_tags_.InternalSwap(&other->required_tags_);
  language_preference_.InternalSwap(&other->language_preference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncements_Request, include_partner_events_)
      + sizeof(CCommunity_GetClanAnnouncements_Request::include_partner_events_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncements_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanAnnouncements_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCommunity_GetClanAnnouncements_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CCommunity_GetClanAnnouncements_Response>()._has_bits_);
  static void set_has_maxchars(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strip_html(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CCommunity_GetClanAnnouncements_Response::clear_announcements() {
  announcements_.Clear();
}
CCommunity_GetClanAnnouncements_Response::CCommunity_GetClanAnnouncements_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  announcements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCommunity_GetClanAnnouncements_Response)
}
CCommunity_GetClanAnnouncements_Response::CCommunity_GetClanAnnouncements_Response(const CCommunity_GetClanAnnouncements_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      announcements_(from.announcements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maxchars_, &from.maxchars_,
    static_cast<size_t>(reinterpret_cast<char*>(&strip_html_) -
    reinterpret_cast<char*>(&maxchars_)) + sizeof(strip_html_));
  // @@protoc_insertion_point(copy_constructor:CCommunity_GetClanAnnouncements_Response)
}

void CCommunity_GetClanAnnouncements_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&maxchars_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strip_html_) -
    reinterpret_cast<char*>(&maxchars_)) + sizeof(strip_html_));
}

CCommunity_GetClanAnnouncements_Response::~CCommunity_GetClanAnnouncements_Response() {
  // @@protoc_insertion_point(destructor:CCommunity_GetClanAnnouncements_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCommunity_GetClanAnnouncements_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCommunity_GetClanAnnouncements_Response::ArenaDtor(void* object) {
  CCommunity_GetClanAnnouncements_Response* _this = reinterpret_cast< CCommunity_GetClanAnnouncements_Response* >(object);
  (void)_this;
}
void CCommunity_GetClanAnnouncements_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCommunity_GetClanAnnouncements_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCommunity_GetClanAnnouncements_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CCommunity_GetClanAnnouncements_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  announcements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&maxchars_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strip_html_) -
        reinterpret_cast<char*>(&maxchars_)) + sizeof(strip_html_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCommunity_GetClanAnnouncements_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 maxchars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_maxchars(&has_bits);
          maxchars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool strip_html = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_strip_html(&has_bits);
          strip_html_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCommunity_ClanAnnouncementInfo announcements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_announcements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCommunity_GetClanAnnouncements_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCommunity_GetClanAnnouncements_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 maxchars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_maxchars(), target);
  }

  // optional bool strip_html = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_strip_html(), target);
  }

  // repeated .CCommunity_ClanAnnouncementInfo announcements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_announcements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_announcements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCommunity_GetClanAnnouncements_Response)
  return target;
}

size_t CCommunity_GetClanAnnouncements_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCommunity_GetClanAnnouncements_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCommunity_ClanAnnouncementInfo announcements = 3;
  total_size += 1UL * this->_internal_announcements_size();
  for (const auto& msg : this->announcements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 maxchars = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxchars());
    }

    // optional bool strip_html = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCommunity_GetClanAnnouncements_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCommunity_GetClanAnnouncements_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCommunity_GetClanAnnouncements_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCommunity_GetClanAnnouncements_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCommunity_GetClanAnnouncements_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCommunity_GetClanAnnouncements_Response)
    MergeFrom(*source);
  }
}

void CCommunity_GetClanAnnouncements_Response::MergeFrom(const CCommunity_GetClanAnnouncements_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCommunity_GetClanAnnouncements_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  announcements_.MergeFrom(from.announcements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      maxchars_ = from.maxchars_;
    }
    if (cached_has_bits & 0x00000002u) {
      strip_html_ = from.strip_html_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCommunity_GetClanAnnouncements_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCommunity_GetClanAnnouncements_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCommunity_GetClanAnnouncements_Response::CopyFrom(const CCommunity_GetClanAnnouncements_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCommunity_GetClanAnnouncements_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCommunity_GetClanAnnouncements_Response::IsInitialized() const {
  return true;
}

void CCommunity_GetClanAnnouncements_Response::InternalSwap(CCommunity_GetClanAnnouncements_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  announcements_.InternalSwap(&other->announcements_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncements_Response, strip_html_)
      + sizeof(CCommunity_GetClanAnnouncements_Response::strip_html_)
      - PROTOBUF_FIELD_OFFSET(CCommunity_GetClanAnnouncements_Response, maxchars_)>(
          reinterpret_cast<char*>(&maxchars_),
          reinterpret_cast<char*>(&other->maxchars_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCommunity_GetClanAnnouncements_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CBroadcast_PostGameDataFrame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CBroadcast_PostGameDataFrame_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_broadcast_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBroadcast_PostGameDataFrame_Request)
}
CBroadcast_PostGameDataFrame_Request::CBroadcast_PostGameDataFrame_Request(const CBroadcast_PostGameDataFrame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame_data()) {
    frame_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame_data(), 
      GetArena());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CBroadcast_PostGameDataFrame_Request)
}

void CBroadcast_PostGameDataFrame_Request::SharedCtor() {
frame_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CBroadcast_PostGameDataFrame_Request::~CBroadcast_PostGameDataFrame_Request() {
  // @@protoc_insertion_point(destructor:CBroadcast_PostGameDataFrame_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CBroadcast_PostGameDataFrame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostGameDataFrame_Request::ArenaDtor(void* object) {
  CBroadcast_PostGameDataFrame_Request* _this = reinterpret_cast< CBroadcast_PostGameDataFrame_Request* >(object);
  (void)_this;
}
void CBroadcast_PostGameDataFrame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CBroadcast_PostGameDataFrame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CBroadcast_PostGameDataFrame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CBroadcast_PostGameDataFrame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CBroadcast_PostGameDataFrame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 broadcast_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_broadcast_id(&has_bits);
          broadcast_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes frame_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBroadcast_PostGameDataFrame_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CBroadcast_PostGameDataFrame_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_broadcast_id(), target);
  }

  // optional bytes frame_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_frame_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBroadcast_PostGameDataFrame_Request)
  return target;
}

size_t CBroadcast_PostGameDataFrame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CBroadcast_PostGameDataFrame_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes frame_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_frame_data());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostGameDataFrame_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBroadcast_PostGameDataFrame_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CBroadcast_PostGameDataFrame_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CBroadcast_PostGameDataFrame_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostGameDataFrame_Request::MergeFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CBroadcast_PostGameDataFrame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frame_data(from._internal_frame_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostGameDataFrame_Request::CopyFrom(const CBroadcast_PostGameDataFrame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBroadcast_PostGameDataFrame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostGameDataFrame_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostGameDataFrame_Request::InternalSwap(CBroadcast_PostGameDataFrame_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_data_.Swap(&other->frame_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, appid_)
      + sizeof(CBroadcast_PostGameDataFrame_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CBroadcast_PostGameDataFrame_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CBroadcast_PostGameDataFrame_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSerializedSOCache_TypeCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSerializedSOCache_TypeCache>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSerializedSOCache.TypeCache)
}
CMsgSerializedSOCache_TypeCache::CMsgSerializedSOCache_TypeCache(const CMsgSerializedSOCache_TypeCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSerializedSOCache.TypeCache)
}

void CMsgSerializedSOCache_TypeCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
}

CMsgSerializedSOCache_TypeCache::~CMsgSerializedSOCache_TypeCache() {
  // @@protoc_insertion_point(destructor:CMsgSerializedSOCache.TypeCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSerializedSOCache_TypeCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSerializedSOCache_TypeCache::ArenaDtor(void* object) {
  CMsgSerializedSOCache_TypeCache* _this = reinterpret_cast< CMsgSerializedSOCache_TypeCache* >(object);
  (void)_this;
}
void CMsgSerializedSOCache_TypeCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSerializedSOCache_TypeCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSerializedSOCache_TypeCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSerializedSOCache.TypeCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(service_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSerializedSOCache_TypeCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_objects();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 service_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_service_id(&has_bits);
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSerializedSOCache_TypeCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSerializedSOCache.TypeCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated bytes objects = 2;
  for (int i = 0, n = this->_internal_objects_size(); i < n; i++) {
    const auto& s = this->_internal_objects(i);
    target = stream->WriteBytes(2, s, target);
  }

  // optional uint32 service_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSerializedSOCache.TypeCache)
  return target;
}

size_t CMsgSerializedSOCache_TypeCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSerializedSOCache.TypeCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes objects = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(objects_.size());
  for (int i = 0, n = objects_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      objects_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 service_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_TypeCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSerializedSOCache_TypeCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSerializedSOCache.TypeCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSerializedSOCache.TypeCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_TypeCache::MergeFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSerializedSOCache.TypeCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_TypeCache::CopyFrom(const CMsgSerializedSOCache_TypeCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSerializedSOCache.TypeCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_TypeCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_TypeCache::InternalSwap(CMsgSerializedSOCache_TypeCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objects_.InternalSwap(&other->objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, service_id_)
      + sizeof(CMsgSerializedSOCache_TypeCache::service_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_TypeCache, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSerializedSOCache_TypeCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSerializedSOCache_Cache_Version::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSerializedSOCache_Cache_Version>()._has_bits_);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSerializedSOCache.Cache.Version)
}
CMsgSerializedSOCache_Cache_Version::CMsgSerializedSOCache_Cache_Version(const CMsgSerializedSOCache_Cache_Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_));
  // @@protoc_insertion_point(copy_constructor:CMsgSerializedSOCache.Cache.Version)
}

void CMsgSerializedSOCache_Cache_Version::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&service_) -
    reinterpret_cast<char*>(&version_)) + sizeof(service_));
}

CMsgSerializedSOCache_Cache_Version::~CMsgSerializedSOCache_Cache_Version() {
  // @@protoc_insertion_point(destructor:CMsgSerializedSOCache.Cache.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSerializedSOCache_Cache_Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSerializedSOCache_Cache_Version::ArenaDtor(void* object) {
  CMsgSerializedSOCache_Cache_Version* _this = reinterpret_cast< CMsgSerializedSOCache_Cache_Version* >(object);
  (void)_this;
}
void CMsgSerializedSOCache_Cache_Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSerializedSOCache_Cache_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSerializedSOCache_Cache_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSerializedSOCache.Cache.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&service_) -
        reinterpret_cast<char*>(&version_)) + sizeof(service_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSerializedSOCache_Cache_Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 service = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_service(&has_bits);
          service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSerializedSOCache_Cache_Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSerializedSOCache.Cache.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 service = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service(), target);
  }

  // optional uint64 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSerializedSOCache.Cache.Version)
  return target;
}

size_t CMsgSerializedSOCache_Cache_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSerializedSOCache.Cache.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_version());
    }

    // optional uint32 service = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_service());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache_Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSerializedSOCache_Cache_Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSerializedSOCache.Cache.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSerializedSOCache.Cache.Version)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache_Version::MergeFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSerializedSOCache.Cache.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_ = from.service_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache_Version::CopyFrom(const CMsgSerializedSOCache_Cache_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSerializedSOCache.Cache.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache_Version::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache_Version::InternalSwap(CMsgSerializedSOCache_Cache_Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, service_)
      + sizeof(CMsgSerializedSOCache_Cache_Version::service_)
      - PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_Cache_Version, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSerializedSOCache_Cache_Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSerializedSOCache_Cache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSerializedSOCache_Cache>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  versions_(arena),
  type_caches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSerializedSOCache.Cache)
}
CMsgSerializedSOCache_Cache::CMsgSerializedSOCache_Cache(const CMsgSerializedSOCache_Cache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      versions_(from.versions_),
      type_caches_(from.type_caches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSerializedSOCache.Cache)
}

void CMsgSerializedSOCache_Cache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CMsgSerializedSOCache_Cache::~CMsgSerializedSOCache_Cache() {
  // @@protoc_insertion_point(destructor:CMsgSerializedSOCache.Cache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSerializedSOCache_Cache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSerializedSOCache_Cache::ArenaDtor(void* object) {
  CMsgSerializedSOCache_Cache* _this = reinterpret_cast< CMsgSerializedSOCache_Cache* >(object);
  (void)_this;
}
void CMsgSerializedSOCache_Cache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSerializedSOCache_Cache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSerializedSOCache_Cache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSerializedSOCache.Cache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  type_caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSerializedSOCache_Cache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSerializedSOCache.Cache.Version versions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSerializedSOCache.TypeCache type_caches = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSerializedSOCache_Cache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSerializedSOCache.Cache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // repeated .CMsgSerializedSOCache.Cache.Version versions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_versions(i), target, stream);
  }

  // repeated .CMsgSerializedSOCache.TypeCache type_caches = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_caches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_type_caches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSerializedSOCache.Cache)
  return target;
}

size_t CMsgSerializedSOCache_Cache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSerializedSOCache.Cache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSerializedSOCache.Cache.Version versions = 3;
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSerializedSOCache.TypeCache type_caches = 4;
  total_size += 1UL * this->_internal_type_caches_size();
  for (const auto& msg : this->type_caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache_Cache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache_Cache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSerializedSOCache_Cache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSerializedSOCache.Cache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSerializedSOCache.Cache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache_Cache::MergeFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSerializedSOCache.Cache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  type_caches_.MergeFrom(from.type_caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache_Cache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache_Cache::CopyFrom(const CMsgSerializedSOCache_Cache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSerializedSOCache.Cache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache_Cache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache_Cache::InternalSwap(CMsgSerializedSOCache_Cache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  versions_.InternalSwap(&other->versions_);
  type_caches_.InternalSwap(&other->type_caches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_Cache, type_)
      + sizeof(CMsgSerializedSOCache_Cache::type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache_Cache, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSerializedSOCache_Cache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSerializedSOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSerializedSOCache>()._has_bits_);
  static void set_has_file_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gc_socache_file_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSerializedSOCache::CMsgSerializedSOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  caches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSerializedSOCache)
}
CMsgSerializedSOCache::CMsgSerializedSOCache(const CMsgSerializedSOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      caches_(from.caches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&file_version_, &from.file_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSerializedSOCache)
}

void CMsgSerializedSOCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gc_socache_file_version_) -
    reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
}

CMsgSerializedSOCache::~CMsgSerializedSOCache() {
  // @@protoc_insertion_point(destructor:CMsgSerializedSOCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSerializedSOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSerializedSOCache::ArenaDtor(void* object) {
  CMsgSerializedSOCache* _this = reinterpret_cast< CMsgSerializedSOCache* >(object);
  (void)_this;
}
void CMsgSerializedSOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSerializedSOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSerializedSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSerializedSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&file_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_socache_file_version_) -
        reinterpret_cast<char*>(&file_version_)) + sizeof(gc_socache_file_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSerializedSOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 file_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_version(&has_bits);
          file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSerializedSOCache.Cache caches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 gc_socache_file_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gc_socache_file_version(&has_bits);
          gc_socache_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSerializedSOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSerializedSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 file_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_file_version(), target);
  }

  // repeated .CMsgSerializedSOCache.Cache caches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_caches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_caches(i), target, stream);
  }

  // optional uint32 gc_socache_file_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gc_socache_file_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSerializedSOCache)
  return target;
}

size_t CMsgSerializedSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSerializedSOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSerializedSOCache.Cache caches = 2;
  total_size += 1UL * this->_internal_caches_size();
  for (const auto& msg : this->caches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 file_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_version());
    }

    // optional uint32 gc_socache_file_version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gc_socache_file_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSerializedSOCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSerializedSOCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSerializedSOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSerializedSOCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSerializedSOCache)
    MergeFrom(*source);
  }
}

void CMsgSerializedSOCache::MergeFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSerializedSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caches_.MergeFrom(from.caches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      file_version_ = from.file_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      gc_socache_file_version_ = from.gc_socache_file_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSerializedSOCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSerializedSOCache::CopyFrom(const CMsgSerializedSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSerializedSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSerializedSOCache::IsInitialized() const {
  return true;
}

void CMsgSerializedSOCache::InternalSwap(CMsgSerializedSOCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caches_.InternalSwap(&other->caches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache, gc_socache_file_version_)
      + sizeof(CMsgSerializedSOCache::gc_socache_file_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSerializedSOCache, file_version_)>(
          reinterpret_cast<char*>(&file_version_),
          reinterpret_cast<char*>(&other->file_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSerializedSOCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPollConvarRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollConvarRequest>()._has_bits_);
  static void set_has_convar_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollConvarRequest)
}
CMsgGCToClientPollConvarRequest::CMsgGCToClientPollConvarRequest(const CMsgGCToClientPollConvarRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  convar_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_convar_name()) {
    convar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_convar_name(), 
      GetArena());
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollConvarRequest)
}

void CMsgGCToClientPollConvarRequest::SharedCtor() {
convar_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
poll_id_ = 0u;
}

CMsgGCToClientPollConvarRequest::~CMsgGCToClientPollConvarRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollConvarRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPollConvarRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  convar_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarRequest::ArenaDtor(void* object) {
  CMsgGCToClientPollConvarRequest* _this = reinterpret_cast< CMsgGCToClientPollConvarRequest* >(object);
  (void)_this;
}
void CMsgGCToClientPollConvarRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPollConvarRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPollConvarRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollConvarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    convar_name_.ClearNonDefaultToEmpty();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollConvarRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string convar_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_convar_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPollConvarRequest.convar_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 poll_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_poll_id(&has_bits);
          poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPollConvarRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollConvarRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string convar_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_convar_name().data(), static_cast<int>(this->_internal_convar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPollConvarRequest.convar_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_convar_name(), target);
  }

  // optional uint32 poll_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_poll_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollConvarRequest)
  return target;
}

size_t CMsgGCToClientPollConvarRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollConvarRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string convar_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_convar_name());
    }

    // optional uint32 poll_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPollConvarRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPollConvarRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPollConvarRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarRequest::MergeFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollConvarRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_convar_name(from._internal_convar_name());
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarRequest::CopyFrom(const CMsgGCToClientPollConvarRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollConvarRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarRequest::InternalSwap(CMsgGCToClientPollConvarRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  convar_name_.Swap(&other->convar_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(poll_id_, other->poll_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollConvarRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientPollConvarResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientPollConvarResponse>()._has_bits_);
  static void set_has_poll_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_convar_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientPollConvarResponse)
}
CMsgGCToClientPollConvarResponse::CMsgGCToClientPollConvarResponse(const CMsgGCToClientPollConvarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  convar_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_convar_value()) {
    convar_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_convar_value(), 
      GetArena());
  }
  poll_id_ = from.poll_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientPollConvarResponse)
}

void CMsgGCToClientPollConvarResponse::SharedCtor() {
convar_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
poll_id_ = 0u;
}

CMsgGCToClientPollConvarResponse::~CMsgGCToClientPollConvarResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientPollConvarResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientPollConvarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  convar_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollConvarResponse::ArenaDtor(void* object) {
  CMsgGCToClientPollConvarResponse* _this = reinterpret_cast< CMsgGCToClientPollConvarResponse* >(object);
  (void)_this;
}
void CMsgGCToClientPollConvarResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientPollConvarResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientPollConvarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientPollConvarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    convar_value_.ClearNonDefaultToEmpty();
  }
  poll_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientPollConvarResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 poll_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_poll_id(&has_bits);
          poll_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string convar_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_convar_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientPollConvarResponse.convar_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientPollConvarResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientPollConvarResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poll_id(), target);
  }

  // optional string convar_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_convar_value().data(), static_cast<int>(this->_internal_convar_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientPollConvarResponse.convar_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_convar_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientPollConvarResponse)
  return target;
}

size_t CMsgGCToClientPollConvarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientPollConvarResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string convar_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_convar_value());
    }

    // optional uint32 poll_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poll_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollConvarResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientPollConvarResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientPollConvarResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientPollConvarResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollConvarResponse::MergeFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientPollConvarResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_convar_value(from._internal_convar_value());
    }
    if (cached_has_bits & 0x00000002u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollConvarResponse::CopyFrom(const CMsgGCToClientPollConvarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientPollConvarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollConvarResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollConvarResponse::InternalSwap(CMsgGCToClientPollConvarResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  convar_value_.Swap(&other->convar_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(poll_id_, other->poll_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientPollConvarResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCMsgCompressedMsgToClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgCompressedMsgToClient>()._has_bits_);
  static void set_has_msg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_compressed_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgCompressedMsgToClient::CGCMsgCompressedMsgToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCMsgCompressedMsgToClient)
}
CGCMsgCompressedMsgToClient::CGCMsgCompressedMsgToClient(const CGCMsgCompressedMsgToClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compressed_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_compressed_msg()) {
    compressed_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_compressed_msg(), 
      GetArena());
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgCompressedMsgToClient)
}

void CGCMsgCompressedMsgToClient::SharedCtor() {
compressed_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_id_ = 0u;
}

CGCMsgCompressedMsgToClient::~CGCMsgCompressedMsgToClient() {
  // @@protoc_insertion_point(destructor:CGCMsgCompressedMsgToClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCMsgCompressedMsgToClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  compressed_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgCompressedMsgToClient::ArenaDtor(void* object) {
  CGCMsgCompressedMsgToClient* _this = reinterpret_cast< CGCMsgCompressedMsgToClient* >(object);
  (void)_this;
}
void CGCMsgCompressedMsgToClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgCompressedMsgToClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgCompressedMsgToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgCompressedMsgToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    compressed_msg_.ClearNonDefaultToEmpty();
  }
  msg_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgCompressedMsgToClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_id(&has_bits);
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes compressed_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_compressed_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCMsgCompressedMsgToClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgCompressedMsgToClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_id(), target);
  }

  // optional bytes compressed_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_compressed_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgCompressedMsgToClient)
  return target;
}

size_t CGCMsgCompressedMsgToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgCompressedMsgToClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes compressed_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_compressed_msg());
    }

    // optional uint32 msg_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCMsgCompressedMsgToClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCMsgCompressedMsgToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCMsgCompressedMsgToClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCMsgCompressedMsgToClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCMsgCompressedMsgToClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCMsgCompressedMsgToClient)
    MergeFrom(*source);
  }
}

void CGCMsgCompressedMsgToClient::MergeFrom(const CGCMsgCompressedMsgToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgCompressedMsgToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_compressed_msg(from._internal_compressed_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCMsgCompressedMsgToClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCMsgCompressedMsgToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCMsgCompressedMsgToClient::CopyFrom(const CGCMsgCompressedMsgToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgCompressedMsgToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgCompressedMsgToClient::IsInitialized() const {
  return true;
}

void CGCMsgCompressedMsgToClient::InternalSwap(CGCMsgCompressedMsgToClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  compressed_msg_.Swap(&other->compressed_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgCompressedMsgToClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterBroadcastMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCMasterBroadcastMessage>()._has_bits_);
  static void set_has_users_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_send_to_users(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_send_to_servers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msg_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCMasterBroadcastMessage::CMsgGCToGCMasterBroadcastMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterBroadcastMessage)
}
CMsgGCToGCMasterBroadcastMessage::CMsgGCToGCMasterBroadcastMessage(const CMsgGCToGCMasterBroadcastMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_msg_data()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArena());
  }
  ::memcpy(&users_per_second_, &from.users_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterBroadcastMessage)
}

void CMsgGCToGCMasterBroadcastMessage::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&users_per_second_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
}

CMsgGCToGCMasterBroadcastMessage::~CMsgGCToGCMasterBroadcastMessage() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterBroadcastMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterBroadcastMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCMasterBroadcastMessage::ArenaDtor(void* object) {
  CMsgGCToGCMasterBroadcastMessage* _this = reinterpret_cast< CMsgGCToGCMasterBroadcastMessage* >(object);
  (void)_this;
}
void CMsgGCToGCMasterBroadcastMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterBroadcastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterBroadcastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterBroadcastMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&users_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_id_) -
        reinterpret_cast<char*>(&users_per_second_)) + sizeof(msg_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterBroadcastMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 users_per_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_users_per_second(&has_bits);
          users_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_to_users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_send_to_users(&has_bits);
          send_to_users_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool send_to_servers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_send_to_servers(&has_bits);
          send_to_servers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msg_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_msg_id(&has_bits);
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes msg_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterBroadcastMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterBroadcastMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 users_per_second = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_users_per_second(), target);
  }

  // optional bool send_to_users = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_send_to_users(), target);
  }

  // optional bool send_to_servers = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_send_to_servers(), target);
  }

  // optional uint32 msg_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_msg_id(), target);
  }

  // optional bytes msg_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_msg_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterBroadcastMessage)
  return target;
}

size_t CMsgGCToGCMasterBroadcastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterBroadcastMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes msg_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_msg_data());
    }

    // optional uint32 users_per_second = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_users_per_second());
    }

    // optional bool send_to_users = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool send_to_servers = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 msg_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterBroadcastMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterBroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterBroadcastMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterBroadcastMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterBroadcastMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterBroadcastMessage)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterBroadcastMessage::MergeFrom(const CMsgGCToGCMasterBroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterBroadcastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg_data(from._internal_msg_data());
    }
    if (cached_has_bits & 0x00000002u) {
      users_per_second_ = from.users_per_second_;
    }
    if (cached_has_bits & 0x00000004u) {
      send_to_users_ = from.send_to_users_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_to_servers_ = from.send_to_servers_;
    }
    if (cached_has_bits & 0x00000010u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterBroadcastMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterBroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterBroadcastMessage::CopyFrom(const CMsgGCToGCMasterBroadcastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterBroadcastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterBroadcastMessage::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterBroadcastMessage::InternalSwap(CMsgGCToGCMasterBroadcastMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_data_.Swap(&other->msg_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterBroadcastMessage, msg_id_)
      + sizeof(CMsgGCToGCMasterBroadcastMessage::msg_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterBroadcastMessage, users_per_second_)>(
          reinterpret_cast<char*>(&users_per_second_),
          reinterpret_cast<char*>(&other->users_per_second_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterBroadcastMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterSubscribeToCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCMasterSubscribeToCache>()._has_bits_);
  static void set_has_soid_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soid_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCMasterSubscribeToCache::CMsgGCToGCMasterSubscribeToCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  steam_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterSubscribeToCache)
}
CMsgGCToGCMasterSubscribeToCache::CMsgGCToGCMasterSubscribeToCache(const CMsgGCToGCMasterSubscribeToCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterSubscribeToCache)
}

void CMsgGCToGCMasterSubscribeToCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soid_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterSubscribeToCache::~CMsgGCToGCMasterSubscribeToCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterSubscribeToCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterSubscribeToCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCMasterSubscribeToCache::ArenaDtor(void* object) {
  CMsgGCToGCMasterSubscribeToCache* _this = reinterpret_cast< CMsgGCToGCMasterSubscribeToCache* >(object);
  (void)_this;
}
void CMsgGCToGCMasterSubscribeToCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterSubscribeToCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterSubscribeToCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterSubscribeToCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterSubscribeToCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soid_type(&has_bits);
          soid_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 soid_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soid_id(&has_bits);
          soid_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steam_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterSubscribeToCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterSubscribeToCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_soid_id(), target);
  }

  // repeated uint32 account_ids = 3;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_ids(i), target);
  }

  // repeated fixed64 steam_ids = 4;
  for (int i = 0, n = this->_internal_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steam_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterSubscribeToCache)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterSubscribeToCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_soid_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterSubscribeToCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterSubscribeToCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterSubscribeToCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCache::MergeFrom(const CMsgGCToGCMasterSubscribeToCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterSubscribeToCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  steam_ids_.MergeFrom(from.steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterSubscribeToCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterSubscribeToCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCache::CopyFrom(const CMsgGCToGCMasterSubscribeToCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterSubscribeToCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCache::InternalSwap(CMsgGCToGCMasterSubscribeToCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterSubscribeToCache, soid_type_)
      + sizeof(CMsgGCToGCMasterSubscribeToCache::soid_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterSubscribeToCache, soid_id_)>(
          reinterpret_cast<char*>(&soid_id_),
          reinterpret_cast<char*>(&other->soid_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterSubscribeToCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterSubscribeToCacheResponse::_Internal {
 public:
};

CMsgGCToGCMasterSubscribeToCacheResponse::CMsgGCToGCMasterSubscribeToCacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterSubscribeToCacheResponse)
}
CMsgGCToGCMasterSubscribeToCacheResponse::CMsgGCToGCMasterSubscribeToCacheResponse(const CMsgGCToGCMasterSubscribeToCacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterSubscribeToCacheResponse)
}

void CMsgGCToGCMasterSubscribeToCacheResponse::SharedCtor() {
}

CMsgGCToGCMasterSubscribeToCacheResponse::~CMsgGCToGCMasterSubscribeToCacheResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterSubscribeToCacheResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterSubscribeToCacheResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCMasterSubscribeToCacheResponse::ArenaDtor(void* object) {
  CMsgGCToGCMasterSubscribeToCacheResponse* _this = reinterpret_cast< CMsgGCToGCMasterSubscribeToCacheResponse* >(object);
  (void)_this;
}
void CMsgGCToGCMasterSubscribeToCacheResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterSubscribeToCacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterSubscribeToCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterSubscribeToCacheResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterSubscribeToCacheResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterSubscribeToCacheResponse)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCacheResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCacheResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCacheResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterSubscribeToCacheResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterSubscribeToCacheResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCacheResponse::MergeFrom(const CMsgGCToGCMasterSubscribeToCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCMasterSubscribeToCacheResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCacheResponse::CopyFrom(const CMsgGCToGCMasterSubscribeToCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterSubscribeToCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCacheResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCacheResponse::InternalSwap(CMsgGCToGCMasterSubscribeToCacheResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterSubscribeToCacheResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterSubscribeToCacheAsync::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCMasterSubscribeToCacheAsync>()._has_bits_);
  static const ::CMsgGCToGCMasterSubscribeToCache& subscribe_msg(const CMsgGCToGCMasterSubscribeToCacheAsync* msg);
  static void set_has_subscribe_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCToGCMasterSubscribeToCache&
CMsgGCToGCMasterSubscribeToCacheAsync::_Internal::subscribe_msg(const CMsgGCToGCMasterSubscribeToCacheAsync* msg) {
  return *msg->subscribe_msg_;
}
CMsgGCToGCMasterSubscribeToCacheAsync::CMsgGCToGCMasterSubscribeToCacheAsync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterSubscribeToCacheAsync)
}
CMsgGCToGCMasterSubscribeToCacheAsync::CMsgGCToGCMasterSubscribeToCacheAsync(const CMsgGCToGCMasterSubscribeToCacheAsync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscribe_msg()) {
    subscribe_msg_ = new ::CMsgGCToGCMasterSubscribeToCache(*from.subscribe_msg_);
  } else {
    subscribe_msg_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterSubscribeToCacheAsync)
}

void CMsgGCToGCMasterSubscribeToCacheAsync::SharedCtor() {
subscribe_msg_ = nullptr;
}

CMsgGCToGCMasterSubscribeToCacheAsync::~CMsgGCToGCMasterSubscribeToCacheAsync() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterSubscribeToCacheAsync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterSubscribeToCacheAsync::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete subscribe_msg_;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::ArenaDtor(void* object) {
  CMsgGCToGCMasterSubscribeToCacheAsync* _this = reinterpret_cast< CMsgGCToGCMasterSubscribeToCacheAsync* >(object);
  (void)_this;
}
void CMsgGCToGCMasterSubscribeToCacheAsync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterSubscribeToCacheAsync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterSubscribeToCacheAsync::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(subscribe_msg_ != nullptr);
    subscribe_msg_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterSubscribeToCacheAsync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterSubscribeToCacheAsync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscribe_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterSubscribeToCacheAsync)
  return target;
}

size_t CMsgGCToGCMasterSubscribeToCacheAsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCToGCMasterSubscribeToCache subscribe_msg = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscribe_msg_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterSubscribeToCacheAsync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterSubscribeToCacheAsync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterSubscribeToCacheAsync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterSubscribeToCacheAsync)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterSubscribeToCacheAsync::MergeFrom(const CMsgGCToGCMasterSubscribeToCacheAsync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscribe_msg()) {
    _internal_mutable_subscribe_msg()->::CMsgGCToGCMasterSubscribeToCache::MergeFrom(from._internal_subscribe_msg());
  }
}

void CMsgGCToGCMasterSubscribeToCacheAsync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterSubscribeToCacheAsync::CopyFrom(const CMsgGCToGCMasterSubscribeToCacheAsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterSubscribeToCacheAsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterSubscribeToCacheAsync::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterSubscribeToCacheAsync::InternalSwap(CMsgGCToGCMasterSubscribeToCacheAsync* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subscribe_msg_, other->subscribe_msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterSubscribeToCacheAsync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterUnsubscribeFromCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCMasterUnsubscribeFromCache>()._has_bits_);
  static void set_has_soid_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soid_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCMasterUnsubscribeFromCache::CMsgGCToGCMasterUnsubscribeFromCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena),
  steam_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterUnsubscribeFromCache)
}
CMsgGCToGCMasterUnsubscribeFromCache::CMsgGCToGCMasterUnsubscribeFromCache(const CMsgGCToGCMasterUnsubscribeFromCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_ids_(from.account_ids_),
      steam_ids_(from.steam_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterUnsubscribeFromCache)
}

void CMsgGCToGCMasterUnsubscribeFromCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soid_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterUnsubscribeFromCache::~CMsgGCToGCMasterUnsubscribeFromCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterUnsubscribeFromCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterUnsubscribeFromCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCMasterUnsubscribeFromCache::ArenaDtor(void* object) {
  CMsgGCToGCMasterUnsubscribeFromCache* _this = reinterpret_cast< CMsgGCToGCMasterUnsubscribeFromCache* >(object);
  (void)_this;
}
void CMsgGCToGCMasterUnsubscribeFromCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterUnsubscribeFromCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterUnsubscribeFromCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterUnsubscribeFromCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  steam_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterUnsubscribeFromCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soid_type(&has_bits);
          soid_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 soid_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soid_id(&has_bits);
          soid_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steam_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterUnsubscribeFromCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterUnsubscribeFromCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_soid_id(), target);
  }

  // repeated uint32 account_ids = 3;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_ids(i), target);
  }

  // repeated fixed64 steam_ids = 4;
  for (int i = 0, n = this->_internal_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steam_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterUnsubscribeFromCache)
  return target;
}

size_t CMsgGCToGCMasterUnsubscribeFromCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterUnsubscribeFromCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  // repeated fixed64 steam_ids = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_soid_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterUnsubscribeFromCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterUnsubscribeFromCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterUnsubscribeFromCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterUnsubscribeFromCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterUnsubscribeFromCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterUnsubscribeFromCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterUnsubscribeFromCache::MergeFrom(const CMsgGCToGCMasterUnsubscribeFromCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterUnsubscribeFromCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  steam_ids_.MergeFrom(from.steam_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterUnsubscribeFromCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterUnsubscribeFromCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterUnsubscribeFromCache::CopyFrom(const CMsgGCToGCMasterUnsubscribeFromCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterUnsubscribeFromCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterUnsubscribeFromCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterUnsubscribeFromCache::InternalSwap(CMsgGCToGCMasterUnsubscribeFromCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_ids_.InternalSwap(&other->account_ids_);
  steam_ids_.InternalSwap(&other->steam_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterUnsubscribeFromCache, soid_type_)
      + sizeof(CMsgGCToGCMasterUnsubscribeFromCache::soid_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterUnsubscribeFromCache, soid_id_)>(
          reinterpret_cast<char*>(&soid_id_),
          reinterpret_cast<char*>(&other->soid_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterUnsubscribeFromCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCMasterDestroyCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCMasterDestroyCache>()._has_bits_);
  static void set_has_soid_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soid_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCMasterDestroyCache::CMsgGCToGCMasterDestroyCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCMasterDestroyCache)
}
CMsgGCToGCMasterDestroyCache::CMsgGCToGCMasterDestroyCache(const CMsgGCToGCMasterDestroyCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soid_id_, &from.soid_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCMasterDestroyCache)
}

void CMsgGCToGCMasterDestroyCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soid_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&soid_type_) -
    reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
}

CMsgGCToGCMasterDestroyCache::~CMsgGCToGCMasterDestroyCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCMasterDestroyCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCMasterDestroyCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCMasterDestroyCache::ArenaDtor(void* object) {
  CMsgGCToGCMasterDestroyCache* _this = reinterpret_cast< CMsgGCToGCMasterDestroyCache* >(object);
  (void)_this;
}
void CMsgGCToGCMasterDestroyCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCMasterDestroyCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCMasterDestroyCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCMasterDestroyCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soid_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&soid_type_) -
        reinterpret_cast<char*>(&soid_id_)) + sizeof(soid_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCMasterDestroyCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 soid_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soid_type(&has_bits);
          soid_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 soid_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_soid_id(&has_bits);
          soid_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCMasterDestroyCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCMasterDestroyCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 soid_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_soid_type(), target);
  }

  // optional fixed64 soid_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_soid_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCMasterDestroyCache)
  return target;
}

size_t CMsgGCToGCMasterDestroyCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCMasterDestroyCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 soid_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 soid_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_soid_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCMasterDestroyCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCMasterDestroyCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCMasterDestroyCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCMasterDestroyCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCMasterDestroyCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCMasterDestroyCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCMasterDestroyCache::MergeFrom(const CMsgGCToGCMasterDestroyCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCMasterDestroyCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soid_id_ = from.soid_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      soid_type_ = from.soid_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCMasterDestroyCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCMasterDestroyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCMasterDestroyCache::CopyFrom(const CMsgGCToGCMasterDestroyCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCMasterDestroyCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCMasterDestroyCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCMasterDestroyCache::InternalSwap(CMsgGCToGCMasterDestroyCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterDestroyCache, soid_type_)
      + sizeof(CMsgGCToGCMasterDestroyCache::soid_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCMasterDestroyCache, soid_id_)>(
          reinterpret_cast<char*>(&soid_id_),
          reinterpret_cast<char*>(&other->soid_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCMasterDestroyCache::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CExtraMsgBlock* Arena::CreateMaybeMessage< ::CExtraMsgBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CExtraMsgBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCAssertJobData* Arena::CreateMaybeMessage< ::CMsgGCAssertJobData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCAssertJobData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCConCommand* Arena::CreateMaybeMessage< ::CMsgGCConCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCConCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSDOAssert_Request* Arena::CreateMaybeMessage< ::CMsgSDOAssert_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSDOAssert_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSDOAssert* Arena::CreateMaybeMessage< ::CMsgSDOAssert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSDOAssert >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSHA1Digest* Arena::CreateMaybeMessage< ::CMsgSHA1Digest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSHA1Digest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOIDOwner* Arena::CreateMaybeMessage< ::CMsgSOIDOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOIDOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOSingleObject* Arena::CreateMaybeMessage< ::CMsgSOSingleObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOSingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOMultipleObjects_SingleObject* Arena::CreateMaybeMessage< ::CMsgSOMultipleObjects_SingleObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOMultipleObjects_SingleObject >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOMultipleObjects* Arena::CreateMaybeMessage< ::CMsgSOMultipleObjects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOMultipleObjects >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscribed_SubscribedType* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscribed_SubscribedType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscribed_SubscribedType >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscribed* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscribedUpToDate* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscribedUpToDate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscribedUpToDate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheUnsubscribed* Arena::CreateMaybeMessage< ::CMsgSOCacheUnsubscribed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheUnsubscribed >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscriptionCheck* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscriptionCheck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscriptionCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheSubscriptionRefresh* Arena::CreateMaybeMessage< ::CMsgSOCacheSubscriptionRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheSubscriptionRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheVersion* Arena::CreateMaybeMessage< ::CMsgSOCacheVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMultiplexMessage* Arena::CreateMaybeMessage< ::CMsgGCMultiplexMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMultiplexMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSubGCStarting* Arena::CreateMaybeMessage< ::CMsgGCToGCSubGCStarting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSubGCStarting >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgMasterAck_Process* Arena::CreateMaybeMessage< ::CGCToGCMsgMasterAck_Process >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgMasterAck_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgMasterAck* Arena::CreateMaybeMessage< ::CGCToGCMsgMasterAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgMasterAck >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgMasterAck_Response* Arena::CreateMaybeMessage< ::CGCToGCMsgMasterAck_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgMasterAck_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUniverseStartup* Arena::CreateMaybeMessage< ::CMsgGCToGCUniverseStartup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUniverseStartup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUniverseStartupResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCUniverseStartupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUniverseStartupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgMasterStartupComplete_GCInfo* Arena::CreateMaybeMessage< ::CGCToGCMsgMasterStartupComplete_GCInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgMasterStartupComplete_GCInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgMasterStartupComplete* Arena::CreateMaybeMessage< ::CGCToGCMsgMasterStartupComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgMasterStartupComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgRouted* Arena::CreateMaybeMessage< ::CGCToGCMsgRouted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgRouted >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCToGCMsgRoutedReply* Arena::CreateMaybeMessage< ::CGCToGCMsgRoutedReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCToGCMsgRoutedReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate* Arena::CreateMaybeMessage< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCUpdateSubGCSessionInfo_CMsgUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCUpdateSubGCSessionInfo* Arena::CreateMaybeMessage< ::CMsgGCUpdateSubGCSessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCUpdateSubGCSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestSubGCSessionInfo* Arena::CreateMaybeMessage< ::CMsgGCRequestSubGCSessionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestSubGCSessionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestSubGCSessionInfoResponse* Arena::CreateMaybeMessage< ::CMsgGCRequestSubGCSessionInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestSubGCSessionInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSOCacheHaveVersion* Arena::CreateMaybeMessage< ::CMsgSOCacheHaveVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSOCacheHaveVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientHello* Arena::CreateMaybeMessage< ::CMsgClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientWelcome_Location* Arena::CreateMaybeMessage< ::CMsgClientWelcome_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientWelcome_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientWelcome* Arena::CreateMaybeMessage< ::CMsgClientWelcome >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientWelcome >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectionStatus* Arena::CreateMaybeMessage< ::CMsgConnectionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions* Arena::CreateMaybeMessage< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSOCacheSubscribe_CMsgHaveVersions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSOCacheSubscribe* Arena::CreateMaybeMessage< ::CMsgGCToGCSOCacheSubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSOCacheSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSOCacheUnsubscribe* Arena::CreateMaybeMessage< ::CMsgGCToGCSOCacheUnsubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSOCacheUnsubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCClientPing* Arena::CreateMaybeMessage< ::CMsgGCClientPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCClientPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCForwardAccountDetails* Arena::CreateMaybeMessage< ::CMsgGCToGCForwardAccountDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCForwardAccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCLoadSessionSOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCLoadSessionSOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCLoadSessionSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCLoadSessionSOCacheResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCLoadSessionSOCacheResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCLoadSessionSOCacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSessionStats* Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSessionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSessionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestDropped* Arena::CreateMaybeMessage< ::CMsgGCToClientRequestDropped >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestDropped >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription* Arena::CreateMaybeMessage< ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_PopulateItemDescriptions_Request_SingleItemDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock* Arena::CreateMaybeMessage< ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_PopulateItemDescriptions_Request_ItemDescriptionsLanguageBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_PopulateItemDescriptions_Request* Arena::CreateMaybeMessage< ::CWorkshop_PopulateItemDescriptions_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_PopulateItemDescriptions_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetContributors_Request* Arena::CreateMaybeMessage< ::CWorkshop_GetContributors_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetContributors_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetContributors_Response* Arena::CreateMaybeMessage< ::CWorkshop_GetContributors_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetContributors_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule* Arena::CreateMaybeMessage< ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_SetItemPaymentRules_Request_WorkshopItemPaymentRule >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule* Arena::CreateMaybeMessage< ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_SetItemPaymentRules_Request_WorkshopDirectPaymentRule >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule* Arena::CreateMaybeMessage< ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_SetItemPaymentRules_Request_PartnerItemPaymentRule >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_SetItemPaymentRules_Request* Arena::CreateMaybeMessage< ::CWorkshop_SetItemPaymentRules_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_SetItemPaymentRules_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_SetItemPaymentRules_Response* Arena::CreateMaybeMessage< ::CWorkshop_SetItemPaymentRules_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_SetItemPaymentRules_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanAnnouncements_Request* Arena::CreateMaybeMessage< ::CCommunity_GetClanAnnouncements_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanAnnouncements_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CCommunity_GetClanAnnouncements_Response* Arena::CreateMaybeMessage< ::CCommunity_GetClanAnnouncements_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCommunity_GetClanAnnouncements_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CBroadcast_PostGameDataFrame_Request* Arena::CreateMaybeMessage< ::CBroadcast_PostGameDataFrame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CBroadcast_PostGameDataFrame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSerializedSOCache_TypeCache* Arena::CreateMaybeMessage< ::CMsgSerializedSOCache_TypeCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSerializedSOCache_TypeCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSerializedSOCache_Cache_Version* Arena::CreateMaybeMessage< ::CMsgSerializedSOCache_Cache_Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSerializedSOCache_Cache_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSerializedSOCache_Cache* Arena::CreateMaybeMessage< ::CMsgSerializedSOCache_Cache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSerializedSOCache_Cache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSerializedSOCache* Arena::CreateMaybeMessage< ::CMsgSerializedSOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSerializedSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollConvarRequest* Arena::CreateMaybeMessage< ::CMsgGCToClientPollConvarRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollConvarRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientPollConvarResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientPollConvarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientPollConvarResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgCompressedMsgToClient* Arena::CreateMaybeMessage< ::CGCMsgCompressedMsgToClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgCompressedMsgToClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterBroadcastMessage* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterBroadcastMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterBroadcastMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterSubscribeToCache* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterSubscribeToCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterSubscribeToCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterSubscribeToCacheResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterSubscribeToCacheResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterSubscribeToCacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterSubscribeToCacheAsync* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterSubscribeToCacheAsync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterSubscribeToCacheAsync >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterUnsubscribeFromCache* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterUnsubscribeFromCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterUnsubscribeFromCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCMasterDestroyCache* Arena::CreateMaybeMessage< ::CMsgGCToGCMasterDestroyCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCMasterDestroyCache >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
