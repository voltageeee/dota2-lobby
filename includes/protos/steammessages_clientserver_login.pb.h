// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fclientserver_5flogin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fclientserver_5flogin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5flogin_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(int index);
class CMsgClientAccountInfo;
struct CMsgClientAccountInfoDefaultTypeInternal;
extern CMsgClientAccountInfoDefaultTypeInternal _CMsgClientAccountInfo_default_instance_;
class CMsgClientChallengeRequest;
struct CMsgClientChallengeRequestDefaultTypeInternal;
extern CMsgClientChallengeRequestDefaultTypeInternal _CMsgClientChallengeRequest_default_instance_;
class CMsgClientChallengeResponse;
struct CMsgClientChallengeResponseDefaultTypeInternal;
extern CMsgClientChallengeResponseDefaultTypeInternal _CMsgClientChallengeResponse_default_instance_;
class CMsgClientHeartBeat;
struct CMsgClientHeartBeatDefaultTypeInternal;
extern CMsgClientHeartBeatDefaultTypeInternal _CMsgClientHeartBeat_default_instance_;
class CMsgClientLogOff;
struct CMsgClientLogOffDefaultTypeInternal;
extern CMsgClientLogOffDefaultTypeInternal _CMsgClientLogOff_default_instance_;
class CMsgClientLoggedOff;
struct CMsgClientLoggedOffDefaultTypeInternal;
extern CMsgClientLoggedOffDefaultTypeInternal _CMsgClientLoggedOff_default_instance_;
class CMsgClientLogon;
struct CMsgClientLogonDefaultTypeInternal;
extern CMsgClientLogonDefaultTypeInternal _CMsgClientLogon_default_instance_;
class CMsgClientLogonResponse;
struct CMsgClientLogonResponseDefaultTypeInternal;
extern CMsgClientLogonResponseDefaultTypeInternal _CMsgClientLogonResponse_default_instance_;
class CMsgClientNewLoginKey;
struct CMsgClientNewLoginKeyDefaultTypeInternal;
extern CMsgClientNewLoginKeyDefaultTypeInternal _CMsgClientNewLoginKey_default_instance_;
class CMsgClientNewLoginKeyAccepted;
struct CMsgClientNewLoginKeyAcceptedDefaultTypeInternal;
extern CMsgClientNewLoginKeyAcceptedDefaultTypeInternal _CMsgClientNewLoginKeyAccepted_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonce;
struct CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal;
extern CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
class CMsgClientRequestWebAPIAuthenticateUserNonceResponse;
struct CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal;
extern CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
class CMsgClientSecret;
struct CMsgClientSecretDefaultTypeInternal;
extern CMsgClientSecretDefaultTypeInternal _CMsgClientSecret_default_instance_;
class CMsgClientServerTimestampRequest;
struct CMsgClientServerTimestampRequestDefaultTypeInternal;
extern CMsgClientServerTimestampRequestDefaultTypeInternal _CMsgClientServerTimestampRequest_default_instance_;
class CMsgClientServerTimestampResponse;
struct CMsgClientServerTimestampResponseDefaultTypeInternal;
extern CMsgClientServerTimestampResponseDefaultTypeInternal _CMsgClientServerTimestampResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientAccountInfo* Arena::CreateMaybeMessage<::CMsgClientAccountInfo>(Arena*);
template<> ::CMsgClientChallengeRequest* Arena::CreateMaybeMessage<::CMsgClientChallengeRequest>(Arena*);
template<> ::CMsgClientChallengeResponse* Arena::CreateMaybeMessage<::CMsgClientChallengeResponse>(Arena*);
template<> ::CMsgClientHeartBeat* Arena::CreateMaybeMessage<::CMsgClientHeartBeat>(Arena*);
template<> ::CMsgClientLogOff* Arena::CreateMaybeMessage<::CMsgClientLogOff>(Arena*);
template<> ::CMsgClientLoggedOff* Arena::CreateMaybeMessage<::CMsgClientLoggedOff>(Arena*);
template<> ::CMsgClientLogon* Arena::CreateMaybeMessage<::CMsgClientLogon>(Arena*);
template<> ::CMsgClientLogonResponse* Arena::CreateMaybeMessage<::CMsgClientLogonResponse>(Arena*);
template<> ::CMsgClientNewLoginKey* Arena::CreateMaybeMessage<::CMsgClientNewLoginKey>(Arena*);
template<> ::CMsgClientNewLoginKeyAccepted* Arena::CreateMaybeMessage<::CMsgClientNewLoginKeyAccepted>(Arena*);
template<> ::CMsgClientRequestWebAPIAuthenticateUserNonce* Arena::CreateMaybeMessage<::CMsgClientRequestWebAPIAuthenticateUserNonce>(Arena*);
template<> ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse* Arena::CreateMaybeMessage<::CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(Arena*);
template<> ::CMsgClientSecret* Arena::CreateMaybeMessage<::CMsgClientSecret>(Arena*);
template<> ::CMsgClientServerTimestampRequest* Arena::CreateMaybeMessage<::CMsgClientServerTimestampRequest>(Arena*);
template<> ::CMsgClientServerTimestampResponse* Arena::CreateMaybeMessage<::CMsgClientServerTimestampResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgClientHeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientHeartBeat) */ {
 public:
  inline CMsgClientHeartBeat() : CMsgClientHeartBeat(nullptr) {}
  virtual ~CMsgClientHeartBeat();
  explicit constexpr CMsgClientHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientHeartBeat(const CMsgClientHeartBeat& from);
  CMsgClientHeartBeat(CMsgClientHeartBeat&& from) noexcept
    : CMsgClientHeartBeat() {
    *this = ::std::move(from);
  }

  inline CMsgClientHeartBeat& operator=(const CMsgClientHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientHeartBeat& operator=(CMsgClientHeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientHeartBeat* internal_default_instance() {
    return reinterpret_cast<const CMsgClientHeartBeat*>(
               &_CMsgClientHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientHeartBeat& a, CMsgClientHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientHeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientHeartBeat* New() const final {
    return CreateMaybeMessage<CMsgClientHeartBeat>(nullptr);
  }

  CMsgClientHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientHeartBeat& from);
  void MergeFrom(const CMsgClientHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientHeartBeat";
  }
  protected:
  explicit CMsgClientHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientServerTimestampRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientServerTimestampRequest) */ {
 public:
  inline CMsgClientServerTimestampRequest() : CMsgClientServerTimestampRequest(nullptr) {}
  virtual ~CMsgClientServerTimestampRequest();
  explicit constexpr CMsgClientServerTimestampRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from);
  CMsgClientServerTimestampRequest(CMsgClientServerTimestampRequest&& from) noexcept
    : CMsgClientServerTimestampRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientServerTimestampRequest& operator=(const CMsgClientServerTimestampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientServerTimestampRequest& operator=(CMsgClientServerTimestampRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientServerTimestampRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientServerTimestampRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServerTimestampRequest*>(
               &_CMsgClientServerTimestampRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientServerTimestampRequest& a, CMsgClientServerTimestampRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientServerTimestampRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientServerTimestampRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientServerTimestampRequest* New() const final {
    return CreateMaybeMessage<CMsgClientServerTimestampRequest>(nullptr);
  }

  CMsgClientServerTimestampRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientServerTimestampRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientServerTimestampRequest& from);
  void MergeFrom(const CMsgClientServerTimestampRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServerTimestampRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientServerTimestampRequest";
  }
  protected:
  explicit CMsgClientServerTimestampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRequestTimestampFieldNumber = 1,
  };
  // optional uint64 client_request_timestamp = 1;
  bool has_client_request_timestamp() const;
  private:
  bool _internal_has_client_request_timestamp() const;
  public:
  void clear_client_request_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_request_timestamp() const;
  void set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_request_timestamp() const;
  void _internal_set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientServerTimestampRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_request_timestamp_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientServerTimestampResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientServerTimestampResponse) */ {
 public:
  inline CMsgClientServerTimestampResponse() : CMsgClientServerTimestampResponse(nullptr) {}
  virtual ~CMsgClientServerTimestampResponse();
  explicit constexpr CMsgClientServerTimestampResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from);
  CMsgClientServerTimestampResponse(CMsgClientServerTimestampResponse&& from) noexcept
    : CMsgClientServerTimestampResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientServerTimestampResponse& operator=(const CMsgClientServerTimestampResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientServerTimestampResponse& operator=(CMsgClientServerTimestampResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientServerTimestampResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientServerTimestampResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientServerTimestampResponse*>(
               &_CMsgClientServerTimestampResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientServerTimestampResponse& a, CMsgClientServerTimestampResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientServerTimestampResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientServerTimestampResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientServerTimestampResponse* New() const final {
    return CreateMaybeMessage<CMsgClientServerTimestampResponse>(nullptr);
  }

  CMsgClientServerTimestampResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientServerTimestampResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientServerTimestampResponse& from);
  void MergeFrom(const CMsgClientServerTimestampResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientServerTimestampResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientServerTimestampResponse";
  }
  protected:
  explicit CMsgClientServerTimestampResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRequestTimestampFieldNumber = 1,
    kServerTimestampMsFieldNumber = 2,
  };
  // optional uint64 client_request_timestamp = 1;
  bool has_client_request_timestamp() const;
  private:
  bool _internal_has_client_request_timestamp() const;
  public:
  void clear_client_request_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_request_timestamp() const;
  void set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_request_timestamp() const;
  void _internal_set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 server_timestamp_ms = 2;
  bool has_server_timestamp_ms() const;
  private:
  bool _internal_has_server_timestamp_ms() const;
  public:
  void clear_server_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_timestamp_ms() const;
  void set_server_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_timestamp_ms() const;
  void _internal_set_server_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientServerTimestampResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_request_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_timestamp_ms_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientSecret PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientSecret) */ {
 public:
  inline CMsgClientSecret() : CMsgClientSecret(nullptr) {}
  virtual ~CMsgClientSecret();
  explicit constexpr CMsgClientSecret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientSecret(const CMsgClientSecret& from);
  CMsgClientSecret(CMsgClientSecret&& from) noexcept
    : CMsgClientSecret() {
    *this = ::std::move(from);
  }

  inline CMsgClientSecret& operator=(const CMsgClientSecret& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientSecret& operator=(CMsgClientSecret&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientSecret& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientSecret* internal_default_instance() {
    return reinterpret_cast<const CMsgClientSecret*>(
               &_CMsgClientSecret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientSecret& a, CMsgClientSecret& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientSecret* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientSecret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientSecret* New() const final {
    return CreateMaybeMessage<CMsgClientSecret>(nullptr);
  }

  CMsgClientSecret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientSecret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientSecret& from);
  void MergeFrom(const CMsgClientSecret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientSecret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientSecret";
  }
  protected:
  explicit CMsgClientSecret(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHmacFieldNumber = 5,
    kVersionFieldNumber = 1,
    kAppidFieldNumber = 2,
    kNonceFieldNumber = 4,
    kDeviceidFieldNumber = 3,
  };
  // optional bytes hmac = 5;
  bool has_hmac() const;
  private:
  bool _internal_has_hmac() const;
  public:
  void clear_hmac();
  const std::string& hmac() const;
  void set_hmac(const std::string& value);
  void set_hmac(std::string&& value);
  void set_hmac(const char* value);
  void set_hmac(const void* value, size_t size);
  std::string* mutable_hmac();
  std::string* release_hmac();
  void set_allocated_hmac(std::string* hmac);
  private:
  const std::string& _internal_hmac() const;
  void _internal_set_hmac(const std::string& value);
  std::string* _internal_mutable_hmac();
  public:

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 nonce = 4;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 deviceid = 3;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientSecret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmac_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLogon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogon) */ {
 public:
  inline CMsgClientLogon() : CMsgClientLogon(nullptr) {}
  virtual ~CMsgClientLogon();
  explicit constexpr CMsgClientLogon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLogon(const CMsgClientLogon& from);
  CMsgClientLogon(CMsgClientLogon&& from) noexcept
    : CMsgClientLogon() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogon& operator=(const CMsgClientLogon& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLogon& operator=(CMsgClientLogon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientLogon& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLogon* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogon*>(
               &_CMsgClientLogon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgClientLogon& a, CMsgClientLogon& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLogon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLogon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogon* New() const final {
    return CreateMaybeMessage<CMsgClientLogon>(nullptr);
  }

  CMsgClientLogon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientLogon& from);
  void MergeFrom(const CMsgClientLogon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLogon";
  }
  protected:
  explicit CMsgClientLogon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientLanguageFieldNumber = 6,
    kWineVersionFieldNumber = 9,
    kMachineIdFieldNumber = 30,
    kSteam2AuthTicketFieldNumber = 41,
    kEmailAddressFieldNumber = 42,
    kAccountNameFieldNumber = 50,
    kPasswordFieldNumber = 51,
    kGameServerTokenFieldNumber = 52,
    kLoginKeyFieldNumber = 60,
    kAnonUserTargetAccountNameFieldNumber = 80,
    kShaSentryfileFieldNumber = 83,
    kAuthCodeFieldNumber = 84,
    kOtpIdentifierFieldNumber = 87,
    kSonyPsnTicketFieldNumber = 90,
    kSonyPsnServiceIdFieldNumber = 91,
    kSonyPsnNameFieldNumber = 93,
    kMachineNameFieldNumber = 96,
    kMachineNameUserchosenFieldNumber = 97,
    kCountryOverrideFieldNumber = 98,
    kTwoFactorCodeFieldNumber = 101,
    kWebLogonNonceFieldNumber = 103,
    kObfuscatedPrivateIpFieldNumber = 11,
    kPublicIpFieldNumber = 23,
    kEmbeddedClientSecretFieldNumber = 105,
    kProtocolVersionFieldNumber = 1,
    kDeprecatedObfustucatedPrivateIpFieldNumber = 2,
    kCellIdFieldNumber = 3,
    kLastSessionIdFieldNumber = 4,
    kClientPackageVersionFieldNumber = 5,
    kClientOsTypeFieldNumber = 7,
    kDeprecated10FieldNumber = 10,
    kDeprecatedPublicIpFieldNumber = 20,
    kClientSuppliedSteamIdFieldNumber = 22,
    kQosLevelFieldNumber = 21,
    kLauncherTypeFieldNumber = 31,
    kUiModeFieldNumber = 32,
    kChatModeFieldNumber = 33,
    kRtime32AccountCreationFieldNumber = 43,
    kShouldRememberPasswordFieldNumber = 8,
    kWasConvertedDeprecatedMsgFieldNumber = 70,
    kSteam2TicketRequestFieldNumber = 88,
    kCreateNewPsnLinkedAccountIfNeededFieldNumber = 92,
    kResolvedUserSteamIdFieldNumber = 81,
    kEresultSentryfileFieldNumber = 82,
    kOtpTypeFieldNumber = 85,
    kOtpValueFieldNumber = 86,
    kGameServerAppIdFieldNumber = 94,
    kClientInstanceIdFieldNumber = 100,
    kSteamguardDontRememberComputerFieldNumber = 95,
    kIsSteamBoxFieldNumber = 99,
    kSupportsRateLimitResponseFieldNumber = 102,
    kPriorityReasonFieldNumber = 104,
  };
  // optional string client_language = 6;
  bool has_client_language() const;
  private:
  bool _internal_has_client_language() const;
  public:
  void clear_client_language();
  const std::string& client_language() const;
  void set_client_language(const std::string& value);
  void set_client_language(std::string&& value);
  void set_client_language(const char* value);
  void set_client_language(const char* value, size_t size);
  std::string* mutable_client_language();
  std::string* release_client_language();
  void set_allocated_client_language(std::string* client_language);
  private:
  const std::string& _internal_client_language() const;
  void _internal_set_client_language(const std::string& value);
  std::string* _internal_mutable_client_language();
  public:

  // optional string wine_version = 9;
  bool has_wine_version() const;
  private:
  bool _internal_has_wine_version() const;
  public:
  void clear_wine_version();
  const std::string& wine_version() const;
  void set_wine_version(const std::string& value);
  void set_wine_version(std::string&& value);
  void set_wine_version(const char* value);
  void set_wine_version(const char* value, size_t size);
  std::string* mutable_wine_version();
  std::string* release_wine_version();
  void set_allocated_wine_version(std::string* wine_version);
  private:
  const std::string& _internal_wine_version() const;
  void _internal_set_wine_version(const std::string& value);
  std::string* _internal_mutable_wine_version();
  public:

  // optional bytes machine_id = 30;
  bool has_machine_id() const;
  private:
  bool _internal_has_machine_id() const;
  public:
  void clear_machine_id();
  const std::string& machine_id() const;
  void set_machine_id(const std::string& value);
  void set_machine_id(std::string&& value);
  void set_machine_id(const char* value);
  void set_machine_id(const void* value, size_t size);
  std::string* mutable_machine_id();
  std::string* release_machine_id();
  void set_allocated_machine_id(std::string* machine_id);
  private:
  const std::string& _internal_machine_id() const;
  void _internal_set_machine_id(const std::string& value);
  std::string* _internal_mutable_machine_id();
  public:

  // optional bytes steam2_auth_ticket = 41;
  bool has_steam2_auth_ticket() const;
  private:
  bool _internal_has_steam2_auth_ticket() const;
  public:
  void clear_steam2_auth_ticket();
  const std::string& steam2_auth_ticket() const;
  void set_steam2_auth_ticket(const std::string& value);
  void set_steam2_auth_ticket(std::string&& value);
  void set_steam2_auth_ticket(const char* value);
  void set_steam2_auth_ticket(const void* value, size_t size);
  std::string* mutable_steam2_auth_ticket();
  std::string* release_steam2_auth_ticket();
  void set_allocated_steam2_auth_ticket(std::string* steam2_auth_ticket);
  private:
  const std::string& _internal_steam2_auth_ticket() const;
  void _internal_set_steam2_auth_ticket(const std::string& value);
  std::string* _internal_mutable_steam2_auth_ticket();
  public:

  // optional string email_address = 42;
  bool has_email_address() const;
  private:
  bool _internal_has_email_address() const;
  public:
  void clear_email_address();
  const std::string& email_address() const;
  void set_email_address(const std::string& value);
  void set_email_address(std::string&& value);
  void set_email_address(const char* value);
  void set_email_address(const char* value, size_t size);
  std::string* mutable_email_address();
  std::string* release_email_address();
  void set_allocated_email_address(std::string* email_address);
  private:
  const std::string& _internal_email_address() const;
  void _internal_set_email_address(const std::string& value);
  std::string* _internal_mutable_email_address();
  public:

  // optional string account_name = 50;
  bool has_account_name() const;
  private:
  bool _internal_has_account_name() const;
  public:
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // optional string password = 51;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string game_server_token = 52;
  bool has_game_server_token() const;
  private:
  bool _internal_has_game_server_token() const;
  public:
  void clear_game_server_token();
  const std::string& game_server_token() const;
  void set_game_server_token(const std::string& value);
  void set_game_server_token(std::string&& value);
  void set_game_server_token(const char* value);
  void set_game_server_token(const char* value, size_t size);
  std::string* mutable_game_server_token();
  std::string* release_game_server_token();
  void set_allocated_game_server_token(std::string* game_server_token);
  private:
  const std::string& _internal_game_server_token() const;
  void _internal_set_game_server_token(const std::string& value);
  std::string* _internal_mutable_game_server_token();
  public:

  // optional string login_key = 60;
  bool has_login_key() const;
  private:
  bool _internal_has_login_key() const;
  public:
  void clear_login_key();
  const std::string& login_key() const;
  void set_login_key(const std::string& value);
  void set_login_key(std::string&& value);
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  std::string* mutable_login_key();
  std::string* release_login_key();
  void set_allocated_login_key(std::string* login_key);
  private:
  const std::string& _internal_login_key() const;
  void _internal_set_login_key(const std::string& value);
  std::string* _internal_mutable_login_key();
  public:

  // optional string anon_user_target_account_name = 80;
  bool has_anon_user_target_account_name() const;
  private:
  bool _internal_has_anon_user_target_account_name() const;
  public:
  void clear_anon_user_target_account_name();
  const std::string& anon_user_target_account_name() const;
  void set_anon_user_target_account_name(const std::string& value);
  void set_anon_user_target_account_name(std::string&& value);
  void set_anon_user_target_account_name(const char* value);
  void set_anon_user_target_account_name(const char* value, size_t size);
  std::string* mutable_anon_user_target_account_name();
  std::string* release_anon_user_target_account_name();
  void set_allocated_anon_user_target_account_name(std::string* anon_user_target_account_name);
  private:
  const std::string& _internal_anon_user_target_account_name() const;
  void _internal_set_anon_user_target_account_name(const std::string& value);
  std::string* _internal_mutable_anon_user_target_account_name();
  public:

  // optional bytes sha_sentryfile = 83;
  bool has_sha_sentryfile() const;
  private:
  bool _internal_has_sha_sentryfile() const;
  public:
  void clear_sha_sentryfile();
  const std::string& sha_sentryfile() const;
  void set_sha_sentryfile(const std::string& value);
  void set_sha_sentryfile(std::string&& value);
  void set_sha_sentryfile(const char* value);
  void set_sha_sentryfile(const void* value, size_t size);
  std::string* mutable_sha_sentryfile();
  std::string* release_sha_sentryfile();
  void set_allocated_sha_sentryfile(std::string* sha_sentryfile);
  private:
  const std::string& _internal_sha_sentryfile() const;
  void _internal_set_sha_sentryfile(const std::string& value);
  std::string* _internal_mutable_sha_sentryfile();
  public:

  // optional string auth_code = 84;
  bool has_auth_code() const;
  private:
  bool _internal_has_auth_code() const;
  public:
  void clear_auth_code();
  const std::string& auth_code() const;
  void set_auth_code(const std::string& value);
  void set_auth_code(std::string&& value);
  void set_auth_code(const char* value);
  void set_auth_code(const char* value, size_t size);
  std::string* mutable_auth_code();
  std::string* release_auth_code();
  void set_allocated_auth_code(std::string* auth_code);
  private:
  const std::string& _internal_auth_code() const;
  void _internal_set_auth_code(const std::string& value);
  std::string* _internal_mutable_auth_code();
  public:

  // optional string otp_identifier = 87;
  bool has_otp_identifier() const;
  private:
  bool _internal_has_otp_identifier() const;
  public:
  void clear_otp_identifier();
  const std::string& otp_identifier() const;
  void set_otp_identifier(const std::string& value);
  void set_otp_identifier(std::string&& value);
  void set_otp_identifier(const char* value);
  void set_otp_identifier(const char* value, size_t size);
  std::string* mutable_otp_identifier();
  std::string* release_otp_identifier();
  void set_allocated_otp_identifier(std::string* otp_identifier);
  private:
  const std::string& _internal_otp_identifier() const;
  void _internal_set_otp_identifier(const std::string& value);
  std::string* _internal_mutable_otp_identifier();
  public:

  // optional bytes sony_psn_ticket = 90;
  bool has_sony_psn_ticket() const;
  private:
  bool _internal_has_sony_psn_ticket() const;
  public:
  void clear_sony_psn_ticket();
  const std::string& sony_psn_ticket() const;
  void set_sony_psn_ticket(const std::string& value);
  void set_sony_psn_ticket(std::string&& value);
  void set_sony_psn_ticket(const char* value);
  void set_sony_psn_ticket(const void* value, size_t size);
  std::string* mutable_sony_psn_ticket();
  std::string* release_sony_psn_ticket();
  void set_allocated_sony_psn_ticket(std::string* sony_psn_ticket);
  private:
  const std::string& _internal_sony_psn_ticket() const;
  void _internal_set_sony_psn_ticket(const std::string& value);
  std::string* _internal_mutable_sony_psn_ticket();
  public:

  // optional string sony_psn_service_id = 91;
  bool has_sony_psn_service_id() const;
  private:
  bool _internal_has_sony_psn_service_id() const;
  public:
  void clear_sony_psn_service_id();
  const std::string& sony_psn_service_id() const;
  void set_sony_psn_service_id(const std::string& value);
  void set_sony_psn_service_id(std::string&& value);
  void set_sony_psn_service_id(const char* value);
  void set_sony_psn_service_id(const char* value, size_t size);
  std::string* mutable_sony_psn_service_id();
  std::string* release_sony_psn_service_id();
  void set_allocated_sony_psn_service_id(std::string* sony_psn_service_id);
  private:
  const std::string& _internal_sony_psn_service_id() const;
  void _internal_set_sony_psn_service_id(const std::string& value);
  std::string* _internal_mutable_sony_psn_service_id();
  public:

  // optional string sony_psn_name = 93;
  bool has_sony_psn_name() const;
  private:
  bool _internal_has_sony_psn_name() const;
  public:
  void clear_sony_psn_name();
  const std::string& sony_psn_name() const;
  void set_sony_psn_name(const std::string& value);
  void set_sony_psn_name(std::string&& value);
  void set_sony_psn_name(const char* value);
  void set_sony_psn_name(const char* value, size_t size);
  std::string* mutable_sony_psn_name();
  std::string* release_sony_psn_name();
  void set_allocated_sony_psn_name(std::string* sony_psn_name);
  private:
  const std::string& _internal_sony_psn_name() const;
  void _internal_set_sony_psn_name(const std::string& value);
  std::string* _internal_mutable_sony_psn_name();
  public:

  // optional string machine_name = 96;
  bool has_machine_name() const;
  private:
  bool _internal_has_machine_name() const;
  public:
  void clear_machine_name();
  const std::string& machine_name() const;
  void set_machine_name(const std::string& value);
  void set_machine_name(std::string&& value);
  void set_machine_name(const char* value);
  void set_machine_name(const char* value, size_t size);
  std::string* mutable_machine_name();
  std::string* release_machine_name();
  void set_allocated_machine_name(std::string* machine_name);
  private:
  const std::string& _internal_machine_name() const;
  void _internal_set_machine_name(const std::string& value);
  std::string* _internal_mutable_machine_name();
  public:

  // optional string machine_name_userchosen = 97;
  bool has_machine_name_userchosen() const;
  private:
  bool _internal_has_machine_name_userchosen() const;
  public:
  void clear_machine_name_userchosen();
  const std::string& machine_name_userchosen() const;
  void set_machine_name_userchosen(const std::string& value);
  void set_machine_name_userchosen(std::string&& value);
  void set_machine_name_userchosen(const char* value);
  void set_machine_name_userchosen(const char* value, size_t size);
  std::string* mutable_machine_name_userchosen();
  std::string* release_machine_name_userchosen();
  void set_allocated_machine_name_userchosen(std::string* machine_name_userchosen);
  private:
  const std::string& _internal_machine_name_userchosen() const;
  void _internal_set_machine_name_userchosen(const std::string& value);
  std::string* _internal_mutable_machine_name_userchosen();
  public:

  // optional string country_override = 98;
  bool has_country_override() const;
  private:
  bool _internal_has_country_override() const;
  public:
  void clear_country_override();
  const std::string& country_override() const;
  void set_country_override(const std::string& value);
  void set_country_override(std::string&& value);
  void set_country_override(const char* value);
  void set_country_override(const char* value, size_t size);
  std::string* mutable_country_override();
  std::string* release_country_override();
  void set_allocated_country_override(std::string* country_override);
  private:
  const std::string& _internal_country_override() const;
  void _internal_set_country_override(const std::string& value);
  std::string* _internal_mutable_country_override();
  public:

  // optional string two_factor_code = 101;
  bool has_two_factor_code() const;
  private:
  bool _internal_has_two_factor_code() const;
  public:
  void clear_two_factor_code();
  const std::string& two_factor_code() const;
  void set_two_factor_code(const std::string& value);
  void set_two_factor_code(std::string&& value);
  void set_two_factor_code(const char* value);
  void set_two_factor_code(const char* value, size_t size);
  std::string* mutable_two_factor_code();
  std::string* release_two_factor_code();
  void set_allocated_two_factor_code(std::string* two_factor_code);
  private:
  const std::string& _internal_two_factor_code() const;
  void _internal_set_two_factor_code(const std::string& value);
  std::string* _internal_mutable_two_factor_code();
  public:

  // optional string web_logon_nonce = 103;
  bool has_web_logon_nonce() const;
  private:
  bool _internal_has_web_logon_nonce() const;
  public:
  void clear_web_logon_nonce();
  const std::string& web_logon_nonce() const;
  void set_web_logon_nonce(const std::string& value);
  void set_web_logon_nonce(std::string&& value);
  void set_web_logon_nonce(const char* value);
  void set_web_logon_nonce(const char* value, size_t size);
  std::string* mutable_web_logon_nonce();
  std::string* release_web_logon_nonce();
  void set_allocated_web_logon_nonce(std::string* web_logon_nonce);
  private:
  const std::string& _internal_web_logon_nonce() const;
  void _internal_set_web_logon_nonce(const std::string& value);
  std::string* _internal_mutable_web_logon_nonce();
  public:

  // optional .CMsgIPAddress obfuscated_private_ip = 11;
  bool has_obfuscated_private_ip() const;
  private:
  bool _internal_has_obfuscated_private_ip() const;
  public:
  void clear_obfuscated_private_ip();
  const ::CMsgIPAddress& obfuscated_private_ip() const;
  ::CMsgIPAddress* release_obfuscated_private_ip();
  ::CMsgIPAddress* mutable_obfuscated_private_ip();
  void set_allocated_obfuscated_private_ip(::CMsgIPAddress* obfuscated_private_ip);
  private:
  const ::CMsgIPAddress& _internal_obfuscated_private_ip() const;
  ::CMsgIPAddress* _internal_mutable_obfuscated_private_ip();
  public:
  void unsafe_arena_set_allocated_obfuscated_private_ip(
      ::CMsgIPAddress* obfuscated_private_ip);
  ::CMsgIPAddress* unsafe_arena_release_obfuscated_private_ip();

  // optional .CMsgIPAddress public_ip = 23;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const ::CMsgIPAddress& public_ip() const;
  ::CMsgIPAddress* release_public_ip();
  ::CMsgIPAddress* mutable_public_ip();
  void set_allocated_public_ip(::CMsgIPAddress* public_ip);
  private:
  const ::CMsgIPAddress& _internal_public_ip() const;
  ::CMsgIPAddress* _internal_mutable_public_ip();
  public:
  void unsafe_arena_set_allocated_public_ip(
      ::CMsgIPAddress* public_ip);
  ::CMsgIPAddress* unsafe_arena_release_public_ip();

  // optional .CMsgClientSecret embedded_client_secret = 105;
  bool has_embedded_client_secret() const;
  private:
  bool _internal_has_embedded_client_secret() const;
  public:
  void clear_embedded_client_secret();
  const ::CMsgClientSecret& embedded_client_secret() const;
  ::CMsgClientSecret* release_embedded_client_secret();
  ::CMsgClientSecret* mutable_embedded_client_secret();
  void set_allocated_embedded_client_secret(::CMsgClientSecret* embedded_client_secret);
  private:
  const ::CMsgClientSecret& _internal_embedded_client_secret() const;
  ::CMsgClientSecret* _internal_mutable_embedded_client_secret();
  public:
  void unsafe_arena_set_allocated_embedded_client_secret(
      ::CMsgClientSecret* embedded_client_secret);
  ::CMsgClientSecret* unsafe_arena_release_embedded_client_secret();

  // optional uint32 protocol_version = 1;
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deprecated_obfustucated_private_ip = 2;
  bool has_deprecated_obfustucated_private_ip() const;
  private:
  bool _internal_has_deprecated_obfustucated_private_ip() const;
  public:
  void clear_deprecated_obfustucated_private_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_obfustucated_private_ip() const;
  void set_deprecated_obfustucated_private_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deprecated_obfustucated_private_ip() const;
  void _internal_set_deprecated_obfustucated_private_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cell_id = 3;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_session_id = 4;
  bool has_last_session_id() const;
  private:
  bool _internal_has_last_session_id() const;
  public:
  void clear_last_session_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_session_id() const;
  void set_last_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_session_id() const;
  void _internal_set_last_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_package_version = 5;
  bool has_client_package_version() const;
  private:
  bool _internal_has_client_package_version() const;
  public:
  void clear_client_package_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version() const;
  void set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_package_version() const;
  void _internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_os_type = 7;
  bool has_client_os_type() const;
  private:
  bool _internal_has_client_os_type() const;
  public:
  void clear_client_os_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_os_type() const;
  void set_client_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_os_type() const;
  void _internal_set_client_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deprecated_10 = 10;
  bool has_deprecated_10() const;
  private:
  bool _internal_has_deprecated_10() const;
  public:
  void clear_deprecated_10();
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_10() const;
  void set_deprecated_10(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deprecated_10() const;
  void _internal_set_deprecated_10(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deprecated_public_ip = 20;
  bool has_deprecated_public_ip() const;
  private:
  bool _internal_has_deprecated_public_ip() const;
  public:
  void clear_deprecated_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_public_ip() const;
  void set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deprecated_public_ip() const;
  void _internal_set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 client_supplied_steam_id = 22;
  bool has_client_supplied_steam_id() const;
  private:
  bool _internal_has_client_supplied_steam_id() const;
  public:
  void clear_client_supplied_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_supplied_steam_id() const;
  void set_client_supplied_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_supplied_steam_id() const;
  void _internal_set_client_supplied_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 qos_level = 21;
  bool has_qos_level() const;
  private:
  bool _internal_has_qos_level() const;
  public:
  void clear_qos_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 qos_level() const;
  void set_qos_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qos_level() const;
  void _internal_set_qos_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 launcher_type = 31 [default = 0];
  bool has_launcher_type() const;
  private:
  bool _internal_has_launcher_type() const;
  public:
  void clear_launcher_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type() const;
  void set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_launcher_type() const;
  void _internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ui_mode = 32 [default = 0];
  bool has_ui_mode() const;
  private:
  bool _internal_has_ui_mode() const;
  public:
  void clear_ui_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 ui_mode() const;
  void set_ui_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ui_mode() const;
  void _internal_set_ui_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 chat_mode = 33 [default = 0];
  bool has_chat_mode() const;
  private:
  bool _internal_has_chat_mode() const;
  public:
  void clear_chat_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 chat_mode() const;
  void set_chat_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chat_mode() const;
  void _internal_set_chat_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 rtime32_account_creation = 43;
  bool has_rtime32_account_creation() const;
  private:
  bool _internal_has_rtime32_account_creation() const;
  public:
  void clear_rtime32_account_creation();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_account_creation() const;
  void set_rtime32_account_creation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_account_creation() const;
  void _internal_set_rtime32_account_creation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool should_remember_password = 8 [default = false];
  bool has_should_remember_password() const;
  private:
  bool _internal_has_should_remember_password() const;
  public:
  void clear_should_remember_password();
  bool should_remember_password() const;
  void set_should_remember_password(bool value);
  private:
  bool _internal_should_remember_password() const;
  void _internal_set_should_remember_password(bool value);
  public:

  // optional bool was_converted_deprecated_msg = 70 [default = false];
  bool has_was_converted_deprecated_msg() const;
  private:
  bool _internal_has_was_converted_deprecated_msg() const;
  public:
  void clear_was_converted_deprecated_msg();
  bool was_converted_deprecated_msg() const;
  void set_was_converted_deprecated_msg(bool value);
  private:
  bool _internal_was_converted_deprecated_msg() const;
  void _internal_set_was_converted_deprecated_msg(bool value);
  public:

  // optional bool steam2_ticket_request = 88;
  bool has_steam2_ticket_request() const;
  private:
  bool _internal_has_steam2_ticket_request() const;
  public:
  void clear_steam2_ticket_request();
  bool steam2_ticket_request() const;
  void set_steam2_ticket_request(bool value);
  private:
  bool _internal_steam2_ticket_request() const;
  void _internal_set_steam2_ticket_request(bool value);
  public:

  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  bool has_create_new_psn_linked_account_if_needed() const;
  private:
  bool _internal_has_create_new_psn_linked_account_if_needed() const;
  public:
  void clear_create_new_psn_linked_account_if_needed();
  bool create_new_psn_linked_account_if_needed() const;
  void set_create_new_psn_linked_account_if_needed(bool value);
  private:
  bool _internal_create_new_psn_linked_account_if_needed() const;
  void _internal_set_create_new_psn_linked_account_if_needed(bool value);
  public:

  // optional fixed64 resolved_user_steam_id = 81;
  bool has_resolved_user_steam_id() const;
  private:
  bool _internal_has_resolved_user_steam_id() const;
  public:
  void clear_resolved_user_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 resolved_user_steam_id() const;
  void set_resolved_user_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_resolved_user_steam_id() const;
  void _internal_set_resolved_user_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 eresult_sentryfile = 82;
  bool has_eresult_sentryfile() const;
  private:
  bool _internal_has_eresult_sentryfile() const;
  public:
  void clear_eresult_sentryfile();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_sentryfile() const;
  void set_eresult_sentryfile(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult_sentryfile() const;
  void _internal_set_eresult_sentryfile(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 otp_type = 85;
  bool has_otp_type() const;
  private:
  bool _internal_has_otp_type() const;
  public:
  void clear_otp_type();
  ::PROTOBUF_NAMESPACE_ID::int32 otp_type() const;
  void set_otp_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_otp_type() const;
  void _internal_set_otp_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 otp_value = 86;
  bool has_otp_value() const;
  private:
  bool _internal_has_otp_value() const;
  public:
  void clear_otp_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 otp_value() const;
  void set_otp_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_otp_value() const;
  void _internal_set_otp_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 game_server_app_id = 94;
  bool has_game_server_app_id() const;
  private:
  bool _internal_has_game_server_app_id() const;
  public:
  void clear_game_server_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_app_id() const;
  void set_game_server_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_server_app_id() const;
  void _internal_set_game_server_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 client_instance_id = 100;
  bool has_client_instance_id() const;
  private:
  bool _internal_has_client_instance_id() const;
  public:
  void clear_client_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_instance_id() const;
  void set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_instance_id() const;
  void _internal_set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool steamguard_dont_remember_computer = 95;
  bool has_steamguard_dont_remember_computer() const;
  private:
  bool _internal_has_steamguard_dont_remember_computer() const;
  public:
  void clear_steamguard_dont_remember_computer();
  bool steamguard_dont_remember_computer() const;
  void set_steamguard_dont_remember_computer(bool value);
  private:
  bool _internal_steamguard_dont_remember_computer() const;
  void _internal_set_steamguard_dont_remember_computer(bool value);
  public:

  // optional bool is_steam_box = 99;
  bool has_is_steam_box() const;
  private:
  bool _internal_has_is_steam_box() const;
  public:
  void clear_is_steam_box();
  bool is_steam_box() const;
  void set_is_steam_box(bool value);
  private:
  bool _internal_is_steam_box() const;
  void _internal_set_is_steam_box(bool value);
  public:

  // optional bool supports_rate_limit_response = 102;
  bool has_supports_rate_limit_response() const;
  private:
  bool _internal_has_supports_rate_limit_response() const;
  public:
  void clear_supports_rate_limit_response();
  bool supports_rate_limit_response() const;
  void set_supports_rate_limit_response(bool value);
  private:
  bool _internal_supports_rate_limit_response() const;
  void _internal_set_supports_rate_limit_response(bool value);
  public:

  // optional int32 priority_reason = 104;
  bool has_priority_reason() const;
  private:
  bool _internal_has_priority_reason() const;
  public:
  void clear_priority_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 priority_reason() const;
  void set_priority_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority_reason() const;
  void _internal_set_priority_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLogon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wine_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam2_auth_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_server_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anon_user_target_account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha_sentryfile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otp_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sony_psn_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sony_psn_service_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sony_psn_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_name_userchosen_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_override_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr two_factor_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr web_logon_nonce_;
  ::CMsgIPAddress* obfuscated_private_ip_;
  ::CMsgIPAddress* public_ip_;
  ::CMsgClientSecret* embedded_client_secret_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_obfustucated_private_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_package_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_os_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_10_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_supplied_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qos_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 launcher_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ui_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chat_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_account_creation_;
  bool should_remember_password_;
  bool was_converted_deprecated_msg_;
  bool steam2_ticket_request_;
  bool create_new_psn_linked_account_if_needed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 resolved_user_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_sentryfile_;
  ::PROTOBUF_NAMESPACE_ID::int32 otp_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 otp_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_server_app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_instance_id_;
  bool steamguard_dont_remember_computer_;
  bool is_steam_box_;
  bool supports_rate_limit_response_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_reason_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLogonResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogonResponse) */ {
 public:
  inline CMsgClientLogonResponse() : CMsgClientLogonResponse(nullptr) {}
  virtual ~CMsgClientLogonResponse();
  explicit constexpr CMsgClientLogonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLogonResponse(const CMsgClientLogonResponse& from);
  CMsgClientLogonResponse(CMsgClientLogonResponse&& from) noexcept
    : CMsgClientLogonResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogonResponse& operator=(const CMsgClientLogonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLogonResponse& operator=(CMsgClientLogonResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientLogonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLogonResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogonResponse*>(
               &_CMsgClientLogonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgClientLogonResponse& a, CMsgClientLogonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLogonResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLogonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogonResponse* New() const final {
    return CreateMaybeMessage<CMsgClientLogonResponse>(nullptr);
  }

  CMsgClientLogonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientLogonResponse& from);
  void MergeFrom(const CMsgClientLogonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLogonResponse";
  }
  protected:
  explicit CMsgClientLogonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailDomainFieldNumber = 8,
    kSteam2TicketFieldNumber = 9,
    kWebapiAuthenticateUserNonceFieldNumber = 11,
    kVanityUrlFieldNumber = 14,
    kIpCountryCodeFieldNumber = 21,
    kParentalSettingsFieldNumber = 22,
    kParentalSettingSignatureFieldNumber = 23,
    kPublicIpFieldNumber = 15,
    kOutOfGameHeartbeatSecondsFieldNumber = 2,
    kInGameHeartbeatSecondsFieldNumber = 3,
    kDeprecatedPublicIpFieldNumber = 4,
    kRtime32ServerTimeFieldNumber = 5,
    kAccountFlagsFieldNumber = 6,
    kCellIdFieldNumber = 7,
    kEresultExtendedFieldNumber = 10,
    kCellIdPingThresholdFieldNumber = 12,
    kClientSuppliedSteamidFieldNumber = 20,
    kUsePicsFieldNumber = 13,
    kForceClientUpdateCheckFieldNumber = 28,
    kCountLoginfailuresToMigrateFieldNumber = 24,
    kCountDisconnectsToMigrateFieldNumber = 25,
    kOgsDataReportTimeWindowFieldNumber = 26,
    kClientInstanceIdFieldNumber = 27,
    kEresultFieldNumber = 1,
  };
  // optional string email_domain = 8;
  bool has_email_domain() const;
  private:
  bool _internal_has_email_domain() const;
  public:
  void clear_email_domain();
  const std::string& email_domain() const;
  void set_email_domain(const std::string& value);
  void set_email_domain(std::string&& value);
  void set_email_domain(const char* value);
  void set_email_domain(const char* value, size_t size);
  std::string* mutable_email_domain();
  std::string* release_email_domain();
  void set_allocated_email_domain(std::string* email_domain);
  private:
  const std::string& _internal_email_domain() const;
  void _internal_set_email_domain(const std::string& value);
  std::string* _internal_mutable_email_domain();
  public:

  // optional bytes steam2_ticket = 9;
  bool has_steam2_ticket() const;
  private:
  bool _internal_has_steam2_ticket() const;
  public:
  void clear_steam2_ticket();
  const std::string& steam2_ticket() const;
  void set_steam2_ticket(const std::string& value);
  void set_steam2_ticket(std::string&& value);
  void set_steam2_ticket(const char* value);
  void set_steam2_ticket(const void* value, size_t size);
  std::string* mutable_steam2_ticket();
  std::string* release_steam2_ticket();
  void set_allocated_steam2_ticket(std::string* steam2_ticket);
  private:
  const std::string& _internal_steam2_ticket() const;
  void _internal_set_steam2_ticket(const std::string& value);
  std::string* _internal_mutable_steam2_ticket();
  public:

  // optional string webapi_authenticate_user_nonce = 11;
  bool has_webapi_authenticate_user_nonce() const;
  private:
  bool _internal_has_webapi_authenticate_user_nonce() const;
  public:
  void clear_webapi_authenticate_user_nonce();
  const std::string& webapi_authenticate_user_nonce() const;
  void set_webapi_authenticate_user_nonce(const std::string& value);
  void set_webapi_authenticate_user_nonce(std::string&& value);
  void set_webapi_authenticate_user_nonce(const char* value);
  void set_webapi_authenticate_user_nonce(const char* value, size_t size);
  std::string* mutable_webapi_authenticate_user_nonce();
  std::string* release_webapi_authenticate_user_nonce();
  void set_allocated_webapi_authenticate_user_nonce(std::string* webapi_authenticate_user_nonce);
  private:
  const std::string& _internal_webapi_authenticate_user_nonce() const;
  void _internal_set_webapi_authenticate_user_nonce(const std::string& value);
  std::string* _internal_mutable_webapi_authenticate_user_nonce();
  public:

  // optional string vanity_url = 14;
  bool has_vanity_url() const;
  private:
  bool _internal_has_vanity_url() const;
  public:
  void clear_vanity_url();
  const std::string& vanity_url() const;
  void set_vanity_url(const std::string& value);
  void set_vanity_url(std::string&& value);
  void set_vanity_url(const char* value);
  void set_vanity_url(const char* value, size_t size);
  std::string* mutable_vanity_url();
  std::string* release_vanity_url();
  void set_allocated_vanity_url(std::string* vanity_url);
  private:
  const std::string& _internal_vanity_url() const;
  void _internal_set_vanity_url(const std::string& value);
  std::string* _internal_mutable_vanity_url();
  public:

  // optional string ip_country_code = 21;
  bool has_ip_country_code() const;
  private:
  bool _internal_has_ip_country_code() const;
  public:
  void clear_ip_country_code();
  const std::string& ip_country_code() const;
  void set_ip_country_code(const std::string& value);
  void set_ip_country_code(std::string&& value);
  void set_ip_country_code(const char* value);
  void set_ip_country_code(const char* value, size_t size);
  std::string* mutable_ip_country_code();
  std::string* release_ip_country_code();
  void set_allocated_ip_country_code(std::string* ip_country_code);
  private:
  const std::string& _internal_ip_country_code() const;
  void _internal_set_ip_country_code(const std::string& value);
  std::string* _internal_mutable_ip_country_code();
  public:

  // optional bytes parental_settings = 22;
  bool has_parental_settings() const;
  private:
  bool _internal_has_parental_settings() const;
  public:
  void clear_parental_settings();
  const std::string& parental_settings() const;
  void set_parental_settings(const std::string& value);
  void set_parental_settings(std::string&& value);
  void set_parental_settings(const char* value);
  void set_parental_settings(const void* value, size_t size);
  std::string* mutable_parental_settings();
  std::string* release_parental_settings();
  void set_allocated_parental_settings(std::string* parental_settings);
  private:
  const std::string& _internal_parental_settings() const;
  void _internal_set_parental_settings(const std::string& value);
  std::string* _internal_mutable_parental_settings();
  public:

  // optional bytes parental_setting_signature = 23;
  bool has_parental_setting_signature() const;
  private:
  bool _internal_has_parental_setting_signature() const;
  public:
  void clear_parental_setting_signature();
  const std::string& parental_setting_signature() const;
  void set_parental_setting_signature(const std::string& value);
  void set_parental_setting_signature(std::string&& value);
  void set_parental_setting_signature(const char* value);
  void set_parental_setting_signature(const void* value, size_t size);
  std::string* mutable_parental_setting_signature();
  std::string* release_parental_setting_signature();
  void set_allocated_parental_setting_signature(std::string* parental_setting_signature);
  private:
  const std::string& _internal_parental_setting_signature() const;
  void _internal_set_parental_setting_signature(const std::string& value);
  std::string* _internal_mutable_parental_setting_signature();
  public:

  // optional .CMsgIPAddress public_ip = 15;
  bool has_public_ip() const;
  private:
  bool _internal_has_public_ip() const;
  public:
  void clear_public_ip();
  const ::CMsgIPAddress& public_ip() const;
  ::CMsgIPAddress* release_public_ip();
  ::CMsgIPAddress* mutable_public_ip();
  void set_allocated_public_ip(::CMsgIPAddress* public_ip);
  private:
  const ::CMsgIPAddress& _internal_public_ip() const;
  ::CMsgIPAddress* _internal_mutable_public_ip();
  public:
  void unsafe_arena_set_allocated_public_ip(
      ::CMsgIPAddress* public_ip);
  ::CMsgIPAddress* unsafe_arena_release_public_ip();

  // optional int32 out_of_game_heartbeat_seconds = 2;
  bool has_out_of_game_heartbeat_seconds() const;
  private:
  bool _internal_has_out_of_game_heartbeat_seconds() const;
  public:
  void clear_out_of_game_heartbeat_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 out_of_game_heartbeat_seconds() const;
  void set_out_of_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_of_game_heartbeat_seconds() const;
  void _internal_set_out_of_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 in_game_heartbeat_seconds = 3;
  bool has_in_game_heartbeat_seconds() const;
  private:
  bool _internal_has_in_game_heartbeat_seconds() const;
  public:
  void clear_in_game_heartbeat_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 in_game_heartbeat_seconds() const;
  void set_in_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in_game_heartbeat_seconds() const;
  void _internal_set_in_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 deprecated_public_ip = 4;
  bool has_deprecated_public_ip() const;
  private:
  bool _internal_has_deprecated_public_ip() const;
  public:
  void clear_deprecated_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_public_ip() const;
  void set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deprecated_public_ip() const;
  void _internal_set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 rtime32_server_time = 5;
  bool has_rtime32_server_time() const;
  private:
  bool _internal_has_rtime32_server_time() const;
  public:
  void clear_rtime32_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_server_time() const;
  void set_rtime32_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtime32_server_time() const;
  void _internal_set_rtime32_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 account_flags = 6;
  bool has_account_flags() const;
  private:
  bool _internal_has_account_flags() const;
  public:
  void clear_account_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags() const;
  void set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_flags() const;
  void _internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cell_id = 7;
  bool has_cell_id() const;
  private:
  bool _internal_has_cell_id() const;
  public:
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 eresult_extended = 10;
  bool has_eresult_extended() const;
  private:
  bool _internal_has_eresult_extended() const;
  public:
  void clear_eresult_extended();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_extended() const;
  void set_eresult_extended(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult_extended() const;
  void _internal_set_eresult_extended(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 cell_id_ping_threshold = 12;
  bool has_cell_id_ping_threshold() const;
  private:
  bool _internal_has_cell_id_ping_threshold() const;
  public:
  void clear_cell_id_ping_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_ping_threshold() const;
  void set_cell_id_ping_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id_ping_threshold() const;
  void _internal_set_cell_id_ping_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 client_supplied_steamid = 20;
  bool has_client_supplied_steamid() const;
  private:
  bool _internal_has_client_supplied_steamid() const;
  public:
  void clear_client_supplied_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_supplied_steamid() const;
  void set_client_supplied_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_supplied_steamid() const;
  void _internal_set_client_supplied_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool use_pics = 13;
  bool has_use_pics() const;
  private:
  bool _internal_has_use_pics() const;
  public:
  void clear_use_pics();
  bool use_pics() const;
  void set_use_pics(bool value);
  private:
  bool _internal_use_pics() const;
  void _internal_set_use_pics(bool value);
  public:

  // optional bool force_client_update_check = 28;
  bool has_force_client_update_check() const;
  private:
  bool _internal_has_force_client_update_check() const;
  public:
  void clear_force_client_update_check();
  bool force_client_update_check() const;
  void set_force_client_update_check(bool value);
  private:
  bool _internal_force_client_update_check() const;
  void _internal_set_force_client_update_check(bool value);
  public:

  // optional int32 count_loginfailures_to_migrate = 24;
  bool has_count_loginfailures_to_migrate() const;
  private:
  bool _internal_has_count_loginfailures_to_migrate() const;
  public:
  void clear_count_loginfailures_to_migrate();
  ::PROTOBUF_NAMESPACE_ID::int32 count_loginfailures_to_migrate() const;
  void set_count_loginfailures_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_loginfailures_to_migrate() const;
  void _internal_set_count_loginfailures_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 count_disconnects_to_migrate = 25;
  bool has_count_disconnects_to_migrate() const;
  private:
  bool _internal_has_count_disconnects_to_migrate() const;
  public:
  void clear_count_disconnects_to_migrate();
  ::PROTOBUF_NAMESPACE_ID::int32 count_disconnects_to_migrate() const;
  void set_count_disconnects_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_disconnects_to_migrate() const;
  void _internal_set_count_disconnects_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ogs_data_report_time_window = 26;
  bool has_ogs_data_report_time_window() const;
  private:
  bool _internal_has_ogs_data_report_time_window() const;
  public:
  void clear_ogs_data_report_time_window();
  ::PROTOBUF_NAMESPACE_ID::int32 ogs_data_report_time_window() const;
  void set_ogs_data_report_time_window(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ogs_data_report_time_window() const;
  void _internal_set_ogs_data_report_time_window(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 client_instance_id = 27;
  bool has_client_instance_id() const;
  private:
  bool _internal_has_client_instance_id() const;
  public:
  void clear_client_instance_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_instance_id() const;
  void set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_instance_id() const;
  void _internal_set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLogonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam2_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webapi_authenticate_user_nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vanity_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parental_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parental_setting_signature_;
  ::CMsgIPAddress* public_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_of_game_heartbeat_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 in_game_heartbeat_seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deprecated_public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtime32_server_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_extended_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_ping_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_supplied_steamid_;
  bool use_pics_;
  bool force_client_update_check_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_loginfailures_to_migrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_disconnects_to_migrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 ogs_data_report_time_window_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestWebAPIAuthenticateUserNonce PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestWebAPIAuthenticateUserNonce) */ {
 public:
  inline CMsgClientRequestWebAPIAuthenticateUserNonce() : CMsgClientRequestWebAPIAuthenticateUserNonce(nullptr) {}
  virtual ~CMsgClientRequestWebAPIAuthenticateUserNonce();
  explicit constexpr CMsgClientRequestWebAPIAuthenticateUserNonce(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);
  CMsgClientRequestWebAPIAuthenticateUserNonce(CMsgClientRequestWebAPIAuthenticateUserNonce&& from) noexcept
    : CMsgClientRequestWebAPIAuthenticateUserNonce() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestWebAPIAuthenticateUserNonce& operator=(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestWebAPIAuthenticateUserNonce& operator=(CMsgClientRequestWebAPIAuthenticateUserNonce&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientRequestWebAPIAuthenticateUserNonce& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestWebAPIAuthenticateUserNonce* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestWebAPIAuthenticateUserNonce*>(
               &_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgClientRequestWebAPIAuthenticateUserNonce& a, CMsgClientRequestWebAPIAuthenticateUserNonce& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientRequestWebAPIAuthenticateUserNonce* New() const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonce>(nullptr);
  }

  CMsgClientRequestWebAPIAuthenticateUserNonce* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonce>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);
  void MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestWebAPIAuthenticateUserNonce";
  }
  protected:
  explicit CMsgClientRequestWebAPIAuthenticateUserNonce(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenTypeFieldNumber = 1,
  };
  // optional int32 token_type = 1 [default = -1];
  bool has_token_type() const;
  private:
  bool _internal_has_token_type() const;
  public:
  void clear_token_type();
  ::PROTOBUF_NAMESPACE_ID::int32 token_type() const;
  void set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_token_type() const;
  void _internal_set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestWebAPIAuthenticateUserNonce)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 token_type_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientRequestWebAPIAuthenticateUserNonceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientRequestWebAPIAuthenticateUserNonceResponse) */ {
 public:
  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse() : CMsgClientRequestWebAPIAuthenticateUserNonceResponse(nullptr) {}
  virtual ~CMsgClientRequestWebAPIAuthenticateUserNonceResponse();
  explicit constexpr CMsgClientRequestWebAPIAuthenticateUserNonceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse(CMsgClientRequestWebAPIAuthenticateUserNonceResponse&& from) noexcept
    : CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse& operator=(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse& operator=(CMsgClientRequestWebAPIAuthenticateUserNonceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(
               &_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse& a, CMsgClientRequestWebAPIAuthenticateUserNonceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientRequestWebAPIAuthenticateUserNonceResponse* New() const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(nullptr);
  }

  CMsgClientRequestWebAPIAuthenticateUserNonceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);
  void MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientRequestWebAPIAuthenticateUserNonceResponse";
  }
  protected:
  explicit CMsgClientRequestWebAPIAuthenticateUserNonceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebapiAuthenticateUserNonceFieldNumber = 11,
    kEresultFieldNumber = 1,
    kTokenTypeFieldNumber = 3,
  };
  // optional string webapi_authenticate_user_nonce = 11;
  bool has_webapi_authenticate_user_nonce() const;
  private:
  bool _internal_has_webapi_authenticate_user_nonce() const;
  public:
  void clear_webapi_authenticate_user_nonce();
  const std::string& webapi_authenticate_user_nonce() const;
  void set_webapi_authenticate_user_nonce(const std::string& value);
  void set_webapi_authenticate_user_nonce(std::string&& value);
  void set_webapi_authenticate_user_nonce(const char* value);
  void set_webapi_authenticate_user_nonce(const char* value, size_t size);
  std::string* mutable_webapi_authenticate_user_nonce();
  std::string* release_webapi_authenticate_user_nonce();
  void set_allocated_webapi_authenticate_user_nonce(std::string* webapi_authenticate_user_nonce);
  private:
  const std::string& _internal_webapi_authenticate_user_nonce() const;
  void _internal_set_webapi_authenticate_user_nonce(const std::string& value);
  std::string* _internal_mutable_webapi_authenticate_user_nonce();
  public:

  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 token_type = 3 [default = -1];
  bool has_token_type() const;
  private:
  bool _internal_has_token_type() const;
  public:
  void clear_token_type();
  ::PROTOBUF_NAMESPACE_ID::int32 token_type() const;
  void set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_token_type() const;
  void _internal_set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webapi_authenticate_user_nonce_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  ::PROTOBUF_NAMESPACE_ID::int32 token_type_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLogOff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLogOff) */ {
 public:
  inline CMsgClientLogOff() : CMsgClientLogOff(nullptr) {}
  virtual ~CMsgClientLogOff();
  explicit constexpr CMsgClientLogOff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLogOff(const CMsgClientLogOff& from);
  CMsgClientLogOff(CMsgClientLogOff&& from) noexcept
    : CMsgClientLogOff() {
    *this = ::std::move(from);
  }

  inline CMsgClientLogOff& operator=(const CMsgClientLogOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLogOff& operator=(CMsgClientLogOff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientLogOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLogOff* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLogOff*>(
               &_CMsgClientLogOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgClientLogOff& a, CMsgClientLogOff& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLogOff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLogOff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLogOff* New() const final {
    return CreateMaybeMessage<CMsgClientLogOff>(nullptr);
  }

  CMsgClientLogOff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLogOff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientLogOff& from);
  void MergeFrom(const CMsgClientLogOff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLogOff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLogOff";
  }
  protected:
  explicit CMsgClientLogOff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClientLogOff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientLoggedOff PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientLoggedOff) */ {
 public:
  inline CMsgClientLoggedOff() : CMsgClientLoggedOff(nullptr) {}
  virtual ~CMsgClientLoggedOff();
  explicit constexpr CMsgClientLoggedOff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientLoggedOff(const CMsgClientLoggedOff& from);
  CMsgClientLoggedOff(CMsgClientLoggedOff&& from) noexcept
    : CMsgClientLoggedOff() {
    *this = ::std::move(from);
  }

  inline CMsgClientLoggedOff& operator=(const CMsgClientLoggedOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientLoggedOff& operator=(CMsgClientLoggedOff&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientLoggedOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientLoggedOff* internal_default_instance() {
    return reinterpret_cast<const CMsgClientLoggedOff*>(
               &_CMsgClientLoggedOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgClientLoggedOff& a, CMsgClientLoggedOff& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientLoggedOff* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientLoggedOff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientLoggedOff* New() const final {
    return CreateMaybeMessage<CMsgClientLoggedOff>(nullptr);
  }

  CMsgClientLoggedOff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientLoggedOff>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientLoggedOff& from);
  void MergeFrom(const CMsgClientLoggedOff& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientLoggedOff* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientLoggedOff";
  }
  protected:
  explicit CMsgClientLoggedOff(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEresultFieldNumber = 1,
  };
  // optional int32 eresult = 1 [default = 2];
  bool has_eresult() const;
  private:
  bool _internal_has_eresult() const;
  public:
  void clear_eresult();
  ::PROTOBUF_NAMESPACE_ID::int32 eresult() const;
  void set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eresult() const;
  void _internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientLoggedOff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eresult_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNewLoginKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNewLoginKey) */ {
 public:
  inline CMsgClientNewLoginKey() : CMsgClientNewLoginKey(nullptr) {}
  virtual ~CMsgClientNewLoginKey();
  explicit constexpr CMsgClientNewLoginKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from);
  CMsgClientNewLoginKey(CMsgClientNewLoginKey&& from) noexcept
    : CMsgClientNewLoginKey() {
    *this = ::std::move(from);
  }

  inline CMsgClientNewLoginKey& operator=(const CMsgClientNewLoginKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNewLoginKey& operator=(CMsgClientNewLoginKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientNewLoginKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNewLoginKey* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNewLoginKey*>(
               &_CMsgClientNewLoginKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgClientNewLoginKey& a, CMsgClientNewLoginKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNewLoginKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNewLoginKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientNewLoginKey* New() const final {
    return CreateMaybeMessage<CMsgClientNewLoginKey>(nullptr);
  }

  CMsgClientNewLoginKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientNewLoginKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientNewLoginKey& from);
  void MergeFrom(const CMsgClientNewLoginKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNewLoginKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNewLoginKey";
  }
  protected:
  explicit CMsgClientNewLoginKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 2,
    kUniqueIdFieldNumber = 1,
  };
  // optional string login_key = 2;
  bool has_login_key() const;
  private:
  bool _internal_has_login_key() const;
  public:
  void clear_login_key();
  const std::string& login_key() const;
  void set_login_key(const std::string& value);
  void set_login_key(std::string&& value);
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  std::string* mutable_login_key();
  std::string* release_login_key();
  void set_allocated_login_key(std::string* login_key);
  private:
  const std::string& _internal_login_key() const;
  void _internal_set_login_key(const std::string& value);
  std::string* _internal_mutable_login_key();
  public:

  // optional uint32 unique_id = 1;
  bool has_unique_id() const;
  private:
  bool _internal_has_unique_id() const;
  public:
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNewLoginKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientNewLoginKeyAccepted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientNewLoginKeyAccepted) */ {
 public:
  inline CMsgClientNewLoginKeyAccepted() : CMsgClientNewLoginKeyAccepted(nullptr) {}
  virtual ~CMsgClientNewLoginKeyAccepted();
  explicit constexpr CMsgClientNewLoginKeyAccepted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from);
  CMsgClientNewLoginKeyAccepted(CMsgClientNewLoginKeyAccepted&& from) noexcept
    : CMsgClientNewLoginKeyAccepted() {
    *this = ::std::move(from);
  }

  inline CMsgClientNewLoginKeyAccepted& operator=(const CMsgClientNewLoginKeyAccepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientNewLoginKeyAccepted& operator=(CMsgClientNewLoginKeyAccepted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientNewLoginKeyAccepted& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientNewLoginKeyAccepted* internal_default_instance() {
    return reinterpret_cast<const CMsgClientNewLoginKeyAccepted*>(
               &_CMsgClientNewLoginKeyAccepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgClientNewLoginKeyAccepted& a, CMsgClientNewLoginKeyAccepted& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientNewLoginKeyAccepted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientNewLoginKeyAccepted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientNewLoginKeyAccepted* New() const final {
    return CreateMaybeMessage<CMsgClientNewLoginKeyAccepted>(nullptr);
  }

  CMsgClientNewLoginKeyAccepted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientNewLoginKeyAccepted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientNewLoginKeyAccepted& from);
  void MergeFrom(const CMsgClientNewLoginKeyAccepted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientNewLoginKeyAccepted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientNewLoginKeyAccepted";
  }
  protected:
  explicit CMsgClientNewLoginKeyAccepted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
  };
  // optional uint32 unique_id = 1;
  bool has_unique_id() const;
  private:
  bool _internal_has_unique_id() const;
  public:
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientNewLoginKeyAccepted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_id_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientAccountInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientAccountInfo) */ {
 public:
  inline CMsgClientAccountInfo() : CMsgClientAccountInfo(nullptr) {}
  virtual ~CMsgClientAccountInfo();
  explicit constexpr CMsgClientAccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientAccountInfo(const CMsgClientAccountInfo& from);
  CMsgClientAccountInfo(CMsgClientAccountInfo&& from) noexcept
    : CMsgClientAccountInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientAccountInfo& operator=(const CMsgClientAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientAccountInfo& operator=(CMsgClientAccountInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientAccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientAccountInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientAccountInfo*>(
               &_CMsgClientAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgClientAccountInfo& a, CMsgClientAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientAccountInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientAccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientAccountInfo* New() const final {
    return CreateMaybeMessage<CMsgClientAccountInfo>(nullptr);
  }

  CMsgClientAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientAccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientAccountInfo& from);
  void MergeFrom(const CMsgClientAccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientAccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientAccountInfo";
  }
  protected:
  explicit CMsgClientAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 1,
    kIpCountryFieldNumber = 2,
    kFacebookNameFieldNumber = 9,
    kSteamguardMachineNameUserChosenFieldNumber = 15,
    kCountAuthedComputersFieldNumber = 5,
    kAccountFlagsFieldNumber = 7,
    kFacebookIdFieldNumber = 8,
    kSteamguardNotifyNewmachinesFieldNumber = 14,
    kIsPhoneVerifiedFieldNumber = 16,
    kIsPhoneIdentifyingFieldNumber = 18,
    kIsPhoneNeedingReverifyFieldNumber = 19,
    kTwoFactorStateFieldNumber = 17,
  };
  // optional string persona_name = 1;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  void set_persona_name(const std::string& value);
  void set_persona_name(std::string&& value);
  void set_persona_name(const char* value);
  void set_persona_name(const char* value, size_t size);
  std::string* mutable_persona_name();
  std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional string ip_country = 2;
  bool has_ip_country() const;
  private:
  bool _internal_has_ip_country() const;
  public:
  void clear_ip_country();
  const std::string& ip_country() const;
  void set_ip_country(const std::string& value);
  void set_ip_country(std::string&& value);
  void set_ip_country(const char* value);
  void set_ip_country(const char* value, size_t size);
  std::string* mutable_ip_country();
  std::string* release_ip_country();
  void set_allocated_ip_country(std::string* ip_country);
  private:
  const std::string& _internal_ip_country() const;
  void _internal_set_ip_country(const std::string& value);
  std::string* _internal_mutable_ip_country();
  public:

  // optional string facebook_name = 9;
  bool has_facebook_name() const;
  private:
  bool _internal_has_facebook_name() const;
  public:
  void clear_facebook_name();
  const std::string& facebook_name() const;
  void set_facebook_name(const std::string& value);
  void set_facebook_name(std::string&& value);
  void set_facebook_name(const char* value);
  void set_facebook_name(const char* value, size_t size);
  std::string* mutable_facebook_name();
  std::string* release_facebook_name();
  void set_allocated_facebook_name(std::string* facebook_name);
  private:
  const std::string& _internal_facebook_name() const;
  void _internal_set_facebook_name(const std::string& value);
  std::string* _internal_mutable_facebook_name();
  public:

  // optional string steamguard_machine_name_user_chosen = 15;
  bool has_steamguard_machine_name_user_chosen() const;
  private:
  bool _internal_has_steamguard_machine_name_user_chosen() const;
  public:
  void clear_steamguard_machine_name_user_chosen();
  const std::string& steamguard_machine_name_user_chosen() const;
  void set_steamguard_machine_name_user_chosen(const std::string& value);
  void set_steamguard_machine_name_user_chosen(std::string&& value);
  void set_steamguard_machine_name_user_chosen(const char* value);
  void set_steamguard_machine_name_user_chosen(const char* value, size_t size);
  std::string* mutable_steamguard_machine_name_user_chosen();
  std::string* release_steamguard_machine_name_user_chosen();
  void set_allocated_steamguard_machine_name_user_chosen(std::string* steamguard_machine_name_user_chosen);
  private:
  const std::string& _internal_steamguard_machine_name_user_chosen() const;
  void _internal_set_steamguard_machine_name_user_chosen(const std::string& value);
  std::string* _internal_mutable_steamguard_machine_name_user_chosen();
  public:

  // optional int32 count_authed_computers = 5;
  bool has_count_authed_computers() const;
  private:
  bool _internal_has_count_authed_computers() const;
  public:
  void clear_count_authed_computers();
  ::PROTOBUF_NAMESPACE_ID::int32 count_authed_computers() const;
  void set_count_authed_computers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count_authed_computers() const;
  void _internal_set_count_authed_computers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 account_flags = 7;
  bool has_account_flags() const;
  private:
  bool _internal_has_account_flags() const;
  public:
  void clear_account_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags() const;
  void set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_flags() const;
  void _internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 facebook_id = 8;
  bool has_facebook_id() const;
  private:
  bool _internal_has_facebook_id() const;
  public:
  void clear_facebook_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 facebook_id() const;
  void set_facebook_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_facebook_id() const;
  void _internal_set_facebook_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool steamguard_notify_newmachines = 14;
  bool has_steamguard_notify_newmachines() const;
  private:
  bool _internal_has_steamguard_notify_newmachines() const;
  public:
  void clear_steamguard_notify_newmachines();
  bool steamguard_notify_newmachines() const;
  void set_steamguard_notify_newmachines(bool value);
  private:
  bool _internal_steamguard_notify_newmachines() const;
  void _internal_set_steamguard_notify_newmachines(bool value);
  public:

  // optional bool is_phone_verified = 16;
  bool has_is_phone_verified() const;
  private:
  bool _internal_has_is_phone_verified() const;
  public:
  void clear_is_phone_verified();
  bool is_phone_verified() const;
  void set_is_phone_verified(bool value);
  private:
  bool _internal_is_phone_verified() const;
  void _internal_set_is_phone_verified(bool value);
  public:

  // optional bool is_phone_identifying = 18;
  bool has_is_phone_identifying() const;
  private:
  bool _internal_has_is_phone_identifying() const;
  public:
  void clear_is_phone_identifying();
  bool is_phone_identifying() const;
  void set_is_phone_identifying(bool value);
  private:
  bool _internal_is_phone_identifying() const;
  void _internal_set_is_phone_identifying(bool value);
  public:

  // optional bool is_phone_needing_reverify = 19;
  bool has_is_phone_needing_reverify() const;
  private:
  bool _internal_has_is_phone_needing_reverify() const;
  public:
  void clear_is_phone_needing_reverify();
  bool is_phone_needing_reverify() const;
  void set_is_phone_needing_reverify(bool value);
  private:
  bool _internal_is_phone_needing_reverify() const;
  void _internal_set_is_phone_needing_reverify(bool value);
  public:

  // optional uint32 two_factor_state = 17;
  bool has_two_factor_state() const;
  private:
  bool _internal_has_two_factor_state() const;
  public:
  void clear_two_factor_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 two_factor_state() const;
  void set_two_factor_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_two_factor_state() const;
  void _internal_set_two_factor_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientAccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steamguard_machine_name_user_chosen_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_authed_computers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 facebook_id_;
  bool steamguard_notify_newmachines_;
  bool is_phone_verified_;
  bool is_phone_identifying_;
  bool is_phone_needing_reverify_;
  ::PROTOBUF_NAMESPACE_ID::uint32 two_factor_state_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientChallengeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientChallengeRequest) */ {
 public:
  inline CMsgClientChallengeRequest() : CMsgClientChallengeRequest(nullptr) {}
  virtual ~CMsgClientChallengeRequest();
  explicit constexpr CMsgClientChallengeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientChallengeRequest(const CMsgClientChallengeRequest& from);
  CMsgClientChallengeRequest(CMsgClientChallengeRequest&& from) noexcept
    : CMsgClientChallengeRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientChallengeRequest& operator=(const CMsgClientChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientChallengeRequest& operator=(CMsgClientChallengeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientChallengeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientChallengeRequest*>(
               &_CMsgClientChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgClientChallengeRequest& a, CMsgClientChallengeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientChallengeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientChallengeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientChallengeRequest* New() const final {
    return CreateMaybeMessage<CMsgClientChallengeRequest>(nullptr);
  }

  CMsgClientChallengeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientChallengeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientChallengeRequest& from);
  void MergeFrom(const CMsgClientChallengeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientChallengeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientChallengeRequest";
  }
  protected:
  explicit CMsgClientChallengeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamidFieldNumber = 1,
  };
  // optional fixed64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientChallengeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientChallengeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientChallengeResponse) */ {
 public:
  inline CMsgClientChallengeResponse() : CMsgClientChallengeResponse(nullptr) {}
  virtual ~CMsgClientChallengeResponse();
  explicit constexpr CMsgClientChallengeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientChallengeResponse(const CMsgClientChallengeResponse& from);
  CMsgClientChallengeResponse(CMsgClientChallengeResponse&& from) noexcept
    : CMsgClientChallengeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientChallengeResponse& operator=(const CMsgClientChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientChallengeResponse& operator=(CMsgClientChallengeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientChallengeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientChallengeResponse*>(
               &_CMsgClientChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgClientChallengeResponse& a, CMsgClientChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientChallengeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientChallengeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientChallengeResponse* New() const final {
    return CreateMaybeMessage<CMsgClientChallengeResponse>(nullptr);
  }

  CMsgClientChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientChallengeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientChallengeResponse& from);
  void MergeFrom(const CMsgClientChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientChallengeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientChallengeResponse";
  }
  protected:
  explicit CMsgClientChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeFieldNumber = 1,
  };
  // optional fixed64 challenge = 1;
  bool has_challenge() const;
  private:
  bool _internal_has_challenge() const;
  public:
  void clear_challenge();
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge() const;
  void set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_challenge() const;
  void _internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientChallengeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 challenge_;
  friend struct ::TableStruct_steammessages_5fclientserver_5flogin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientHeartBeat

// -------------------------------------------------------------------

// CMsgClientServerTimestampRequest

// optional uint64 client_request_timestamp = 1;
inline bool CMsgClientServerTimestampRequest::_internal_has_client_request_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientServerTimestampRequest::has_client_request_timestamp() const {
  return _internal_has_client_request_timestamp();
}
inline void CMsgClientServerTimestampRequest::clear_client_request_timestamp() {
  client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampRequest::_internal_client_request_timestamp() const {
  return client_request_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampRequest::client_request_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampRequest.client_request_timestamp)
  return _internal_client_request_timestamp();
}
inline void CMsgClientServerTimestampRequest::_internal_set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  client_request_timestamp_ = value;
}
inline void CMsgClientServerTimestampRequest::set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_request_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampRequest.client_request_timestamp)
}

// -------------------------------------------------------------------

// CMsgClientServerTimestampResponse

// optional uint64 client_request_timestamp = 1;
inline bool CMsgClientServerTimestampResponse::_internal_has_client_request_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientServerTimestampResponse::has_client_request_timestamp() const {
  return _internal_has_client_request_timestamp();
}
inline void CMsgClientServerTimestampResponse::clear_client_request_timestamp() {
  client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampResponse::_internal_client_request_timestamp() const {
  return client_request_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampResponse::client_request_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampResponse.client_request_timestamp)
  return _internal_client_request_timestamp();
}
inline void CMsgClientServerTimestampResponse::_internal_set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  client_request_timestamp_ = value;
}
inline void CMsgClientServerTimestampResponse::set_client_request_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_request_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampResponse.client_request_timestamp)
}

// optional uint64 server_timestamp_ms = 2;
inline bool CMsgClientServerTimestampResponse::_internal_has_server_timestamp_ms() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientServerTimestampResponse::has_server_timestamp_ms() const {
  return _internal_has_server_timestamp_ms();
}
inline void CMsgClientServerTimestampResponse::clear_server_timestamp_ms() {
  server_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampResponse::_internal_server_timestamp_ms() const {
  return server_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientServerTimestampResponse::server_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:CMsgClientServerTimestampResponse.server_timestamp_ms)
  return _internal_server_timestamp_ms();
}
inline void CMsgClientServerTimestampResponse::_internal_set_server_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  server_timestamp_ms_ = value;
}
inline void CMsgClientServerTimestampResponse::set_server_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:CMsgClientServerTimestampResponse.server_timestamp_ms)
}

// -------------------------------------------------------------------

// CMsgClientSecret

// optional uint32 version = 1;
inline bool CMsgClientSecret::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientSecret::has_version() const {
  return _internal_has_version();
}
inline void CMsgClientSecret::clear_version() {
  version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::version() const {
  // @@protoc_insertion_point(field_get:CMsgClientSecret.version)
  return _internal_version();
}
inline void CMsgClientSecret::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgClientSecret::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientSecret.version)
}

// optional uint32 appid = 2;
inline bool CMsgClientSecret::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientSecret::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgClientSecret::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::appid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSecret.appid)
  return _internal_appid();
}
inline void CMsgClientSecret::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CMsgClientSecret::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgClientSecret.appid)
}

// optional uint32 deviceid = 3;
inline bool CMsgClientSecret::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientSecret::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void CMsgClientSecret::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientSecret::deviceid() const {
  // @@protoc_insertion_point(field_get:CMsgClientSecret.deviceid)
  return _internal_deviceid();
}
inline void CMsgClientSecret::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  deviceid_ = value;
}
inline void CMsgClientSecret::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:CMsgClientSecret.deviceid)
}

// optional fixed64 nonce = 4;
inline bool CMsgClientSecret::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientSecret::has_nonce() const {
  return _internal_has_nonce();
}
inline void CMsgClientSecret::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSecret::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientSecret::nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientSecret.nonce)
  return _internal_nonce();
}
inline void CMsgClientSecret::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nonce_ = value;
}
inline void CMsgClientSecret::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:CMsgClientSecret.nonce)
}

// optional bytes hmac = 5;
inline bool CMsgClientSecret::_internal_has_hmac() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientSecret::has_hmac() const {
  return _internal_has_hmac();
}
inline void CMsgClientSecret::clear_hmac() {
  hmac_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientSecret::hmac() const {
  // @@protoc_insertion_point(field_get:CMsgClientSecret.hmac)
  return _internal_hmac();
}
inline void CMsgClientSecret::set_hmac(const std::string& value) {
  _internal_set_hmac(value);
  // @@protoc_insertion_point(field_set:CMsgClientSecret.hmac)
}
inline std::string* CMsgClientSecret::mutable_hmac() {
  // @@protoc_insertion_point(field_mutable:CMsgClientSecret.hmac)
  return _internal_mutable_hmac();
}
inline const std::string& CMsgClientSecret::_internal_hmac() const {
  return hmac_.Get();
}
inline void CMsgClientSecret::_internal_set_hmac(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientSecret::set_hmac(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hmac_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientSecret.hmac)
}
inline void CMsgClientSecret::set_hmac(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientSecret.hmac)
}
inline void CMsgClientSecret::set_hmac(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientSecret.hmac)
}
inline std::string* CMsgClientSecret::_internal_mutable_hmac() {
  _has_bits_[0] |= 0x00000001u;
  return hmac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientSecret::release_hmac() {
  // @@protoc_insertion_point(field_release:CMsgClientSecret.hmac)
  if (!_internal_has_hmac()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hmac_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientSecret::set_allocated_hmac(std::string* hmac) {
  if (hmac != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hmac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hmac,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientSecret.hmac)
}

// -------------------------------------------------------------------

// CMsgClientLogon

// optional uint32 protocol_version = 1;
inline bool CMsgClientLogon::_internal_has_protocol_version() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void CMsgClientLogon::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.protocol_version)
  return _internal_protocol_version();
}
inline void CMsgClientLogon::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  protocol_version_ = value;
}
inline void CMsgClientLogon::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.protocol_version)
}

// optional uint32 deprecated_obfustucated_private_ip = 2;
inline bool CMsgClientLogon::_internal_has_deprecated_obfustucated_private_ip() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_deprecated_obfustucated_private_ip() const {
  return _internal_has_deprecated_obfustucated_private_ip();
}
inline void CMsgClientLogon::clear_deprecated_obfustucated_private_ip() {
  deprecated_obfustucated_private_ip_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_deprecated_obfustucated_private_ip() const {
  return deprecated_obfustucated_private_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::deprecated_obfustucated_private_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.deprecated_obfustucated_private_ip)
  return _internal_deprecated_obfustucated_private_ip();
}
inline void CMsgClientLogon::_internal_set_deprecated_obfustucated_private_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  deprecated_obfustucated_private_ip_ = value;
}
inline void CMsgClientLogon::set_deprecated_obfustucated_private_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deprecated_obfustucated_private_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.deprecated_obfustucated_private_ip)
}

// optional uint32 cell_id = 3;
inline bool CMsgClientLogon::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientLogon::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientLogon::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  cell_id_ = value;
}
inline void CMsgClientLogon::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.cell_id)
}

// optional uint32 last_session_id = 4;
inline bool CMsgClientLogon::_internal_has_last_session_id() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_last_session_id() const {
  return _internal_has_last_session_id();
}
inline void CMsgClientLogon::clear_last_session_id() {
  last_session_id_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_last_session_id() const {
  return last_session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::last_session_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.last_session_id)
  return _internal_last_session_id();
}
inline void CMsgClientLogon::_internal_set_last_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  last_session_id_ = value;
}
inline void CMsgClientLogon::set_last_session_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_session_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.last_session_id)
}

// optional uint32 client_package_version = 5;
inline bool CMsgClientLogon::_internal_has_client_package_version() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_client_package_version() const {
  return _internal_has_client_package_version();
}
inline void CMsgClientLogon::clear_client_package_version() {
  client_package_version_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_client_package_version() const {
  return client_package_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::client_package_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_package_version)
  return _internal_client_package_version();
}
inline void CMsgClientLogon::_internal_set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  client_package_version_ = value;
}
inline void CMsgClientLogon::set_client_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_package_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_package_version)
}

// optional string client_language = 6;
inline bool CMsgClientLogon::_internal_has_client_language() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_client_language() const {
  return _internal_has_client_language();
}
inline void CMsgClientLogon::clear_client_language() {
  client_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientLogon::client_language() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_language)
  return _internal_client_language();
}
inline void CMsgClientLogon::set_client_language(const std::string& value) {
  _internal_set_client_language(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_language)
}
inline std::string* CMsgClientLogon::mutable_client_language() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.client_language)
  return _internal_mutable_client_language();
}
inline const std::string& CMsgClientLogon::_internal_client_language() const {
  return client_language_.Get();
}
inline void CMsgClientLogon::_internal_set_client_language(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_client_language(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_language_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.client_language)
}
inline void CMsgClientLogon::set_client_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.client_language)
}
inline void CMsgClientLogon::set_client_language(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.client_language)
}
inline std::string* CMsgClientLogon::_internal_mutable_client_language() {
  _has_bits_[0] |= 0x00000001u;
  return client_language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_client_language() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.client_language)
  if (!_internal_has_client_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_language_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_client_language(std::string* client_language) {
  if (client_language != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_language,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.client_language)
}

// optional uint32 client_os_type = 7;
inline bool CMsgClientLogon::_internal_has_client_os_type() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_client_os_type() const {
  return _internal_has_client_os_type();
}
inline void CMsgClientLogon::clear_client_os_type() {
  client_os_type_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_client_os_type() const {
  return client_os_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::client_os_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_os_type)
  return _internal_client_os_type();
}
inline void CMsgClientLogon::_internal_set_client_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  client_os_type_ = value;
}
inline void CMsgClientLogon::set_client_os_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_os_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_os_type)
}

// optional bool should_remember_password = 8 [default = false];
inline bool CMsgClientLogon::_internal_has_should_remember_password() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_should_remember_password() const {
  return _internal_has_should_remember_password();
}
inline void CMsgClientLogon::clear_should_remember_password() {
  should_remember_password_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool CMsgClientLogon::_internal_should_remember_password() const {
  return should_remember_password_;
}
inline bool CMsgClientLogon::should_remember_password() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.should_remember_password)
  return _internal_should_remember_password();
}
inline void CMsgClientLogon::_internal_set_should_remember_password(bool value) {
  _has_bits_[1] |= 0x00000040u;
  should_remember_password_ = value;
}
inline void CMsgClientLogon::set_should_remember_password(bool value) {
  _internal_set_should_remember_password(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.should_remember_password)
}

// optional string wine_version = 9;
inline bool CMsgClientLogon::_internal_has_wine_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_wine_version() const {
  return _internal_has_wine_version();
}
inline void CMsgClientLogon::clear_wine_version() {
  wine_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientLogon::wine_version() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.wine_version)
  return _internal_wine_version();
}
inline void CMsgClientLogon::set_wine_version(const std::string& value) {
  _internal_set_wine_version(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.wine_version)
}
inline std::string* CMsgClientLogon::mutable_wine_version() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.wine_version)
  return _internal_mutable_wine_version();
}
inline const std::string& CMsgClientLogon::_internal_wine_version() const {
  return wine_version_.Get();
}
inline void CMsgClientLogon::_internal_set_wine_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  wine_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_wine_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  wine_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.wine_version)
}
inline void CMsgClientLogon::set_wine_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  wine_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.wine_version)
}
inline void CMsgClientLogon::set_wine_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  wine_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.wine_version)
}
inline std::string* CMsgClientLogon::_internal_mutable_wine_version() {
  _has_bits_[0] |= 0x00000002u;
  return wine_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_wine_version() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.wine_version)
  if (!_internal_has_wine_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return wine_version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_wine_version(std::string* wine_version) {
  if (wine_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  wine_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wine_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.wine_version)
}

// optional uint32 deprecated_10 = 10;
inline bool CMsgClientLogon::_internal_has_deprecated_10() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_deprecated_10() const {
  return _internal_has_deprecated_10();
}
inline void CMsgClientLogon::clear_deprecated_10() {
  deprecated_10_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_deprecated_10() const {
  return deprecated_10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::deprecated_10() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.deprecated_10)
  return _internal_deprecated_10();
}
inline void CMsgClientLogon::_internal_set_deprecated_10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  deprecated_10_ = value;
}
inline void CMsgClientLogon::set_deprecated_10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deprecated_10(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.deprecated_10)
}

// optional .CMsgIPAddress obfuscated_private_ip = 11;
inline bool CMsgClientLogon::_internal_has_obfuscated_private_ip() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || obfuscated_private_ip_ != nullptr);
  return value;
}
inline bool CMsgClientLogon::has_obfuscated_private_ip() const {
  return _internal_has_obfuscated_private_ip();
}
inline const ::CMsgIPAddress& CMsgClientLogon::_internal_obfuscated_private_ip() const {
  const ::CMsgIPAddress* p = obfuscated_private_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientLogon::obfuscated_private_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.obfuscated_private_ip)
  return _internal_obfuscated_private_ip();
}
inline void CMsgClientLogon::unsafe_arena_set_allocated_obfuscated_private_ip(
    ::CMsgIPAddress* obfuscated_private_ip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obfuscated_private_ip_);
  }
  obfuscated_private_ip_ = obfuscated_private_ip;
  if (obfuscated_private_ip) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientLogon.obfuscated_private_ip)
}
inline ::CMsgIPAddress* CMsgClientLogon::release_obfuscated_private_ip() {
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgIPAddress* temp = obfuscated_private_ip_;
  obfuscated_private_ip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogon::unsafe_arena_release_obfuscated_private_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.obfuscated_private_ip)
  _has_bits_[0] &= ~0x00200000u;
  ::CMsgIPAddress* temp = obfuscated_private_ip_;
  obfuscated_private_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogon::_internal_mutable_obfuscated_private_ip() {
  _has_bits_[0] |= 0x00200000u;
  if (obfuscated_private_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArena());
    obfuscated_private_ip_ = p;
  }
  return obfuscated_private_ip_;
}
inline ::CMsgIPAddress* CMsgClientLogon::mutable_obfuscated_private_ip() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.obfuscated_private_ip)
  return _internal_mutable_obfuscated_private_ip();
}
inline void CMsgClientLogon::set_allocated_obfuscated_private_ip(::CMsgIPAddress* obfuscated_private_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(obfuscated_private_ip_);
  }
  if (obfuscated_private_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obfuscated_private_ip)->GetArena();
    if (message_arena != submessage_arena) {
      obfuscated_private_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obfuscated_private_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  obfuscated_private_ip_ = obfuscated_private_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.obfuscated_private_ip)
}

// optional uint32 deprecated_public_ip = 20;
inline bool CMsgClientLogon::_internal_has_deprecated_public_ip() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_deprecated_public_ip() const {
  return _internal_has_deprecated_public_ip();
}
inline void CMsgClientLogon::clear_deprecated_public_ip() {
  deprecated_public_ip_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_deprecated_public_ip() const {
  return deprecated_public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::deprecated_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.deprecated_public_ip)
  return _internal_deprecated_public_ip();
}
inline void CMsgClientLogon::_internal_set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  deprecated_public_ip_ = value;
}
inline void CMsgClientLogon::set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deprecated_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.deprecated_public_ip)
}

// optional uint32 qos_level = 21;
inline bool CMsgClientLogon::_internal_has_qos_level() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_qos_level() const {
  return _internal_has_qos_level();
}
inline void CMsgClientLogon::clear_qos_level() {
  qos_level_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_qos_level() const {
  return qos_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::qos_level() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.qos_level)
  return _internal_qos_level();
}
inline void CMsgClientLogon::_internal_set_qos_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  qos_level_ = value;
}
inline void CMsgClientLogon::set_qos_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qos_level(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.qos_level)
}

// optional fixed64 client_supplied_steam_id = 22;
inline bool CMsgClientLogon::_internal_has_client_supplied_steam_id() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_client_supplied_steam_id() const {
  return _internal_has_client_supplied_steam_id();
}
inline void CMsgClientLogon::clear_client_supplied_steam_id() {
  client_supplied_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::_internal_client_supplied_steam_id() const {
  return client_supplied_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::client_supplied_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_supplied_steam_id)
  return _internal_client_supplied_steam_id();
}
inline void CMsgClientLogon::_internal_set_client_supplied_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000001u;
  client_supplied_steam_id_ = value;
}
inline void CMsgClientLogon::set_client_supplied_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_supplied_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_supplied_steam_id)
}

// optional .CMsgIPAddress public_ip = 23;
inline bool CMsgClientLogon::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || public_ip_ != nullptr);
  return value;
}
inline bool CMsgClientLogon::has_public_ip() const {
  return _internal_has_public_ip();
}
inline const ::CMsgIPAddress& CMsgClientLogon::_internal_public_ip() const {
  const ::CMsgIPAddress* p = public_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientLogon::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.public_ip)
  return _internal_public_ip();
}
inline void CMsgClientLogon::unsafe_arena_set_allocated_public_ip(
    ::CMsgIPAddress* public_ip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  public_ip_ = public_ip;
  if (public_ip) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientLogon.public_ip)
}
inline ::CMsgIPAddress* CMsgClientLogon::release_public_ip() {
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogon::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.public_ip)
  _has_bits_[0] &= ~0x00400000u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogon::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00400000u;
  if (public_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArena());
    public_ip_ = p;
  }
  return public_ip_;
}
inline ::CMsgIPAddress* CMsgClientLogon::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.public_ip)
  return _internal_mutable_public_ip();
}
inline void CMsgClientLogon::set_allocated_public_ip(::CMsgIPAddress* public_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  if (public_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip)->GetArena();
    if (message_arena != submessage_arena) {
      public_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  public_ip_ = public_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.public_ip)
}

// optional bytes machine_id = 30;
inline bool CMsgClientLogon::_internal_has_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_machine_id() const {
  return _internal_has_machine_id();
}
inline void CMsgClientLogon::clear_machine_id() {
  machine_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientLogon::machine_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_id)
  return _internal_machine_id();
}
inline void CMsgClientLogon::set_machine_id(const std::string& value) {
  _internal_set_machine_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_id)
}
inline std::string* CMsgClientLogon::mutable_machine_id() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_id)
  return _internal_mutable_machine_id();
}
inline const std::string& CMsgClientLogon::_internal_machine_id() const {
  return machine_id_.Get();
}
inline void CMsgClientLogon::_internal_set_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  machine_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_id)
}
inline void CMsgClientLogon::set_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_id)
}
inline void CMsgClientLogon::set_machine_id(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_id)
}
inline std::string* CMsgClientLogon::_internal_mutable_machine_id() {
  _has_bits_[0] |= 0x00000004u;
  return machine_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_machine_id() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_id)
  if (!_internal_has_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return machine_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_machine_id(std::string* machine_id) {
  if (machine_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  machine_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_id)
}

// optional uint32 launcher_type = 31 [default = 0];
inline bool CMsgClientLogon::_internal_has_launcher_type() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_launcher_type() const {
  return _internal_has_launcher_type();
}
inline void CMsgClientLogon::clear_launcher_type() {
  launcher_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_launcher_type() const {
  return launcher_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::launcher_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.launcher_type)
  return _internal_launcher_type();
}
inline void CMsgClientLogon::_internal_set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  launcher_type_ = value;
}
inline void CMsgClientLogon::set_launcher_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_launcher_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.launcher_type)
}

// optional uint32 ui_mode = 32 [default = 0];
inline bool CMsgClientLogon::_internal_has_ui_mode() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_ui_mode() const {
  return _internal_has_ui_mode();
}
inline void CMsgClientLogon::clear_ui_mode() {
  ui_mode_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_ui_mode() const {
  return ui_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::ui_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.ui_mode)
  return _internal_ui_mode();
}
inline void CMsgClientLogon::_internal_set_ui_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  ui_mode_ = value;
}
inline void CMsgClientLogon::set_ui_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ui_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.ui_mode)
}

// optional uint32 chat_mode = 33 [default = 0];
inline bool CMsgClientLogon::_internal_has_chat_mode() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_chat_mode() const {
  return _internal_has_chat_mode();
}
inline void CMsgClientLogon::clear_chat_mode() {
  chat_mode_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_chat_mode() const {
  return chat_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::chat_mode() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.chat_mode)
  return _internal_chat_mode();
}
inline void CMsgClientLogon::_internal_set_chat_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  chat_mode_ = value;
}
inline void CMsgClientLogon::set_chat_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chat_mode(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.chat_mode)
}

// optional bytes steam2_auth_ticket = 41;
inline bool CMsgClientLogon::_internal_has_steam2_auth_ticket() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_steam2_auth_ticket() const {
  return _internal_has_steam2_auth_ticket();
}
inline void CMsgClientLogon::clear_steam2_auth_ticket() {
  steam2_auth_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientLogon::steam2_auth_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steam2_auth_ticket)
  return _internal_steam2_auth_ticket();
}
inline void CMsgClientLogon::set_steam2_auth_ticket(const std::string& value) {
  _internal_set_steam2_auth_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steam2_auth_ticket)
}
inline std::string* CMsgClientLogon::mutable_steam2_auth_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.steam2_auth_ticket)
  return _internal_mutable_steam2_auth_ticket();
}
inline const std::string& CMsgClientLogon::_internal_steam2_auth_ticket() const {
  return steam2_auth_ticket_.Get();
}
inline void CMsgClientLogon::_internal_set_steam2_auth_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  steam2_auth_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_steam2_auth_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  steam2_auth_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.steam2_auth_ticket)
}
inline void CMsgClientLogon::set_steam2_auth_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  steam2_auth_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.steam2_auth_ticket)
}
inline void CMsgClientLogon::set_steam2_auth_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  steam2_auth_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.steam2_auth_ticket)
}
inline std::string* CMsgClientLogon::_internal_mutable_steam2_auth_ticket() {
  _has_bits_[0] |= 0x00000008u;
  return steam2_auth_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_steam2_auth_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.steam2_auth_ticket)
  if (!_internal_has_steam2_auth_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return steam2_auth_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_steam2_auth_ticket(std::string* steam2_auth_ticket) {
  if (steam2_auth_ticket != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  steam2_auth_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steam2_auth_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.steam2_auth_ticket)
}

// optional string email_address = 42;
inline bool CMsgClientLogon::_internal_has_email_address() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_email_address() const {
  return _internal_has_email_address();
}
inline void CMsgClientLogon::clear_email_address() {
  email_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientLogon::email_address() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.email_address)
  return _internal_email_address();
}
inline void CMsgClientLogon::set_email_address(const std::string& value) {
  _internal_set_email_address(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.email_address)
}
inline std::string* CMsgClientLogon::mutable_email_address() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.email_address)
  return _internal_mutable_email_address();
}
inline const std::string& CMsgClientLogon::_internal_email_address() const {
  return email_address_.Get();
}
inline void CMsgClientLogon::_internal_set_email_address(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_email_address(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  email_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.email_address)
}
inline void CMsgClientLogon::set_email_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.email_address)
}
inline void CMsgClientLogon::set_email_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.email_address)
}
inline std::string* CMsgClientLogon::_internal_mutable_email_address() {
  _has_bits_[0] |= 0x00000010u;
  return email_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_email_address() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.email_address)
  if (!_internal_has_email_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return email_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_email_address(std::string* email_address) {
  if (email_address != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  email_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.email_address)
}

// optional fixed32 rtime32_account_creation = 43;
inline bool CMsgClientLogon::_internal_has_rtime32_account_creation() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_rtime32_account_creation() const {
  return _internal_has_rtime32_account_creation();
}
inline void CMsgClientLogon::clear_rtime32_account_creation() {
  rtime32_account_creation_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_rtime32_account_creation() const {
  return rtime32_account_creation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::rtime32_account_creation() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.rtime32_account_creation)
  return _internal_rtime32_account_creation();
}
inline void CMsgClientLogon::_internal_set_rtime32_account_creation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  rtime32_account_creation_ = value;
}
inline void CMsgClientLogon::set_rtime32_account_creation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_account_creation(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.rtime32_account_creation)
}

// optional string account_name = 50;
inline bool CMsgClientLogon::_internal_has_account_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_account_name() const {
  return _internal_has_account_name();
}
inline void CMsgClientLogon::clear_account_name() {
  account_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientLogon::account_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.account_name)
  return _internal_account_name();
}
inline void CMsgClientLogon::set_account_name(const std::string& value) {
  _internal_set_account_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.account_name)
}
inline std::string* CMsgClientLogon::mutable_account_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.account_name)
  return _internal_mutable_account_name();
}
inline const std::string& CMsgClientLogon::_internal_account_name() const {
  return account_name_.Get();
}
inline void CMsgClientLogon::_internal_set_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_account_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  account_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.account_name)
}
inline void CMsgClientLogon::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.account_name)
}
inline void CMsgClientLogon::set_account_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.account_name)
}
inline std::string* CMsgClientLogon::_internal_mutable_account_name() {
  _has_bits_[0] |= 0x00000020u;
  return account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_account_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.account_name)
  if (!_internal_has_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return account_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.account_name)
}

// optional string password = 51;
inline bool CMsgClientLogon::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_password() const {
  return _internal_has_password();
}
inline void CMsgClientLogon::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgClientLogon::password() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.password)
  return _internal_password();
}
inline void CMsgClientLogon::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.password)
}
inline std::string* CMsgClientLogon::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgClientLogon::_internal_password() const {
  return password_.Get();
}
inline void CMsgClientLogon::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.password)
}
inline void CMsgClientLogon::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.password)
}
inline void CMsgClientLogon::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.password)
}
inline std::string* CMsgClientLogon::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000040u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_password() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.password)
}

// optional string game_server_token = 52;
inline bool CMsgClientLogon::_internal_has_game_server_token() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_game_server_token() const {
  return _internal_has_game_server_token();
}
inline void CMsgClientLogon::clear_game_server_token() {
  game_server_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgClientLogon::game_server_token() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.game_server_token)
  return _internal_game_server_token();
}
inline void CMsgClientLogon::set_game_server_token(const std::string& value) {
  _internal_set_game_server_token(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.game_server_token)
}
inline std::string* CMsgClientLogon::mutable_game_server_token() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.game_server_token)
  return _internal_mutable_game_server_token();
}
inline const std::string& CMsgClientLogon::_internal_game_server_token() const {
  return game_server_token_.Get();
}
inline void CMsgClientLogon::_internal_set_game_server_token(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  game_server_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_game_server_token(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  game_server_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.game_server_token)
}
inline void CMsgClientLogon::set_game_server_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  game_server_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.game_server_token)
}
inline void CMsgClientLogon::set_game_server_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  game_server_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.game_server_token)
}
inline std::string* CMsgClientLogon::_internal_mutable_game_server_token() {
  _has_bits_[0] |= 0x00000080u;
  return game_server_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_game_server_token() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.game_server_token)
  if (!_internal_has_game_server_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return game_server_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_game_server_token(std::string* game_server_token) {
  if (game_server_token != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  game_server_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_server_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.game_server_token)
}

// optional string login_key = 60;
inline bool CMsgClientLogon::_internal_has_login_key() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_login_key() const {
  return _internal_has_login_key();
}
inline void CMsgClientLogon::clear_login_key() {
  login_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CMsgClientLogon::login_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.login_key)
  return _internal_login_key();
}
inline void CMsgClientLogon::set_login_key(const std::string& value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.login_key)
}
inline std::string* CMsgClientLogon::mutable_login_key() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.login_key)
  return _internal_mutable_login_key();
}
inline const std::string& CMsgClientLogon::_internal_login_key() const {
  return login_key_.Get();
}
inline void CMsgClientLogon::_internal_set_login_key(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_login_key(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  login_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.login_key)
}
inline void CMsgClientLogon::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.login_key)
}
inline void CMsgClientLogon::set_login_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.login_key)
}
inline std::string* CMsgClientLogon::_internal_mutable_login_key() {
  _has_bits_[0] |= 0x00000100u;
  return login_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_login_key() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.login_key)
  if (!_internal_has_login_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return login_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_login_key(std::string* login_key) {
  if (login_key != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  login_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.login_key)
}

// optional bool was_converted_deprecated_msg = 70 [default = false];
inline bool CMsgClientLogon::_internal_has_was_converted_deprecated_msg() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_was_converted_deprecated_msg() const {
  return _internal_has_was_converted_deprecated_msg();
}
inline void CMsgClientLogon::clear_was_converted_deprecated_msg() {
  was_converted_deprecated_msg_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CMsgClientLogon::_internal_was_converted_deprecated_msg() const {
  return was_converted_deprecated_msg_;
}
inline bool CMsgClientLogon::was_converted_deprecated_msg() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.was_converted_deprecated_msg)
  return _internal_was_converted_deprecated_msg();
}
inline void CMsgClientLogon::_internal_set_was_converted_deprecated_msg(bool value) {
  _has_bits_[1] |= 0x00000080u;
  was_converted_deprecated_msg_ = value;
}
inline void CMsgClientLogon::set_was_converted_deprecated_msg(bool value) {
  _internal_set_was_converted_deprecated_msg(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.was_converted_deprecated_msg)
}

// optional string anon_user_target_account_name = 80;
inline bool CMsgClientLogon::_internal_has_anon_user_target_account_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_anon_user_target_account_name() const {
  return _internal_has_anon_user_target_account_name();
}
inline void CMsgClientLogon::clear_anon_user_target_account_name() {
  anon_user_target_account_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CMsgClientLogon::anon_user_target_account_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.anon_user_target_account_name)
  return _internal_anon_user_target_account_name();
}
inline void CMsgClientLogon::set_anon_user_target_account_name(const std::string& value) {
  _internal_set_anon_user_target_account_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.anon_user_target_account_name)
}
inline std::string* CMsgClientLogon::mutable_anon_user_target_account_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.anon_user_target_account_name)
  return _internal_mutable_anon_user_target_account_name();
}
inline const std::string& CMsgClientLogon::_internal_anon_user_target_account_name() const {
  return anon_user_target_account_name_.Get();
}
inline void CMsgClientLogon::_internal_set_anon_user_target_account_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  anon_user_target_account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_anon_user_target_account_name(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  anon_user_target_account_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.anon_user_target_account_name)
}
inline void CMsgClientLogon::set_anon_user_target_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  anon_user_target_account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.anon_user_target_account_name)
}
inline void CMsgClientLogon::set_anon_user_target_account_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  anon_user_target_account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.anon_user_target_account_name)
}
inline std::string* CMsgClientLogon::_internal_mutable_anon_user_target_account_name() {
  _has_bits_[0] |= 0x00000200u;
  return anon_user_target_account_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_anon_user_target_account_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.anon_user_target_account_name)
  if (!_internal_has_anon_user_target_account_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return anon_user_target_account_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_anon_user_target_account_name(std::string* anon_user_target_account_name) {
  if (anon_user_target_account_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  anon_user_target_account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), anon_user_target_account_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.anon_user_target_account_name)
}

// optional fixed64 resolved_user_steam_id = 81;
inline bool CMsgClientLogon::_internal_has_resolved_user_steam_id() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_resolved_user_steam_id() const {
  return _internal_has_resolved_user_steam_id();
}
inline void CMsgClientLogon::clear_resolved_user_steam_id() {
  resolved_user_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::_internal_resolved_user_steam_id() const {
  return resolved_user_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::resolved_user_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.resolved_user_steam_id)
  return _internal_resolved_user_steam_id();
}
inline void CMsgClientLogon::_internal_set_resolved_user_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000400u;
  resolved_user_steam_id_ = value;
}
inline void CMsgClientLogon::set_resolved_user_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_resolved_user_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.resolved_user_steam_id)
}

// optional int32 eresult_sentryfile = 82;
inline bool CMsgClientLogon::_internal_has_eresult_sentryfile() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_eresult_sentryfile() const {
  return _internal_has_eresult_sentryfile();
}
inline void CMsgClientLogon::clear_eresult_sentryfile() {
  eresult_sentryfile_ = 0;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::_internal_eresult_sentryfile() const {
  return eresult_sentryfile_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::eresult_sentryfile() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.eresult_sentryfile)
  return _internal_eresult_sentryfile();
}
inline void CMsgClientLogon::_internal_set_eresult_sentryfile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000800u;
  eresult_sentryfile_ = value;
}
inline void CMsgClientLogon::set_eresult_sentryfile(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult_sentryfile(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.eresult_sentryfile)
}

// optional bytes sha_sentryfile = 83;
inline bool CMsgClientLogon::_internal_has_sha_sentryfile() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_sha_sentryfile() const {
  return _internal_has_sha_sentryfile();
}
inline void CMsgClientLogon::clear_sha_sentryfile() {
  sha_sentryfile_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CMsgClientLogon::sha_sentryfile() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sha_sentryfile)
  return _internal_sha_sentryfile();
}
inline void CMsgClientLogon::set_sha_sentryfile(const std::string& value) {
  _internal_set_sha_sentryfile(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sha_sentryfile)
}
inline std::string* CMsgClientLogon::mutable_sha_sentryfile() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sha_sentryfile)
  return _internal_mutable_sha_sentryfile();
}
inline const std::string& CMsgClientLogon::_internal_sha_sentryfile() const {
  return sha_sentryfile_.Get();
}
inline void CMsgClientLogon::_internal_set_sha_sentryfile(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  sha_sentryfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_sha_sentryfile(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  sha_sentryfile_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sha_sentryfile)
}
inline void CMsgClientLogon::set_sha_sentryfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  sha_sentryfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sha_sentryfile)
}
inline void CMsgClientLogon::set_sha_sentryfile(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  sha_sentryfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sha_sentryfile)
}
inline std::string* CMsgClientLogon::_internal_mutable_sha_sentryfile() {
  _has_bits_[0] |= 0x00000400u;
  return sha_sentryfile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_sha_sentryfile() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sha_sentryfile)
  if (!_internal_has_sha_sentryfile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return sha_sentryfile_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_sha_sentryfile(std::string* sha_sentryfile) {
  if (sha_sentryfile != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sha_sentryfile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha_sentryfile,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sha_sentryfile)
}

// optional string auth_code = 84;
inline bool CMsgClientLogon::_internal_has_auth_code() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_auth_code() const {
  return _internal_has_auth_code();
}
inline void CMsgClientLogon::clear_auth_code() {
  auth_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& CMsgClientLogon::auth_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.auth_code)
  return _internal_auth_code();
}
inline void CMsgClientLogon::set_auth_code(const std::string& value) {
  _internal_set_auth_code(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.auth_code)
}
inline std::string* CMsgClientLogon::mutable_auth_code() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.auth_code)
  return _internal_mutable_auth_code();
}
inline const std::string& CMsgClientLogon::_internal_auth_code() const {
  return auth_code_.Get();
}
inline void CMsgClientLogon::_internal_set_auth_code(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  auth_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_auth_code(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  auth_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.auth_code)
}
inline void CMsgClientLogon::set_auth_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  auth_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.auth_code)
}
inline void CMsgClientLogon::set_auth_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  auth_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.auth_code)
}
inline std::string* CMsgClientLogon::_internal_mutable_auth_code() {
  _has_bits_[0] |= 0x00000800u;
  return auth_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_auth_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.auth_code)
  if (!_internal_has_auth_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return auth_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_auth_code(std::string* auth_code) {
  if (auth_code != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  auth_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.auth_code)
}

// optional int32 otp_type = 85;
inline bool CMsgClientLogon::_internal_has_otp_type() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_otp_type() const {
  return _internal_has_otp_type();
}
inline void CMsgClientLogon::clear_otp_type() {
  otp_type_ = 0;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::_internal_otp_type() const {
  return otp_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::otp_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_type)
  return _internal_otp_type();
}
inline void CMsgClientLogon::_internal_set_otp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00001000u;
  otp_type_ = value;
}
inline void CMsgClientLogon::set_otp_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_otp_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_type)
}

// optional uint32 otp_value = 86;
inline bool CMsgClientLogon::_internal_has_otp_value() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_otp_value() const {
  return _internal_has_otp_value();
}
inline void CMsgClientLogon::clear_otp_value() {
  otp_value_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::_internal_otp_value() const {
  return otp_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogon::otp_value() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_value)
  return _internal_otp_value();
}
inline void CMsgClientLogon::_internal_set_otp_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  otp_value_ = value;
}
inline void CMsgClientLogon::set_otp_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_otp_value(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_value)
}

// optional string otp_identifier = 87;
inline bool CMsgClientLogon::_internal_has_otp_identifier() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_otp_identifier() const {
  return _internal_has_otp_identifier();
}
inline void CMsgClientLogon::clear_otp_identifier() {
  otp_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& CMsgClientLogon::otp_identifier() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.otp_identifier)
  return _internal_otp_identifier();
}
inline void CMsgClientLogon::set_otp_identifier(const std::string& value) {
  _internal_set_otp_identifier(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.otp_identifier)
}
inline std::string* CMsgClientLogon::mutable_otp_identifier() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.otp_identifier)
  return _internal_mutable_otp_identifier();
}
inline const std::string& CMsgClientLogon::_internal_otp_identifier() const {
  return otp_identifier_.Get();
}
inline void CMsgClientLogon::_internal_set_otp_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_otp_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  otp_identifier_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.otp_identifier)
}
inline void CMsgClientLogon::set_otp_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.otp_identifier)
}
inline void CMsgClientLogon::set_otp_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.otp_identifier)
}
inline std::string* CMsgClientLogon::_internal_mutable_otp_identifier() {
  _has_bits_[0] |= 0x00001000u;
  return otp_identifier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_otp_identifier() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.otp_identifier)
  if (!_internal_has_otp_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return otp_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_otp_identifier(std::string* otp_identifier) {
  if (otp_identifier != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  otp_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), otp_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.otp_identifier)
}

// optional bool steam2_ticket_request = 88;
inline bool CMsgClientLogon::_internal_has_steam2_ticket_request() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_steam2_ticket_request() const {
  return _internal_has_steam2_ticket_request();
}
inline void CMsgClientLogon::clear_steam2_ticket_request() {
  steam2_ticket_request_ = false;
  _has_bits_[1] &= ~0x00000100u;
}
inline bool CMsgClientLogon::_internal_steam2_ticket_request() const {
  return steam2_ticket_request_;
}
inline bool CMsgClientLogon::steam2_ticket_request() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steam2_ticket_request)
  return _internal_steam2_ticket_request();
}
inline void CMsgClientLogon::_internal_set_steam2_ticket_request(bool value) {
  _has_bits_[1] |= 0x00000100u;
  steam2_ticket_request_ = value;
}
inline void CMsgClientLogon::set_steam2_ticket_request(bool value) {
  _internal_set_steam2_ticket_request(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steam2_ticket_request)
}

// optional bytes sony_psn_ticket = 90;
inline bool CMsgClientLogon::_internal_has_sony_psn_ticket() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_sony_psn_ticket() const {
  return _internal_has_sony_psn_ticket();
}
inline void CMsgClientLogon::clear_sony_psn_ticket() {
  sony_psn_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& CMsgClientLogon::sony_psn_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_ticket)
  return _internal_sony_psn_ticket();
}
inline void CMsgClientLogon::set_sony_psn_ticket(const std::string& value) {
  _internal_set_sony_psn_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_ticket)
}
inline std::string* CMsgClientLogon::mutable_sony_psn_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_ticket)
  return _internal_mutable_sony_psn_ticket();
}
inline const std::string& CMsgClientLogon::_internal_sony_psn_ticket() const {
  return sony_psn_ticket_.Get();
}
inline void CMsgClientLogon::_internal_set_sony_psn_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  sony_psn_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_sony_psn_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  sony_psn_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_ticket)
}
inline void CMsgClientLogon::set_sony_psn_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  sony_psn_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_ticket)
}
inline void CMsgClientLogon::set_sony_psn_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  sony_psn_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_ticket)
}
inline std::string* CMsgClientLogon::_internal_mutable_sony_psn_ticket() {
  _has_bits_[0] |= 0x00002000u;
  return sony_psn_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_sony_psn_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_ticket)
  if (!_internal_has_sony_psn_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return sony_psn_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_sony_psn_ticket(std::string* sony_psn_ticket) {
  if (sony_psn_ticket != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  sony_psn_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sony_psn_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_ticket)
}

// optional string sony_psn_service_id = 91;
inline bool CMsgClientLogon::_internal_has_sony_psn_service_id() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_sony_psn_service_id() const {
  return _internal_has_sony_psn_service_id();
}
inline void CMsgClientLogon::clear_sony_psn_service_id() {
  sony_psn_service_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& CMsgClientLogon::sony_psn_service_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_service_id)
  return _internal_sony_psn_service_id();
}
inline void CMsgClientLogon::set_sony_psn_service_id(const std::string& value) {
  _internal_set_sony_psn_service_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_service_id)
}
inline std::string* CMsgClientLogon::mutable_sony_psn_service_id() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_service_id)
  return _internal_mutable_sony_psn_service_id();
}
inline const std::string& CMsgClientLogon::_internal_sony_psn_service_id() const {
  return sony_psn_service_id_.Get();
}
inline void CMsgClientLogon::_internal_set_sony_psn_service_id(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  sony_psn_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_sony_psn_service_id(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  sony_psn_service_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_service_id)
}
inline void CMsgClientLogon::set_sony_psn_service_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  sony_psn_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_service_id)
}
inline void CMsgClientLogon::set_sony_psn_service_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  sony_psn_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_service_id)
}
inline std::string* CMsgClientLogon::_internal_mutable_sony_psn_service_id() {
  _has_bits_[0] |= 0x00004000u;
  return sony_psn_service_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_sony_psn_service_id() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_service_id)
  if (!_internal_has_sony_psn_service_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return sony_psn_service_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_sony_psn_service_id(std::string* sony_psn_service_id) {
  if (sony_psn_service_id != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  sony_psn_service_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sony_psn_service_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_service_id)
}

// optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
inline bool CMsgClientLogon::_internal_has_create_new_psn_linked_account_if_needed() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_create_new_psn_linked_account_if_needed() const {
  return _internal_has_create_new_psn_linked_account_if_needed();
}
inline void CMsgClientLogon::clear_create_new_psn_linked_account_if_needed() {
  create_new_psn_linked_account_if_needed_ = false;
  _has_bits_[1] &= ~0x00000200u;
}
inline bool CMsgClientLogon::_internal_create_new_psn_linked_account_if_needed() const {
  return create_new_psn_linked_account_if_needed_;
}
inline bool CMsgClientLogon::create_new_psn_linked_account_if_needed() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.create_new_psn_linked_account_if_needed)
  return _internal_create_new_psn_linked_account_if_needed();
}
inline void CMsgClientLogon::_internal_set_create_new_psn_linked_account_if_needed(bool value) {
  _has_bits_[1] |= 0x00000200u;
  create_new_psn_linked_account_if_needed_ = value;
}
inline void CMsgClientLogon::set_create_new_psn_linked_account_if_needed(bool value) {
  _internal_set_create_new_psn_linked_account_if_needed(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.create_new_psn_linked_account_if_needed)
}

// optional string sony_psn_name = 93;
inline bool CMsgClientLogon::_internal_has_sony_psn_name() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_sony_psn_name() const {
  return _internal_has_sony_psn_name();
}
inline void CMsgClientLogon::clear_sony_psn_name() {
  sony_psn_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& CMsgClientLogon::sony_psn_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.sony_psn_name)
  return _internal_sony_psn_name();
}
inline void CMsgClientLogon::set_sony_psn_name(const std::string& value) {
  _internal_set_sony_psn_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.sony_psn_name)
}
inline std::string* CMsgClientLogon::mutable_sony_psn_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.sony_psn_name)
  return _internal_mutable_sony_psn_name();
}
inline const std::string& CMsgClientLogon::_internal_sony_psn_name() const {
  return sony_psn_name_.Get();
}
inline void CMsgClientLogon::_internal_set_sony_psn_name(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  sony_psn_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_sony_psn_name(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  sony_psn_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.sony_psn_name)
}
inline void CMsgClientLogon::set_sony_psn_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  sony_psn_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.sony_psn_name)
}
inline void CMsgClientLogon::set_sony_psn_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  sony_psn_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.sony_psn_name)
}
inline std::string* CMsgClientLogon::_internal_mutable_sony_psn_name() {
  _has_bits_[0] |= 0x00008000u;
  return sony_psn_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_sony_psn_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.sony_psn_name)
  if (!_internal_has_sony_psn_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return sony_psn_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_sony_psn_name(std::string* sony_psn_name) {
  if (sony_psn_name != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  sony_psn_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sony_psn_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.sony_psn_name)
}

// optional int32 game_server_app_id = 94;
inline bool CMsgClientLogon::_internal_has_game_server_app_id() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_game_server_app_id() const {
  return _internal_has_game_server_app_id();
}
inline void CMsgClientLogon::clear_game_server_app_id() {
  game_server_app_id_ = 0;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::_internal_game_server_app_id() const {
  return game_server_app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::game_server_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.game_server_app_id)
  return _internal_game_server_app_id();
}
inline void CMsgClientLogon::_internal_set_game_server_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00004000u;
  game_server_app_id_ = value;
}
inline void CMsgClientLogon::set_game_server_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_server_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.game_server_app_id)
}

// optional bool steamguard_dont_remember_computer = 95;
inline bool CMsgClientLogon::_internal_has_steamguard_dont_remember_computer() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_steamguard_dont_remember_computer() const {
  return _internal_has_steamguard_dont_remember_computer();
}
inline void CMsgClientLogon::clear_steamguard_dont_remember_computer() {
  steamguard_dont_remember_computer_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool CMsgClientLogon::_internal_steamguard_dont_remember_computer() const {
  return steamguard_dont_remember_computer_;
}
inline bool CMsgClientLogon::steamguard_dont_remember_computer() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.steamguard_dont_remember_computer)
  return _internal_steamguard_dont_remember_computer();
}
inline void CMsgClientLogon::_internal_set_steamguard_dont_remember_computer(bool value) {
  _has_bits_[1] |= 0x00010000u;
  steamguard_dont_remember_computer_ = value;
}
inline void CMsgClientLogon::set_steamguard_dont_remember_computer(bool value) {
  _internal_set_steamguard_dont_remember_computer(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.steamguard_dont_remember_computer)
}

// optional string machine_name = 96;
inline bool CMsgClientLogon::_internal_has_machine_name() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_machine_name() const {
  return _internal_has_machine_name();
}
inline void CMsgClientLogon::clear_machine_name() {
  machine_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& CMsgClientLogon::machine_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_name)
  return _internal_machine_name();
}
inline void CMsgClientLogon::set_machine_name(const std::string& value) {
  _internal_set_machine_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_name)
}
inline std::string* CMsgClientLogon::mutable_machine_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_name)
  return _internal_mutable_machine_name();
}
inline const std::string& CMsgClientLogon::_internal_machine_name() const {
  return machine_name_.Get();
}
inline void CMsgClientLogon::_internal_set_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_machine_name(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  machine_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_name)
}
inline void CMsgClientLogon::set_machine_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_name)
}
inline void CMsgClientLogon::set_machine_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_name)
}
inline std::string* CMsgClientLogon::_internal_mutable_machine_name() {
  _has_bits_[0] |= 0x00010000u;
  return machine_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_machine_name() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_name)
  if (!_internal_has_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return machine_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_machine_name(std::string* machine_name) {
  if (machine_name != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  machine_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_name)
}

// optional string machine_name_userchosen = 97;
inline bool CMsgClientLogon::_internal_has_machine_name_userchosen() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_machine_name_userchosen() const {
  return _internal_has_machine_name_userchosen();
}
inline void CMsgClientLogon::clear_machine_name_userchosen() {
  machine_name_userchosen_.ClearToEmpty();
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& CMsgClientLogon::machine_name_userchosen() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.machine_name_userchosen)
  return _internal_machine_name_userchosen();
}
inline void CMsgClientLogon::set_machine_name_userchosen(const std::string& value) {
  _internal_set_machine_name_userchosen(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.machine_name_userchosen)
}
inline std::string* CMsgClientLogon::mutable_machine_name_userchosen() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.machine_name_userchosen)
  return _internal_mutable_machine_name_userchosen();
}
inline const std::string& CMsgClientLogon::_internal_machine_name_userchosen() const {
  return machine_name_userchosen_.Get();
}
inline void CMsgClientLogon::_internal_set_machine_name_userchosen(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_machine_name_userchosen(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  machine_name_userchosen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.machine_name_userchosen)
}
inline void CMsgClientLogon::set_machine_name_userchosen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.machine_name_userchosen)
}
inline void CMsgClientLogon::set_machine_name_userchosen(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.machine_name_userchosen)
}
inline std::string* CMsgClientLogon::_internal_mutable_machine_name_userchosen() {
  _has_bits_[0] |= 0x00020000u;
  return machine_name_userchosen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_machine_name_userchosen() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.machine_name_userchosen)
  if (!_internal_has_machine_name_userchosen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return machine_name_userchosen_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_machine_name_userchosen(std::string* machine_name_userchosen) {
  if (machine_name_userchosen != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  machine_name_userchosen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machine_name_userchosen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.machine_name_userchosen)
}

// optional string country_override = 98;
inline bool CMsgClientLogon::_internal_has_country_override() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_country_override() const {
  return _internal_has_country_override();
}
inline void CMsgClientLogon::clear_country_override() {
  country_override_.ClearToEmpty();
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& CMsgClientLogon::country_override() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.country_override)
  return _internal_country_override();
}
inline void CMsgClientLogon::set_country_override(const std::string& value) {
  _internal_set_country_override(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.country_override)
}
inline std::string* CMsgClientLogon::mutable_country_override() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.country_override)
  return _internal_mutable_country_override();
}
inline const std::string& CMsgClientLogon::_internal_country_override() const {
  return country_override_.Get();
}
inline void CMsgClientLogon::_internal_set_country_override(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  country_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_country_override(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  country_override_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.country_override)
}
inline void CMsgClientLogon::set_country_override(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  country_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.country_override)
}
inline void CMsgClientLogon::set_country_override(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  country_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.country_override)
}
inline std::string* CMsgClientLogon::_internal_mutable_country_override() {
  _has_bits_[0] |= 0x00040000u;
  return country_override_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_country_override() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.country_override)
  if (!_internal_has_country_override()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return country_override_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_country_override(std::string* country_override) {
  if (country_override != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  country_override_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_override,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.country_override)
}

// optional bool is_steam_box = 99;
inline bool CMsgClientLogon::_internal_has_is_steam_box() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_is_steam_box() const {
  return _internal_has_is_steam_box();
}
inline void CMsgClientLogon::clear_is_steam_box() {
  is_steam_box_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool CMsgClientLogon::_internal_is_steam_box() const {
  return is_steam_box_;
}
inline bool CMsgClientLogon::is_steam_box() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.is_steam_box)
  return _internal_is_steam_box();
}
inline void CMsgClientLogon::_internal_set_is_steam_box(bool value) {
  _has_bits_[1] |= 0x00020000u;
  is_steam_box_ = value;
}
inline void CMsgClientLogon::set_is_steam_box(bool value) {
  _internal_set_is_steam_box(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.is_steam_box)
}

// optional uint64 client_instance_id = 100;
inline bool CMsgClientLogon::_internal_has_client_instance_id() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_client_instance_id() const {
  return _internal_has_client_instance_id();
}
inline void CMsgClientLogon::clear_client_instance_id() {
  client_instance_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::_internal_client_instance_id() const {
  return client_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogon::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.client_instance_id)
  return _internal_client_instance_id();
}
inline void CMsgClientLogon::_internal_set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00008000u;
  client_instance_id_ = value;
}
inline void CMsgClientLogon::set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.client_instance_id)
}

// optional string two_factor_code = 101;
inline bool CMsgClientLogon::_internal_has_two_factor_code() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_two_factor_code() const {
  return _internal_has_two_factor_code();
}
inline void CMsgClientLogon::clear_two_factor_code() {
  two_factor_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& CMsgClientLogon::two_factor_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.two_factor_code)
  return _internal_two_factor_code();
}
inline void CMsgClientLogon::set_two_factor_code(const std::string& value) {
  _internal_set_two_factor_code(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.two_factor_code)
}
inline std::string* CMsgClientLogon::mutable_two_factor_code() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.two_factor_code)
  return _internal_mutable_two_factor_code();
}
inline const std::string& CMsgClientLogon::_internal_two_factor_code() const {
  return two_factor_code_.Get();
}
inline void CMsgClientLogon::_internal_set_two_factor_code(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  two_factor_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_two_factor_code(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  two_factor_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.two_factor_code)
}
inline void CMsgClientLogon::set_two_factor_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  two_factor_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.two_factor_code)
}
inline void CMsgClientLogon::set_two_factor_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  two_factor_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.two_factor_code)
}
inline std::string* CMsgClientLogon::_internal_mutable_two_factor_code() {
  _has_bits_[0] |= 0x00080000u;
  return two_factor_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_two_factor_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.two_factor_code)
  if (!_internal_has_two_factor_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return two_factor_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_two_factor_code(std::string* two_factor_code) {
  if (two_factor_code != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  two_factor_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), two_factor_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.two_factor_code)
}

// optional bool supports_rate_limit_response = 102;
inline bool CMsgClientLogon::_internal_has_supports_rate_limit_response() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_supports_rate_limit_response() const {
  return _internal_has_supports_rate_limit_response();
}
inline void CMsgClientLogon::clear_supports_rate_limit_response() {
  supports_rate_limit_response_ = false;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool CMsgClientLogon::_internal_supports_rate_limit_response() const {
  return supports_rate_limit_response_;
}
inline bool CMsgClientLogon::supports_rate_limit_response() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.supports_rate_limit_response)
  return _internal_supports_rate_limit_response();
}
inline void CMsgClientLogon::_internal_set_supports_rate_limit_response(bool value) {
  _has_bits_[1] |= 0x00040000u;
  supports_rate_limit_response_ = value;
}
inline void CMsgClientLogon::set_supports_rate_limit_response(bool value) {
  _internal_set_supports_rate_limit_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.supports_rate_limit_response)
}

// optional string web_logon_nonce = 103;
inline bool CMsgClientLogon::_internal_has_web_logon_nonce() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_web_logon_nonce() const {
  return _internal_has_web_logon_nonce();
}
inline void CMsgClientLogon::clear_web_logon_nonce() {
  web_logon_nonce_.ClearToEmpty();
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& CMsgClientLogon::web_logon_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.web_logon_nonce)
  return _internal_web_logon_nonce();
}
inline void CMsgClientLogon::set_web_logon_nonce(const std::string& value) {
  _internal_set_web_logon_nonce(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.web_logon_nonce)
}
inline std::string* CMsgClientLogon::mutable_web_logon_nonce() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.web_logon_nonce)
  return _internal_mutable_web_logon_nonce();
}
inline const std::string& CMsgClientLogon::_internal_web_logon_nonce() const {
  return web_logon_nonce_.Get();
}
inline void CMsgClientLogon::_internal_set_web_logon_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  web_logon_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogon::set_web_logon_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  web_logon_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogon.web_logon_nonce)
}
inline void CMsgClientLogon::set_web_logon_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  web_logon_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogon.web_logon_nonce)
}
inline void CMsgClientLogon::set_web_logon_nonce(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  web_logon_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogon.web_logon_nonce)
}
inline std::string* CMsgClientLogon::_internal_mutable_web_logon_nonce() {
  _has_bits_[0] |= 0x00100000u;
  return web_logon_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogon::release_web_logon_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.web_logon_nonce)
  if (!_internal_has_web_logon_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return web_logon_nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogon::set_allocated_web_logon_nonce(std::string* web_logon_nonce) {
  if (web_logon_nonce != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  web_logon_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), web_logon_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.web_logon_nonce)
}

// optional int32 priority_reason = 104;
inline bool CMsgClientLogon::_internal_has_priority_reason() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientLogon::has_priority_reason() const {
  return _internal_has_priority_reason();
}
inline void CMsgClientLogon::clear_priority_reason() {
  priority_reason_ = 0;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::_internal_priority_reason() const {
  return priority_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogon::priority_reason() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.priority_reason)
  return _internal_priority_reason();
}
inline void CMsgClientLogon::_internal_set_priority_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00080000u;
  priority_reason_ = value;
}
inline void CMsgClientLogon::set_priority_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority_reason(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogon.priority_reason)
}

// optional .CMsgClientSecret embedded_client_secret = 105;
inline bool CMsgClientLogon::_internal_has_embedded_client_secret() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || embedded_client_secret_ != nullptr);
  return value;
}
inline bool CMsgClientLogon::has_embedded_client_secret() const {
  return _internal_has_embedded_client_secret();
}
inline void CMsgClientLogon::clear_embedded_client_secret() {
  if (embedded_client_secret_ != nullptr) embedded_client_secret_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::CMsgClientSecret& CMsgClientLogon::_internal_embedded_client_secret() const {
  const ::CMsgClientSecret* p = embedded_client_secret_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientSecret&>(
      ::_CMsgClientSecret_default_instance_);
}
inline const ::CMsgClientSecret& CMsgClientLogon::embedded_client_secret() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogon.embedded_client_secret)
  return _internal_embedded_client_secret();
}
inline void CMsgClientLogon::unsafe_arena_set_allocated_embedded_client_secret(
    ::CMsgClientSecret* embedded_client_secret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embedded_client_secret_);
  }
  embedded_client_secret_ = embedded_client_secret;
  if (embedded_client_secret) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientLogon.embedded_client_secret)
}
inline ::CMsgClientSecret* CMsgClientLogon::release_embedded_client_secret() {
  _has_bits_[0] &= ~0x00800000u;
  ::CMsgClientSecret* temp = embedded_client_secret_;
  embedded_client_secret_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgClientSecret* CMsgClientLogon::unsafe_arena_release_embedded_client_secret() {
  // @@protoc_insertion_point(field_release:CMsgClientLogon.embedded_client_secret)
  _has_bits_[0] &= ~0x00800000u;
  ::CMsgClientSecret* temp = embedded_client_secret_;
  embedded_client_secret_ = nullptr;
  return temp;
}
inline ::CMsgClientSecret* CMsgClientLogon::_internal_mutable_embedded_client_secret() {
  _has_bits_[0] |= 0x00800000u;
  if (embedded_client_secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientSecret>(GetArena());
    embedded_client_secret_ = p;
  }
  return embedded_client_secret_;
}
inline ::CMsgClientSecret* CMsgClientLogon::mutable_embedded_client_secret() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogon.embedded_client_secret)
  return _internal_mutable_embedded_client_secret();
}
inline void CMsgClientLogon::set_allocated_embedded_client_secret(::CMsgClientSecret* embedded_client_secret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete embedded_client_secret_;
  }
  if (embedded_client_secret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(embedded_client_secret);
    if (message_arena != submessage_arena) {
      embedded_client_secret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embedded_client_secret, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  embedded_client_secret_ = embedded_client_secret;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogon.embedded_client_secret)
}

// -------------------------------------------------------------------

// CMsgClientLogonResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLogonResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientLogonResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientLogonResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  eresult_ = value;
}
inline void CMsgClientLogonResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.eresult)
}

// optional int32 out_of_game_heartbeat_seconds = 2;
inline bool CMsgClientLogonResponse::_internal_has_out_of_game_heartbeat_seconds() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_out_of_game_heartbeat_seconds() const {
  return _internal_has_out_of_game_heartbeat_seconds();
}
inline void CMsgClientLogonResponse::clear_out_of_game_heartbeat_seconds() {
  out_of_game_heartbeat_seconds_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_out_of_game_heartbeat_seconds() const {
  return out_of_game_heartbeat_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::out_of_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
  return _internal_out_of_game_heartbeat_seconds();
}
inline void CMsgClientLogonResponse::_internal_set_out_of_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  out_of_game_heartbeat_seconds_ = value;
}
inline void CMsgClientLogonResponse::set_out_of_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_of_game_heartbeat_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.out_of_game_heartbeat_seconds)
}

// optional int32 in_game_heartbeat_seconds = 3;
inline bool CMsgClientLogonResponse::_internal_has_in_game_heartbeat_seconds() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_in_game_heartbeat_seconds() const {
  return _internal_has_in_game_heartbeat_seconds();
}
inline void CMsgClientLogonResponse::clear_in_game_heartbeat_seconds() {
  in_game_heartbeat_seconds_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_in_game_heartbeat_seconds() const {
  return in_game_heartbeat_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::in_game_heartbeat_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.in_game_heartbeat_seconds)
  return _internal_in_game_heartbeat_seconds();
}
inline void CMsgClientLogonResponse::_internal_set_in_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  in_game_heartbeat_seconds_ = value;
}
inline void CMsgClientLogonResponse::set_in_game_heartbeat_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_in_game_heartbeat_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.in_game_heartbeat_seconds)
}

// optional uint32 deprecated_public_ip = 4;
inline bool CMsgClientLogonResponse::_internal_has_deprecated_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_deprecated_public_ip() const {
  return _internal_has_deprecated_public_ip();
}
inline void CMsgClientLogonResponse::clear_deprecated_public_ip() {
  deprecated_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::_internal_deprecated_public_ip() const {
  return deprecated_public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::deprecated_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.deprecated_public_ip)
  return _internal_deprecated_public_ip();
}
inline void CMsgClientLogonResponse::_internal_set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  deprecated_public_ip_ = value;
}
inline void CMsgClientLogonResponse::set_deprecated_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deprecated_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.deprecated_public_ip)
}

// optional fixed32 rtime32_server_time = 5;
inline bool CMsgClientLogonResponse::_internal_has_rtime32_server_time() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_rtime32_server_time() const {
  return _internal_has_rtime32_server_time();
}
inline void CMsgClientLogonResponse::clear_rtime32_server_time() {
  rtime32_server_time_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::_internal_rtime32_server_time() const {
  return rtime32_server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::rtime32_server_time() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.rtime32_server_time)
  return _internal_rtime32_server_time();
}
inline void CMsgClientLogonResponse::_internal_set_rtime32_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  rtime32_server_time_ = value;
}
inline void CMsgClientLogonResponse::set_rtime32_server_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtime32_server_time(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.rtime32_server_time)
}

// optional uint32 account_flags = 6;
inline bool CMsgClientLogonResponse::_internal_has_account_flags() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_account_flags() const {
  return _internal_has_account_flags();
}
inline void CMsgClientLogonResponse::clear_account_flags() {
  account_flags_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::_internal_account_flags() const {
  return account_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.account_flags)
  return _internal_account_flags();
}
inline void CMsgClientLogonResponse::_internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  account_flags_ = value;
}
inline void CMsgClientLogonResponse::set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.account_flags)
}

// optional uint32 cell_id = 7;
inline bool CMsgClientLogonResponse::_internal_has_cell_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_cell_id() const {
  return _internal_has_cell_id();
}
inline void CMsgClientLogonResponse::clear_cell_id() {
  cell_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::cell_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.cell_id)
  return _internal_cell_id();
}
inline void CMsgClientLogonResponse::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  cell_id_ = value;
}
inline void CMsgClientLogonResponse::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.cell_id)
}

// optional string email_domain = 8;
inline bool CMsgClientLogonResponse::_internal_has_email_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_email_domain() const {
  return _internal_has_email_domain();
}
inline void CMsgClientLogonResponse::clear_email_domain() {
  email_domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientLogonResponse::email_domain() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.email_domain)
  return _internal_email_domain();
}
inline void CMsgClientLogonResponse::set_email_domain(const std::string& value) {
  _internal_set_email_domain(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.email_domain)
}
inline std::string* CMsgClientLogonResponse::mutable_email_domain() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.email_domain)
  return _internal_mutable_email_domain();
}
inline const std::string& CMsgClientLogonResponse::_internal_email_domain() const {
  return email_domain_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_email_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_email_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_domain_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.email_domain)
}
inline void CMsgClientLogonResponse::set_email_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.email_domain)
}
inline void CMsgClientLogonResponse::set_email_domain(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.email_domain)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_email_domain() {
  _has_bits_[0] |= 0x00000001u;
  return email_domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_email_domain() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.email_domain)
  if (!_internal_has_email_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_domain_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_email_domain(std::string* email_domain) {
  if (email_domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email_domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.email_domain)
}

// optional bytes steam2_ticket = 9;
inline bool CMsgClientLogonResponse::_internal_has_steam2_ticket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_steam2_ticket() const {
  return _internal_has_steam2_ticket();
}
inline void CMsgClientLogonResponse::clear_steam2_ticket() {
  steam2_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientLogonResponse::steam2_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.steam2_ticket)
  return _internal_steam2_ticket();
}
inline void CMsgClientLogonResponse::set_steam2_ticket(const std::string& value) {
  _internal_set_steam2_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.steam2_ticket)
}
inline std::string* CMsgClientLogonResponse::mutable_steam2_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.steam2_ticket)
  return _internal_mutable_steam2_ticket();
}
inline const std::string& CMsgClientLogonResponse::_internal_steam2_ticket() const {
  return steam2_ticket_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_steam2_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  steam2_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_steam2_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  steam2_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.steam2_ticket)
}
inline void CMsgClientLogonResponse::set_steam2_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  steam2_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.steam2_ticket)
}
inline void CMsgClientLogonResponse::set_steam2_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  steam2_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.steam2_ticket)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_steam2_ticket() {
  _has_bits_[0] |= 0x00000002u;
  return steam2_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_steam2_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.steam2_ticket)
  if (!_internal_has_steam2_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return steam2_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_steam2_ticket(std::string* steam2_ticket) {
  if (steam2_ticket != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  steam2_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steam2_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.steam2_ticket)
}

// optional int32 eresult_extended = 10;
inline bool CMsgClientLogonResponse::_internal_has_eresult_extended() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_eresult_extended() const {
  return _internal_has_eresult_extended();
}
inline void CMsgClientLogonResponse::clear_eresult_extended() {
  eresult_extended_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_eresult_extended() const {
  return eresult_extended_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::eresult_extended() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.eresult_extended)
  return _internal_eresult_extended();
}
inline void CMsgClientLogonResponse::_internal_set_eresult_extended(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  eresult_extended_ = value;
}
inline void CMsgClientLogonResponse::set_eresult_extended(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult_extended(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.eresult_extended)
}

// optional string webapi_authenticate_user_nonce = 11;
inline bool CMsgClientLogonResponse::_internal_has_webapi_authenticate_user_nonce() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_webapi_authenticate_user_nonce() const {
  return _internal_has_webapi_authenticate_user_nonce();
}
inline void CMsgClientLogonResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientLogonResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return _internal_webapi_authenticate_user_nonce();
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const std::string& value) {
  _internal_set_webapi_authenticate_user_nonce(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline std::string* CMsgClientLogonResponse::mutable_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  return _internal_mutable_webapi_authenticate_user_nonce();
}
inline const std::string& CMsgClientLogonResponse::_internal_webapi_authenticate_user_nonce() const {
  return webapi_authenticate_user_nonce_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_webapi_authenticate_user_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  webapi_authenticate_user_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientLogonResponse::set_webapi_authenticate_user_nonce(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000004u;
  return webapi_authenticate_user_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
  if (!_internal_has_webapi_authenticate_user_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return webapi_authenticate_user_nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_webapi_authenticate_user_nonce(std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  webapi_authenticate_user_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.webapi_authenticate_user_nonce)
}

// optional uint32 cell_id_ping_threshold = 12;
inline bool CMsgClientLogonResponse::_internal_has_cell_id_ping_threshold() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_cell_id_ping_threshold() const {
  return _internal_has_cell_id_ping_threshold();
}
inline void CMsgClientLogonResponse::clear_cell_id_ping_threshold() {
  cell_id_ping_threshold_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::_internal_cell_id_ping_threshold() const {
  return cell_id_ping_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientLogonResponse::cell_id_ping_threshold() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.cell_id_ping_threshold)
  return _internal_cell_id_ping_threshold();
}
inline void CMsgClientLogonResponse::_internal_set_cell_id_ping_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  cell_id_ping_threshold_ = value;
}
inline void CMsgClientLogonResponse::set_cell_id_ping_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id_ping_threshold(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.cell_id_ping_threshold)
}

// optional bool use_pics = 13;
inline bool CMsgClientLogonResponse::_internal_has_use_pics() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_use_pics() const {
  return _internal_has_use_pics();
}
inline void CMsgClientLogonResponse::clear_use_pics() {
  use_pics_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CMsgClientLogonResponse::_internal_use_pics() const {
  return use_pics_;
}
inline bool CMsgClientLogonResponse::use_pics() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.use_pics)
  return _internal_use_pics();
}
inline void CMsgClientLogonResponse::_internal_set_use_pics(bool value) {
  _has_bits_[0] |= 0x00020000u;
  use_pics_ = value;
}
inline void CMsgClientLogonResponse::set_use_pics(bool value) {
  _internal_set_use_pics(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.use_pics)
}

// optional string vanity_url = 14;
inline bool CMsgClientLogonResponse::_internal_has_vanity_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_vanity_url() const {
  return _internal_has_vanity_url();
}
inline void CMsgClientLogonResponse::clear_vanity_url() {
  vanity_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientLogonResponse::vanity_url() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.vanity_url)
  return _internal_vanity_url();
}
inline void CMsgClientLogonResponse::set_vanity_url(const std::string& value) {
  _internal_set_vanity_url(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.vanity_url)
}
inline std::string* CMsgClientLogonResponse::mutable_vanity_url() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.vanity_url)
  return _internal_mutable_vanity_url();
}
inline const std::string& CMsgClientLogonResponse::_internal_vanity_url() const {
  return vanity_url_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_vanity_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  vanity_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_vanity_url(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  vanity_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.vanity_url)
}
inline void CMsgClientLogonResponse::set_vanity_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  vanity_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.vanity_url)
}
inline void CMsgClientLogonResponse::set_vanity_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  vanity_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.vanity_url)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_vanity_url() {
  _has_bits_[0] |= 0x00000008u;
  return vanity_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_vanity_url() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.vanity_url)
  if (!_internal_has_vanity_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return vanity_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_vanity_url(std::string* vanity_url) {
  if (vanity_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vanity_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vanity_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.vanity_url)
}

// optional .CMsgIPAddress public_ip = 15;
inline bool CMsgClientLogonResponse::_internal_has_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || public_ip_ != nullptr);
  return value;
}
inline bool CMsgClientLogonResponse::has_public_ip() const {
  return _internal_has_public_ip();
}
inline const ::CMsgIPAddress& CMsgClientLogonResponse::_internal_public_ip() const {
  const ::CMsgIPAddress* p = public_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPAddress&>(
      ::_CMsgIPAddress_default_instance_);
}
inline const ::CMsgIPAddress& CMsgClientLogonResponse::public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.public_ip)
  return _internal_public_ip();
}
inline void CMsgClientLogonResponse::unsafe_arena_set_allocated_public_ip(
    ::CMsgIPAddress* public_ip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  public_ip_ = public_ip;
  if (public_ip) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientLogonResponse.public_ip)
}
inline ::CMsgIPAddress* CMsgClientLogonResponse::release_public_ip() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogonResponse::unsafe_arena_release_public_ip() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.public_ip)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgIPAddress* temp = public_ip_;
  public_ip_ = nullptr;
  return temp;
}
inline ::CMsgIPAddress* CMsgClientLogonResponse::_internal_mutable_public_ip() {
  _has_bits_[0] |= 0x00000080u;
  if (public_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPAddress>(GetArena());
    public_ip_ = p;
  }
  return public_ip_;
}
inline ::CMsgIPAddress* CMsgClientLogonResponse::mutable_public_ip() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.public_ip)
  return _internal_mutable_public_ip();
}
inline void CMsgClientLogonResponse::set_allocated_public_ip(::CMsgIPAddress* public_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip_);
  }
  if (public_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_ip)->GetArena();
    if (message_arena != submessage_arena) {
      public_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_ip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  public_ip_ = public_ip;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.public_ip)
}

// optional fixed64 client_supplied_steamid = 20;
inline bool CMsgClientLogonResponse::_internal_has_client_supplied_steamid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_client_supplied_steamid() const {
  return _internal_has_client_supplied_steamid();
}
inline void CMsgClientLogonResponse::clear_client_supplied_steamid() {
  client_supplied_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogonResponse::_internal_client_supplied_steamid() const {
  return client_supplied_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogonResponse::client_supplied_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.client_supplied_steamid)
  return _internal_client_supplied_steamid();
}
inline void CMsgClientLogonResponse::_internal_set_client_supplied_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  client_supplied_steamid_ = value;
}
inline void CMsgClientLogonResponse::set_client_supplied_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_supplied_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.client_supplied_steamid)
}

// optional string ip_country_code = 21;
inline bool CMsgClientLogonResponse::_internal_has_ip_country_code() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_ip_country_code() const {
  return _internal_has_ip_country_code();
}
inline void CMsgClientLogonResponse::clear_ip_country_code() {
  ip_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgClientLogonResponse::ip_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.ip_country_code)
  return _internal_ip_country_code();
}
inline void CMsgClientLogonResponse::set_ip_country_code(const std::string& value) {
  _internal_set_ip_country_code(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.ip_country_code)
}
inline std::string* CMsgClientLogonResponse::mutable_ip_country_code() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.ip_country_code)
  return _internal_mutable_ip_country_code();
}
inline const std::string& CMsgClientLogonResponse::_internal_ip_country_code() const {
  return ip_country_code_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_ip_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ip_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_ip_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  ip_country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.ip_country_code)
}
inline void CMsgClientLogonResponse::set_ip_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  ip_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.ip_country_code)
}
inline void CMsgClientLogonResponse::set_ip_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  ip_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.ip_country_code)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_ip_country_code() {
  _has_bits_[0] |= 0x00000010u;
  return ip_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_ip_country_code() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.ip_country_code)
  if (!_internal_has_ip_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ip_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_ip_country_code(std::string* ip_country_code) {
  if (ip_country_code != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ip_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.ip_country_code)
}

// optional bytes parental_settings = 22;
inline bool CMsgClientLogonResponse::_internal_has_parental_settings() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_parental_settings() const {
  return _internal_has_parental_settings();
}
inline void CMsgClientLogonResponse::clear_parental_settings() {
  parental_settings_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgClientLogonResponse::parental_settings() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.parental_settings)
  return _internal_parental_settings();
}
inline void CMsgClientLogonResponse::set_parental_settings(const std::string& value) {
  _internal_set_parental_settings(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.parental_settings)
}
inline std::string* CMsgClientLogonResponse::mutable_parental_settings() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.parental_settings)
  return _internal_mutable_parental_settings();
}
inline const std::string& CMsgClientLogonResponse::_internal_parental_settings() const {
  return parental_settings_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_parental_settings(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  parental_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_parental_settings(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  parental_settings_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.parental_settings)
}
inline void CMsgClientLogonResponse::set_parental_settings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  parental_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.parental_settings)
}
inline void CMsgClientLogonResponse::set_parental_settings(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  parental_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.parental_settings)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_parental_settings() {
  _has_bits_[0] |= 0x00000020u;
  return parental_settings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_parental_settings() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.parental_settings)
  if (!_internal_has_parental_settings()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return parental_settings_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_parental_settings(std::string* parental_settings) {
  if (parental_settings != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  parental_settings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parental_settings,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.parental_settings)
}

// optional bytes parental_setting_signature = 23;
inline bool CMsgClientLogonResponse::_internal_has_parental_setting_signature() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_parental_setting_signature() const {
  return _internal_has_parental_setting_signature();
}
inline void CMsgClientLogonResponse::clear_parental_setting_signature() {
  parental_setting_signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgClientLogonResponse::parental_setting_signature() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.parental_setting_signature)
  return _internal_parental_setting_signature();
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(const std::string& value) {
  _internal_set_parental_setting_signature(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.parental_setting_signature)
}
inline std::string* CMsgClientLogonResponse::mutable_parental_setting_signature() {
  // @@protoc_insertion_point(field_mutable:CMsgClientLogonResponse.parental_setting_signature)
  return _internal_mutable_parental_setting_signature();
}
inline const std::string& CMsgClientLogonResponse::_internal_parental_setting_signature() const {
  return parental_setting_signature_.Get();
}
inline void CMsgClientLogonResponse::_internal_set_parental_setting_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  parental_setting_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  parental_setting_signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientLogonResponse.parental_setting_signature)
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  parental_setting_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientLogonResponse.parental_setting_signature)
}
inline void CMsgClientLogonResponse::set_parental_setting_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  parental_setting_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientLogonResponse.parental_setting_signature)
}
inline std::string* CMsgClientLogonResponse::_internal_mutable_parental_setting_signature() {
  _has_bits_[0] |= 0x00000040u;
  return parental_setting_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientLogonResponse::release_parental_setting_signature() {
  // @@protoc_insertion_point(field_release:CMsgClientLogonResponse.parental_setting_signature)
  if (!_internal_has_parental_setting_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return parental_setting_signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientLogonResponse::set_allocated_parental_setting_signature(std::string* parental_setting_signature) {
  if (parental_setting_signature != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  parental_setting_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parental_setting_signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientLogonResponse.parental_setting_signature)
}

// optional int32 count_loginfailures_to_migrate = 24;
inline bool CMsgClientLogonResponse::_internal_has_count_loginfailures_to_migrate() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_count_loginfailures_to_migrate() const {
  return _internal_has_count_loginfailures_to_migrate();
}
inline void CMsgClientLogonResponse::clear_count_loginfailures_to_migrate() {
  count_loginfailures_to_migrate_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_count_loginfailures_to_migrate() const {
  return count_loginfailures_to_migrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::count_loginfailures_to_migrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.count_loginfailures_to_migrate)
  return _internal_count_loginfailures_to_migrate();
}
inline void CMsgClientLogonResponse::_internal_set_count_loginfailures_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  count_loginfailures_to_migrate_ = value;
}
inline void CMsgClientLogonResponse::set_count_loginfailures_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_loginfailures_to_migrate(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.count_loginfailures_to_migrate)
}

// optional int32 count_disconnects_to_migrate = 25;
inline bool CMsgClientLogonResponse::_internal_has_count_disconnects_to_migrate() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_count_disconnects_to_migrate() const {
  return _internal_has_count_disconnects_to_migrate();
}
inline void CMsgClientLogonResponse::clear_count_disconnects_to_migrate() {
  count_disconnects_to_migrate_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_count_disconnects_to_migrate() const {
  return count_disconnects_to_migrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::count_disconnects_to_migrate() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.count_disconnects_to_migrate)
  return _internal_count_disconnects_to_migrate();
}
inline void CMsgClientLogonResponse::_internal_set_count_disconnects_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  count_disconnects_to_migrate_ = value;
}
inline void CMsgClientLogonResponse::set_count_disconnects_to_migrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_disconnects_to_migrate(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.count_disconnects_to_migrate)
}

// optional int32 ogs_data_report_time_window = 26;
inline bool CMsgClientLogonResponse::_internal_has_ogs_data_report_time_window() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_ogs_data_report_time_window() const {
  return _internal_has_ogs_data_report_time_window();
}
inline void CMsgClientLogonResponse::clear_ogs_data_report_time_window() {
  ogs_data_report_time_window_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::_internal_ogs_data_report_time_window() const {
  return ogs_data_report_time_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLogonResponse::ogs_data_report_time_window() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.ogs_data_report_time_window)
  return _internal_ogs_data_report_time_window();
}
inline void CMsgClientLogonResponse::_internal_set_ogs_data_report_time_window(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  ogs_data_report_time_window_ = value;
}
inline void CMsgClientLogonResponse::set_ogs_data_report_time_window(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ogs_data_report_time_window(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.ogs_data_report_time_window)
}

// optional uint64 client_instance_id = 27;
inline bool CMsgClientLogonResponse::_internal_has_client_instance_id() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_client_instance_id() const {
  return _internal_has_client_instance_id();
}
inline void CMsgClientLogonResponse::clear_client_instance_id() {
  client_instance_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogonResponse::_internal_client_instance_id() const {
  return client_instance_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientLogonResponse::client_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.client_instance_id)
  return _internal_client_instance_id();
}
inline void CMsgClientLogonResponse::_internal_set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  client_instance_id_ = value;
}
inline void CMsgClientLogonResponse::set_client_instance_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.client_instance_id)
}

// optional bool force_client_update_check = 28;
inline bool CMsgClientLogonResponse::_internal_has_force_client_update_check() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgClientLogonResponse::has_force_client_update_check() const {
  return _internal_has_force_client_update_check();
}
inline void CMsgClientLogonResponse::clear_force_client_update_check() {
  force_client_update_check_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CMsgClientLogonResponse::_internal_force_client_update_check() const {
  return force_client_update_check_;
}
inline bool CMsgClientLogonResponse::force_client_update_check() const {
  // @@protoc_insertion_point(field_get:CMsgClientLogonResponse.force_client_update_check)
  return _internal_force_client_update_check();
}
inline void CMsgClientLogonResponse::_internal_set_force_client_update_check(bool value) {
  _has_bits_[0] |= 0x00040000u;
  force_client_update_check_ = value;
}
inline void CMsgClientLogonResponse::set_force_client_update_check(bool value) {
  _internal_set_force_client_update_check(value);
  // @@protoc_insertion_point(field_set:CMsgClientLogonResponse.force_client_update_check)
}

// -------------------------------------------------------------------

// CMsgClientRequestWebAPIAuthenticateUserNonce

// optional int32 token_type = 1 [default = -1];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonce::_internal_has_token_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRequestWebAPIAuthenticateUserNonce::has_token_type() const {
  return _internal_has_token_type();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::clear_token_type() {
  token_type_ = -1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonce::_internal_token_type() const {
  return token_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonce::token_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
  return _internal_token_type();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::_internal_set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  token_type_ = value;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonce::set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_token_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonce.token_type)
}

// -------------------------------------------------------------------

// CMsgClientRequestWebAPIAuthenticateUserNonceResponse

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
  return _internal_eresult();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eresult_ = value;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.eresult)
}

// optional string webapi_authenticate_user_nonce = 11;
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_has_webapi_authenticate_user_nonce() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_webapi_authenticate_user_nonce() const {
  return _internal_has_webapi_authenticate_user_nonce();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_webapi_authenticate_user_nonce() {
  webapi_authenticate_user_nonce_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::webapi_authenticate_user_nonce() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return _internal_webapi_authenticate_user_nonce();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const std::string& value) {
  _internal_set_webapi_authenticate_user_nonce(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::mutable_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_mutable:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  return _internal_mutable_webapi_authenticate_user_nonce();
}
inline const std::string& CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_webapi_authenticate_user_nonce() const {
  return webapi_authenticate_user_nonce_.Get();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_set_webapi_authenticate_user_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  webapi_authenticate_user_nonce_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_webapi_authenticate_user_nonce(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}
inline std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_mutable_webapi_authenticate_user_nonce() {
  _has_bits_[0] |= 0x00000001u;
  return webapi_authenticate_user_nonce_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::release_webapi_authenticate_user_nonce() {
  // @@protoc_insertion_point(field_release:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
  if (!_internal_has_webapi_authenticate_user_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return webapi_authenticate_user_nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_allocated_webapi_authenticate_user_nonce(std::string* webapi_authenticate_user_nonce) {
  if (webapi_authenticate_user_nonce != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  webapi_authenticate_user_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), webapi_authenticate_user_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce)
}

// optional int32 token_type = 3 [default = -1];
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_has_token_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::has_token_type() const {
  return _internal_has_token_type();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::clear_token_type() {
  token_type_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_token_type() const {
  return token_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientRequestWebAPIAuthenticateUserNonceResponse::token_type() const {
  // @@protoc_insertion_point(field_get:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
  return _internal_token_type();
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_internal_set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  token_type_ = value;
}
inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::set_token_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_token_type(value);
  // @@protoc_insertion_point(field_set:CMsgClientRequestWebAPIAuthenticateUserNonceResponse.token_type)
}

// -------------------------------------------------------------------

// CMsgClientLogOff

// -------------------------------------------------------------------

// CMsgClientLoggedOff

// optional int32 eresult = 1 [default = 2];
inline bool CMsgClientLoggedOff::_internal_has_eresult() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientLoggedOff::has_eresult() const {
  return _internal_has_eresult();
}
inline void CMsgClientLoggedOff::clear_eresult() {
  eresult_ = 2;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLoggedOff::_internal_eresult() const {
  return eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientLoggedOff::eresult() const {
  // @@protoc_insertion_point(field_get:CMsgClientLoggedOff.eresult)
  return _internal_eresult();
}
inline void CMsgClientLoggedOff::_internal_set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eresult_ = value;
}
inline void CMsgClientLoggedOff::set_eresult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgClientLoggedOff.eresult)
}

// -------------------------------------------------------------------

// CMsgClientNewLoginKey

// optional uint32 unique_id = 1;
inline bool CMsgClientNewLoginKey::_internal_has_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientNewLoginKey::has_unique_id() const {
  return _internal_has_unique_id();
}
inline void CMsgClientNewLoginKey::clear_unique_id() {
  unique_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientNewLoginKey::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientNewLoginKey::unique_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKey.unique_id)
  return _internal_unique_id();
}
inline void CMsgClientNewLoginKey::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  unique_id_ = value;
}
inline void CMsgClientNewLoginKey::set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKey.unique_id)
}

// optional string login_key = 2;
inline bool CMsgClientNewLoginKey::_internal_has_login_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNewLoginKey::has_login_key() const {
  return _internal_has_login_key();
}
inline void CMsgClientNewLoginKey::clear_login_key() {
  login_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientNewLoginKey::login_key() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKey.login_key)
  return _internal_login_key();
}
inline void CMsgClientNewLoginKey::set_login_key(const std::string& value) {
  _internal_set_login_key(value);
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKey.login_key)
}
inline std::string* CMsgClientNewLoginKey::mutable_login_key() {
  // @@protoc_insertion_point(field_mutable:CMsgClientNewLoginKey.login_key)
  return _internal_mutable_login_key();
}
inline const std::string& CMsgClientNewLoginKey::_internal_login_key() const {
  return login_key_.Get();
}
inline void CMsgClientNewLoginKey::_internal_set_login_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientNewLoginKey::set_login_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientNewLoginKey.login_key)
}
inline void CMsgClientNewLoginKey::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientNewLoginKey.login_key)
}
inline void CMsgClientNewLoginKey::set_login_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientNewLoginKey.login_key)
}
inline std::string* CMsgClientNewLoginKey::_internal_mutable_login_key() {
  _has_bits_[0] |= 0x00000001u;
  return login_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientNewLoginKey::release_login_key() {
  // @@protoc_insertion_point(field_release:CMsgClientNewLoginKey.login_key)
  if (!_internal_has_login_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientNewLoginKey::set_allocated_login_key(std::string* login_key) {
  if (login_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientNewLoginKey.login_key)
}

// -------------------------------------------------------------------

// CMsgClientNewLoginKeyAccepted

// optional uint32 unique_id = 1;
inline bool CMsgClientNewLoginKeyAccepted::_internal_has_unique_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientNewLoginKeyAccepted::has_unique_id() const {
  return _internal_has_unique_id();
}
inline void CMsgClientNewLoginKeyAccepted::clear_unique_id() {
  unique_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientNewLoginKeyAccepted::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientNewLoginKeyAccepted::unique_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientNewLoginKeyAccepted.unique_id)
  return _internal_unique_id();
}
inline void CMsgClientNewLoginKeyAccepted::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  unique_id_ = value;
}
inline void CMsgClientNewLoginKeyAccepted::set_unique_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientNewLoginKeyAccepted.unique_id)
}

// -------------------------------------------------------------------

// CMsgClientAccountInfo

// optional string persona_name = 1;
inline bool CMsgClientAccountInfo::_internal_has_persona_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgClientAccountInfo::clear_persona_name() {
  persona_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientAccountInfo::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.persona_name)
  return _internal_persona_name();
}
inline void CMsgClientAccountInfo::set_persona_name(const std::string& value) {
  _internal_set_persona_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.persona_name)
}
inline std::string* CMsgClientAccountInfo::mutable_persona_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.persona_name)
  return _internal_mutable_persona_name();
}
inline const std::string& CMsgClientAccountInfo::_internal_persona_name() const {
  return persona_name_.Get();
}
inline void CMsgClientAccountInfo::_internal_set_persona_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientAccountInfo::set_persona_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.persona_name)
}
inline void CMsgClientAccountInfo::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.persona_name)
}
inline void CMsgClientAccountInfo::set_persona_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.persona_name)
}
inline std::string* CMsgClientAccountInfo::_internal_mutable_persona_name() {
  _has_bits_[0] |= 0x00000001u;
  return persona_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientAccountInfo::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return persona_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientAccountInfo::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  persona_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), persona_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.persona_name)
}

// optional string ip_country = 2;
inline bool CMsgClientAccountInfo::_internal_has_ip_country() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_ip_country() const {
  return _internal_has_ip_country();
}
inline void CMsgClientAccountInfo::clear_ip_country() {
  ip_country_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientAccountInfo::ip_country() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.ip_country)
  return _internal_ip_country();
}
inline void CMsgClientAccountInfo::set_ip_country(const std::string& value) {
  _internal_set_ip_country(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.ip_country)
}
inline std::string* CMsgClientAccountInfo::mutable_ip_country() {
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.ip_country)
  return _internal_mutable_ip_country();
}
inline const std::string& CMsgClientAccountInfo::_internal_ip_country() const {
  return ip_country_.Get();
}
inline void CMsgClientAccountInfo::_internal_set_ip_country(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientAccountInfo::set_ip_country(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ip_country_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.ip_country)
}
inline void CMsgClientAccountInfo::set_ip_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ip_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.ip_country)
}
inline void CMsgClientAccountInfo::set_ip_country(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ip_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.ip_country)
}
inline std::string* CMsgClientAccountInfo::_internal_mutable_ip_country() {
  _has_bits_[0] |= 0x00000002u;
  return ip_country_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientAccountInfo::release_ip_country() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.ip_country)
  if (!_internal_has_ip_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ip_country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientAccountInfo::set_allocated_ip_country(std::string* ip_country) {
  if (ip_country != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ip_country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.ip_country)
}

// optional int32 count_authed_computers = 5;
inline bool CMsgClientAccountInfo::_internal_has_count_authed_computers() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_count_authed_computers() const {
  return _internal_has_count_authed_computers();
}
inline void CMsgClientAccountInfo::clear_count_authed_computers() {
  count_authed_computers_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientAccountInfo::_internal_count_authed_computers() const {
  return count_authed_computers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgClientAccountInfo::count_authed_computers() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.count_authed_computers)
  return _internal_count_authed_computers();
}
inline void CMsgClientAccountInfo::_internal_set_count_authed_computers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  count_authed_computers_ = value;
}
inline void CMsgClientAccountInfo::set_count_authed_computers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count_authed_computers(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.count_authed_computers)
}

// optional uint32 account_flags = 7;
inline bool CMsgClientAccountInfo::_internal_has_account_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_account_flags() const {
  return _internal_has_account_flags();
}
inline void CMsgClientAccountInfo::clear_account_flags() {
  account_flags_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientAccountInfo::_internal_account_flags() const {
  return account_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientAccountInfo::account_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.account_flags)
  return _internal_account_flags();
}
inline void CMsgClientAccountInfo::_internal_set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  account_flags_ = value;
}
inline void CMsgClientAccountInfo::set_account_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.account_flags)
}

// optional uint64 facebook_id = 8;
inline bool CMsgClientAccountInfo::_internal_has_facebook_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_facebook_id() const {
  return _internal_has_facebook_id();
}
inline void CMsgClientAccountInfo::clear_facebook_id() {
  facebook_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientAccountInfo::_internal_facebook_id() const {
  return facebook_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientAccountInfo::facebook_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.facebook_id)
  return _internal_facebook_id();
}
inline void CMsgClientAccountInfo::_internal_set_facebook_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  facebook_id_ = value;
}
inline void CMsgClientAccountInfo::set_facebook_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_facebook_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.facebook_id)
}

// optional string facebook_name = 9;
inline bool CMsgClientAccountInfo::_internal_has_facebook_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_facebook_name() const {
  return _internal_has_facebook_name();
}
inline void CMsgClientAccountInfo::clear_facebook_name() {
  facebook_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgClientAccountInfo::facebook_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.facebook_name)
  return _internal_facebook_name();
}
inline void CMsgClientAccountInfo::set_facebook_name(const std::string& value) {
  _internal_set_facebook_name(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.facebook_name)
}
inline std::string* CMsgClientAccountInfo::mutable_facebook_name() {
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.facebook_name)
  return _internal_mutable_facebook_name();
}
inline const std::string& CMsgClientAccountInfo::_internal_facebook_name() const {
  return facebook_name_.Get();
}
inline void CMsgClientAccountInfo::_internal_set_facebook_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  facebook_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientAccountInfo::set_facebook_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  facebook_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.facebook_name)
}
inline void CMsgClientAccountInfo::set_facebook_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  facebook_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.facebook_name)
}
inline void CMsgClientAccountInfo::set_facebook_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  facebook_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.facebook_name)
}
inline std::string* CMsgClientAccountInfo::_internal_mutable_facebook_name() {
  _has_bits_[0] |= 0x00000004u;
  return facebook_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientAccountInfo::release_facebook_name() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.facebook_name)
  if (!_internal_has_facebook_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return facebook_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientAccountInfo::set_allocated_facebook_name(std::string* facebook_name) {
  if (facebook_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  facebook_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facebook_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.facebook_name)
}

// optional bool steamguard_notify_newmachines = 14;
inline bool CMsgClientAccountInfo::_internal_has_steamguard_notify_newmachines() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_steamguard_notify_newmachines() const {
  return _internal_has_steamguard_notify_newmachines();
}
inline void CMsgClientAccountInfo::clear_steamguard_notify_newmachines() {
  steamguard_notify_newmachines_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgClientAccountInfo::_internal_steamguard_notify_newmachines() const {
  return steamguard_notify_newmachines_;
}
inline bool CMsgClientAccountInfo::steamguard_notify_newmachines() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.steamguard_notify_newmachines)
  return _internal_steamguard_notify_newmachines();
}
inline void CMsgClientAccountInfo::_internal_set_steamguard_notify_newmachines(bool value) {
  _has_bits_[0] |= 0x00000080u;
  steamguard_notify_newmachines_ = value;
}
inline void CMsgClientAccountInfo::set_steamguard_notify_newmachines(bool value) {
  _internal_set_steamguard_notify_newmachines(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.steamguard_notify_newmachines)
}

// optional string steamguard_machine_name_user_chosen = 15;
inline bool CMsgClientAccountInfo::_internal_has_steamguard_machine_name_user_chosen() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_steamguard_machine_name_user_chosen() const {
  return _internal_has_steamguard_machine_name_user_chosen();
}
inline void CMsgClientAccountInfo::clear_steamguard_machine_name_user_chosen() {
  steamguard_machine_name_user_chosen_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgClientAccountInfo::steamguard_machine_name_user_chosen() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return _internal_steamguard_machine_name_user_chosen();
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const std::string& value) {
  _internal_set_steamguard_machine_name_user_chosen(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline std::string* CMsgClientAccountInfo::mutable_steamguard_machine_name_user_chosen() {
  // @@protoc_insertion_point(field_mutable:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  return _internal_mutable_steamguard_machine_name_user_chosen();
}
inline const std::string& CMsgClientAccountInfo::_internal_steamguard_machine_name_user_chosen() const {
  return steamguard_machine_name_user_chosen_.Get();
}
inline void CMsgClientAccountInfo::_internal_set_steamguard_machine_name_user_chosen(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  steamguard_machine_name_user_chosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  steamguard_machine_name_user_chosen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  steamguard_machine_name_user_chosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline void CMsgClientAccountInfo::set_steamguard_machine_name_user_chosen(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  steamguard_machine_name_user_chosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}
inline std::string* CMsgClientAccountInfo::_internal_mutable_steamguard_machine_name_user_chosen() {
  _has_bits_[0] |= 0x00000008u;
  return steamguard_machine_name_user_chosen_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientAccountInfo::release_steamguard_machine_name_user_chosen() {
  // @@protoc_insertion_point(field_release:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
  if (!_internal_has_steamguard_machine_name_user_chosen()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return steamguard_machine_name_user_chosen_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientAccountInfo::set_allocated_steamguard_machine_name_user_chosen(std::string* steamguard_machine_name_user_chosen) {
  if (steamguard_machine_name_user_chosen != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  steamguard_machine_name_user_chosen_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steamguard_machine_name_user_chosen,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientAccountInfo.steamguard_machine_name_user_chosen)
}

// optional bool is_phone_verified = 16;
inline bool CMsgClientAccountInfo::_internal_has_is_phone_verified() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_is_phone_verified() const {
  return _internal_has_is_phone_verified();
}
inline void CMsgClientAccountInfo::clear_is_phone_verified() {
  is_phone_verified_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgClientAccountInfo::_internal_is_phone_verified() const {
  return is_phone_verified_;
}
inline bool CMsgClientAccountInfo::is_phone_verified() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_verified)
  return _internal_is_phone_verified();
}
inline void CMsgClientAccountInfo::_internal_set_is_phone_verified(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_phone_verified_ = value;
}
inline void CMsgClientAccountInfo::set_is_phone_verified(bool value) {
  _internal_set_is_phone_verified(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_verified)
}

// optional uint32 two_factor_state = 17;
inline bool CMsgClientAccountInfo::_internal_has_two_factor_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_two_factor_state() const {
  return _internal_has_two_factor_state();
}
inline void CMsgClientAccountInfo::clear_two_factor_state() {
  two_factor_state_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientAccountInfo::_internal_two_factor_state() const {
  return two_factor_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientAccountInfo::two_factor_state() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.two_factor_state)
  return _internal_two_factor_state();
}
inline void CMsgClientAccountInfo::_internal_set_two_factor_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  two_factor_state_ = value;
}
inline void CMsgClientAccountInfo::set_two_factor_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_two_factor_state(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.two_factor_state)
}

// optional bool is_phone_identifying = 18;
inline bool CMsgClientAccountInfo::_internal_has_is_phone_identifying() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_is_phone_identifying() const {
  return _internal_has_is_phone_identifying();
}
inline void CMsgClientAccountInfo::clear_is_phone_identifying() {
  is_phone_identifying_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CMsgClientAccountInfo::_internal_is_phone_identifying() const {
  return is_phone_identifying_;
}
inline bool CMsgClientAccountInfo::is_phone_identifying() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_identifying)
  return _internal_is_phone_identifying();
}
inline void CMsgClientAccountInfo::_internal_set_is_phone_identifying(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_phone_identifying_ = value;
}
inline void CMsgClientAccountInfo::set_is_phone_identifying(bool value) {
  _internal_set_is_phone_identifying(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_identifying)
}

// optional bool is_phone_needing_reverify = 19;
inline bool CMsgClientAccountInfo::_internal_has_is_phone_needing_reverify() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgClientAccountInfo::has_is_phone_needing_reverify() const {
  return _internal_has_is_phone_needing_reverify();
}
inline void CMsgClientAccountInfo::clear_is_phone_needing_reverify() {
  is_phone_needing_reverify_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgClientAccountInfo::_internal_is_phone_needing_reverify() const {
  return is_phone_needing_reverify_;
}
inline bool CMsgClientAccountInfo::is_phone_needing_reverify() const {
  // @@protoc_insertion_point(field_get:CMsgClientAccountInfo.is_phone_needing_reverify)
  return _internal_is_phone_needing_reverify();
}
inline void CMsgClientAccountInfo::_internal_set_is_phone_needing_reverify(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_phone_needing_reverify_ = value;
}
inline void CMsgClientAccountInfo::set_is_phone_needing_reverify(bool value) {
  _internal_set_is_phone_needing_reverify(value);
  // @@protoc_insertion_point(field_set:CMsgClientAccountInfo.is_phone_needing_reverify)
}

// -------------------------------------------------------------------

// CMsgClientChallengeRequest

// optional fixed64 steamid = 1;
inline bool CMsgClientChallengeRequest::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientChallengeRequest::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgClientChallengeRequest::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientChallengeRequest::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientChallengeRequest::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgClientChallengeRequest.steamid)
  return _internal_steamid();
}
inline void CMsgClientChallengeRequest::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steamid_ = value;
}
inline void CMsgClientChallengeRequest::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgClientChallengeRequest.steamid)
}

// -------------------------------------------------------------------

// CMsgClientChallengeResponse

// optional fixed64 challenge = 1;
inline bool CMsgClientChallengeResponse::_internal_has_challenge() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientChallengeResponse::has_challenge() const {
  return _internal_has_challenge();
}
inline void CMsgClientChallengeResponse::clear_challenge() {
  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientChallengeResponse::_internal_challenge() const {
  return challenge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientChallengeResponse::challenge() const {
  // @@protoc_insertion_point(field_get:CMsgClientChallengeResponse.challenge)
  return _internal_challenge();
}
inline void CMsgClientChallengeResponse::_internal_set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_ = value;
}
inline void CMsgClientChallengeResponse::set_challenge(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_challenge(value);
  // @@protoc_insertion_point(field_set:CMsgClientChallengeResponse.challenge)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fclientserver_5flogin_2eproto
