// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionless_netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "netmessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_connectionless_5fnetmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_connectionless_5fnetmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connectionless_5fnetmessages_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_connectionless_5fnetmessages_2eproto_metadata_getter(int index);
class C2S_CONNECTION_Message;
struct C2S_CONNECTION_MessageDefaultTypeInternal;
extern C2S_CONNECTION_MessageDefaultTypeInternal _C2S_CONNECTION_Message_default_instance_;
class C2S_CONNECT_Message;
struct C2S_CONNECT_MessageDefaultTypeInternal;
extern C2S_CONNECT_MessageDefaultTypeInternal _C2S_CONNECT_Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::C2S_CONNECTION_Message* Arena::CreateMaybeMessage<::C2S_CONNECTION_Message>(Arena*);
template<> ::C2S_CONNECT_Message* Arena::CreateMaybeMessage<::C2S_CONNECT_Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class C2S_CONNECT_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S_CONNECT_Message) */ {
 public:
  inline C2S_CONNECT_Message() : C2S_CONNECT_Message(nullptr) {}
  virtual ~C2S_CONNECT_Message();
  explicit constexpr C2S_CONNECT_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CONNECT_Message(const C2S_CONNECT_Message& from);
  C2S_CONNECT_Message(C2S_CONNECT_Message&& from) noexcept
    : C2S_CONNECT_Message() {
    *this = ::std::move(from);
  }

  inline C2S_CONNECT_Message& operator=(const C2S_CONNECT_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CONNECT_Message& operator=(C2S_CONNECT_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_CONNECT_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CONNECT_Message* internal_default_instance() {
    return reinterpret_cast<const C2S_CONNECT_Message*>(
               &_C2S_CONNECT_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_CONNECT_Message& a, C2S_CONNECT_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CONNECT_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CONNECT_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_CONNECT_Message* New() const final {
    return CreateMaybeMessage<C2S_CONNECT_Message>(nullptr);
  }

  C2S_CONNECT_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_CONNECT_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_CONNECT_Message& from);
  void MergeFrom(const C2S_CONNECT_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CONNECT_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S_CONNECT_Message";
  }
  protected:
  explicit C2S_CONNECT_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_connectionless_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSplitplayersFieldNumber = 7,
    kEncryptedPasswordFieldNumber = 6,
    kAuthSteamFieldNumber = 8,
    kChallengeContextFieldNumber = 9,
    kHostVersionFieldNumber = 1,
    kAuthProtocolFieldNumber = 2,
    kReservationCookieFieldNumber = 4,
    kChallengeNumberFieldNumber = 3,
    kLowViolenceFieldNumber = 5,
    kUseSnpFieldNumber = 10,
  };
  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  int splitplayers_size() const;
  private:
  int _internal_splitplayers_size() const;
  public:
  void clear_splitplayers();
  ::CCLCMsg_SplitPlayerConnect* mutable_splitplayers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
      mutable_splitplayers();
  private:
  const ::CCLCMsg_SplitPlayerConnect& _internal_splitplayers(int index) const;
  ::CCLCMsg_SplitPlayerConnect* _internal_add_splitplayers();
  public:
  const ::CCLCMsg_SplitPlayerConnect& splitplayers(int index) const;
  ::CCLCMsg_SplitPlayerConnect* add_splitplayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
      splitplayers() const;

  // optional bytes encrypted_password = 6;
  bool has_encrypted_password() const;
  private:
  bool _internal_has_encrypted_password() const;
  public:
  void clear_encrypted_password();
  const std::string& encrypted_password() const;
  void set_encrypted_password(const std::string& value);
  void set_encrypted_password(std::string&& value);
  void set_encrypted_password(const char* value);
  void set_encrypted_password(const void* value, size_t size);
  std::string* mutable_encrypted_password();
  std::string* release_encrypted_password();
  void set_allocated_encrypted_password(std::string* encrypted_password);
  private:
  const std::string& _internal_encrypted_password() const;
  void _internal_set_encrypted_password(const std::string& value);
  std::string* _internal_mutable_encrypted_password();
  public:

  // optional bytes auth_steam = 8;
  bool has_auth_steam() const;
  private:
  bool _internal_has_auth_steam() const;
  public:
  void clear_auth_steam();
  const std::string& auth_steam() const;
  void set_auth_steam(const std::string& value);
  void set_auth_steam(std::string&& value);
  void set_auth_steam(const char* value);
  void set_auth_steam(const void* value, size_t size);
  std::string* mutable_auth_steam();
  std::string* release_auth_steam();
  void set_allocated_auth_steam(std::string* auth_steam);
  private:
  const std::string& _internal_auth_steam() const;
  void _internal_set_auth_steam(const std::string& value);
  std::string* _internal_mutable_auth_steam();
  public:

  // optional string challenge_context = 9;
  bool has_challenge_context() const;
  private:
  bool _internal_has_challenge_context() const;
  public:
  void clear_challenge_context();
  const std::string& challenge_context() const;
  void set_challenge_context(const std::string& value);
  void set_challenge_context(std::string&& value);
  void set_challenge_context(const char* value);
  void set_challenge_context(const char* value, size_t size);
  std::string* mutable_challenge_context();
  std::string* release_challenge_context();
  void set_allocated_challenge_context(std::string* challenge_context);
  private:
  const std::string& _internal_challenge_context() const;
  void _internal_set_challenge_context(const std::string& value);
  std::string* _internal_mutable_challenge_context();
  public:

  // optional uint32 host_version = 1;
  bool has_host_version() const;
  private:
  bool _internal_has_host_version() const;
  public:
  void clear_host_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_version() const;
  void set_host_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_version() const;
  void _internal_set_host_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 auth_protocol = 2;
  bool has_auth_protocol() const;
  private:
  bool _internal_has_auth_protocol() const;
  public:
  void clear_auth_protocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_protocol() const;
  void set_auth_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auth_protocol() const;
  void _internal_set_auth_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 reservation_cookie = 4;
  bool has_reservation_cookie() const;
  private:
  bool _internal_has_reservation_cookie() const;
  public:
  void clear_reservation_cookie();
  ::PROTOBUF_NAMESPACE_ID::uint64 reservation_cookie() const;
  void set_reservation_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reservation_cookie() const;
  void _internal_set_reservation_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 challenge_number = 3;
  bool has_challenge_number() const;
  private:
  bool _internal_has_challenge_number() const;
  public:
  void clear_challenge_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_number() const;
  void set_challenge_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_number() const;
  void _internal_set_challenge_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool low_violence = 5;
  bool has_low_violence() const;
  private:
  bool _internal_has_low_violence() const;
  public:
  void clear_low_violence();
  bool low_violence() const;
  void set_low_violence(bool value);
  private:
  bool _internal_low_violence() const;
  void _internal_set_low_violence(bool value);
  public:

  // optional sint32 use_snp = 10;
  bool has_use_snp() const;
  private:
  bool _internal_has_use_snp() const;
  public:
  void clear_use_snp();
  ::PROTOBUF_NAMESPACE_ID::int32 use_snp() const;
  void set_use_snp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_snp() const;
  void _internal_set_use_snp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:C2S_CONNECT_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect > splitplayers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_steam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_context_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auth_protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reservation_cookie_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_number_;
  bool low_violence_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_snp_;
  friend struct ::TableStruct_connectionless_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class C2S_CONNECTION_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2S_CONNECTION_Message) */ {
 public:
  inline C2S_CONNECTION_Message() : C2S_CONNECTION_Message(nullptr) {}
  virtual ~C2S_CONNECTION_Message();
  explicit constexpr C2S_CONNECTION_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CONNECTION_Message(const C2S_CONNECTION_Message& from);
  C2S_CONNECTION_Message(C2S_CONNECTION_Message&& from) noexcept
    : C2S_CONNECTION_Message() {
    *this = ::std::move(from);
  }

  inline C2S_CONNECTION_Message& operator=(const C2S_CONNECTION_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CONNECTION_Message& operator=(C2S_CONNECTION_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_CONNECTION_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CONNECTION_Message* internal_default_instance() {
    return reinterpret_cast<const C2S_CONNECTION_Message*>(
               &_C2S_CONNECTION_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_CONNECTION_Message& a, C2S_CONNECTION_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CONNECTION_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CONNECTION_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_CONNECTION_Message* New() const final {
    return CreateMaybeMessage<C2S_CONNECTION_Message>(nullptr);
  }

  C2S_CONNECTION_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_CONNECTION_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_CONNECTION_Message& from);
  void MergeFrom(const C2S_CONNECTION_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CONNECTION_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2S_CONNECTION_Message";
  }
  protected:
  explicit C2S_CONNECTION_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_connectionless_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddonNameFieldNumber = 1,
    kUseSnpFieldNumber = 2,
  };
  // optional string addon_name = 1;
  bool has_addon_name() const;
  private:
  bool _internal_has_addon_name() const;
  public:
  void clear_addon_name();
  const std::string& addon_name() const;
  void set_addon_name(const std::string& value);
  void set_addon_name(std::string&& value);
  void set_addon_name(const char* value);
  void set_addon_name(const char* value, size_t size);
  std::string* mutable_addon_name();
  std::string* release_addon_name();
  void set_allocated_addon_name(std::string* addon_name);
  private:
  const std::string& _internal_addon_name() const;
  void _internal_set_addon_name(const std::string& value);
  std::string* _internal_mutable_addon_name();
  public:

  // optional bool use_snp = 2;
  bool has_use_snp() const;
  private:
  bool _internal_has_use_snp() const;
  public:
  void clear_use_snp();
  bool use_snp() const;
  void set_use_snp(bool value);
  private:
  bool _internal_use_snp() const;
  void _internal_set_use_snp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:C2S_CONNECTION_Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addon_name_;
  bool use_snp_;
  friend struct ::TableStruct_connectionless_5fnetmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_CONNECT_Message

// optional uint32 host_version = 1;
inline bool C2S_CONNECT_Message::_internal_has_host_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_host_version() const {
  return _internal_has_host_version();
}
inline void C2S_CONNECT_Message::clear_host_version() {
  host_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::_internal_host_version() const {
  return host_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::host_version() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.host_version)
  return _internal_host_version();
}
inline void C2S_CONNECT_Message::_internal_set_host_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  host_version_ = value;
}
inline void C2S_CONNECT_Message::set_host_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_version(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.host_version)
}

// optional uint32 auth_protocol = 2;
inline bool C2S_CONNECT_Message::_internal_has_auth_protocol() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_auth_protocol() const {
  return _internal_has_auth_protocol();
}
inline void C2S_CONNECT_Message::clear_auth_protocol() {
  auth_protocol_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::_internal_auth_protocol() const {
  return auth_protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::auth_protocol() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_protocol)
  return _internal_auth_protocol();
}
inline void C2S_CONNECT_Message::_internal_set_auth_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  auth_protocol_ = value;
}
inline void C2S_CONNECT_Message::set_auth_protocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auth_protocol(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_protocol)
}

// optional uint32 challenge_number = 3;
inline bool C2S_CONNECT_Message::_internal_has_challenge_number() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_challenge_number() const {
  return _internal_has_challenge_number();
}
inline void C2S_CONNECT_Message::clear_challenge_number() {
  challenge_number_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::_internal_challenge_number() const {
  return challenge_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C2S_CONNECT_Message::challenge_number() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_number)
  return _internal_challenge_number();
}
inline void C2S_CONNECT_Message::_internal_set_challenge_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  challenge_number_ = value;
}
inline void C2S_CONNECT_Message::set_challenge_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_number(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_number)
}

// optional fixed64 reservation_cookie = 4;
inline bool C2S_CONNECT_Message::_internal_has_reservation_cookie() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_reservation_cookie() const {
  return _internal_has_reservation_cookie();
}
inline void C2S_CONNECT_Message::clear_reservation_cookie() {
  reservation_cookie_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C2S_CONNECT_Message::_internal_reservation_cookie() const {
  return reservation_cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C2S_CONNECT_Message::reservation_cookie() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.reservation_cookie)
  return _internal_reservation_cookie();
}
inline void C2S_CONNECT_Message::_internal_set_reservation_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  reservation_cookie_ = value;
}
inline void C2S_CONNECT_Message::set_reservation_cookie(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reservation_cookie(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.reservation_cookie)
}

// optional bool low_violence = 5;
inline bool C2S_CONNECT_Message::_internal_has_low_violence() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_low_violence() const {
  return _internal_has_low_violence();
}
inline void C2S_CONNECT_Message::clear_low_violence() {
  low_violence_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool C2S_CONNECT_Message::_internal_low_violence() const {
  return low_violence_;
}
inline bool C2S_CONNECT_Message::low_violence() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.low_violence)
  return _internal_low_violence();
}
inline void C2S_CONNECT_Message::_internal_set_low_violence(bool value) {
  _has_bits_[0] |= 0x00000080u;
  low_violence_ = value;
}
inline void C2S_CONNECT_Message::set_low_violence(bool value) {
  _internal_set_low_violence(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.low_violence)
}

// optional bytes encrypted_password = 6;
inline bool C2S_CONNECT_Message::_internal_has_encrypted_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_encrypted_password() const {
  return _internal_has_encrypted_password();
}
inline void C2S_CONNECT_Message::clear_encrypted_password() {
  encrypted_password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& C2S_CONNECT_Message::encrypted_password() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.encrypted_password)
  return _internal_encrypted_password();
}
inline void C2S_CONNECT_Message::set_encrypted_password(const std::string& value) {
  _internal_set_encrypted_password(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.encrypted_password)
}
inline std::string* C2S_CONNECT_Message::mutable_encrypted_password() {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.encrypted_password)
  return _internal_mutable_encrypted_password();
}
inline const std::string& C2S_CONNECT_Message::_internal_encrypted_password() const {
  return encrypted_password_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_encrypted_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C2S_CONNECT_Message::set_encrypted_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:C2S_CONNECT_Message.encrypted_password)
}
inline void C2S_CONNECT_Message::set_encrypted_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypted_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.encrypted_password)
}
inline void C2S_CONNECT_Message::set_encrypted_password(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.encrypted_password)
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_encrypted_password() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C2S_CONNECT_Message::release_encrypted_password() {
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.encrypted_password)
  if (!_internal_has_encrypted_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_CONNECT_Message::set_allocated_encrypted_password(std::string* encrypted_password) {
  if (encrypted_password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.encrypted_password)
}

// repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
inline int C2S_CONNECT_Message::_internal_splitplayers_size() const {
  return splitplayers_.size();
}
inline int C2S_CONNECT_Message::splitplayers_size() const {
  return _internal_splitplayers_size();
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::mutable_splitplayers(int index) {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.splitplayers)
  return splitplayers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >*
C2S_CONNECT_Message::mutable_splitplayers() {
  // @@protoc_insertion_point(field_mutable_list:C2S_CONNECT_Message.splitplayers)
  return &splitplayers_;
}
inline const ::CCLCMsg_SplitPlayerConnect& C2S_CONNECT_Message::_internal_splitplayers(int index) const {
  return splitplayers_.Get(index);
}
inline const ::CCLCMsg_SplitPlayerConnect& C2S_CONNECT_Message::splitplayers(int index) const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.splitplayers)
  return _internal_splitplayers(index);
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::_internal_add_splitplayers() {
  return splitplayers_.Add();
}
inline ::CCLCMsg_SplitPlayerConnect* C2S_CONNECT_Message::add_splitplayers() {
  // @@protoc_insertion_point(field_add:C2S_CONNECT_Message.splitplayers)
  return _internal_add_splitplayers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCLCMsg_SplitPlayerConnect >&
C2S_CONNECT_Message::splitplayers() const {
  // @@protoc_insertion_point(field_list:C2S_CONNECT_Message.splitplayers)
  return splitplayers_;
}

// optional bytes auth_steam = 8;
inline bool C2S_CONNECT_Message::_internal_has_auth_steam() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_auth_steam() const {
  return _internal_has_auth_steam();
}
inline void C2S_CONNECT_Message::clear_auth_steam() {
  auth_steam_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& C2S_CONNECT_Message::auth_steam() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.auth_steam)
  return _internal_auth_steam();
}
inline void C2S_CONNECT_Message::set_auth_steam(const std::string& value) {
  _internal_set_auth_steam(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.auth_steam)
}
inline std::string* C2S_CONNECT_Message::mutable_auth_steam() {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.auth_steam)
  return _internal_mutable_auth_steam();
}
inline const std::string& C2S_CONNECT_Message::_internal_auth_steam() const {
  return auth_steam_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_auth_steam(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_steam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C2S_CONNECT_Message::set_auth_steam(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_steam_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:C2S_CONNECT_Message.auth_steam)
}
inline void C2S_CONNECT_Message::set_auth_steam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  auth_steam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.auth_steam)
}
inline void C2S_CONNECT_Message::set_auth_steam(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  auth_steam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.auth_steam)
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_auth_steam() {
  _has_bits_[0] |= 0x00000002u;
  return auth_steam_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C2S_CONNECT_Message::release_auth_steam() {
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.auth_steam)
  if (!_internal_has_auth_steam()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return auth_steam_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_CONNECT_Message::set_allocated_auth_steam(std::string* auth_steam) {
  if (auth_steam != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_steam_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_steam,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.auth_steam)
}

// optional string challenge_context = 9;
inline bool C2S_CONNECT_Message::_internal_has_challenge_context() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_challenge_context() const {
  return _internal_has_challenge_context();
}
inline void C2S_CONNECT_Message::clear_challenge_context() {
  challenge_context_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& C2S_CONNECT_Message::challenge_context() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.challenge_context)
  return _internal_challenge_context();
}
inline void C2S_CONNECT_Message::set_challenge_context(const std::string& value) {
  _internal_set_challenge_context(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.challenge_context)
}
inline std::string* C2S_CONNECT_Message::mutable_challenge_context() {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECT_Message.challenge_context)
  return _internal_mutable_challenge_context();
}
inline const std::string& C2S_CONNECT_Message::_internal_challenge_context() const {
  return challenge_context_.Get();
}
inline void C2S_CONNECT_Message::_internal_set_challenge_context(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C2S_CONNECT_Message::set_challenge_context(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  challenge_context_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:C2S_CONNECT_Message.challenge_context)
}
inline void C2S_CONNECT_Message::set_challenge_context(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  challenge_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:C2S_CONNECT_Message.challenge_context)
}
inline void C2S_CONNECT_Message::set_challenge_context(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  challenge_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECT_Message.challenge_context)
}
inline std::string* C2S_CONNECT_Message::_internal_mutable_challenge_context() {
  _has_bits_[0] |= 0x00000004u;
  return challenge_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C2S_CONNECT_Message::release_challenge_context() {
  // @@protoc_insertion_point(field_release:C2S_CONNECT_Message.challenge_context)
  if (!_internal_has_challenge_context()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return challenge_context_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_CONNECT_Message::set_allocated_challenge_context(std::string* challenge_context) {
  if (challenge_context != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  challenge_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge_context,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECT_Message.challenge_context)
}

// optional sint32 use_snp = 10;
inline bool C2S_CONNECT_Message::_internal_has_use_snp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool C2S_CONNECT_Message::has_use_snp() const {
  return _internal_has_use_snp();
}
inline void C2S_CONNECT_Message::clear_use_snp() {
  use_snp_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_CONNECT_Message::_internal_use_snp() const {
  return use_snp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 C2S_CONNECT_Message::use_snp() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECT_Message.use_snp)
  return _internal_use_snp();
}
inline void C2S_CONNECT_Message::_internal_set_use_snp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  use_snp_ = value;
}
inline void C2S_CONNECT_Message::set_use_snp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_snp(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECT_Message.use_snp)
}

// -------------------------------------------------------------------

// C2S_CONNECTION_Message

// optional string addon_name = 1;
inline bool C2S_CONNECTION_Message::_internal_has_addon_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool C2S_CONNECTION_Message::has_addon_name() const {
  return _internal_has_addon_name();
}
inline void C2S_CONNECTION_Message::clear_addon_name() {
  addon_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& C2S_CONNECTION_Message::addon_name() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECTION_Message.addon_name)
  return _internal_addon_name();
}
inline void C2S_CONNECTION_Message::set_addon_name(const std::string& value) {
  _internal_set_addon_name(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECTION_Message.addon_name)
}
inline std::string* C2S_CONNECTION_Message::mutable_addon_name() {
  // @@protoc_insertion_point(field_mutable:C2S_CONNECTION_Message.addon_name)
  return _internal_mutable_addon_name();
}
inline const std::string& C2S_CONNECTION_Message::_internal_addon_name() const {
  return addon_name_.Get();
}
inline void C2S_CONNECTION_Message::_internal_set_addon_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C2S_CONNECTION_Message::set_addon_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  addon_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:C2S_CONNECTION_Message.addon_name)
}
inline void C2S_CONNECTION_Message::set_addon_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:C2S_CONNECTION_Message.addon_name)
}
inline void C2S_CONNECTION_Message::set_addon_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:C2S_CONNECTION_Message.addon_name)
}
inline std::string* C2S_CONNECTION_Message::_internal_mutable_addon_name() {
  _has_bits_[0] |= 0x00000001u;
  return addon_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C2S_CONNECTION_Message::release_addon_name() {
  // @@protoc_insertion_point(field_release:C2S_CONNECTION_Message.addon_name)
  if (!_internal_has_addon_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return addon_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_CONNECTION_Message::set_allocated_addon_name(std::string* addon_name) {
  if (addon_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  addon_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addon_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:C2S_CONNECTION_Message.addon_name)
}

// optional bool use_snp = 2;
inline bool C2S_CONNECTION_Message::_internal_has_use_snp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool C2S_CONNECTION_Message::has_use_snp() const {
  return _internal_has_use_snp();
}
inline void C2S_CONNECTION_Message::clear_use_snp() {
  use_snp_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool C2S_CONNECTION_Message::_internal_use_snp() const {
  return use_snp_;
}
inline bool C2S_CONNECTION_Message::use_snp() const {
  // @@protoc_insertion_point(field_get:C2S_CONNECTION_Message.use_snp)
  return _internal_use_snp();
}
inline void C2S_CONNECTION_Message::_internal_set_use_snp(bool value) {
  _has_bits_[0] |= 0x00000002u;
  use_snp_ = value;
}
inline void C2S_CONNECTION_Message::set_use_snp(bool value) {
  _internal_set_use_snp(value);
  // @@protoc_insertion_point(field_set:C2S_CONNECTION_Message.use_snp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_connectionless_5fnetmessages_2eproto
