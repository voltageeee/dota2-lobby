// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_league.proto

#include "dota_gcmessages_common_league.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgDOTALeagueNode_MatchDetails::CMsgDOTALeagueNode_MatchDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , winning_team_id_(0u){}
struct CMsgDOTALeagueNode_MatchDetailsDefaultTypeInternal {
  constexpr CMsgDOTALeagueNode_MatchDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNode_MatchDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNode_MatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNode_MatchDetailsDefaultTypeInternal _CMsgDOTALeagueNode_MatchDetails_default_instance_;
constexpr CMsgDOTALeagueNode_VOD::CMsgDOTALeagueNode_VOD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , series_game_(0u)
  , stream_id_(0u){}
struct CMsgDOTALeagueNode_VODDefaultTypeInternal {
  constexpr CMsgDOTALeagueNode_VODDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNode_VODDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNode_VOD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNode_VODDefaultTypeInternal _CMsgDOTALeagueNode_VOD_default_instance_;
constexpr CMsgDOTALeagueNode::CMsgDOTALeagueNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_()
  , stream_ids_()
  , vods_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(0u)
  , node_group_id_(0u)
  , winning_node_id_(0u)
  , losing_node_id_(0u)
  , incoming_node_id_1_(0u)
  , incoming_node_id_2_(0u)
  , node_type_(0)

  , scheduled_time_(0u)
  , series_id_(0u)
  , team_id_1_(0u)
  , team_id_2_(0u)
  , team_1_wins_(0u)
  , team_2_wins_(0u)
  , has_started_(false)
  , is_completed_(false)
  , actual_time_(0u){}
struct CMsgDOTALeagueNodeDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeDefaultTypeInternal _CMsgDOTALeagueNode_default_instance_;
constexpr CMsgDOTALeagueNodeGroup_TeamStanding::CMsgDOTALeagueNodeGroup_TeamStanding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , standing_(0u)
  , team_id_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , wins_(0u)
  , losses_(0u)
  , score_(PROTOBUF_LONGLONG(0))
  , score_tiebreak_group_(PROTOBUF_LONGLONG(0))
  , score_tiebreak_below_(PROTOBUF_LONGLONG(0))
  , score_tiebreak_random_(PROTOBUF_LONGLONG(0))
  , is_pro_(false){}
struct CMsgDOTALeagueNodeGroup_TeamStandingDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeGroup_TeamStandingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeGroup_TeamStandingDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeGroup_TeamStanding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeGroup_TeamStandingDefaultTypeInternal _CMsgDOTALeagueNodeGroup_TeamStanding_default_instance_;
constexpr CMsgDOTALeagueNodeGroup::CMsgDOTALeagueNodeGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incoming_node_group_ids_()
  , team_standings_()
  , nodes_()
  , node_groups_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_group_id_(0u)
  , parent_node_group_id_(0u)
  , advancing_node_group_id_(0u)
  , advancing_team_count_(0u)
  , team_count_(0u)
  , node_group_type_(0)

  , default_node_type_(0)

  , round_(0u)
  , max_rounds_(0u)
  , is_tiebreaker_(false)
  , is_final_group_(false)
  , is_completed_(false)
  , phase_(0)

  , region_(0)

  , start_time_(0u)
  , end_time_(0u)
  , secondary_advancing_node_group_id_(0u)
  , secondary_advancing_team_count_(0u)
  , tertiary_advancing_node_group_id_(0u)
  , tertiary_advancing_team_count_(0u)
  , elimination_dpc_points_(0u){}
struct CMsgDOTALeagueNodeGroupDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeGroupDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeGroupDefaultTypeInternal _CMsgDOTALeagueNodeGroup_default_instance_;
constexpr CMsgDOTALeague_Info::CMsgDOTALeague_Info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_id_(0u)
  , tier_(0)

  , region_(0)

  , start_timestamp_(0u)
  , end_timestamp_(0u)
  , pro_circuit_points_(0u)
  , image_bits_(0u)
  , status_(0)

  , most_recent_activity_(0u)
  , registration_period_(0u){}
struct CMsgDOTALeague_InfoDefaultTypeInternal {
  constexpr CMsgDOTALeague_InfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_InfoDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_InfoDefaultTypeInternal _CMsgDOTALeague_Info_default_instance_;
constexpr CMsgDOTALeague_Admin::CMsgDOTALeague_Admin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , is_primary_(false){}
struct CMsgDOTALeague_AdminDefaultTypeInternal {
  constexpr CMsgDOTALeague_AdminDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_AdminDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_Admin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_AdminDefaultTypeInternal _CMsgDOTALeague_Admin_default_instance_;
constexpr CMsgDOTALeague_PrizePoolItem::CMsgDOTALeague_PrizePoolItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_(0u)
  , sales_stop_timestamp_(0u)
  , revenue_pct_(0u)
  , revenue_cents_per_sale_(0u){}
struct CMsgDOTALeague_PrizePoolItemDefaultTypeInternal {
  constexpr CMsgDOTALeague_PrizePoolItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_PrizePoolItemDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_PrizePoolItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_PrizePoolItemDefaultTypeInternal _CMsgDOTALeague_PrizePoolItem_default_instance_;
constexpr CMsgDOTALeague_PrizePool::CMsgDOTALeague_PrizePool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prize_split_pct_x100_()
  , prize_pool_items_()
  , base_prize_pool_(0u)
  , total_prize_pool_(0u){}
struct CMsgDOTALeague_PrizePoolDefaultTypeInternal {
  constexpr CMsgDOTALeague_PrizePoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_PrizePoolDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_PrizePool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_PrizePoolDefaultTypeInternal _CMsgDOTALeague_PrizePool_default_instance_;
constexpr CMsgDOTALeague_Stream::CMsgDOTALeague_Stream(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vod_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(0u)
  , language_(0u)
  , broadcast_provider_(0)
{}
struct CMsgDOTALeague_StreamDefaultTypeInternal {
  constexpr CMsgDOTALeague_StreamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_StreamDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_Stream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_StreamDefaultTypeInternal _CMsgDOTALeague_Stream_default_instance_;
constexpr CMsgDOTALeague_SeriesInfo::CMsgDOTALeague_SeriesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_ids_()
  , series_id_(0u)
  , series_type_(0u)
  , start_time_(0u)
  , team_id_1_(0u)
  , team_id_2_(0u){}
struct CMsgDOTALeague_SeriesInfoDefaultTypeInternal {
  constexpr CMsgDOTALeague_SeriesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_SeriesInfoDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_SeriesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_SeriesInfoDefaultTypeInternal _CMsgDOTALeague_SeriesInfo_default_instance_;
constexpr CMsgDOTALeague_Player::CMsgDOTALeague_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , team_id_(0u){}
struct CMsgDOTALeague_PlayerDefaultTypeInternal {
  constexpr CMsgDOTALeague_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeague_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTALeague_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeague_PlayerDefaultTypeInternal _CMsgDOTALeague_Player_default_instance_;
constexpr CMsgDOTALeague::CMsgDOTALeague(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : admins_()
  , streams_()
  , node_groups_()
  , series_infos_()
  , registered_players_()
  , info_(nullptr)
  , prize_pool_(nullptr){}
struct CMsgDOTALeagueDefaultTypeInternal {
  constexpr CMsgDOTALeagueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueDefaultTypeInternal() {}
  union {
    CMsgDOTALeague _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueDefaultTypeInternal _CMsgDOTALeague_default_instance_;
constexpr CMsgDOTALeagueList::CMsgDOTALeagueList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leagues_(){}
struct CMsgDOTALeagueListDefaultTypeInternal {
  constexpr CMsgDOTALeagueListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueListDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueListDefaultTypeInternal _CMsgDOTALeagueList_default_instance_;
constexpr CMsgDOTALeagueInfo::CMsgDOTALeagueInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_id_(0u)
  , tier_(0)

  , region_(0)

  , most_recent_activity_(0u)
  , total_prize_pool_(0u)
  , start_timestamp_(0u)
  , end_timestamp_(0u)
  , status_(0u){}
struct CMsgDOTALeagueInfoDefaultTypeInternal {
  constexpr CMsgDOTALeagueInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueInfoDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueInfoDefaultTypeInternal _CMsgDOTALeagueInfo_default_instance_;
constexpr CMsgDOTALeagueInfoList::CMsgDOTALeagueInfoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_(){}
struct CMsgDOTALeagueInfoListDefaultTypeInternal {
  constexpr CMsgDOTALeagueInfoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueInfoListDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueInfoListDefaultTypeInternal _CMsgDOTALeagueInfoList_default_instance_;
constexpr CMsgDOTALeagueLiveGames_LiveGame::CMsgDOTALeagueLiveGames_LiveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radiant_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , radiant_logo_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u)
  , time_(0u)
  , dire_logo_(PROTOBUF_ULONGLONG(0))
  , spectators_(0u)
  , radiant_team_id_(0u)
  , dire_team_id_(0u)
  , league_node_id_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , series_id_(0u){}
struct CMsgDOTALeagueLiveGames_LiveGameDefaultTypeInternal {
  constexpr CMsgDOTALeagueLiveGames_LiveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueLiveGames_LiveGameDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueLiveGames_LiveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueLiveGames_LiveGameDefaultTypeInternal _CMsgDOTALeagueLiveGames_LiveGame_default_instance_;
constexpr CMsgDOTALeagueLiveGames::CMsgDOTALeagueLiveGames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CMsgDOTALeagueLiveGamesDefaultTypeInternal {
  constexpr CMsgDOTALeagueLiveGamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueLiveGamesDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueLiveGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueLiveGamesDefaultTypeInternal _CMsgDOTALeagueLiveGames_default_instance_;
constexpr CMsgDOTALeagueMessages_Message::CMsgDOTALeagueMessages_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_account_id_(0u)
  , timestamp_(0u){}
struct CMsgDOTALeagueMessages_MessageDefaultTypeInternal {
  constexpr CMsgDOTALeagueMessages_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueMessages_MessageDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueMessages_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueMessages_MessageDefaultTypeInternal _CMsgDOTALeagueMessages_Message_default_instance_;
constexpr CMsgDOTALeagueMessages::CMsgDOTALeagueMessages(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messages_(){}
struct CMsgDOTALeagueMessagesDefaultTypeInternal {
  constexpr CMsgDOTALeagueMessagesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueMessagesDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueMessages _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueMessagesDefaultTypeInternal _CMsgDOTALeagueMessages_default_instance_;
constexpr CMsgDOTALeaguePrizePool::CMsgDOTALeaguePrizePool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prize_pool_(0u)
  , increment_per_second_(0){}
struct CMsgDOTALeaguePrizePoolDefaultTypeInternal {
  constexpr CMsgDOTALeaguePrizePoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaguePrizePoolDefaultTypeInternal() {}
  union {
    CMsgDOTALeaguePrizePool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaguePrizePoolDefaultTypeInternal _CMsgDOTALeaguePrizePool_default_instance_;
constexpr CMsgDOTALeagueInfoListAdminsRequest::CMsgDOTALeagueInfoListAdminsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgDOTALeagueInfoListAdminsRequestDefaultTypeInternal {
  constexpr CMsgDOTALeagueInfoListAdminsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueInfoListAdminsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueInfoListAdminsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueInfoListAdminsRequestDefaultTypeInternal _CMsgDOTALeagueInfoListAdminsRequest_default_instance_;
constexpr CMsgDOTALeagueNodeRequest::CMsgDOTALeagueNodeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , node_id_(0u){}
struct CMsgDOTALeagueNodeRequestDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeRequestDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeRequestDefaultTypeInternal _CMsgDOTALeagueNodeRequest_default_instance_;
constexpr CMsgDOTALeagueNodeResponse::CMsgDOTALeagueNodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(nullptr){}
struct CMsgDOTALeagueNodeResponseDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeResponseDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeResponseDefaultTypeInternal _CMsgDOTALeagueNodeResponse_default_instance_;
constexpr CMsgDOTALeagueAvailableLobbyNodesRequest::CMsgDOTALeagueAvailableLobbyNodesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u){}
struct CMsgDOTALeagueAvailableLobbyNodesRequestDefaultTypeInternal {
  constexpr CMsgDOTALeagueAvailableLobbyNodesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueAvailableLobbyNodesRequestDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueAvailableLobbyNodesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueAvailableLobbyNodesRequestDefaultTypeInternal _CMsgDOTALeagueAvailableLobbyNodesRequest_default_instance_;
constexpr CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(0u)
  , team_id_1_(0u)
  , team_id_2_(0u){}
struct CMsgDOTALeagueAvailableLobbyNodes_NodeInfoDefaultTypeInternal {
  constexpr CMsgDOTALeagueAvailableLobbyNodes_NodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueAvailableLobbyNodes_NodeInfoDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueAvailableLobbyNodes_NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueAvailableLobbyNodes_NodeInfoDefaultTypeInternal _CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_default_instance_;
constexpr CMsgDOTALeagueAvailableLobbyNodes::CMsgDOTALeagueAvailableLobbyNodes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_infos_(){}
struct CMsgDOTALeagueAvailableLobbyNodesDefaultTypeInternal {
  constexpr CMsgDOTALeagueAvailableLobbyNodesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueAvailableLobbyNodesDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueAvailableLobbyNodes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueAvailableLobbyNodesDefaultTypeInternal _CMsgDOTALeagueAvailableLobbyNodes_default_instance_;
constexpr CMsgDOTALeagueNodeResults_Result::CMsgDOTALeagueNodeResults_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_ids_()
  , team_1_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_2_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(0u)
  , winning_node_id_(0u)
  , losing_node_id_(0u)
  , incoming_node_id_1_(0u)
  , incoming_node_id_2_(0u)
  , team_id_1_(0u)
  , team_id_2_(0u)
  , team_1_wins_(0u)
  , team_2_wins_(0u)
  , winning_team_id_(0u)
  , losing_team_id_(0u)
  , has_started_(false)
  , is_completed_(false)
  , scheduled_time_(0u){}
struct CMsgDOTALeagueNodeResults_ResultDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeResults_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeResults_ResultDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeResults_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeResults_ResultDefaultTypeInternal _CMsgDOTALeagueNodeResults_Result_default_instance_;
constexpr CMsgDOTALeagueNodeResults::CMsgDOTALeagueNodeResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_results_(){}
struct CMsgDOTALeagueNodeResultsDefaultTypeInternal {
  constexpr CMsgDOTALeagueNodeResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeagueNodeResultsDefaultTypeInternal() {}
  union {
    CMsgDOTALeagueNodeResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeagueNodeResultsDefaultTypeInternal _CMsgDOTALeagueNodeResults_default_instance_;
constexpr CMsgDOTADPCLeagueResults_Result::CMsgDOTADPCLeagueResults_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , standing_(0u)
  , team_id_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , points_(0u)
  , earnings_(0u)
  , timestamp_(0u)
  , phase_(0)
{}
struct CMsgDOTADPCLeagueResults_ResultDefaultTypeInternal {
  constexpr CMsgDOTADPCLeagueResults_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCLeagueResults_ResultDefaultTypeInternal() {}
  union {
    CMsgDOTADPCLeagueResults_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCLeagueResults_ResultDefaultTypeInternal _CMsgDOTADPCLeagueResults_Result_default_instance_;
constexpr CMsgDOTADPCLeagueResults::CMsgDOTADPCLeagueResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , points_()
  , dollars_(){}
struct CMsgDOTADPCLeagueResultsDefaultTypeInternal {
  constexpr CMsgDOTADPCLeagueResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCLeagueResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCLeagueResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCLeagueResultsDefaultTypeInternal _CMsgDOTADPCLeagueResults_default_instance_;
constexpr CMsgDOTADPCTeamResults_Result::CMsgDOTADPCTeamResults_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , standing_(0u)
  , points_(0u)
  , earnings_(0u)
  , timestamp_(0u){}
struct CMsgDOTADPCTeamResults_ResultDefaultTypeInternal {
  constexpr CMsgDOTADPCTeamResults_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamResults_ResultDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamResults_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCTeamResults_ResultDefaultTypeInternal _CMsgDOTADPCTeamResults_Result_default_instance_;
constexpr CMsgDOTADPCTeamResults::CMsgDOTADPCTeamResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_(){}
struct CMsgDOTADPCTeamResultsDefaultTypeInternal {
  constexpr CMsgDOTADPCTeamResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCTeamResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCTeamResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCTeamResultsDefaultTypeInternal _CMsgDOTADPCTeamResults_default_instance_;
constexpr CMsgDOTADPCSeasonResults_TeamLeagueResult::CMsgDOTADPCSeasonResults_TeamLeagueResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(0u)
  , league_id_(0u)
  , standing_(0u)
  , points_(0u)
  , earnings_(0u)
  , audit_action_(0u)
  , audit_data_(0u){}
struct CMsgDOTADPCSeasonResults_TeamLeagueResultDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonResults_TeamLeagueResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonResults_TeamLeagueResultDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonResults_TeamLeagueResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonResults_TeamLeagueResultDefaultTypeInternal _CMsgDOTADPCSeasonResults_TeamLeagueResult_default_instance_;
constexpr CMsgDOTADPCSeasonResults_TeamResult::CMsgDOTADPCSeasonResults_TeamResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_results_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , team_id_(0u)
  , total_points_(0u)
  , total_earnings_(0u){}
struct CMsgDOTADPCSeasonResults_TeamResultDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonResults_TeamResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonResults_TeamResultDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonResults_TeamResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonResults_TeamResultDefaultTypeInternal _CMsgDOTADPCSeasonResults_TeamResult_default_instance_;
constexpr CMsgDOTADPCSeasonResults_StandingEntry::CMsgDOTADPCSeasonResults_StandingEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0u)
  , wins_(0u)
  , losses_(0u){}
struct CMsgDOTADPCSeasonResults_StandingEntryDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonResults_StandingEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonResults_StandingEntryDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonResults_StandingEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonResults_StandingEntryDefaultTypeInternal _CMsgDOTADPCSeasonResults_StandingEntry_default_instance_;
constexpr CMsgDOTADPCSeasonResults_Standing::CMsgDOTADPCSeasonResults_Standing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_()
  , region_(0u)
  , division_(0u){}
struct CMsgDOTADPCSeasonResults_StandingDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonResults_StandingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonResults_StandingDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonResults_Standing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonResults_StandingDefaultTypeInternal _CMsgDOTADPCSeasonResults_Standing_default_instance_;
constexpr CMsgDOTADPCSeasonResults::CMsgDOTADPCSeasonResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : results_()
  , standings_()
  , major_wildcard_standings_()
  , major_group_standings_()
  , major_playoff_standings_(){}
struct CMsgDOTADPCSeasonResultsDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonResultsDefaultTypeInternal _CMsgDOTADPCSeasonResults_default_instance_;
constexpr CMsgDOTADPCSeasonSpoilerResults::CMsgDOTADPCSeasonSpoilerResults(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : saved_results_(nullptr)
  , time_last_updated_(0u){}
struct CMsgDOTADPCSeasonSpoilerResultsDefaultTypeInternal {
  constexpr CMsgDOTADPCSeasonSpoilerResultsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCSeasonSpoilerResultsDefaultTypeInternal() {}
  union {
    CMsgDOTADPCSeasonSpoilerResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCSeasonSpoilerResultsDefaultTypeInternal _CMsgDOTADPCSeasonSpoilerResults_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fcommon_5fleague_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_MatchDetails, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_MatchDetails, winning_team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_VOD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_VOD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_VOD, series_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_VOD, stream_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode_VOD, url_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, winning_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, losing_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, incoming_node_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, incoming_node_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, node_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, scheduled_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, actual_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, team_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, team_1_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, team_2_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, has_started_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, is_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, stream_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNode, vods_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  16,
  9,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, team_abbreviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, score_tiebreak_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, score_tiebreak_below_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, score_tiebreak_random_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup_TeamStanding, is_pro_),
  4,
  5,
  0,
  1,
  6,
  2,
  7,
  8,
  9,
  3,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, parent_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, incoming_node_group_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, advancing_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, advancing_team_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, team_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, node_group_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, default_node_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, round_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, max_rounds_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, is_tiebreaker_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, is_final_group_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, is_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, end_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, secondary_advancing_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, secondary_advancing_team_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, tertiary_advancing_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, tertiary_advancing_team_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, elimination_dpc_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, team_standings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, nodes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeGroup, node_groups_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, description_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, notes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, pro_circuit_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, image_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, most_recent_activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Info, registration_period_),
  4,
  0,
  5,
  6,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Admin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Admin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Admin, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Admin, is_primary_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Admin, email_address_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, sales_stop_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, revenue_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePoolItem, revenue_cents_per_sale_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, base_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, total_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, prize_split_pct_x100_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_PrizePool, prize_pool_items_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, stream_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, language_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, broadcast_provider_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, stream_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Stream, vod_url_),
  3,
  4,
  0,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_SeriesInfo, team_id_2_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Player, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague_Player, team_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, prize_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, admins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, streams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, node_groups_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, series_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeague, registered_players_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueList, leagues_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, most_recent_activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, total_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfo, status_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfoList, infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, radiant_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, radiant_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, dire_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, dire_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, spectators_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames_LiveGame, match_id_),
  4,
  2,
  0,
  3,
  8,
  1,
  6,
  9,
  5,
  7,
  10,
  12,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueLiveGames, games_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages_Message, author_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages_Message, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages_Message, message_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueMessages, messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaguePrizePool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaguePrizePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaguePrizePool, prize_pool_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaguePrizePool, increment_per_second_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueInfoListAdminsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeRequest, node_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResponse, node_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodesRequest, league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_group_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, team_id_2_),
  2,
  0,
  1,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueAvailableLobbyNodes, node_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, winning_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, losing_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, incoming_node_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, incoming_node_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_id_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_1_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_2_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_1_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, team_2_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, winning_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, losing_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, has_started_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, is_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, scheduled_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults_Result, match_ids_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeagueNodeResults, node_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults_Result, team_abbreviation_),
  3,
  4,
  0,
  5,
  1,
  6,
  7,
  8,
  9,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCLeagueResults, dollars_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults_Result, timestamp_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCTeamResults, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamLeagueResult, audit_data_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, team_abbreviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, total_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, total_earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_TeamResult, league_results_),
  4,
  0,
  2,
  3,
  1,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, team_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_StandingEntry, team_abbreviation_),
  3,
  4,
  5,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_Standing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_Standing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_Standing, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_Standing, division_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults_Standing, entries_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, standings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, major_wildcard_standings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, major_group_standings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonResults, major_playoff_standings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonSpoilerResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonSpoilerResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonSpoilerResults, time_last_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCSeasonSpoilerResults, saved_results_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgDOTALeagueNode_MatchDetails)},
  { 9, 17, sizeof(::CMsgDOTALeagueNode_VOD)},
  { 20, 45, sizeof(::CMsgDOTALeagueNode)},
  { 65, 84, sizeof(::CMsgDOTALeagueNodeGroup_TeamStanding)},
  { 98, 129, sizeof(::CMsgDOTALeagueNodeGroup)},
  { 155, 174, sizeof(::CMsgDOTALeague_Info)},
  { 188, 196, sizeof(::CMsgDOTALeague_Admin)},
  { 199, 208, sizeof(::CMsgDOTALeague_PrizePoolItem)},
  { 212, 221, sizeof(::CMsgDOTALeague_PrizePool)},
  { 225, 236, sizeof(::CMsgDOTALeague_Stream)},
  { 242, 253, sizeof(::CMsgDOTALeague_SeriesInfo)},
  { 259, 267, sizeof(::CMsgDOTALeague_Player)},
  { 270, 282, sizeof(::CMsgDOTALeague)},
  { 289, -1, sizeof(::CMsgDOTALeagueList)},
  { 295, 309, sizeof(::CMsgDOTALeagueInfo)},
  { 318, -1, sizeof(::CMsgDOTALeagueInfoList)},
  { 324, 342, sizeof(::CMsgDOTALeagueLiveGames_LiveGame)},
  { 355, -1, sizeof(::CMsgDOTALeagueLiveGames)},
  { 361, 369, sizeof(::CMsgDOTALeagueMessages_Message)},
  { 372, -1, sizeof(::CMsgDOTALeagueMessages)},
  { 378, 385, sizeof(::CMsgDOTALeaguePrizePool)},
  { 387, -1, sizeof(::CMsgDOTALeagueInfoListAdminsRequest)},
  { 392, 399, sizeof(::CMsgDOTALeagueNodeRequest)},
  { 401, 407, sizeof(::CMsgDOTALeagueNodeResponse)},
  { 408, 414, sizeof(::CMsgDOTALeagueAvailableLobbyNodesRequest)},
  { 415, 425, sizeof(::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo)},
  { 430, -1, sizeof(::CMsgDOTALeagueAvailableLobbyNodes)},
  { 436, 458, sizeof(::CMsgDOTALeagueNodeResults_Result)},
  { 475, -1, sizeof(::CMsgDOTALeagueNodeResults)},
  { 481, 496, sizeof(::CMsgDOTADPCLeagueResults_Result)},
  { 506, -1, sizeof(::CMsgDOTADPCLeagueResults)},
  { 514, 524, sizeof(::CMsgDOTADPCTeamResults_Result)},
  { 529, -1, sizeof(::CMsgDOTADPCTeamResults)},
  { 535, 547, sizeof(::CMsgDOTADPCSeasonResults_TeamLeagueResult)},
  { 554, 567, sizeof(::CMsgDOTADPCSeasonResults_TeamResult)},
  { 575, 586, sizeof(::CMsgDOTADPCSeasonResults_StandingEntry)},
  { 592, 600, sizeof(::CMsgDOTADPCSeasonResults_Standing)},
  { 603, -1, sizeof(::CMsgDOTADPCSeasonResults)},
  { 613, 620, sizeof(::CMsgDOTADPCSeasonSpoilerResults)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNode_MatchDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNode_VOD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeGroup_TeamStanding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_Admin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_PrizePoolItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_PrizePool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_SeriesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeague_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueLiveGames_LiveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueLiveGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueMessages_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueMessages_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaguePrizePool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueInfoListAdminsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueAvailableLobbyNodesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueAvailableLobbyNodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeResults_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeagueNodeResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCLeagueResults_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCLeagueResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCTeamResults_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCTeamResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonResults_TeamLeagueResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonResults_TeamResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonResults_StandingEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonResults_Standing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCSeasonSpoilerResults_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fleague_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#dota_gcmessages_common_league.proto\032\027d"
  "ota_shared_enums.proto\"\213\005\n\022CMsgDOTALeagu"
  "eNode\022\014\n\004name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\r\022\025\n\r"
  "node_group_id\030\003 \001(\r\022\027\n\017winning_node_id\030\004"
  " \001(\r\022\026\n\016losing_node_id\030\005 \001(\r\022\032\n\022incoming"
  "_node_id_1\030\006 \001(\r\022\032\n\022incoming_node_id_2\030\007"
  " \001(\r\0226\n\tnode_type\030\010 \001(\0162\020.ELeagueNodeTyp"
  "e:\021INVALID_NODE_TYPE\022\026\n\016scheduled_time\030\t"
  " \001(\r\022\023\n\013actual_time\030\023 \001(\r\022\021\n\tseries_id\030\n"
  " \001(\r\022\021\n\tteam_id_1\030\013 \001(\r\022\021\n\tteam_id_2\030\014 \001"
  "(\r\0221\n\007matches\030\r \003(\0132 .CMsgDOTALeagueNode"
  ".MatchDetails\022\023\n\013team_1_wins\030\016 \001(\r\022\023\n\013te"
  "am_2_wins\030\017 \001(\r\022\023\n\013has_started\030\020 \001(\010\022\024\n\014"
  "is_completed\030\021 \001(\010\022\022\n\nstream_ids\030\022 \003(\r\022%"
  "\n\004vods\030\024 \003(\0132\027.CMsgDOTALeagueNode.VOD\0329\n"
  "\014MatchDetails\022\020\n\010match_id\030\001 \001(\004\022\027\n\017winni"
  "ng_team_id\030\002 \001(\r\032:\n\003VOD\022\023\n\013series_game\030\001"
  " \001(\r\022\021\n\tstream_id\030\002 \001(\r\022\013\n\003url\030\003 \001(\t\"\325\t\n"
  "\027CMsgDOTALeagueNodeGroup\022\014\n\004name\030\001 \001(\t\022\025"
  "\n\rnode_group_id\030\002 \001(\r\022\034\n\024parent_node_gro"
  "up_id\030\003 \001(\r\022\037\n\027incoming_node_group_ids\030\004"
  " \003(\r\022\037\n\027advancing_node_group_id\030\005 \001(\r\022\034\n"
  "\024advancing_team_count\030\006 \001(\r\022\022\n\nteam_coun"
  "t\030\007 \001(\r\022B\n\017node_group_type\030\010 \001(\0162\025.ELeag"
  "ueNodeGroupType:\022INVALID_GROUP_TYPE\022>\n\021d"
  "efault_node_type\030\t \001(\0162\020.ELeagueNodeType"
  ":\021INVALID_NODE_TYPE\022\r\n\005round\030\n \001(\r\022\022\n\nma"
  "x_rounds\030\013 \001(\r\022\025\n\ris_tiebreaker\030\014 \001(\010\022\026\n"
  "\016is_final_group\030\r \001(\010\022\024\n\014is_completed\030\016 "
  "\001(\010\0220\n\005phase\030\022 \001(\0162\r.ELeaguePhase:\022LEAGU"
  "E_PHASE_UNSET\0223\n\006region\030\023 \001(\0162\016.ELeagueR"
  "egion:\023LEAGUE_REGION_UNSET\022\022\n\nstart_time"
  "\030\024 \001(\r\022\020\n\010end_time\030\025 \001(\r\022)\n!secondary_ad"
  "vancing_node_group_id\030\026 \001(\r\022&\n\036secondary"
  "_advancing_team_count\030\027 \001(\r\022(\n tertiary_"
  "advancing_node_group_id\030\030 \001(\r\022%\n\035tertiar"
  "y_advancing_team_count\030\031 \001(\r\022\036\n\026eliminat"
  "ion_dpc_points\030\032 \001(\r\022=\n\016team_standings\030\017"
  " \003(\0132%.CMsgDOTALeagueNodeGroup.TeamStand"
  "ing\022\"\n\005nodes\030\020 \003(\0132\023.CMsgDOTALeagueNode\022"
  "-\n\013node_groups\030\021 \003(\0132\030.CMsgDOTALeagueNod"
  "eGroup\032\263\002\n\014TeamStanding\022\020\n\010standing\030\001 \001("
  "\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\020\n"
  "\010team_tag\030\004 \001(\t\022\021\n\tteam_logo\030\005 \001(\004\022\025\n\rte"
  "am_logo_url\030\006 \001(\t\022\014\n\004wins\030\007 \001(\r\022\016\n\006losse"
  "s\030\010 \001(\r\022\r\n\005score\030\t \001(\003\022\031\n\021team_abbreviat"
  "ion\030\n \001(\t\022\034\n\024score_tiebreak_group\030\013 \001(\003\022"
  "\034\n\024score_tiebreak_below\030\014 \001(\003\022\035\n\025score_t"
  "iebreak_random\030\r \001(\003\022\016\n\006is_pro\030\016 \001(\010\"\242\013\n"
  "\016CMsgDOTALeague\022\"\n\004info\030\001 \001(\0132\024.CMsgDOTA"
  "League.Info\022-\n\nprize_pool\030\002 \001(\0132\031.CMsgDO"
  "TALeague.PrizePool\022%\n\006admins\030\003 \003(\0132\025.CMs"
  "gDOTALeague.Admin\022\'\n\007streams\030\004 \003(\0132\026.CMs"
  "gDOTALeague.Stream\022-\n\013node_groups\030\005 \003(\0132"
  "\030.CMsgDOTALeagueNodeGroup\0220\n\014series_info"
  "s\030\006 \003(\0132\032.CMsgDOTALeague.SeriesInfo\0222\n\022r"
  "egistered_players\030\007 \003(\0132\026.CMsgDOTALeague"
  ".Player\032\214\003\n\004Info\022\021\n\tleague_id\030\001 \001(\r\022\014\n\004n"
  "ame\030\002 \001(\t\022-\n\004tier\030\003 \001(\0162\014.ELeagueTier:\021L"
  "EAGUE_TIER_UNSET\0223\n\006region\030\004 \001(\0162\016.ELeag"
  "ueRegion:\023LEAGUE_REGION_UNSET\022\013\n\003url\030\005 \001"
  "(\t\022\023\n\013description\030\006 \001(\t\022\r\n\005notes\030\007 \001(\t\022\027"
  "\n\017start_timestamp\030\010 \001(\r\022\025\n\rend_timestamp"
  "\030\t \001(\r\022\032\n\022pro_circuit_points\030\n \001(\r\022\022\n\nim"
  "age_bits\030\013 \001(\r\0223\n\006status\030\014 \001(\0162\016.ELeague"
  "Status:\023LEAGUE_STATUS_UNSET\022\034\n\024most_rece"
  "nt_activity\030\r \001(\r\022\033\n\023registration_period"
  "\030\016 \001(\r\032F\n\005Admin\022\022\n\naccount_id\030\001 \001(\r\022\022\n\ni"
  "s_primary\030\002 \001(\010\022\025\n\remail_address\030\003 \001(\t\032t"
  "\n\rPrizePoolItem\022\020\n\010item_def\030\001 \001(\r\022\034\n\024sal"
  "es_stop_timestamp\030\002 \001(\r\022\023\n\013revenue_pct\030\003"
  " \001(\r\022\036\n\026revenue_cents_per_sale\030\004 \001(\r\032\225\001\n"
  "\tPrizePool\022\027\n\017base_prize_pool\030\001 \001(\r\022\030\n\020t"
  "otal_prize_pool\030\002 \001(\r\022\034\n\024prize_split_pct"
  "_x100\030\003 \003(\r\0227\n\020prize_pool_items\030\004 \003(\0132\035."
  "CMsgDOTALeague.PrizePoolItem\032\261\001\n\006Stream\022"
  "\021\n\tstream_id\030\001 \001(\r\022\020\n\010language\030\002 \001(\r\022\014\n\004"
  "name\030\003 \001(\t\022O\n\022broadcast_provider\030\004 \001(\0162\031"
  ".ELeagueBroadcastProvider:\030LEAGUE_BROADC"
  "AST_UNKNOWN\022\022\n\nstream_url\030\005 \001(\t\022\017\n\007vod_u"
  "rl\030\006 \001(\t\032\201\001\n\nSeriesInfo\022\021\n\tseries_id\030\001 \001"
  "(\r\022\023\n\013series_type\030\002 \001(\r\022\022\n\nstart_time\030\003 "
  "\001(\r\022\021\n\tmatch_ids\030\004 \003(\004\022\021\n\tteam_id_1\030\005 \001("
  "\r\022\021\n\tteam_id_2\030\006 \001(\r\032;\n\006Player\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007team_id\030\003 \001("
  "\r\"6\n\022CMsgDOTALeagueList\022 \n\007leagues\030\001 \003(\013"
  "2\017.CMsgDOTALeague\"\221\002\n\022CMsgDOTALeagueInfo"
  "\022\021\n\tleague_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022-\n\004tie"
  "r\030\003 \001(\0162\014.ELeagueTier:\021LEAGUE_TIER_UNSET"
  "\0223\n\006region\030\004 \001(\0162\016.ELeagueRegion:\023LEAGUE"
  "_REGION_UNSET\022\034\n\024most_recent_activity\030\005 "
  "\001(\r\022\030\n\020total_prize_pool\030\006 \001(\r\022\027\n\017start_t"
  "imestamp\030\007 \001(\r\022\025\n\rend_timestamp\030\010 \001(\r\022\016\n"
  "\006status\030\t \001(\r\"<\n\026CMsgDOTALeagueInfoList\022"
  "\"\n\005infos\030\001 \003(\0132\023.CMsgDOTALeagueInfo\"\344\002\n\027"
  "CMsgDOTALeagueLiveGames\0220\n\005games\030\001 \003(\0132!"
  ".CMsgDOTALeagueLiveGames.LiveGame\032\226\002\n\010Li"
  "veGame\022\021\n\tleague_id\030\001 \001(\r\022\027\n\017server_stea"
  "m_id\030\002 \001(\004\022\024\n\014radiant_name\030\003 \001(\t\022\024\n\014radi"
  "ant_logo\030\004 \001(\004\022\027\n\017radiant_team_id\030\t \001(\r\022"
  "\021\n\tdire_name\030\005 \001(\t\022\021\n\tdire_logo\030\006 \001(\004\022\024\n"
  "\014dire_team_id\030\n \001(\r\022\014\n\004time\030\007 \001(\r\022\022\n\nspe"
  "ctators\030\010 \001(\r\022\026\n\016league_node_id\030\013 \001(\r\022\021\n"
  "\tseries_id\030\014 \001(\r\022\020\n\010match_id\030\r \001(\004\"\225\001\n\026C"
  "MsgDOTALeagueMessages\0221\n\010messages\030\001 \003(\0132"
  "\037.CMsgDOTALeagueMessages.Message\032H\n\007Mess"
  "age\022\031\n\021author_account_id\030\001 \001(\r\022\021\n\ttimest"
  "amp\030\002 \001(\r\022\017\n\007message\030\003 \001(\t\"K\n\027CMsgDOTALe"
  "aguePrizePool\022\022\n\nprize_pool\030\001 \001(\r\022\034\n\024inc"
  "rement_per_second\030\002 \001(\002\"%\n#CMsgDOTALeagu"
  "eInfoListAdminsRequest\"\?\n\031CMsgDOTALeague"
  "NodeRequest\022\021\n\tleague_id\030\001 \001(\r\022\017\n\007node_i"
  "d\030\002 \001(\r\"\?\n\032CMsgDOTALeagueNodeResponse\022!\n"
  "\004node\030\001 \001(\0132\023.CMsgDOTALeagueNode\"=\n(CMsg"
  "DOTALeagueAvailableLobbyNodesRequest\022\021\n\t"
  "league_id\030\001 \001(\r\"\323\001\n!CMsgDOTALeagueAvaila"
  "bleLobbyNodes\022\?\n\nnode_infos\030\001 \003(\0132+.CMsg"
  "DOTALeagueAvailableLobbyNodes.NodeInfo\032m"
  "\n\010NodeInfo\022\017\n\007node_id\030\001 \001(\r\022\021\n\tnode_name"
  "\030\002 \001(\t\022\027\n\017node_group_name\030\003 \001(\t\022\021\n\tteam_"
  "id_1\030\004 \001(\r\022\021\n\tteam_id_2\030\005 \001(\r\"\332\003\n\031CMsgDO"
  "TALeagueNodeResults\0227\n\014node_results\030\001 \003("
  "\0132!.CMsgDOTALeagueNodeResults.Result\032\203\003\n"
  "\006Result\022\017\n\007node_id\030\001 \001(\r\022\027\n\017winning_node"
  "_id\030\002 \001(\r\022\026\n\016losing_node_id\030\003 \001(\r\022\032\n\022inc"
  "oming_node_id_1\030\004 \001(\r\022\032\n\022incoming_node_i"
  "d_2\030\005 \001(\r\022\021\n\tteam_id_1\030\006 \001(\r\022\021\n\tteam_id_"
  "2\030\007 \001(\r\022\023\n\013team_1_name\030\010 \001(\t\022\023\n\013team_2_n"
  "ame\030\t \001(\t\022\023\n\013team_1_wins\030\n \001(\r\022\023\n\013team_2"
  "_wins\030\013 \001(\r\022\027\n\017winning_team_id\030\014 \001(\r\022\026\n\016"
  "losing_team_id\030\r \001(\r\022\023\n\013has_started\030\016 \001("
  "\010\022\024\n\014is_completed\030\017 \001(\010\022\026\n\016scheduled_tim"
  "e\030\020 \001(\r\022\021\n\tmatch_ids\030\021 \003(\004\"\333\002\n\030CMsgDOTAD"
  "PCLeagueResults\0221\n\007results\030\001 \003(\0132 .CMsgD"
  "OTADPCLeagueResults.Result\022\016\n\006points\030\002 \003"
  "(\r\022\017\n\007dollars\030\003 \003(\r\032\352\001\n\006Result\022\020\n\010standi"
  "ng\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_name\030\003"
  " \001(\t\022\021\n\tteam_logo\030\004 \001(\004\022\025\n\rteam_logo_url"
  "\030\005 \001(\t\022\016\n\006points\030\006 \001(\r\022\020\n\010earnings\030\007 \001(\r"
  "\022\021\n\ttimestamp\030\010 \001(\r\0220\n\005phase\030\t \001(\0162\r.ELe"
  "aguePhase:\022LEAGUE_PHASE_UNSET\022\031\n\021team_ab"
  "breviation\030\n \001(\t\"\255\001\n\026CMsgDOTADPCTeamResu"
  "lts\022/\n\007results\030\001 \003(\0132\036.CMsgDOTADPCTeamRe"
  "sults.Result\032b\n\006Result\022\021\n\tleague_id\030\001 \001("
  "\r\022\020\n\010standing\030\002 \001(\r\022\016\n\006points\030\003 \001(\r\022\020\n\010e"
  "arnings\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\r\"\320\007\n\030CMs"
  "gDOTADPCSeasonResults\0225\n\007results\030\001 \003(\0132$"
  ".CMsgDOTADPCSeasonResults.TeamResult\0225\n\t"
  "standings\030\002 \003(\0132\".CMsgDOTADPCSeasonResul"
  "ts.Standing\022I\n\030major_wildcard_standings\030"
  "\003 \003(\0132\'.CMsgDOTADPCSeasonResults.Standin"
  "gEntry\022F\n\025major_group_standings\030\004 \003(\0132\'."
  "CMsgDOTADPCSeasonResults.StandingEntry\022H"
  "\n\027major_playoff_standings\030\005 \003(\0132\'.CMsgDO"
  "TADPCSeasonResults.StandingEntry\032\226\001\n\020Tea"
  "mLeagueResult\022\021\n\ttimestamp\030\001 \001(\r\022\021\n\tleag"
  "ue_id\030\002 \001(\r\022\020\n\010standing\030\003 \001(\r\022\016\n\006points\030"
  "\004 \001(\r\022\020\n\010earnings\030\005 \001(\r\022\024\n\014audit_action\030"
  "\006 \001(\r\022\022\n\naudit_data\030\007 \001(\r\032\347\001\n\nTeamResult"
  "\022\017\n\007team_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\031\n\021"
  "team_abbreviation\030\010 \001(\t\022\021\n\tteam_logo\030\003 \001"
  "(\004\022\025\n\rteam_logo_url\030\004 \001(\t\022\024\n\014total_point"
  "s\030\005 \001(\r\022\026\n\016total_earnings\030\006 \001(\r\022B\n\016leagu"
  "e_results\030\007 \003(\0132*.CMsgDOTADPCSeasonResul"
  "ts.TeamLeagueResult\032~\n\rStandingEntry\022\017\n\007"
  "team_id\030\001 \001(\r\022\014\n\004wins\030\002 \001(\r\022\016\n\006losses\030\003 "
  "\001(\r\022\020\n\010team_url\030\004 \001(\t\022\021\n\tteam_name\030\005 \001(\t"
  "\022\031\n\021team_abbreviation\030\006 \001(\t\032f\n\010Standing\022"
  "\016\n\006region\030\001 \001(\r\022\020\n\010division\030\002 \001(\r\0228\n\007ent"
  "ries\030\003 \003(\0132\'.CMsgDOTADPCSeasonResults.St"
  "andingEntry\"n\n\037CMsgDOTADPCSeasonSpoilerR"
  "esults\022\031\n\021time_last_updated\030\001 \001(\r\0220\n\rsav"
  "ed_results\030\002 \001(\0132\031.CMsgDOTADPCSeasonResu"
  "lts*\310\001\n\024ELeagueNodeGroupType\022\026\n\022INVALID_"
  "GROUP_TYPE\020\000\022\022\n\016ORGANIZATIONAL\020\001\022\017\n\013ROUN"
  "D_ROBIN\020\002\022\t\n\005SWISS\020\003\022\022\n\016BRACKET_SINGLE\020\004"
  "\022\035\n\031BRACKET_DOUBLE_SEED_LOSER\020\005\022\035\n\031BRACK"
  "ET_DOUBLE_ALL_WINNER\020\006\022\r\n\tSHOWMATCH\020\007\022\007\n"
  "\003GSL\020\010*o\n\017ELeagueNodeType\022\025\n\021INVALID_NOD"
  "E_TYPE\020\000\022\017\n\013BEST_OF_ONE\020\001\022\021\n\rBEST_OF_THR"
  "EE\020\002\022\020\n\014BEST_OF_FIVE\020\003\022\017\n\013BEST_OF_TWO\020\004B"
  "\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto = {
  false, false, 7246, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fleague_2eproto, "dota_gcmessages_common_league.proto", 
  &descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto_deps, 1, 39,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fleague_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fleague_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELeagueNodeGroupType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[0];
}
bool ELeagueNodeGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELeagueNodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[1];
}
bool ELeagueNodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTALeagueNode_MatchDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNode_MatchDetails>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winning_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTALeagueNode_MatchDetails::CMsgDOTALeagueNode_MatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNode.MatchDetails)
}
CMsgDOTALeagueNode_MatchDetails::CMsgDOTALeagueNode_MatchDetails(const CMsgDOTALeagueNode_MatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&winning_team_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNode.MatchDetails)
}

void CMsgDOTALeagueNode_MatchDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&winning_team_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
}

CMsgDOTALeagueNode_MatchDetails::~CMsgDOTALeagueNode_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNode.MatchDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNode_MatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueNode_MatchDetails::ArenaDtor(void* object) {
  CMsgDOTALeagueNode_MatchDetails* _this = reinterpret_cast< CMsgDOTALeagueNode_MatchDetails* >(object);
  (void)_this;
}
void CMsgDOTALeagueNode_MatchDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNode_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNode_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNode.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winning_team_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNode_MatchDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winning_team_id(&has_bits);
          winning_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNode_MatchDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNode.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 winning_team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winning_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNode.MatchDetails)
  return target;
}

size_t CMsgDOTALeagueNode_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNode.MatchDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 winning_team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNode_MatchDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNode.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNode_MatchDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNode_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNode.MatchDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNode.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNode_MatchDetails::MergeFrom(const CMsgDOTALeagueNode_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNode.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winning_team_id_ = from.winning_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNode_MatchDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNode.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNode_MatchDetails::CopyFrom(const CMsgDOTALeagueNode_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNode.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNode_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNode_MatchDetails::InternalSwap(CMsgDOTALeagueNode_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode_MatchDetails, winning_team_id_)
      + sizeof(CMsgDOTALeagueNode_MatchDetails::winning_team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode_MatchDetails, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNode_MatchDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNode_VOD::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNode_VOD>()._has_bits_);
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeagueNode_VOD::CMsgDOTALeagueNode_VOD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNode.VOD)
}
CMsgDOTALeagueNode_VOD::CMsgDOTALeagueNode_VOD(const CMsgDOTALeagueNode_VOD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  ::memcpy(&series_game_, &from.series_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&series_game_)) + sizeof(stream_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNode.VOD)
}

void CMsgDOTALeagueNode_VOD::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&series_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_id_) -
    reinterpret_cast<char*>(&series_game_)) + sizeof(stream_id_));
}

CMsgDOTALeagueNode_VOD::~CMsgDOTALeagueNode_VOD() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNode.VOD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNode_VOD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNode_VOD::ArenaDtor(void* object) {
  CMsgDOTALeagueNode_VOD* _this = reinterpret_cast< CMsgDOTALeagueNode_VOD* >(object);
  (void)_this;
}
void CMsgDOTALeagueNode_VOD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNode_VOD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNode_VOD::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNode.VOD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&series_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stream_id_) -
        reinterpret_cast<char*>(&series_game_)) + sizeof(stream_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNode_VOD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 series_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_series_game(&has_bits);
          series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNode.VOD.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNode_VOD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNode.VOD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_game = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_series_game(), target);
  }

  // optional uint32 stream_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stream_id(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNode.VOD.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNode.VOD)
  return target;
}

size_t CMsgDOTALeagueNode_VOD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNode.VOD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 series_game = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_game());
    }

    // optional uint32 stream_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stream_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNode_VOD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNode.VOD)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNode_VOD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNode_VOD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNode.VOD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNode.VOD)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNode_VOD::MergeFrom(const CMsgDOTALeagueNode_VOD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNode.VOD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      series_game_ = from.series_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      stream_id_ = from.stream_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNode_VOD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNode.VOD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNode_VOD::CopyFrom(const CMsgDOTALeagueNode_VOD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNode.VOD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNode_VOD::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNode_VOD::InternalSwap(CMsgDOTALeagueNode_VOD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode_VOD, stream_id_)
      + sizeof(CMsgDOTALeagueNode_VOD::stream_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode_VOD, series_game_)>(
          reinterpret_cast<char*>(&series_game_),
          reinterpret_cast<char*>(&other->series_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNode_VOD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNode>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_winning_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_losing_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_incoming_node_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_incoming_node_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scheduled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_actual_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_team_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_team_1_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_team_2_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_started(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgDOTALeagueNode::CMsgDOTALeagueNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena),
  stream_ids_(arena),
  vods_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNode)
}
CMsgDOTALeagueNode::CMsgDOTALeagueNode(const CMsgDOTALeagueNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matches_(from.matches_),
      stream_ids_(from.stream_ids_),
      vods_(from.vods_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(actual_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNode)
}

void CMsgDOTALeagueNode::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actual_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(actual_time_));
}

CMsgDOTALeagueNode::~CMsgDOTALeagueNode() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNode::ArenaDtor(void* object) {
  CMsgDOTALeagueNode* _this = reinterpret_cast< CMsgDOTALeagueNode* >(object);
  (void)_this;
}
void CMsgDOTALeagueNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  stream_ids_.Clear();
  vods_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_type_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(node_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&scheduled_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_completed_) -
        reinterpret_cast<char*>(&scheduled_time_)) + sizeof(is_completed_));
  }
  actual_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNode.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_node_group_id(&has_bits);
          node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_winning_node_id(&has_bits);
          winning_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losing_node_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_losing_node_id(&has_bits);
          losing_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 incoming_node_id_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_incoming_node_id_1(&has_bits);
          incoming_node_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 incoming_node_id_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_incoming_node_id_2(&has_bits);
          incoming_node_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueNodeType_IsValid(val))) {
            _internal_set_node_type(static_cast<::ELeagueNodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 scheduled_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_scheduled_time(&has_bits);
          scheduled_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_team_id_1(&has_bits);
          team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_team_id_2(&has_bits);
          team_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNode.MatchDetails matches = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 team_1_wins = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_team_1_wins(&has_bits);
          team_1_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_2_wins = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_team_2_wins(&has_bits);
          team_2_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_started = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_has_started(&has_bits);
          has_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_completed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_is_completed(&has_bits);
          is_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stream_ids = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_stream_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stream_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 actual_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_actual_time(&has_bits);
          actual_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNode.VOD vods = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_id(), target);
  }

  // optional uint32 node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_node_group_id(), target);
  }

  // optional uint32 winning_node_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_winning_node_id(), target);
  }

  // optional uint32 losing_node_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_losing_node_id(), target);
  }

  // optional uint32 incoming_node_id_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_incoming_node_id_1(), target);
  }

  // optional uint32 incoming_node_id_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_incoming_node_id_2(), target);
  }

  // optional .ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_node_type(), target);
  }

  // optional uint32 scheduled_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_scheduled_time(), target);
  }

  // optional uint32 series_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_series_id(), target);
  }

  // optional uint32 team_id_1 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_team_id_1(), target);
  }

  // optional uint32 team_id_2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_team_id_2(), target);
  }

  // repeated .CMsgDOTALeagueNode.MatchDetails matches = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_matches(i), target, stream);
  }

  // optional uint32 team_1_wins = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_team_1_wins(), target);
  }

  // optional uint32 team_2_wins = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_team_2_wins(), target);
  }

  // optional bool has_started = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_has_started(), target);
  }

  // optional bool is_completed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_completed(), target);
  }

  // repeated uint32 stream_ids = 18;
  for (int i = 0, n = this->_internal_stream_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_stream_ids(i), target);
  }

  // optional uint32 actual_time = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_actual_time(), target);
  }

  // repeated .CMsgDOTALeagueNode.VOD vods = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vods_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_vods(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNode)
  return target;
}

size_t CMsgDOTALeagueNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueNode.MatchDetails matches = 13;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 stream_ids = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stream_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stream_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTALeagueNode.VOD vods = 20;
  total_size += 2UL * this->_internal_vods_size();
  for (const auto& msg : this->vods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

    // optional uint32 node_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_group_id());
    }

    // optional uint32 winning_node_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_node_id());
    }

    // optional uint32 losing_node_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losing_node_id());
    }

    // optional uint32 incoming_node_id_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_incoming_node_id_1());
    }

    // optional uint32 incoming_node_id_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_incoming_node_id_2());
    }

    // optional .ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_node_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 scheduled_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scheduled_time());
    }

    // optional uint32 series_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 team_id_1 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_1());
    }

    // optional uint32 team_id_2 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_2());
    }

    // optional uint32 team_1_wins = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_1_wins());
    }

    // optional uint32 team_2_wins = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_2_wins());
    }

    // optional bool has_started = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_completed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional uint32 actual_time = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actual_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNode)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNode::MergeFrom(const CMsgDOTALeagueNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  stream_ids_.MergeFrom(from.stream_ids_);
  vods_.MergeFrom(from.vods_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_group_id_ = from.node_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_node_id_ = from.winning_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      losing_node_id_ = from.losing_node_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      incoming_node_id_1_ = from.incoming_node_id_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      incoming_node_id_2_ = from.incoming_node_id_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      node_type_ = from.node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      scheduled_time_ = from.scheduled_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000800u) {
      team_id_2_ = from.team_id_2_;
    }
    if (cached_has_bits & 0x00001000u) {
      team_1_wins_ = from.team_1_wins_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_2_wins_ = from.team_2_wins_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_started_ = from.has_started_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_completed_ = from.is_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_actual_time(from._internal_actual_time());
  }
}

void CMsgDOTALeagueNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNode::CopyFrom(const CMsgDOTALeagueNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNode::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNode::InternalSwap(CMsgDOTALeagueNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matches_.InternalSwap(&other->matches_);
  stream_ids_.InternalSwap(&other->stream_ids_);
  vods_.InternalSwap(&other->vods_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode, actual_time_)
      + sizeof(CMsgDOTALeagueNode::actual_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNode, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeGroup_TeamStanding::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNodeGroup_TeamStanding>()._has_bits_);
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_score_tiebreak_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_score_tiebreak_below(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_score_tiebreak_random(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgDOTALeagueNodeGroup_TeamStanding::CMsgDOTALeagueNodeGroup_TeamStanding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeGroup.TeamStanding)
}
CMsgDOTALeagueNodeGroup_TeamStanding::CMsgDOTALeagueNodeGroup_TeamStanding(const CMsgDOTALeagueNodeGroup_TeamStanding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&standing_, &from.standing_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pro_) -
    reinterpret_cast<char*>(&standing_)) + sizeof(is_pro_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeGroup.TeamStanding)
}

void CMsgDOTALeagueNodeGroup_TeamStanding::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&standing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_pro_) -
    reinterpret_cast<char*>(&standing_)) + sizeof(is_pro_));
}

CMsgDOTALeagueNodeGroup_TeamStanding::~CMsgDOTALeagueNodeGroup_TeamStanding() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeGroup.TeamStanding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeGroup_TeamStanding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeGroup_TeamStanding::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeGroup_TeamStanding* _this = reinterpret_cast< CMsgDOTALeagueNodeGroup_TeamStanding* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeGroup_TeamStanding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeGroup_TeamStanding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeGroup_TeamStanding::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&standing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wins_) -
        reinterpret_cast<char*>(&standing_)) + sizeof(wins_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&losses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_pro_) -
        reinterpret_cast<char*>(&losses_)) + sizeof(is_pro_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeGroup_TeamStanding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 standing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_standing(&has_bits);
          standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeGroup.TeamStanding.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 score_tiebreak_group = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_score_tiebreak_group(&has_bits);
          score_tiebreak_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 score_tiebreak_below = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_score_tiebreak_below(&has_bits);
          score_tiebreak_below_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 score_tiebreak_random = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_score_tiebreak_random(&has_bits);
          score_tiebreak_random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_pro = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_pro(&has_bits);
          is_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeGroup_TeamStanding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 standing = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_standing(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional string team_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_tag(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_team_logo(), target);
  }

  // optional string team_logo_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_logo_url(), target);
  }

  // optional uint32 wins = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_wins(), target);
  }

  // optional uint32 losses = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_losses(), target);
  }

  // optional int64 score = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_score(), target);
  }

  // optional string team_abbreviation = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeGroup.TeamStanding.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_team_abbreviation(), target);
  }

  // optional int64 score_tiebreak_group = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_score_tiebreak_group(), target);
  }

  // optional int64 score_tiebreak_below = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_score_tiebreak_below(), target);
  }

  // optional int64 score_tiebreak_random = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_score_tiebreak_random(), target);
  }

  // optional bool is_pro = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeGroup.TeamStanding)
  return target;
}

size_t CMsgDOTALeagueNodeGroup_TeamStanding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_logo_url = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional string team_abbreviation = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint32 standing = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_standing());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

    // optional uint32 wins = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 losses = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional int64 score = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_score());
    }

    // optional int64 score_tiebreak_group = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_score_tiebreak_group());
    }

    // optional int64 score_tiebreak_below = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_score_tiebreak_below());
    }

    // optional int64 score_tiebreak_random = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_score_tiebreak_random());
    }

    // optional bool is_pro = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeGroup_TeamStanding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeGroup_TeamStanding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeGroup_TeamStanding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeGroup.TeamStanding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeGroup.TeamStanding)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeGroup_TeamStanding::MergeFrom(const CMsgDOTALeagueNodeGroup_TeamStanding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000010u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      wins_ = from.wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000200u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000400u) {
      score_tiebreak_group_ = from.score_tiebreak_group_;
    }
    if (cached_has_bits & 0x00000800u) {
      score_tiebreak_below_ = from.score_tiebreak_below_;
    }
    if (cached_has_bits & 0x00001000u) {
      score_tiebreak_random_ = from.score_tiebreak_random_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_pro_ = from.is_pro_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeGroup_TeamStanding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeGroup_TeamStanding::CopyFrom(const CMsgDOTALeagueNodeGroup_TeamStanding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeGroup.TeamStanding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeGroup_TeamStanding::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeGroup_TeamStanding::InternalSwap(CMsgDOTALeagueNodeGroup_TeamStanding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeGroup_TeamStanding, is_pro_)
      + sizeof(CMsgDOTALeagueNodeGroup_TeamStanding::is_pro_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeGroup_TeamStanding, standing_)>(
          reinterpret_cast<char*>(&standing_),
          reinterpret_cast<char*>(&other->standing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeGroup_TeamStanding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNodeGroup>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_parent_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_advancing_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_advancing_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_node_group_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_round(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_max_rounds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_tiebreaker(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_final_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_secondary_advancing_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_secondary_advancing_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tertiary_advancing_node_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tertiary_advancing_team_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_elimination_dpc_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
};

CMsgDOTALeagueNodeGroup::CMsgDOTALeagueNodeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  incoming_node_group_ids_(arena),
  team_standings_(arena),
  nodes_(arena),
  node_groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeGroup)
}
CMsgDOTALeagueNodeGroup::CMsgDOTALeagueNodeGroup(const CMsgDOTALeagueNodeGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      incoming_node_group_ids_(from.incoming_node_group_ids_),
      team_standings_(from.team_standings_),
      nodes_(from.nodes_),
      node_groups_(from.node_groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&node_group_id_, &from.node_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&elimination_dpc_points_) -
    reinterpret_cast<char*>(&node_group_id_)) + sizeof(elimination_dpc_points_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeGroup)
}

void CMsgDOTALeagueNodeGroup::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_group_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elimination_dpc_points_) -
    reinterpret_cast<char*>(&node_group_id_)) + sizeof(elimination_dpc_points_));
}

CMsgDOTALeagueNodeGroup::~CMsgDOTALeagueNodeGroup() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeGroup::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeGroup* _this = reinterpret_cast< CMsgDOTALeagueNodeGroup* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_node_group_ids_.Clear();
  team_standings_.Clear();
  nodes_.Clear();
  node_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&node_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_node_type_) -
        reinterpret_cast<char*>(&node_group_id_)) + sizeof(default_node_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&round_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&round_)) + sizeof(start_time_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&end_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elimination_dpc_points_) -
        reinterpret_cast<char*>(&end_time_)) + sizeof(elimination_dpc_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeGroup.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_node_group_id(&has_bits);
          node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 parent_node_group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_parent_node_group_id(&has_bits);
          parent_node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 incoming_node_group_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_incoming_node_group_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_incoming_node_group_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 advancing_node_group_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_advancing_node_group_id(&has_bits);
          advancing_node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 advancing_team_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_advancing_team_count(&has_bits);
          advancing_team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_count(&has_bits);
          team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueNodeGroupType_IsValid(val))) {
            _internal_set_node_group_type(static_cast<::ELeagueNodeGroupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueNodeType_IsValid(val))) {
            _internal_set_default_node_type(static_cast<::ELeagueNodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 round = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_round(&has_bits);
          round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_rounds = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_rounds(&has_bits);
          max_rounds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_tiebreaker = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_tiebreaker(&has_bits);
          is_tiebreaker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_final_group = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_final_group(&has_bits);
          is_final_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_completed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_completed(&has_bits);
          is_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_standings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNode nodes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNodeGroup node_groups = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_node_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeaguePhase_IsValid(val))) {
            _internal_set_phase(static_cast<::ELeaguePhase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 secondary_advancing_node_group_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_secondary_advancing_node_group_id(&has_bits);
          secondary_advancing_node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 secondary_advancing_team_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_secondary_advancing_team_count(&has_bits);
          secondary_advancing_team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tertiary_advancing_node_group_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tertiary_advancing_node_group_id(&has_bits);
          tertiary_advancing_node_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tertiary_advancing_team_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tertiary_advancing_team_count(&has_bits);
          tertiary_advancing_team_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 elimination_dpc_points = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_elimination_dpc_points(&has_bits);
          elimination_dpc_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeGroup.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 node_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_group_id(), target);
  }

  // optional uint32 parent_node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_parent_node_group_id(), target);
  }

  // repeated uint32 incoming_node_group_ids = 4;
  for (int i = 0, n = this->_internal_incoming_node_group_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_incoming_node_group_ids(i), target);
  }

  // optional uint32 advancing_node_group_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_advancing_node_group_id(), target);
  }

  // optional uint32 advancing_team_count = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_advancing_team_count(), target);
  }

  // optional uint32 team_count = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_count(), target);
  }

  // optional .ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_node_group_type(), target);
  }

  // optional .ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_default_node_type(), target);
  }

  // optional uint32 round = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_round(), target);
  }

  // optional uint32 max_rounds = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_max_rounds(), target);
  }

  // optional bool is_tiebreaker = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_is_tiebreaker(), target);
  }

  // optional bool is_final_group = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_final_group(), target);
  }

  // optional bool is_completed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_completed(), target);
  }

  // repeated .CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_standings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_team_standings(i), target, stream);
  }

  // repeated .CMsgDOTALeagueNode nodes = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_nodes(i), target, stream);
  }

  // repeated .CMsgDOTALeagueNodeGroup node_groups = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_node_groups(i), target, stream);
  }

  // optional .ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_phase(), target);
  }

  // optional .ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_region(), target);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_start_time(), target);
  }

  // optional uint32 end_time = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_end_time(), target);
  }

  // optional uint32 secondary_advancing_node_group_id = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_secondary_advancing_node_group_id(), target);
  }

  // optional uint32 secondary_advancing_team_count = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_secondary_advancing_team_count(), target);
  }

  // optional uint32 tertiary_advancing_node_group_id = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_tertiary_advancing_node_group_id(), target);
  }

  // optional uint32 tertiary_advancing_team_count = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tertiary_advancing_team_count(), target);
  }

  // optional uint32 elimination_dpc_points = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_elimination_dpc_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeGroup)
  return target;
}

size_t CMsgDOTALeagueNodeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 incoming_node_group_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incoming_node_group_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_incoming_node_group_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
  total_size += 1UL * this->_internal_team_standings_size();
  for (const auto& msg : this->team_standings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeagueNode nodes = 16;
  total_size += 2UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeagueNodeGroup node_groups = 17;
  total_size += 2UL * this->_internal_node_groups_size();
  for (const auto& msg : this->node_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 node_group_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_group_id());
    }

    // optional uint32 parent_node_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_parent_node_group_id());
    }

    // optional uint32 advancing_node_group_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_advancing_node_group_id());
    }

    // optional uint32 advancing_team_count = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_advancing_team_count());
    }

    // optional uint32 team_count = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_count());
    }

    // optional .ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_node_group_type());
    }

    // optional .ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_default_node_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 round = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_round());
    }

    // optional uint32 max_rounds = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_rounds());
    }

    // optional bool is_tiebreaker = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_final_group = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_completed = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

    // optional .ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional uint32 start_time = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional uint32 end_time = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_time());
    }

    // optional uint32 secondary_advancing_node_group_id = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secondary_advancing_node_group_id());
    }

    // optional uint32 secondary_advancing_team_count = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secondary_advancing_team_count());
    }

    // optional uint32 tertiary_advancing_node_group_id = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tertiary_advancing_node_group_id());
    }

    // optional uint32 tertiary_advancing_team_count = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tertiary_advancing_team_count());
    }

    // optional uint32 elimination_dpc_points = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_elimination_dpc_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeGroup)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeGroup::MergeFrom(const CMsgDOTALeagueNodeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_node_group_ids_.MergeFrom(from.incoming_node_group_ids_);
  team_standings_.MergeFrom(from.team_standings_);
  nodes_.MergeFrom(from.nodes_);
  node_groups_.MergeFrom(from.node_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      node_group_id_ = from.node_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_node_group_id_ = from.parent_node_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      advancing_node_group_id_ = from.advancing_node_group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      advancing_team_count_ = from.advancing_team_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_count_ = from.team_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      node_group_type_ = from.node_group_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_node_type_ = from.default_node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      round_ = from.round_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_rounds_ = from.max_rounds_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_tiebreaker_ = from.is_tiebreaker_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_final_group_ = from.is_final_group_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_completed_ = from.is_completed_;
    }
    if (cached_has_bits & 0x00002000u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00004000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00008000u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      secondary_advancing_node_group_id_ = from.secondary_advancing_node_group_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      secondary_advancing_team_count_ = from.secondary_advancing_team_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      tertiary_advancing_node_group_id_ = from.tertiary_advancing_node_group_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      tertiary_advancing_team_count_ = from.tertiary_advancing_team_count_;
    }
    if (cached_has_bits & 0x00200000u) {
      elimination_dpc_points_ = from.elimination_dpc_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeGroup::CopyFrom(const CMsgDOTALeagueNodeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeGroup::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeGroup::InternalSwap(CMsgDOTALeagueNodeGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  incoming_node_group_ids_.InternalSwap(&other->incoming_node_group_ids_);
  team_standings_.InternalSwap(&other->team_standings_);
  nodes_.InternalSwap(&other->nodes_);
  node_groups_.InternalSwap(&other->node_groups_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeGroup, elimination_dpc_points_)
      + sizeof(CMsgDOTALeagueNodeGroup::elimination_dpc_points_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeGroup, node_group_id_)>(
          reinterpret_cast<char*>(&node_group_id_),
          reinterpret_cast<char*>(&other->node_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_Info>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pro_circuit_points(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_image_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_most_recent_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_registration_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgDOTALeague_Info::CMsgDOTALeague_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.Info)
}
CMsgDOTALeague_Info::CMsgDOTALeague_Info(const CMsgDOTALeague_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notes()) {
    notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notes(), 
      GetArena());
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&registration_period_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(registration_period_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.Info)
}

void CMsgDOTALeague_Info::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&registration_period_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(registration_period_));
}

CMsgDOTALeague_Info::~CMsgDOTALeague_Info() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.Info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Info::ArenaDtor(void* object) {
  CMsgDOTALeague_Info* _this = reinterpret_cast< CMsgDOTALeague_Info* >(object);
  (void)_this;
}
void CMsgDOTALeague_Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      notes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(start_timestamp_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&end_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&registration_period_) -
        reinterpret_cast<char*>(&end_timestamp_)) + sizeof(registration_period_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Info.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueTier_IsValid(val))) {
            _internal_set_tier(static_cast<::ELeagueTier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Info.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Info.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Info.notes");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pro_circuit_points = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pro_circuit_points(&has_bits);
          pro_circuit_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_bits = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_image_bits(&has_bits);
          image_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueStatus_IsValid(val))) {
            _internal_set_status(static_cast<::ELeagueStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 most_recent_activity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_most_recent_activity(&has_bits);
          most_recent_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 registration_period = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_registration_period(&has_bits);
          registration_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Info.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tier(), target);
  }

  // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_region(), target);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Info.url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url(), target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Info.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // optional string notes = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Info.notes");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_notes(), target);
  }

  // optional uint32 start_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_end_timestamp(), target);
  }

  // optional uint32 pro_circuit_points = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pro_circuit_points(), target);
  }

  // optional uint32 image_bits = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_image_bits(), target);
  }

  // optional .ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_status(), target);
  }

  // optional uint32 most_recent_activity = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_most_recent_activity(), target);
  }

  // optional uint32 registration_period = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_registration_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.Info)
  return target;
}

size_t CMsgDOTALeague_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string description = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string notes = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notes());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tier());
    }

    // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional uint32 start_timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_timestamp());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 end_timestamp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_timestamp());
    }

    // optional uint32 pro_circuit_points = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pro_circuit_points());
    }

    // optional uint32 image_bits = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_bits());
    }

    // optional .ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional uint32 most_recent_activity = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_most_recent_activity());
    }

    // optional uint32 registration_period = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_registration_period());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.Info)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Info::MergeFrom(const CMsgDOTALeague_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_notes(from._internal_notes());
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_timestamp_ = from.start_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      pro_circuit_points_ = from.pro_circuit_points_;
    }
    if (cached_has_bits & 0x00000400u) {
      image_bits_ = from.image_bits_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00001000u) {
      most_recent_activity_ = from.most_recent_activity_;
    }
    if (cached_has_bits & 0x00002000u) {
      registration_period_ = from.registration_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Info::CopyFrom(const CMsgDOTALeague_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Info::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Info::InternalSwap(CMsgDOTALeague_Info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Info, registration_period_)
      + sizeof(CMsgDOTALeague_Info::registration_period_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Info, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_Admin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_Admin>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeague_Admin::CMsgDOTALeague_Admin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.Admin)
}
CMsgDOTALeague_Admin::CMsgDOTALeague_Admin(const CMsgDOTALeague_Admin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email_address()) {
    email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_address(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.Admin)
}

void CMsgDOTALeague_Admin::SharedCtor() {
email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
}

CMsgDOTALeague_Admin::~CMsgDOTALeague_Admin() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.Admin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_Admin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Admin::ArenaDtor(void* object) {
  CMsgDOTALeague_Admin* _this = reinterpret_cast< CMsgDOTALeague_Admin* >(object);
  (void)_this;
}
void CMsgDOTALeague_Admin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_Admin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_Admin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.Admin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_address_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_primary_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_Admin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_primary(&has_bits);
          is_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string email_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_email_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Admin.email_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_Admin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.Admin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool is_primary = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_primary(), target);
  }

  // optional string email_address = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_address().data(), static_cast<int>(this->_internal_email_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Admin.email_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.Admin)
  return target;
}

size_t CMsgDOTALeague_Admin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.Admin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string email_address = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_address());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool is_primary = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Admin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.Admin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Admin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_Admin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.Admin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.Admin)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Admin::MergeFrom(const CMsgDOTALeague_Admin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.Admin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email_address(from._internal_email_address());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_primary_ = from.is_primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Admin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.Admin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Admin::CopyFrom(const CMsgDOTALeague_Admin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.Admin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Admin::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Admin::InternalSwap(CMsgDOTALeague_Admin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_address_.Swap(&other->email_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Admin, is_primary_)
      + sizeof(CMsgDOTALeague_Admin::is_primary_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Admin, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_Admin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_PrizePoolItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_PrizePoolItem>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sales_stop_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_revenue_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revenue_cents_per_sale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTALeague_PrizePoolItem::CMsgDOTALeague_PrizePoolItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.PrizePoolItem)
}
CMsgDOTALeague_PrizePoolItem::CMsgDOTALeague_PrizePoolItem(const CMsgDOTALeague_PrizePoolItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenue_cents_per_sale_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.PrizePoolItem)
}

void CMsgDOTALeague_PrizePoolItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&revenue_cents_per_sale_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
}

CMsgDOTALeague_PrizePoolItem::~CMsgDOTALeague_PrizePoolItem() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.PrizePoolItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_PrizePoolItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeague_PrizePoolItem::ArenaDtor(void* object) {
  CMsgDOTALeague_PrizePoolItem* _this = reinterpret_cast< CMsgDOTALeague_PrizePoolItem* >(object);
  (void)_this;
}
void CMsgDOTALeague_PrizePoolItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_PrizePoolItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_PrizePoolItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.PrizePoolItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_cents_per_sale_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_PrizePoolItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sales_stop_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sales_stop_timestamp(&has_bits);
          sales_stop_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 revenue_pct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_revenue_pct(&has_bits);
          revenue_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 revenue_cents_per_sale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_revenue_cents_per_sale(&has_bits);
          revenue_cents_per_sale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_PrizePoolItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.PrizePoolItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 sales_stop_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sales_stop_timestamp(), target);
  }

  // optional uint32 revenue_pct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_revenue_pct(), target);
  }

  // optional uint32 revenue_cents_per_sale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_revenue_cents_per_sale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.PrizePoolItem)
  return target;
}

size_t CMsgDOTALeague_PrizePoolItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.PrizePoolItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 sales_stop_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sales_stop_timestamp());
    }

    // optional uint32 revenue_pct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_revenue_pct());
    }

    // optional uint32 revenue_cents_per_sale = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_revenue_cents_per_sale());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_PrizePoolItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.PrizePoolItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_PrizePoolItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_PrizePoolItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.PrizePoolItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.PrizePoolItem)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_PrizePoolItem::MergeFrom(const CMsgDOTALeague_PrizePoolItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.PrizePoolItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      sales_stop_timestamp_ = from.sales_stop_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_pct_ = from.revenue_pct_;
    }
    if (cached_has_bits & 0x00000008u) {
      revenue_cents_per_sale_ = from.revenue_cents_per_sale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_PrizePoolItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.PrizePoolItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_PrizePoolItem::CopyFrom(const CMsgDOTALeague_PrizePoolItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.PrizePoolItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_PrizePoolItem::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_PrizePoolItem::InternalSwap(CMsgDOTALeague_PrizePoolItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_PrizePoolItem, revenue_cents_per_sale_)
      + sizeof(CMsgDOTALeague_PrizePoolItem::revenue_cents_per_sale_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_PrizePoolItem, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_PrizePoolItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_PrizePool::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_PrizePool>()._has_bits_);
  static void set_has_base_prize_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_prize_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTALeague_PrizePool::CMsgDOTALeague_PrizePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prize_split_pct_x100_(arena),
  prize_pool_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.PrizePool)
}
CMsgDOTALeague_PrizePool::CMsgDOTALeague_PrizePool(const CMsgDOTALeague_PrizePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prize_split_pct_x100_(from.prize_split_pct_x100_),
      prize_pool_items_(from.prize_pool_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_prize_pool_, &from.base_prize_pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_prize_pool_) -
    reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.PrizePool)
}

void CMsgDOTALeague_PrizePool::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_prize_pool_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_prize_pool_) -
    reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
}

CMsgDOTALeague_PrizePool::~CMsgDOTALeague_PrizePool() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.PrizePool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_PrizePool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeague_PrizePool::ArenaDtor(void* object) {
  CMsgDOTALeague_PrizePool* _this = reinterpret_cast< CMsgDOTALeague_PrizePool* >(object);
  (void)_this;
}
void CMsgDOTALeague_PrizePool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_PrizePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_PrizePool::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.PrizePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prize_split_pct_x100_.Clear();
  prize_pool_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&base_prize_pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_prize_pool_) -
        reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_PrizePool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 base_prize_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_base_prize_pool(&has_bits);
          base_prize_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prize_pool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_prize_pool(&has_bits);
          total_prize_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 prize_split_pct_x100 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_prize_split_pct_x100(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_prize_split_pct_x100(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prize_pool_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_PrizePool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.PrizePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 base_prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_base_prize_pool(), target);
  }

  // optional uint32 total_prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_prize_pool(), target);
  }

  // repeated uint32 prize_split_pct_x100 = 3;
  for (int i = 0, n = this->_internal_prize_split_pct_x100_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prize_split_pct_x100(i), target);
  }

  // repeated .CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prize_pool_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_prize_pool_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.PrizePool)
  return target;
}

size_t CMsgDOTALeague_PrizePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.PrizePool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 prize_split_pct_x100 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->prize_split_pct_x100_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_prize_split_pct_x100_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
  total_size += 1UL * this->_internal_prize_pool_items_size();
  for (const auto& msg : this->prize_pool_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 base_prize_pool = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_prize_pool());
    }

    // optional uint32 total_prize_pool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prize_pool());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_PrizePool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.PrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_PrizePool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_PrizePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.PrizePool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.PrizePool)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_PrizePool::MergeFrom(const CMsgDOTALeague_PrizePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.PrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prize_split_pct_x100_.MergeFrom(from.prize_split_pct_x100_);
  prize_pool_items_.MergeFrom(from.prize_pool_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      base_prize_pool_ = from.base_prize_pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_prize_pool_ = from.total_prize_pool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_PrizePool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.PrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_PrizePool::CopyFrom(const CMsgDOTALeague_PrizePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.PrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_PrizePool::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_PrizePool::InternalSwap(CMsgDOTALeague_PrizePool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prize_split_pct_x100_.InternalSwap(&other->prize_split_pct_x100_);
  prize_pool_items_.InternalSwap(&other->prize_pool_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_PrizePool, total_prize_pool_)
      + sizeof(CMsgDOTALeague_PrizePool::total_prize_pool_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_PrizePool, base_prize_pool_)>(
          reinterpret_cast<char*>(&base_prize_pool_),
          reinterpret_cast<char*>(&other->base_prize_pool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_PrizePool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_Stream::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_Stream>()._has_bits_);
  static void set_has_stream_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vod_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTALeague_Stream::CMsgDOTALeague_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.Stream)
}
CMsgDOTALeague_Stream::CMsgDOTALeague_Stream(const CMsgDOTALeague_Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  stream_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stream_url()) {
    stream_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_url(), 
      GetArena());
  }
  vod_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vod_url()) {
    vod_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vod_url(), 
      GetArena());
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_provider_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.Stream)
}

void CMsgDOTALeague_Stream::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stream_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vod_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stream_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_provider_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
}

CMsgDOTALeague_Stream::~CMsgDOTALeague_Stream() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.Stream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vod_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Stream::ArenaDtor(void* object) {
  CMsgDOTALeague_Stream* _this = reinterpret_cast< CMsgDOTALeague_Stream* >(object);
  (void)_this;
}
void CMsgDOTALeague_Stream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      stream_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      vod_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_provider_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream_id(&has_bits);
          stream_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Stream.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueBroadcastProvider_IsValid(val))) {
            _internal_set_broadcast_provider(static_cast<::ELeagueBroadcastProvider>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string stream_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stream_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Stream.stream_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vod_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_vod_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Stream.vod_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stream_id(), target);
  }

  // optional uint32 language = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_language(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Stream.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional .ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_broadcast_provider(), target);
  }

  // optional string stream_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_url().data(), static_cast<int>(this->_internal_stream_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Stream.stream_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_url(), target);
  }

  // optional string vod_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vod_url().data(), static_cast<int>(this->_internal_vod_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Stream.vod_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_vod_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.Stream)
  return target;
}

size_t CMsgDOTALeague_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string stream_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream_url());
    }

    // optional string vod_url = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vod_url());
    }

    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stream_id());
    }

    // optional uint32 language = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_language());
    }

    // optional .ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_broadcast_provider());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.Stream)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Stream::MergeFrom(const CMsgDOTALeague_Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_stream_url(from._internal_stream_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_vod_url(from._internal_vod_url());
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000020u) {
      broadcast_provider_ = from.broadcast_provider_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Stream::CopyFrom(const CMsgDOTALeague_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Stream::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Stream::InternalSwap(CMsgDOTALeague_Stream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stream_url_.Swap(&other->stream_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vod_url_.Swap(&other->vod_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Stream, broadcast_provider_)
      + sizeof(CMsgDOTALeague_Stream::broadcast_provider_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Stream, stream_id_)>(
          reinterpret_cast<char*>(&stream_id_),
          reinterpret_cast<char*>(&other->stream_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_SeriesInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_SeriesInfo>()._has_bits_);
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTALeague_SeriesInfo::CMsgDOTALeague_SeriesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.SeriesInfo)
}
CMsgDOTALeague_SeriesInfo::CMsgDOTALeague_SeriesInfo(const CMsgDOTALeague_SeriesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.SeriesInfo)
}

void CMsgDOTALeague_SeriesInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&series_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
}

CMsgDOTALeague_SeriesInfo::~CMsgDOTALeague_SeriesInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.SeriesInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_SeriesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeague_SeriesInfo::ArenaDtor(void* object) {
  CMsgDOTALeague_SeriesInfo* _this = reinterpret_cast< CMsgDOTALeague_SeriesInfo* >(object);
  (void)_this;
}
void CMsgDOTALeague_SeriesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_SeriesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_SeriesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.SeriesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_2_) -
        reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_SeriesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 match_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_id_1(&has_bits);
          team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_id_2(&has_bits);
          team_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_SeriesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.SeriesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_series_id(), target);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_series_type(), target);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_start_time(), target);
  }

  // repeated uint64 match_ids = 4;
  for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_ids(i), target);
  }

  // optional uint32 team_id_1 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id_1(), target);
  }

  // optional uint32 team_id_2 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.SeriesInfo)
  return target;
}

size_t CMsgDOTALeague_SeriesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.SeriesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 series_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 team_id_1 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_1());
    }

    // optional uint32 team_id_2 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_SeriesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.SeriesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_SeriesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_SeriesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.SeriesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.SeriesInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_SeriesInfo::MergeFrom(const CMsgDOTALeague_SeriesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.SeriesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_2_ = from.team_id_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_SeriesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.SeriesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_SeriesInfo::CopyFrom(const CMsgDOTALeague_SeriesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.SeriesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_SeriesInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_SeriesInfo::InternalSwap(CMsgDOTALeague_SeriesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_SeriesInfo, team_id_2_)
      + sizeof(CMsgDOTALeague_SeriesInfo::team_id_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_SeriesInfo, series_id_)>(
          reinterpret_cast<char*>(&series_id_),
          reinterpret_cast<char*>(&other->series_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_SeriesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTALeague_Player::CMsgDOTALeague_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague.Player)
}
CMsgDOTALeague_Player::CMsgDOTALeague_Player(const CMsgDOTALeague_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague.Player)
}

void CMsgDOTALeague_Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTALeague_Player::~CMsgDOTALeague_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Player::ArenaDtor(void* object) {
  CMsgDOTALeague_Player* _this = reinterpret_cast< CMsgDOTALeague_Player* >(object);
  (void)_this;
}
void CMsgDOTALeague_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeague.Player.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeague.Player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague.Player)
  return target;
}

size_t CMsgDOTALeague_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Player::MergeFrom(const CMsgDOTALeague_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Player::CopyFrom(const CMsgDOTALeague_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Player::InternalSwap(CMsgDOTALeague_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Player, team_id_)
      + sizeof(CMsgDOTALeague_Player::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeague::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeague>()._has_bits_);
  static const ::CMsgDOTALeague_Info& info(const CMsgDOTALeague* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTALeague_PrizePool& prize_pool(const CMsgDOTALeague* msg);
  static void set_has_prize_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgDOTALeague_Info&
CMsgDOTALeague::_Internal::info(const CMsgDOTALeague* msg) {
  return *msg->info_;
}
const ::CMsgDOTALeague_PrizePool&
CMsgDOTALeague::_Internal::prize_pool(const CMsgDOTALeague* msg) {
  return *msg->prize_pool_;
}
CMsgDOTALeague::CMsgDOTALeague(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  admins_(arena),
  streams_(arena),
  node_groups_(arena),
  series_infos_(arena),
  registered_players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeague)
}
CMsgDOTALeague::CMsgDOTALeague(const CMsgDOTALeague& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      admins_(from.admins_),
      streams_(from.streams_),
      node_groups_(from.node_groups_),
      series_infos_(from.series_infos_),
      registered_players_(from.registered_players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::CMsgDOTALeague_Info(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from._internal_has_prize_pool()) {
    prize_pool_ = new ::CMsgDOTALeague_PrizePool(*from.prize_pool_);
  } else {
    prize_pool_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeague)
}

void CMsgDOTALeague::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prize_pool_) -
    reinterpret_cast<char*>(&info_)) + sizeof(prize_pool_));
}

CMsgDOTALeague::~CMsgDOTALeague() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeague)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeague::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete prize_pool_;
}

void CMsgDOTALeague::ArenaDtor(void* object) {
  CMsgDOTALeague* _this = reinterpret_cast< CMsgDOTALeague* >(object);
  (void)_this;
}
void CMsgDOTALeague::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeague::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeague::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeague)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admins_.Clear();
  streams_.Clear();
  node_groups_.Clear();
  series_infos_.Clear();
  registered_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prize_pool_ != nullptr);
      prize_pool_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeague::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTALeague.Info info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTALeague.PrizePool prize_pool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prize_pool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeague.Admin admins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_admins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeague.Stream streams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeagueNodeGroup node_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeague.SeriesInfo series_infos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTALeague.Player registered_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registered_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeague::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeague)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTALeague.Info info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // optional .CMsgDOTALeague.PrizePool prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prize_pool(this), target, stream);
  }

  // repeated .CMsgDOTALeague.Admin admins = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_admins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_admins(i), target, stream);
  }

  // repeated .CMsgDOTALeague.Stream streams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_streams(i), target, stream);
  }

  // repeated .CMsgDOTALeagueNodeGroup node_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_node_groups(i), target, stream);
  }

  // repeated .CMsgDOTALeague.SeriesInfo series_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_series_infos(i), target, stream);
  }

  // repeated .CMsgDOTALeague.Player registered_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_registered_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_registered_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeague)
  return target;
}

size_t CMsgDOTALeague::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeague)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeague.Admin admins = 3;
  total_size += 1UL * this->_internal_admins_size();
  for (const auto& msg : this->admins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeague.Stream streams = 4;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeagueNodeGroup node_groups = 5;
  total_size += 1UL * this->_internal_node_groups_size();
  for (const auto& msg : this->node_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeague.SeriesInfo series_infos = 6;
  total_size += 1UL * this->_internal_series_infos_size();
  for (const auto& msg : this->series_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTALeague.Player registered_players = 7;
  total_size += 1UL * this->_internal_registered_players_size();
  for (const auto& msg : this->registered_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTALeague.Info info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .CMsgDOTALeague.PrizePool prize_pool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prize_pool_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeague)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeague>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeague)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeague)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague::MergeFrom(const CMsgDOTALeague& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeague)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  admins_.MergeFrom(from.admins_);
  streams_.MergeFrom(from.streams_);
  node_groups_.MergeFrom(from.node_groups_);
  series_infos_.MergeFrom(from.series_infos_);
  registered_players_.MergeFrom(from.registered_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::CMsgDOTALeague_Info::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prize_pool()->::CMsgDOTALeague_PrizePool::MergeFrom(from._internal_prize_pool());
    }
  }
}

void CMsgDOTALeague::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague::CopyFrom(const CMsgDOTALeague& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague::IsInitialized() const {
  return true;
}

void CMsgDOTALeague::InternalSwap(CMsgDOTALeague* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  admins_.InternalSwap(&other->admins_);
  streams_.InternalSwap(&other->streams_);
  node_groups_.InternalSwap(&other->node_groups_);
  series_infos_.InternalSwap(&other->series_infos_);
  registered_players_.InternalSwap(&other->registered_players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeague, prize_pool_)
      + sizeof(CMsgDOTALeague::prize_pool_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeague, info_)>(
          reinterpret_cast<char*>(&info_),
          reinterpret_cast<char*>(&other->info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeague::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueList::_Internal {
 public:
};

CMsgDOTALeagueList::CMsgDOTALeagueList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leagues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueList)
}
CMsgDOTALeagueList::CMsgDOTALeagueList(const CMsgDOTALeagueList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leagues_(from.leagues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueList)
}

void CMsgDOTALeagueList::SharedCtor() {
}

CMsgDOTALeagueList::~CMsgDOTALeagueList() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueList::ArenaDtor(void* object) {
  CMsgDOTALeagueList* _this = reinterpret_cast< CMsgDOTALeagueList* >(object);
  (void)_this;
}
void CMsgDOTALeagueList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leagues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeague leagues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leagues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeague leagues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leagues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_leagues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueList)
  return target;
}

size_t CMsgDOTALeagueList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeague leagues = 1;
  total_size += 1UL * this->_internal_leagues_size();
  for (const auto& msg : this->leagues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueList)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueList::MergeFrom(const CMsgDOTALeagueList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leagues_.MergeFrom(from.leagues_);
}

void CMsgDOTALeagueList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueList::CopyFrom(const CMsgDOTALeagueList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueList::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueList::InternalSwap(CMsgDOTALeagueList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leagues_.InternalSwap(&other->leagues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueInfo>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_most_recent_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_prize_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_end_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTALeagueInfo::CMsgDOTALeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueInfo)
}
CMsgDOTALeagueInfo::CMsgDOTALeagueInfo(const CMsgDOTALeagueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueInfo)
}

void CMsgDOTALeagueInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
}

CMsgDOTALeagueInfo::~CMsgDOTALeagueInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueInfo::ArenaDtor(void* object) {
  CMsgDOTALeagueInfo* _this = reinterpret_cast< CMsgDOTALeagueInfo* >(object);
  (void)_this;
}
void CMsgDOTALeagueInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(end_timestamp_));
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueTier_IsValid(val))) {
            _internal_set_tier(static_cast<::ELeagueTier>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 most_recent_activity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_most_recent_activity(&has_bits);
          most_recent_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prize_pool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_prize_pool(&has_bits);
          total_prize_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_start_timestamp(&has_bits);
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_end_timestamp(&has_bits);
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tier(), target);
  }

  // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_region(), target);
  }

  // optional uint32 most_recent_activity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_most_recent_activity(), target);
  }

  // optional uint32 total_prize_pool = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_prize_pool(), target);
  }

  // optional uint32 start_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_end_timestamp(), target);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueInfo)
  return target;
}

size_t CMsgDOTALeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional .ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tier());
    }

    // optional .ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional uint32 most_recent_activity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_most_recent_activity());
    }

    // optional uint32 total_prize_pool = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prize_pool());
    }

    // optional uint32 start_timestamp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_timestamp());
    }

    // optional uint32 end_timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_timestamp());
    }

  }
  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfo::MergeFrom(const CMsgDOTALeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000008u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000010u) {
      most_recent_activity_ = from.most_recent_activity_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_prize_pool_ = from.total_prize_pool_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      end_timestamp_ = from.end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_status(from._internal_status());
  }
}

void CMsgDOTALeagueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfo::CopyFrom(const CMsgDOTALeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfo::InternalSwap(CMsgDOTALeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueInfo, status_)
      + sizeof(CMsgDOTALeagueInfo::status_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueInfo, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueInfoList::_Internal {
 public:
};

CMsgDOTALeagueInfoList::CMsgDOTALeagueInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueInfoList)
}
CMsgDOTALeagueInfoList::CMsgDOTALeagueInfoList(const CMsgDOTALeagueInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueInfoList)
}

void CMsgDOTALeagueInfoList::SharedCtor() {
}

CMsgDOTALeagueInfoList::~CMsgDOTALeagueInfoList() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueInfoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueInfoList::ArenaDtor(void* object) {
  CMsgDOTALeagueInfoList* _this = reinterpret_cast< CMsgDOTALeagueInfoList* >(object);
  (void)_this;
}
void CMsgDOTALeagueInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeagueInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueInfoList)
  return target;
}

size_t CMsgDOTALeagueInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueInfoList)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfoList::MergeFrom(const CMsgDOTALeagueInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CMsgDOTALeagueInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfoList::CopyFrom(const CMsgDOTALeagueInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfoList::InternalSwap(CMsgDOTALeagueInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueLiveGames_LiveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueLiveGames_LiveGame>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radiant_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radiant_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_radiant_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dire_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dire_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dire_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgDOTALeagueLiveGames_LiveGame::CMsgDOTALeagueLiveGames_LiveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueLiveGames.LiveGame)
}
CMsgDOTALeagueLiveGames_LiveGame::CMsgDOTALeagueLiveGames_LiveGame(const CMsgDOTALeagueLiveGames_LiveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radiant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_name()) {
    radiant_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_name(), 
      GetArena());
  }
  dire_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_name()) {
    dire_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_name(), 
      GetArena());
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&series_id_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(series_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueLiveGames.LiveGame)
}

void CMsgDOTALeagueLiveGames_LiveGame::SharedCtor() {
radiant_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&series_id_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(series_id_));
}

CMsgDOTALeagueLiveGames_LiveGame::~CMsgDOTALeagueLiveGames_LiveGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueLiveGames.LiveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueLiveGames_LiveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radiant_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueLiveGames_LiveGame::ArenaDtor(void* object) {
  CMsgDOTALeagueLiveGames_LiveGame* _this = reinterpret_cast< CMsgDOTALeagueLiveGames_LiveGame* >(object);
  (void)_this;
}
void CMsgDOTALeagueLiveGames_LiveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueLiveGames_LiveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueLiveGames_LiveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueLiveGames.LiveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectators_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(spectators_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&radiant_team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_id_) -
        reinterpret_cast<char*>(&radiant_team_id_)) + sizeof(series_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueLiveGames_LiveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_radiant_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 radiant_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_radiant_logo(&has_bits);
          radiant_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dire_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueLiveGames.LiveGame.dire_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dire_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dire_logo(&has_bits);
          dire_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectators = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_spectators(&has_bits);
          spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_team_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_radiant_team_id(&has_bits);
          radiant_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_team_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dire_team_id(&has_bits);
          dire_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_league_node_id(&has_bits);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueLiveGames_LiveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueLiveGames.LiveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint64 server_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_steam_id(), target);
  }

  // optional string radiant_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_name().data(), static_cast<int>(this->_internal_radiant_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_radiant_name(), target);
  }

  // optional uint64 radiant_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_radiant_logo(), target);
  }

  // optional string dire_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_name().data(), static_cast<int>(this->_internal_dire_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueLiveGames.LiveGame.dire_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dire_name(), target);
  }

  // optional uint64 dire_logo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_dire_logo(), target);
  }

  // optional uint32 time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_time(), target);
  }

  // optional uint32 spectators = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_spectators(), target);
  }

  // optional uint32 radiant_team_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dire_team_id(), target);
  }

  // optional uint32 league_node_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_league_node_id(), target);
  }

  // optional uint32 series_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_series_id(), target);
  }

  // optional uint64 match_id = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueLiveGames.LiveGame)
  return target;
}

size_t CMsgDOTALeagueLiveGames_LiveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueLiveGames.LiveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_name());
    }

    // optional string dire_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_name());
    }

    // optional uint64 server_steam_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_steam_id());
    }

    // optional uint64 radiant_logo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_radiant_logo());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

    // optional uint64 dire_logo = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dire_logo());
    }

    // optional uint32 spectators = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectators());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 radiant_team_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_team_id());
    }

    // optional uint32 dire_team_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_team_id());
    }

    // optional uint32 league_node_id = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional uint64 match_id = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 series_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueLiveGames_LiveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueLiveGames.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueLiveGames_LiveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueLiveGames_LiveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueLiveGames.LiveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueLiveGames.LiveGame)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueLiveGames_LiveGame::MergeFrom(const CMsgDOTALeagueLiveGames_LiveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueLiveGames.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radiant_name(from._internal_radiant_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dire_name(from._internal_dire_name());
    }
    if (cached_has_bits & 0x00000004u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      radiant_logo_ = from.radiant_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      dire_logo_ = from.dire_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      spectators_ = from.spectators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      dire_team_id_ = from.dire_team_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueLiveGames_LiveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueLiveGames.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueLiveGames_LiveGame::CopyFrom(const CMsgDOTALeagueLiveGames_LiveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueLiveGames.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueLiveGames_LiveGame::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueLiveGames_LiveGame::InternalSwap(CMsgDOTALeagueLiveGames_LiveGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radiant_name_.Swap(&other->radiant_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_name_.Swap(&other->dire_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueLiveGames_LiveGame, series_id_)
      + sizeof(CMsgDOTALeagueLiveGames_LiveGame::series_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueLiveGames_LiveGame, server_steam_id_)>(
          reinterpret_cast<char*>(&server_steam_id_),
          reinterpret_cast<char*>(&other->server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueLiveGames_LiveGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueLiveGames::_Internal {
 public:
};

CMsgDOTALeagueLiveGames::CMsgDOTALeagueLiveGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueLiveGames)
}
CMsgDOTALeagueLiveGames::CMsgDOTALeagueLiveGames(const CMsgDOTALeagueLiveGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueLiveGames)
}

void CMsgDOTALeagueLiveGames::SharedCtor() {
}

CMsgDOTALeagueLiveGames::~CMsgDOTALeagueLiveGames() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueLiveGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueLiveGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueLiveGames::ArenaDtor(void* object) {
  CMsgDOTALeagueLiveGames* _this = reinterpret_cast< CMsgDOTALeagueLiveGames* >(object);
  (void)_this;
}
void CMsgDOTALeagueLiveGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueLiveGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueLiveGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueLiveGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueLiveGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeagueLiveGames.LiveGame games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueLiveGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueLiveGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueLiveGames.LiveGame games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueLiveGames)
  return target;
}

size_t CMsgDOTALeagueLiveGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueLiveGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueLiveGames.LiveGame games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueLiveGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueLiveGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueLiveGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueLiveGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueLiveGames)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueLiveGames::MergeFrom(const CMsgDOTALeagueLiveGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CMsgDOTALeagueLiveGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueLiveGames::CopyFrom(const CMsgDOTALeagueLiveGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueLiveGames::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueLiveGames::InternalSwap(CMsgDOTALeagueLiveGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueLiveGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueMessages_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueMessages_Message>()._has_bits_);
  static void set_has_author_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeagueMessages_Message::CMsgDOTALeagueMessages_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueMessages.Message)
}
CMsgDOTALeagueMessages_Message::CMsgDOTALeagueMessages_Message(const CMsgDOTALeagueMessages_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  ::memcpy(&author_account_id_, &from.author_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueMessages.Message)
}

void CMsgDOTALeagueMessages_Message::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&author_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
}

CMsgDOTALeagueMessages_Message::~CMsgDOTALeagueMessages_Message() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueMessages.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueMessages_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueMessages_Message::ArenaDtor(void* object) {
  CMsgDOTALeagueMessages_Message* _this = reinterpret_cast< CMsgDOTALeagueMessages_Message* >(object);
  (void)_this;
}
void CMsgDOTALeagueMessages_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueMessages_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueMessages_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueMessages.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&author_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueMessages_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 author_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_author_account_id(&has_bits);
          author_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueMessages.Message.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueMessages_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueMessages.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 author_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_author_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueMessages.Message.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueMessages.Message)
  return target;
}

size_t CMsgDOTALeagueMessages_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueMessages.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 author_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_author_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueMessages_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueMessages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueMessages_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueMessages_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueMessages.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueMessages.Message)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueMessages_Message::MergeFrom(const CMsgDOTALeagueMessages_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueMessages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      author_account_id_ = from.author_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueMessages_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueMessages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueMessages_Message::CopyFrom(const CMsgDOTALeagueMessages_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueMessages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueMessages_Message::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueMessages_Message::InternalSwap(CMsgDOTALeagueMessages_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueMessages_Message, timestamp_)
      + sizeof(CMsgDOTALeagueMessages_Message::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueMessages_Message, author_account_id_)>(
          reinterpret_cast<char*>(&author_account_id_),
          reinterpret_cast<char*>(&other->author_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueMessages_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueMessages::_Internal {
 public:
};

CMsgDOTALeagueMessages::CMsgDOTALeagueMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueMessages)
}
CMsgDOTALeagueMessages::CMsgDOTALeagueMessages(const CMsgDOTALeagueMessages& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueMessages)
}

void CMsgDOTALeagueMessages::SharedCtor() {
}

CMsgDOTALeagueMessages::~CMsgDOTALeagueMessages() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueMessages)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueMessages::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueMessages::ArenaDtor(void* object) {
  CMsgDOTALeagueMessages* _this = reinterpret_cast< CMsgDOTALeagueMessages* >(object);
  (void)_this;
}
void CMsgDOTALeagueMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueMessages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeagueMessages.Message messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueMessages::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueMessages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueMessages.Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueMessages)
  return target;
}

size_t CMsgDOTALeagueMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueMessages)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueMessages.Message messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueMessages* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueMessages)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueMessages)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueMessages::MergeFrom(const CMsgDOTALeagueMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CMsgDOTALeagueMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueMessages::CopyFrom(const CMsgDOTALeagueMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueMessages::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueMessages::InternalSwap(CMsgDOTALeagueMessages* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueMessages::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaguePrizePool::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaguePrizePool>()._has_bits_);
  static void set_has_prize_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_increment_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTALeaguePrizePool::CMsgDOTALeaguePrizePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaguePrizePool)
}
CMsgDOTALeaguePrizePool::CMsgDOTALeaguePrizePool(const CMsgDOTALeaguePrizePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prize_pool_, &from.prize_pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&increment_per_second_) -
    reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaguePrizePool)
}

void CMsgDOTALeaguePrizePool::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prize_pool_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&increment_per_second_) -
    reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
}

CMsgDOTALeaguePrizePool::~CMsgDOTALeaguePrizePool() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaguePrizePool)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaguePrizePool::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaguePrizePool::ArenaDtor(void* object) {
  CMsgDOTALeaguePrizePool* _this = reinterpret_cast< CMsgDOTALeaguePrizePool* >(object);
  (void)_this;
}
void CMsgDOTALeaguePrizePool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaguePrizePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaguePrizePool::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaguePrizePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prize_pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&increment_per_second_) -
        reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaguePrizePool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prize_pool(&has_bits);
          prize_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float increment_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_increment_per_second(&has_bits);
          increment_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaguePrizePool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaguePrizePool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prize_pool(), target);
  }

  // optional float increment_per_second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_increment_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaguePrizePool)
  return target;
}

size_t CMsgDOTALeaguePrizePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaguePrizePool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 prize_pool = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prize_pool());
    }

    // optional float increment_per_second = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaguePrizePool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaguePrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaguePrizePool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaguePrizePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaguePrizePool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaguePrizePool)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaguePrizePool::MergeFrom(const CMsgDOTALeaguePrizePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaguePrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prize_pool_ = from.prize_pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      increment_per_second_ = from.increment_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeaguePrizePool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaguePrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaguePrizePool::CopyFrom(const CMsgDOTALeaguePrizePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaguePrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaguePrizePool::IsInitialized() const {
  return true;
}

void CMsgDOTALeaguePrizePool::InternalSwap(CMsgDOTALeaguePrizePool* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeaguePrizePool, increment_per_second_)
      + sizeof(CMsgDOTALeaguePrizePool::increment_per_second_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeaguePrizePool, prize_pool_)>(
          reinterpret_cast<char*>(&prize_pool_),
          reinterpret_cast<char*>(&other->prize_pool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaguePrizePool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueInfoListAdminsRequest::_Internal {
 public:
};

CMsgDOTALeagueInfoListAdminsRequest::CMsgDOTALeagueInfoListAdminsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueInfoListAdminsRequest)
}
CMsgDOTALeagueInfoListAdminsRequest::CMsgDOTALeagueInfoListAdminsRequest(const CMsgDOTALeagueInfoListAdminsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueInfoListAdminsRequest)
}

void CMsgDOTALeagueInfoListAdminsRequest::SharedCtor() {
}

CMsgDOTALeagueInfoListAdminsRequest::~CMsgDOTALeagueInfoListAdminsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueInfoListAdminsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueInfoListAdminsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueInfoListAdminsRequest::ArenaDtor(void* object) {
  CMsgDOTALeagueInfoListAdminsRequest* _this = reinterpret_cast< CMsgDOTALeagueInfoListAdminsRequest* >(object);
  (void)_this;
}
void CMsgDOTALeagueInfoListAdminsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueInfoListAdminsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueInfoListAdminsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueInfoListAdminsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueInfoListAdminsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueInfoListAdminsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueInfoListAdminsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueInfoListAdminsRequest)
  return target;
}

size_t CMsgDOTALeagueInfoListAdminsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueInfoListAdminsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfoListAdminsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueInfoListAdminsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfoListAdminsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueInfoListAdminsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueInfoListAdminsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueInfoListAdminsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfoListAdminsRequest::MergeFrom(const CMsgDOTALeagueInfoListAdminsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueInfoListAdminsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTALeagueInfoListAdminsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueInfoListAdminsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfoListAdminsRequest::CopyFrom(const CMsgDOTALeagueInfoListAdminsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueInfoListAdminsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfoListAdminsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfoListAdminsRequest::InternalSwap(CMsgDOTALeagueInfoListAdminsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueInfoListAdminsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNodeRequest>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTALeagueNodeRequest::CMsgDOTALeagueNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeRequest)
}
CMsgDOTALeagueNodeRequest::CMsgDOTALeagueNodeRequest(const CMsgDOTALeagueNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeRequest)
}

void CMsgDOTALeagueNodeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
}

CMsgDOTALeagueNodeRequest::~CMsgDOTALeagueNodeRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueNodeRequest::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeRequest* _this = reinterpret_cast< CMsgDOTALeagueNodeRequest* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeRequest)
  return target;
}

size_t CMsgDOTALeagueNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeRequest::MergeFrom(const CMsgDOTALeagueNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeRequest::CopyFrom(const CMsgDOTALeagueNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeRequest::InternalSwap(CMsgDOTALeagueNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeRequest, node_id_)
      + sizeof(CMsgDOTALeagueNodeRequest::node_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeRequest, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNodeResponse>()._has_bits_);
  static const ::CMsgDOTALeagueNode& node(const CMsgDOTALeagueNodeResponse* msg);
  static void set_has_node(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTALeagueNode&
CMsgDOTALeagueNodeResponse::_Internal::node(const CMsgDOTALeagueNodeResponse* msg) {
  return *msg->node_;
}
CMsgDOTALeagueNodeResponse::CMsgDOTALeagueNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeResponse)
}
CMsgDOTALeagueNodeResponse::CMsgDOTALeagueNodeResponse(const CMsgDOTALeagueNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::CMsgDOTALeagueNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeResponse)
}

void CMsgDOTALeagueNodeResponse::SharedCtor() {
node_ = nullptr;
}

CMsgDOTALeagueNodeResponse::~CMsgDOTALeagueNodeResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete node_;
}

void CMsgDOTALeagueNodeResponse::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeResponse* _this = reinterpret_cast< CMsgDOTALeagueNodeResponse* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_ != nullptr);
    node_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTALeagueNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTALeagueNode node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeResponse)
  return target;
}

size_t CMsgDOTALeagueNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTALeagueNode node = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResponse::MergeFrom(const CMsgDOTALeagueNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_node()) {
    _internal_mutable_node()->::CMsgDOTALeagueNode::MergeFrom(from._internal_node());
  }
}

void CMsgDOTALeagueNodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResponse::CopyFrom(const CMsgDOTALeagueNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResponse::InternalSwap(CMsgDOTALeagueNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueAvailableLobbyNodesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueAvailableLobbyNodesRequest>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeagueAvailableLobbyNodesRequest::CMsgDOTALeagueAvailableLobbyNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueAvailableLobbyNodesRequest)
}
CMsgDOTALeagueAvailableLobbyNodesRequest::CMsgDOTALeagueAvailableLobbyNodesRequest(const CMsgDOTALeagueAvailableLobbyNodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueAvailableLobbyNodesRequest)
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::SharedCtor() {
league_id_ = 0u;
}

CMsgDOTALeagueAvailableLobbyNodesRequest::~CMsgDOTALeagueAvailableLobbyNodesRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueAvailableLobbyNodesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::ArenaDtor(void* object) {
  CMsgDOTALeagueAvailableLobbyNodesRequest* _this = reinterpret_cast< CMsgDOTALeagueAvailableLobbyNodesRequest* >(object);
  (void)_this;
}
void CMsgDOTALeagueAvailableLobbyNodesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueAvailableLobbyNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueAvailableLobbyNodesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueAvailableLobbyNodesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueAvailableLobbyNodesRequest)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueAvailableLobbyNodesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueAvailableLobbyNodesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_league_id()) {
    _internal_set_league_id(from._internal_league_id());
  }
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueAvailableLobbyNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::InternalSwap(CMsgDOTALeagueAvailableLobbyNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueAvailableLobbyNodesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueAvailableLobbyNodes_NodeInfo>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_node_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
}
CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_name()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArena());
  }
  node_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_group_name()) {
    node_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_group_name(), 
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SharedCtor() {
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
}

CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::~CMsgDOTALeagueAvailableLobbyNodes_NodeInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::ArenaDtor(void* object) {
  CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* _this = reinterpret_cast< CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* >(object);
  (void)_this;
}
void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      node_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      node_group_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_2_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string node_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string node_group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id_1(&has_bits);
          team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_id_2(&has_bits);
          team_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // optional string node_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_name(), target);
  }

  // optional string node_group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_group_name().data(), static_cast<int>(this->_internal_node_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_group_name(), target);
  }

  // optional uint32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id_1(), target);
  }

  // optional uint32 team_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string node_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_name());
    }

    // optional string node_group_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_group_name());
    }

    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

    // optional uint32 team_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_1());
    }

    // optional uint32 team_id_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodes_NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_node_name(from._internal_node_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_node_group_name(from._internal_node_group_name());
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_2_ = from.team_id_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::InternalSwap(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_group_name_.Swap(&other->node_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, team_id_2_)
      + sizeof(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::team_id_2_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueAvailableLobbyNodes::_Internal {
 public:
};

CMsgDOTALeagueAvailableLobbyNodes::CMsgDOTALeagueAvailableLobbyNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueAvailableLobbyNodes)
}
CMsgDOTALeagueAvailableLobbyNodes::CMsgDOTALeagueAvailableLobbyNodes(const CMsgDOTALeagueAvailableLobbyNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_infos_(from.node_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueAvailableLobbyNodes)
}

void CMsgDOTALeagueAvailableLobbyNodes::SharedCtor() {
}

CMsgDOTALeagueAvailableLobbyNodes::~CMsgDOTALeagueAvailableLobbyNodes() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueAvailableLobbyNodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueAvailableLobbyNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueAvailableLobbyNodes::ArenaDtor(void* object) {
  CMsgDOTALeagueAvailableLobbyNodes* _this = reinterpret_cast< CMsgDOTALeagueAvailableLobbyNodes* >(object);
  (void)_this;
}
void CMsgDOTALeagueAvailableLobbyNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueAvailableLobbyNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueAvailableLobbyNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueAvailableLobbyNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueAvailableLobbyNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueAvailableLobbyNodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueAvailableLobbyNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueAvailableLobbyNodes)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueAvailableLobbyNodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
  total_size += 1UL * this->_internal_node_infos_size();
  for (const auto& msg : this->node_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueAvailableLobbyNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueAvailableLobbyNodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueAvailableLobbyNodes)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodes::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueAvailableLobbyNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_infos_.MergeFrom(from.node_infos_);
}

void CMsgDOTALeagueAvailableLobbyNodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueAvailableLobbyNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodes::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueAvailableLobbyNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodes::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodes::InternalSwap(CMsgDOTALeagueAvailableLobbyNodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_infos_.InternalSwap(&other->node_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueAvailableLobbyNodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeResults_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeagueNodeResults_Result>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_winning_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_losing_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_incoming_node_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_incoming_node_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_id_1(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id_2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_team_1_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_2_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_1_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_2_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_winning_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_losing_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_has_started(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_scheduled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgDOTALeagueNodeResults_Result::CMsgDOTALeagueNodeResults_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeResults.Result)
}
CMsgDOTALeagueNodeResults_Result::CMsgDOTALeagueNodeResults_Result(const CMsgDOTALeagueNodeResults_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_1_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_1_name()) {
    team_1_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_1_name(), 
      GetArena());
  }
  team_2_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_2_name()) {
    team_2_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_2_name(), 
      GetArena());
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scheduled_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(scheduled_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeResults.Result)
}

void CMsgDOTALeagueNodeResults_Result::SharedCtor() {
team_1_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_2_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scheduled_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(scheduled_time_));
}

CMsgDOTALeagueNodeResults_Result::~CMsgDOTALeagueNodeResults_Result() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeResults.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeResults_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_1_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_2_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeResults_Result::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeResults_Result* _this = reinterpret_cast< CMsgDOTALeagueNodeResults_Result* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeResults_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeResults_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeResults_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_1_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_2_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_1_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_1_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&team_id_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scheduled_time_) -
        reinterpret_cast<char*>(&team_id_2_)) + sizeof(scheduled_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeResults_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winning_node_id(&has_bits);
          winning_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losing_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_losing_node_id(&has_bits);
          losing_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 incoming_node_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_incoming_node_id_1(&has_bits);
          incoming_node_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 incoming_node_id_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_incoming_node_id_2(&has_bits);
          incoming_node_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_id_1(&has_bits);
          team_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_id_2(&has_bits);
          team_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_1_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_team_1_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeResults.Result.team_1_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_2_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_team_2_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTALeagueNodeResults.Result.team_2_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_1_wins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_team_1_wins(&has_bits);
          team_1_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_2_wins = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_team_2_wins(&has_bits);
          team_2_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_team_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_winning_team_id(&has_bits);
          winning_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losing_team_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_losing_team_id(&has_bits);
          losing_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_started = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_has_started(&has_bits);
          has_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_completed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_completed(&has_bits);
          is_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scheduled_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_scheduled_time(&has_bits);
          scheduled_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 match_ids = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeResults_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // optional uint32 winning_node_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winning_node_id(), target);
  }

  // optional uint32 losing_node_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_losing_node_id(), target);
  }

  // optional uint32 incoming_node_id_1 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_incoming_node_id_1(), target);
  }

  // optional uint32 incoming_node_id_2 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_incoming_node_id_2(), target);
  }

  // optional uint32 team_id_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_id_1(), target);
  }

  // optional uint32 team_id_2 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_id_2(), target);
  }

  // optional string team_1_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_1_name().data(), static_cast<int>(this->_internal_team_1_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeResults.Result.team_1_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_team_1_name(), target);
  }

  // optional string team_2_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_2_name().data(), static_cast<int>(this->_internal_team_2_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALeagueNodeResults.Result.team_2_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_team_2_name(), target);
  }

  // optional uint32 team_1_wins = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_team_1_wins(), target);
  }

  // optional uint32 team_2_wins = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_team_2_wins(), target);
  }

  // optional uint32 winning_team_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_winning_team_id(), target);
  }

  // optional uint32 losing_team_id = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_losing_team_id(), target);
  }

  // optional bool has_started = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_has_started(), target);
  }

  // optional bool is_completed = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_completed(), target);
  }

  // optional uint32 scheduled_time = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_scheduled_time(), target);
  }

  // repeated uint64 match_ids = 17;
  for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_match_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeResults.Result)
  return target;
}

size_t CMsgDOTALeagueNodeResults_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeResults.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_1_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_1_name());
    }

    // optional string team_2_name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_2_name());
    }

    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

    // optional uint32 winning_node_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_node_id());
    }

    // optional uint32 losing_node_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losing_node_id());
    }

    // optional uint32 incoming_node_id_1 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_incoming_node_id_1());
    }

    // optional uint32 incoming_node_id_2 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_incoming_node_id_2());
    }

    // optional uint32 team_id_1 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_1());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 team_id_2 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_2());
    }

    // optional uint32 team_1_wins = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_1_wins());
    }

    // optional uint32 team_2_wins = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_2_wins());
    }

    // optional uint32 winning_team_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_team_id());
    }

    // optional uint32 losing_team_id = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losing_team_id());
    }

    // optional bool has_started = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_completed = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional uint32 scheduled_time = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scheduled_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResults_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResults_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeResults_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeResults.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeResults.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResults_Result::MergeFrom(const CMsgDOTALeagueNodeResults_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_1_name(from._internal_team_1_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_2_name(from._internal_team_2_name());
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_node_id_ = from.winning_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      losing_node_id_ = from.losing_node_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      incoming_node_id_1_ = from.incoming_node_id_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      incoming_node_id_2_ = from.incoming_node_id_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_1_ = from.team_id_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      team_id_2_ = from.team_id_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      team_1_wins_ = from.team_1_wins_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_2_wins_ = from.team_2_wins_;
    }
    if (cached_has_bits & 0x00000800u) {
      winning_team_id_ = from.winning_team_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      losing_team_id_ = from.losing_team_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      has_started_ = from.has_started_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_completed_ = from.is_completed_;
    }
    if (cached_has_bits & 0x00008000u) {
      scheduled_time_ = from.scheduled_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeResults_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResults_Result::CopyFrom(const CMsgDOTALeagueNodeResults_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResults_Result::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResults_Result::InternalSwap(CMsgDOTALeagueNodeResults_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  team_1_name_.Swap(&other->team_1_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_2_name_.Swap(&other->team_2_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeResults_Result, scheduled_time_)
      + sizeof(CMsgDOTALeagueNodeResults_Result::scheduled_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALeagueNodeResults_Result, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeResults_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeagueNodeResults::_Internal {
 public:
};

CMsgDOTALeagueNodeResults::CMsgDOTALeagueNodeResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeagueNodeResults)
}
CMsgDOTALeagueNodeResults::CMsgDOTALeagueNodeResults(const CMsgDOTALeagueNodeResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_results_(from.node_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeagueNodeResults)
}

void CMsgDOTALeagueNodeResults::SharedCtor() {
}

CMsgDOTALeagueNodeResults::~CMsgDOTALeagueNodeResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeagueNodeResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeagueNodeResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeagueNodeResults::ArenaDtor(void* object) {
  CMsgDOTALeagueNodeResults* _this = reinterpret_cast< CMsgDOTALeagueNodeResults* >(object);
  (void)_this;
}
void CMsgDOTALeagueNodeResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeagueNodeResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeagueNodeResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeagueNodeResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeagueNodeResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTALeagueNodeResults.Result node_results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeagueNodeResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeagueNodeResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueNodeResults.Result node_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeagueNodeResults)
  return target;
}

size_t CMsgDOTALeagueNodeResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeagueNodeResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALeagueNodeResults.Result node_results = 1;
  total_size += 1UL * this->_internal_node_results_size();
  for (const auto& msg : this->node_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeagueNodeResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeagueNodeResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeagueNodeResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeagueNodeResults)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResults::MergeFrom(const CMsgDOTALeagueNodeResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeagueNodeResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_results_.MergeFrom(from.node_results_);
}

void CMsgDOTALeagueNodeResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeagueNodeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResults::CopyFrom(const CMsgDOTALeagueNodeResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeagueNodeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResults::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResults::InternalSwap(CMsgDOTALeagueNodeResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_results_.InternalSwap(&other->node_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeagueNodeResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCLeagueResults_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCLeagueResults_Result>()._has_bits_);
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTADPCLeagueResults_Result::CMsgDOTADPCLeagueResults_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCLeagueResults.Result)
}
CMsgDOTADPCLeagueResults_Result::CMsgDOTADPCLeagueResults_Result(const CMsgDOTADPCLeagueResults_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&standing_, &from.standing_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&standing_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCLeagueResults.Result)
}

void CMsgDOTADPCLeagueResults_Result::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&standing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&standing_)) + sizeof(phase_));
}

CMsgDOTADPCLeagueResults_Result::~CMsgDOTADPCLeagueResults_Result() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCLeagueResults.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCLeagueResults_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCLeagueResults_Result::ArenaDtor(void* object) {
  CMsgDOTADPCLeagueResults_Result* _this = reinterpret_cast< CMsgDOTADPCLeagueResults_Result* >(object);
  (void)_this;
}
void CMsgDOTADPCLeagueResults_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCLeagueResults_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCLeagueResults_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCLeagueResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&standing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&earnings_) -
        reinterpret_cast<char*>(&standing_)) + sizeof(earnings_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(phase_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCLeagueResults_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 standing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_standing(&has_bits);
          standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCLeagueResults.Result.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCLeagueResults.Result.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earnings = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeaguePhase phase = 9 [default = LEAGUE_PHASE_UNSET];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeaguePhase_IsValid(val))) {
            _internal_set_phase(static_cast<::ELeaguePhase>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCLeagueResults.Result.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCLeagueResults_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCLeagueResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 standing = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_standing(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCLeagueResults.Result.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_team_logo(), target);
  }

  // optional string team_logo_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCLeagueResults.Result.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_logo_url(), target);
  }

  // optional uint32 points = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_points(), target);
  }

  // optional uint32 earnings = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_earnings(), target);
  }

  // optional uint32 timestamp = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_timestamp(), target);
  }

  // optional .ELeaguePhase phase = 9 [default = LEAGUE_PHASE_UNSET];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_phase(), target);
  }

  // optional string team_abbreviation = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCLeagueResults.Result.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCLeagueResults.Result)
  return target;
}

size_t CMsgDOTADPCLeagueResults_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCLeagueResults.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_logo_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional string team_abbreviation = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint32 standing = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_standing());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint64 team_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

    // optional uint32 points = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 earnings = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earnings());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 timestamp = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional .ELeaguePhase phase = 9 [default = LEAGUE_PHASE_UNSET];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCLeagueResults_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCLeagueResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCLeagueResults_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCLeagueResults_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCLeagueResults.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCLeagueResults.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCLeagueResults_Result::MergeFrom(const CMsgDOTADPCLeagueResults_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCLeagueResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000008u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000080u) {
      earnings_ = from.earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      phase_ = from.phase_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCLeagueResults_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCLeagueResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCLeagueResults_Result::CopyFrom(const CMsgDOTADPCLeagueResults_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCLeagueResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCLeagueResults_Result::IsInitialized() const {
  return true;
}

void CMsgDOTADPCLeagueResults_Result::InternalSwap(CMsgDOTADPCLeagueResults_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCLeagueResults_Result, phase_)
      + sizeof(CMsgDOTADPCLeagueResults_Result::phase_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCLeagueResults_Result, standing_)>(
          reinterpret_cast<char*>(&standing_),
          reinterpret_cast<char*>(&other->standing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCLeagueResults_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCLeagueResults::_Internal {
 public:
};

CMsgDOTADPCLeagueResults::CMsgDOTADPCLeagueResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena),
  points_(arena),
  dollars_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCLeagueResults)
}
CMsgDOTADPCLeagueResults::CMsgDOTADPCLeagueResults(const CMsgDOTADPCLeagueResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_),
      points_(from.points_),
      dollars_(from.dollars_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCLeagueResults)
}

void CMsgDOTADPCLeagueResults::SharedCtor() {
}

CMsgDOTADPCLeagueResults::~CMsgDOTADPCLeagueResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCLeagueResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCLeagueResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCLeagueResults::ArenaDtor(void* object) {
  CMsgDOTADPCLeagueResults* _this = reinterpret_cast< CMsgDOTADPCLeagueResults* >(object);
  (void)_this;
}
void CMsgDOTADPCLeagueResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCLeagueResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCLeagueResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCLeagueResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  points_.Clear();
  dollars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCLeagueResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCLeagueResults.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_points(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dollars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dollars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dollars(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCLeagueResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCLeagueResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCLeagueResults.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  // repeated uint32 points = 2;
  for (int i = 0, n = this->_internal_points_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_points(i), target);
  }

  // repeated uint32 dollars = 3;
  for (int i = 0, n = this->_internal_dollars_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dollars(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCLeagueResults)
  return target;
}

size_t CMsgDOTADPCLeagueResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCLeagueResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCLeagueResults.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 points = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->points_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
    total_size += data_size;
  }

  // repeated uint32 dollars = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dollars_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dollars_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCLeagueResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCLeagueResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCLeagueResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCLeagueResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCLeagueResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCLeagueResults)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCLeagueResults::MergeFrom(const CMsgDOTADPCLeagueResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCLeagueResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  points_.MergeFrom(from.points_);
  dollars_.MergeFrom(from.dollars_);
}

void CMsgDOTADPCLeagueResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCLeagueResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCLeagueResults::CopyFrom(const CMsgDOTADPCLeagueResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCLeagueResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCLeagueResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCLeagueResults::InternalSwap(CMsgDOTADPCLeagueResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  points_.InternalSwap(&other->points_);
  dollars_.InternalSwap(&other->dollars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCLeagueResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCTeamResults_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCTeamResults_Result>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTADPCTeamResults_Result::CMsgDOTADPCTeamResults_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamResults.Result)
}
CMsgDOTADPCTeamResults_Result::CMsgDOTADPCTeamResults_Result(const CMsgDOTADPCTeamResults_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamResults.Result)
}

void CMsgDOTADPCTeamResults_Result::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
}

CMsgDOTADPCTeamResults_Result::~CMsgDOTADPCTeamResults_Result() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamResults.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCTeamResults_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCTeamResults_Result::ArenaDtor(void* object) {
  CMsgDOTADPCTeamResults_Result* _this = reinterpret_cast< CMsgDOTADPCTeamResults_Result* >(object);
  (void)_this;
}
void CMsgDOTADPCTeamResults_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCTeamResults_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCTeamResults_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamResults_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 standing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_standing(&has_bits);
          standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCTeamResults_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamResults.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 standing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_standing(), target);
  }

  // optional uint32 points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // optional uint32 earnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_earnings(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamResults.Result)
  return target;
}

size_t CMsgDOTADPCTeamResults_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamResults.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 standing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_standing());
    }

    // optional uint32 points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 earnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earnings());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCTeamResults_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCTeamResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCTeamResults_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCTeamResults_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCTeamResults.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCTeamResults.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCTeamResults_Result::MergeFrom(const CMsgDOTADPCTeamResults_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000004u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000008u) {
      earnings_ = from.earnings_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCTeamResults_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCTeamResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCTeamResults_Result::CopyFrom(const CMsgDOTADPCTeamResults_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamResults_Result::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamResults_Result::InternalSwap(CMsgDOTADPCTeamResults_Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamResults_Result, timestamp_)
      + sizeof(CMsgDOTADPCTeamResults_Result::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCTeamResults_Result, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamResults_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCTeamResults::_Internal {
 public:
};

CMsgDOTADPCTeamResults::CMsgDOTADPCTeamResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCTeamResults)
}
CMsgDOTADPCTeamResults::CMsgDOTADPCTeamResults(const CMsgDOTADPCTeamResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCTeamResults)
}

void CMsgDOTADPCTeamResults::SharedCtor() {
}

CMsgDOTADPCTeamResults::~CMsgDOTADPCTeamResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCTeamResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCTeamResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCTeamResults::ArenaDtor(void* object) {
  CMsgDOTADPCTeamResults* _this = reinterpret_cast< CMsgDOTADPCTeamResults* >(object);
  (void)_this;
}
void CMsgDOTADPCTeamResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCTeamResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCTeamResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCTeamResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCTeamResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCTeamResults.Result results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCTeamResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCTeamResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamResults.Result results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCTeamResults)
  return target;
}

size_t CMsgDOTADPCTeamResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCTeamResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCTeamResults.Result results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCTeamResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCTeamResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCTeamResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCTeamResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCTeamResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCTeamResults)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCTeamResults::MergeFrom(const CMsgDOTADPCTeamResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCTeamResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTADPCTeamResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCTeamResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCTeamResults::CopyFrom(const CMsgDOTADPCTeamResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCTeamResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCTeamResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCTeamResults::InternalSwap(CMsgDOTADPCTeamResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCTeamResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonResults_TeamLeagueResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSeasonResults_TeamLeagueResult>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTADPCSeasonResults_TeamLeagueResult::CMsgDOTADPCSeasonResults_TeamLeagueResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonResults.TeamLeagueResult)
}
CMsgDOTADPCSeasonResults_TeamLeagueResult::CMsgDOTADPCSeasonResults_TeamLeagueResult(const CMsgDOTADPCSeasonResults_TeamLeagueResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(audit_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonResults.TeamLeagueResult)
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(audit_data_));
}

CMsgDOTADPCSeasonResults_TeamLeagueResult::~CMsgDOTADPCSeasonResults_TeamLeagueResult() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonResults_TeamLeagueResult* _this = reinterpret_cast< CMsgDOTADPCSeasonResults_TeamLeagueResult* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonResults_TeamLeagueResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonResults_TeamLeagueResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_data_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(audit_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonResults_TeamLeagueResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 standing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_standing(&has_bits);
          standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earnings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_audit_action(&has_bits);
          audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_audit_data(&has_bits);
          audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonResults_TeamLeagueResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 standing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_standing(), target);
  }

  // optional uint32 points = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_points(), target);
  }

  // optional uint32 earnings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_earnings(), target);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_audit_action(), target);
  }

  // optional uint32 audit_data = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  return target;
}

size_t CMsgDOTADPCSeasonResults_TeamLeagueResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 standing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_standing());
    }

    // optional uint32 points = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 earnings = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earnings());
    }

    // optional uint32 audit_action = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_action());
    }

    // optional uint32 audit_data = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonResults_TeamLeagueResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonResults_TeamLeagueResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonResults.TeamLeagueResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonResults.TeamLeagueResult)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::MergeFrom(const CMsgDOTADPCSeasonResults_TeamLeagueResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000008u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000010u) {
      earnings_ = from.earnings_;
    }
    if (cached_has_bits & 0x00000020u) {
      audit_action_ = from.audit_action_;
    }
    if (cached_has_bits & 0x00000040u) {
      audit_data_ = from.audit_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::CopyFrom(const CMsgDOTADPCSeasonResults_TeamLeagueResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonResults.TeamLeagueResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonResults_TeamLeagueResult::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonResults_TeamLeagueResult::InternalSwap(CMsgDOTADPCSeasonResults_TeamLeagueResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_TeamLeagueResult, audit_data_)
      + sizeof(CMsgDOTADPCSeasonResults_TeamLeagueResult::audit_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_TeamLeagueResult, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonResults_TeamLeagueResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonResults_TeamResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSeasonResults_TeamResult>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_points(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgDOTADPCSeasonResults_TeamResult::CMsgDOTADPCSeasonResults_TeamResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  league_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonResults.TeamResult)
}
CMsgDOTADPCSeasonResults_TeamResult::CMsgDOTADPCSeasonResults_TeamResult(const CMsgDOTADPCSeasonResults_TeamResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      league_results_(from.league_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_earnings_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(total_earnings_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonResults.TeamResult)
}

void CMsgDOTADPCSeasonResults_TeamResult::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_earnings_) -
    reinterpret_cast<char*>(&team_logo_)) + sizeof(total_earnings_));
}

CMsgDOTADPCSeasonResults_TeamResult::~CMsgDOTADPCSeasonResults_TeamResult() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonResults.TeamResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonResults_TeamResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCSeasonResults_TeamResult::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonResults_TeamResult* _this = reinterpret_cast< CMsgDOTADPCSeasonResults_TeamResult* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonResults_TeamResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonResults_TeamResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonResults_TeamResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonResults.TeamResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_earnings_) -
        reinterpret_cast<char*>(&team_logo_)) + sizeof(total_earnings_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonResults_TeamResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.TeamResult.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.TeamResult.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_total_points(&has_bits);
          total_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_earnings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_earnings(&has_bits);
          total_earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.TeamLeagueResult league_results = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_league_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.TeamResult.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonResults_TeamResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonResults.TeamResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.TeamResult.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional uint64 team_logo = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_team_logo(), target);
  }

  // optional string team_logo_url = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.TeamResult.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_logo_url(), target);
  }

  // optional uint32 total_points = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_total_points(), target);
  }

  // optional uint32 total_earnings = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_earnings(), target);
  }

  // repeated .CMsgDOTADPCSeasonResults.TeamLeagueResult league_results = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_league_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_league_results(i), target, stream);
  }

  // optional string team_abbreviation = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.TeamResult.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonResults.TeamResult)
  return target;
}

size_t CMsgDOTADPCSeasonResults_TeamResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonResults.TeamResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSeasonResults.TeamLeagueResult league_results = 7;
  total_size += 1UL * this->_internal_league_results_size();
  for (const auto& msg : this->league_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_logo_url = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional string team_abbreviation = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint64 team_logo = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 total_points = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_points());
    }

    // optional uint32 total_earnings = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_earnings());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonResults_TeamResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonResults.TeamResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonResults_TeamResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonResults_TeamResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonResults.TeamResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonResults.TeamResult)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonResults_TeamResult::MergeFrom(const CMsgDOTADPCSeasonResults_TeamResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonResults.TeamResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  league_results_.MergeFrom(from.league_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_points_ = from.total_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_earnings_ = from.total_earnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSeasonResults_TeamResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonResults.TeamResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonResults_TeamResult::CopyFrom(const CMsgDOTADPCSeasonResults_TeamResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonResults.TeamResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonResults_TeamResult::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonResults_TeamResult::InternalSwap(CMsgDOTADPCSeasonResults_TeamResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  league_results_.InternalSwap(&other->league_results_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_TeamResult, total_earnings_)
      + sizeof(CMsgDOTADPCSeasonResults_TeamResult::total_earnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_TeamResult, team_logo_)>(
          reinterpret_cast<char*>(&team_logo_),
          reinterpret_cast<char*>(&other->team_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonResults_TeamResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonResults_StandingEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSeasonResults_StandingEntry>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTADPCSeasonResults_StandingEntry::CMsgDOTADPCSeasonResults_StandingEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonResults.StandingEntry)
}
CMsgDOTADPCSeasonResults_StandingEntry::CMsgDOTADPCSeasonResults_StandingEntry(const CMsgDOTADPCSeasonResults_StandingEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_url()) {
    team_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_url(), 
      GetArena());
  }
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_abbreviation()) {
    team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_abbreviation(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonResults.StandingEntry)
}

void CMsgDOTADPCSeasonResults_StandingEntry::SharedCtor() {
team_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(losses_));
}

CMsgDOTADPCSeasonResults_StandingEntry::~CMsgDOTADPCSeasonResults_StandingEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonResults.StandingEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonResults_StandingEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTADPCSeasonResults_StandingEntry::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonResults_StandingEntry* _this = reinterpret_cast< CMsgDOTADPCSeasonResults_StandingEntry* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonResults_StandingEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonResults_StandingEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonResults_StandingEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonResults.StandingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&losses_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonResults_StandingEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.StandingEntry.team_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.StandingEntry.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_abbreviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_team_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTADPCSeasonResults.StandingEntry.team_abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonResults_StandingEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonResults.StandingEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 wins = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wins(), target);
  }

  // optional uint32 losses = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_losses(), target);
  }

  // optional string team_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_url().data(), static_cast<int>(this->_internal_team_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.StandingEntry.team_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_url(), target);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.StandingEntry.team_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_name(), target);
  }

  // optional string team_abbreviation = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_abbreviation().data(), static_cast<int>(this->_internal_team_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTADPCSeasonResults.StandingEntry.team_abbreviation");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_team_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonResults.StandingEntry)
  return target;
}

size_t CMsgDOTADPCSeasonResults_StandingEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonResults.StandingEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string team_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_url());
    }

    // optional string team_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_abbreviation = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_abbreviation());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 wins = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint32 losses = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonResults_StandingEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonResults.StandingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonResults_StandingEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonResults_StandingEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonResults.StandingEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonResults.StandingEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonResults_StandingEntry::MergeFrom(const CMsgDOTADPCSeasonResults_StandingEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonResults.StandingEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_url(from._internal_team_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_abbreviation(from._internal_team_abbreviation());
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000020u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSeasonResults_StandingEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonResults.StandingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonResults_StandingEntry::CopyFrom(const CMsgDOTADPCSeasonResults_StandingEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonResults.StandingEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonResults_StandingEntry::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonResults_StandingEntry::InternalSwap(CMsgDOTADPCSeasonResults_StandingEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_url_.Swap(&other->team_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_abbreviation_.Swap(&other->team_abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_StandingEntry, losses_)
      + sizeof(CMsgDOTADPCSeasonResults_StandingEntry::losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_StandingEntry, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonResults_StandingEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonResults_Standing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSeasonResults_Standing>()._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_division(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTADPCSeasonResults_Standing::CMsgDOTADPCSeasonResults_Standing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonResults.Standing)
}
CMsgDOTADPCSeasonResults_Standing::CMsgDOTADPCSeasonResults_Standing(const CMsgDOTADPCSeasonResults_Standing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&region_, &from.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&division_) -
    reinterpret_cast<char*>(&region_)) + sizeof(division_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonResults.Standing)
}

void CMsgDOTADPCSeasonResults_Standing::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&division_) -
    reinterpret_cast<char*>(&region_)) + sizeof(division_));
}

CMsgDOTADPCSeasonResults_Standing::~CMsgDOTADPCSeasonResults_Standing() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonResults.Standing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonResults_Standing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCSeasonResults_Standing::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonResults_Standing* _this = reinterpret_cast< CMsgDOTADPCSeasonResults_Standing* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonResults_Standing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonResults_Standing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonResults_Standing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonResults.Standing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&division_) -
        reinterpret_cast<char*>(&region_)) + sizeof(division_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonResults_Standing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_region(&has_bits);
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 division = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_division(&has_bits);
          division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.StandingEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonResults_Standing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonResults.Standing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_region(), target);
  }

  // optional uint32 division = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_division(), target);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry entries = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonResults.Standing)
  return target;
}

size_t CMsgDOTADPCSeasonResults_Standing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonResults.Standing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_region());
    }

    // optional uint32 division = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonResults_Standing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonResults.Standing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonResults_Standing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonResults_Standing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonResults.Standing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonResults.Standing)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonResults_Standing::MergeFrom(const CMsgDOTADPCSeasonResults_Standing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonResults.Standing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000002u) {
      division_ = from.division_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSeasonResults_Standing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonResults.Standing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonResults_Standing::CopyFrom(const CMsgDOTADPCSeasonResults_Standing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonResults.Standing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonResults_Standing::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonResults_Standing::InternalSwap(CMsgDOTADPCSeasonResults_Standing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_Standing, division_)
      + sizeof(CMsgDOTADPCSeasonResults_Standing::division_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonResults_Standing, region_)>(
          reinterpret_cast<char*>(&region_),
          reinterpret_cast<char*>(&other->region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonResults_Standing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonResults::_Internal {
 public:
};

CMsgDOTADPCSeasonResults::CMsgDOTADPCSeasonResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena),
  standings_(arena),
  major_wildcard_standings_(arena),
  major_group_standings_(arena),
  major_playoff_standings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonResults)
}
CMsgDOTADPCSeasonResults::CMsgDOTADPCSeasonResults(const CMsgDOTADPCSeasonResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_),
      standings_(from.standings_),
      major_wildcard_standings_(from.major_wildcard_standings_),
      major_group_standings_(from.major_group_standings_),
      major_playoff_standings_(from.major_playoff_standings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonResults)
}

void CMsgDOTADPCSeasonResults::SharedCtor() {
}

CMsgDOTADPCSeasonResults::~CMsgDOTADPCSeasonResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTADPCSeasonResults::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonResults* _this = reinterpret_cast< CMsgDOTADPCSeasonResults* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  standings_.Clear();
  major_wildcard_standings_.Clear();
  major_group_standings_.Clear();
  major_playoff_standings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTADPCSeasonResults.TeamResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.Standing standings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_standings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_wildcard_standings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_major_wildcard_standings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_group_standings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_major_group_standings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_playoff_standings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_major_playoff_standings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSeasonResults.TeamResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  // repeated .CMsgDOTADPCSeasonResults.Standing standings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_standings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_standings(i), target, stream);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_wildcard_standings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_major_wildcard_standings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_major_wildcard_standings(i), target, stream);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_group_standings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_major_group_standings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_major_group_standings(i), target, stream);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_playoff_standings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_major_playoff_standings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_major_playoff_standings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonResults)
  return target;
}

size_t CMsgDOTADPCSeasonResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTADPCSeasonResults.TeamResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSeasonResults.Standing standings = 2;
  total_size += 1UL * this->_internal_standings_size();
  for (const auto& msg : this->standings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_wildcard_standings = 3;
  total_size += 1UL * this->_internal_major_wildcard_standings_size();
  for (const auto& msg : this->major_wildcard_standings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_group_standings = 4;
  total_size += 1UL * this->_internal_major_group_standings_size();
  for (const auto& msg : this->major_group_standings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTADPCSeasonResults.StandingEntry major_playoff_standings = 5;
  total_size += 1UL * this->_internal_major_playoff_standings_size();
  for (const auto& msg : this->major_playoff_standings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonResults)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonResults::MergeFrom(const CMsgDOTADPCSeasonResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  standings_.MergeFrom(from.standings_);
  major_wildcard_standings_.MergeFrom(from.major_wildcard_standings_);
  major_group_standings_.MergeFrom(from.major_group_standings_);
  major_playoff_standings_.MergeFrom(from.major_playoff_standings_);
}

void CMsgDOTADPCSeasonResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonResults::CopyFrom(const CMsgDOTADPCSeasonResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonResults::InternalSwap(CMsgDOTADPCSeasonResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
  standings_.InternalSwap(&other->standings_);
  major_wildcard_standings_.InternalSwap(&other->major_wildcard_standings_);
  major_group_standings_.InternalSwap(&other->major_group_standings_);
  major_playoff_standings_.InternalSwap(&other->major_playoff_standings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCSeasonSpoilerResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCSeasonSpoilerResults>()._has_bits_);
  static void set_has_time_last_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTADPCSeasonResults& saved_results(const CMsgDOTADPCSeasonSpoilerResults* msg);
  static void set_has_saved_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTADPCSeasonResults&
CMsgDOTADPCSeasonSpoilerResults::_Internal::saved_results(const CMsgDOTADPCSeasonSpoilerResults* msg) {
  return *msg->saved_results_;
}
CMsgDOTADPCSeasonSpoilerResults::CMsgDOTADPCSeasonSpoilerResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCSeasonSpoilerResults)
}
CMsgDOTADPCSeasonSpoilerResults::CMsgDOTADPCSeasonSpoilerResults(const CMsgDOTADPCSeasonSpoilerResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_saved_results()) {
    saved_results_ = new ::CMsgDOTADPCSeasonResults(*from.saved_results_);
  } else {
    saved_results_ = nullptr;
  }
  time_last_updated_ = from.time_last_updated_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCSeasonSpoilerResults)
}

void CMsgDOTADPCSeasonSpoilerResults::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&saved_results_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_last_updated_) -
    reinterpret_cast<char*>(&saved_results_)) + sizeof(time_last_updated_));
}

CMsgDOTADPCSeasonSpoilerResults::~CMsgDOTADPCSeasonSpoilerResults() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCSeasonSpoilerResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCSeasonSpoilerResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete saved_results_;
}

void CMsgDOTADPCSeasonSpoilerResults::ArenaDtor(void* object) {
  CMsgDOTADPCSeasonSpoilerResults* _this = reinterpret_cast< CMsgDOTADPCSeasonSpoilerResults* >(object);
  (void)_this;
}
void CMsgDOTADPCSeasonSpoilerResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCSeasonSpoilerResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCSeasonSpoilerResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCSeasonSpoilerResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(saved_results_ != nullptr);
    saved_results_->Clear();
  }
  time_last_updated_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCSeasonSpoilerResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 time_last_updated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_last_updated(&has_bits);
          time_last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTADPCSeasonResults saved_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_saved_results(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCSeasonSpoilerResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCSeasonSpoilerResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time_last_updated = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_last_updated(), target);
  }

  // optional .CMsgDOTADPCSeasonResults saved_results = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::saved_results(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCSeasonSpoilerResults)
  return target;
}

size_t CMsgDOTADPCSeasonSpoilerResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCSeasonSpoilerResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTADPCSeasonResults saved_results = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saved_results_);
    }

    // optional uint32 time_last_updated = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last_updated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCSeasonSpoilerResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCSeasonSpoilerResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCSeasonSpoilerResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCSeasonSpoilerResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCSeasonSpoilerResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCSeasonSpoilerResults)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCSeasonSpoilerResults::MergeFrom(const CMsgDOTADPCSeasonSpoilerResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCSeasonSpoilerResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_saved_results()->::CMsgDOTADPCSeasonResults::MergeFrom(from._internal_saved_results());
    }
    if (cached_has_bits & 0x00000002u) {
      time_last_updated_ = from.time_last_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTADPCSeasonSpoilerResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCSeasonSpoilerResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCSeasonSpoilerResults::CopyFrom(const CMsgDOTADPCSeasonSpoilerResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCSeasonSpoilerResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCSeasonSpoilerResults::IsInitialized() const {
  return true;
}

void CMsgDOTADPCSeasonSpoilerResults::InternalSwap(CMsgDOTADPCSeasonSpoilerResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonSpoilerResults, time_last_updated_)
      + sizeof(CMsgDOTADPCSeasonSpoilerResults::time_last_updated_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCSeasonSpoilerResults, saved_results_)>(
          reinterpret_cast<char*>(&saved_results_),
          reinterpret_cast<char*>(&other->saved_results_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCSeasonSpoilerResults::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNode_MatchDetails* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNode_MatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNode_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNode_VOD* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNode_VOD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNode_VOD >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNode* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeGroup_TeamStanding* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeGroup_TeamStanding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeGroup_TeamStanding >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeGroup* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_Info* Arena::CreateMaybeMessage< ::CMsgDOTALeague_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_Admin* Arena::CreateMaybeMessage< ::CMsgDOTALeague_Admin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_Admin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_PrizePoolItem* Arena::CreateMaybeMessage< ::CMsgDOTALeague_PrizePoolItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_PrizePoolItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_PrizePool* Arena::CreateMaybeMessage< ::CMsgDOTALeague_PrizePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_PrizePool >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_Stream* Arena::CreateMaybeMessage< ::CMsgDOTALeague_Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_SeriesInfo* Arena::CreateMaybeMessage< ::CMsgDOTALeague_SeriesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_SeriesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague_Player* Arena::CreateMaybeMessage< ::CMsgDOTALeague_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeague* Arena::CreateMaybeMessage< ::CMsgDOTALeague >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeague >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueList* Arena::CreateMaybeMessage< ::CMsgDOTALeagueList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueInfo* Arena::CreateMaybeMessage< ::CMsgDOTALeagueInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueInfoList* Arena::CreateMaybeMessage< ::CMsgDOTALeagueInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueLiveGames_LiveGame* Arena::CreateMaybeMessage< ::CMsgDOTALeagueLiveGames_LiveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueLiveGames_LiveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueLiveGames* Arena::CreateMaybeMessage< ::CMsgDOTALeagueLiveGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueLiveGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueMessages_Message* Arena::CreateMaybeMessage< ::CMsgDOTALeagueMessages_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueMessages_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueMessages* Arena::CreateMaybeMessage< ::CMsgDOTALeagueMessages >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaguePrizePool* Arena::CreateMaybeMessage< ::CMsgDOTALeaguePrizePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaguePrizePool >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueInfoListAdminsRequest* Arena::CreateMaybeMessage< ::CMsgDOTALeagueInfoListAdminsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueInfoListAdminsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeRequest* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeResponse* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueAvailableLobbyNodesRequest* Arena::CreateMaybeMessage< ::CMsgDOTALeagueAvailableLobbyNodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueAvailableLobbyNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* Arena::CreateMaybeMessage< ::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueAvailableLobbyNodes* Arena::CreateMaybeMessage< ::CMsgDOTALeagueAvailableLobbyNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueAvailableLobbyNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeResults_Result* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeResults_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeResults_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeagueNodeResults* Arena::CreateMaybeMessage< ::CMsgDOTALeagueNodeResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeagueNodeResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCLeagueResults_Result* Arena::CreateMaybeMessage< ::CMsgDOTADPCLeagueResults_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCLeagueResults_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCLeagueResults* Arena::CreateMaybeMessage< ::CMsgDOTADPCLeagueResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCLeagueResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamResults_Result* Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamResults_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamResults_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCTeamResults* Arena::CreateMaybeMessage< ::CMsgDOTADPCTeamResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCTeamResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonResults_TeamLeagueResult* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonResults_TeamLeagueResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonResults_TeamLeagueResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonResults_TeamResult* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonResults_TeamResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonResults_TeamResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonResults_StandingEntry* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonResults_StandingEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonResults_StandingEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonResults_Standing* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonResults_Standing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonResults_Standing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonResults* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCSeasonSpoilerResults* Arena::CreateMaybeMessage< ::CMsgDOTADPCSeasonSpoilerResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCSeasonSpoilerResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
