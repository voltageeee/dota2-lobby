// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#include "clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CClientMsg_CustomGameEventDefaultTypeInternal {
  constexpr CClientMsg_CustomGameEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_CustomGameEventDefaultTypeInternal() {}
  union {
    CClientMsg_CustomGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_CustomGameEventDefaultTypeInternal _CClientMsg_CustomGameEvent_default_instance_;
constexpr CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_index_(0){}
struct CClientMsg_CustomGameEventBounceDefaultTypeInternal {
  constexpr CClientMsg_CustomGameEventBounceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_CustomGameEventBounceDefaultTypeInternal() {}
  union {
    CClientMsg_CustomGameEventBounce _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_CustomGameEventBounceDefaultTypeInternal _CClientMsg_CustomGameEventBounce_default_instance_;
constexpr CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_(0)

  , ent_ehandle_(0u)
  , client_ehandle_(0u){}
struct CClientMsg_ClientUIEventDefaultTypeInternal {
  constexpr CClientMsg_ClientUIEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_ClientUIEventDefaultTypeInternal() {}
  union {
    CClientMsg_ClientUIEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_ClientUIEventDefaultTypeInternal _CClientMsg_ClientUIEvent_default_instance_;
constexpr CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : visible_(false){}
struct CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal {
  constexpr CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal() {}
  union {
    CClientMsg_DevPaletteVisibilityChangedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_;
constexpr CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_panel_(false)
  , client_ehandle_(0u)
  , literal_hand_type_(0u){}
struct CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal {
  constexpr CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal() {}
  union {
    CClientMsg_WorldUIControllerHasPanelChangedEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_;
constexpr CClientMsg_RotateAnchor::CClientMsg_RotateAnchor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0){}
struct CClientMsg_RotateAnchorDefaultTypeInternal {
  constexpr CClientMsg_RotateAnchorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CClientMsg_RotateAnchorDefaultTypeInternal() {}
  union {
    CClientMsg_RotateAnchor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CClientMsg_RotateAnchorDefaultTypeInternal _CClientMsg_RotateAnchor_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clientmessages_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_clientmessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clientmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_clientmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEvent, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEventBounce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEventBounce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEventBounce, event_name_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEventBounce, data_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_CustomGameEventBounce, player_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, event_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, ent_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, client_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, data1_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_ClientUIEvent, data2_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CClientMsg_DevPaletteVisibilityChangedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_DevPaletteVisibilityChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_DevPaletteVisibilityChangedEvent, visible_),
  0,
  PROTOBUF_FIELD_OFFSET(::CClientMsg_WorldUIControllerHasPanelChangedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_WorldUIControllerHasPanelChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_WorldUIControllerHasPanelChangedEvent, has_panel_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_WorldUIControllerHasPanelChangedEvent, client_ehandle_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_WorldUIControllerHasPanelChangedEvent, literal_hand_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CClientMsg_RotateAnchor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CClientMsg_RotateAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CClientMsg_RotateAnchor, angle_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CClientMsg_CustomGameEvent)},
  { 9, 17, sizeof(::CClientMsg_CustomGameEventBounce)},
  { 20, 30, sizeof(::CClientMsg_ClientUIEvent)},
  { 35, 41, sizeof(::CClientMsg_DevPaletteVisibilityChangedEvent)},
  { 42, 50, sizeof(::CClientMsg_WorldUIControllerHasPanelChangedEvent)},
  { 53, 59, sizeof(::CClientMsg_RotateAnchor)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_CustomGameEventBounce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_ClientUIEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CClientMsg_RotateAnchor_default_instance_),
};

const char descriptor_table_protodef_clientmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024clientmessages.proto\">\n\032CClientMsg_Cus"
  "tomGameEvent\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004data"
  "\030\002 \001(\014\"Z\n CClientMsg_CustomGameEventBoun"
  "ce\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014\022\024\n\014"
  "player_index\030\003 \001(\005\"\235\001\n\030CClientMsg_Client"
  "UIEvent\0226\n\005event\030\001 \001(\0162\017.EClientUIEvent:"
  "\026EClientUIEvent_Invalid\022\023\n\013ent_ehandle\030\002"
  " \001(\r\022\026\n\016client_ehandle\030\003 \001(\r\022\r\n\005data1\030\004 "
  "\001(\t\022\r\n\005data2\030\005 \001(\t\">\n+CClientMsg_DevPale"
  "tteVisibilityChangedEvent\022\017\n\007visible\030\001 \001"
  "(\010\"x\n0CClientMsg_WorldUIControllerHasPan"
  "elChangedEvent\022\021\n\thas_panel\030\001 \001(\010\022\026\n\016cli"
  "ent_ehandle\030\002 \001(\r\022\031\n\021literal_hand_type\030\003"
  " \001(\r\"(\n\027CClientMsg_RotateAnchor\022\r\n\005angle"
  "\030\001 \001(\002*\333\001\n\023EBaseClientMessages\022\027\n\022CM_Cus"
  "tomGameEvent\020\230\002\022\035\n\030CM_CustomGameEventBou"
  "nce\020\231\002\022\025\n\020CM_ClientUIEvent\020\232\002\022#\n\036CM_DevP"
  "aletteVisibilityChanged\020\233\002\022(\n#CM_WorldUI"
  "ControllerHasPanelChanged\020\234\002\022\024\n\017CM_Rotat"
  "eAnchor\020\235\002\022\020\n\013CM_MAX_BASE\020\254\002*n\n\016EClientU"
  "IEvent\022\032\n\026EClientUIEvent_Invalid\020\000\022!\n\035EC"
  "lientUIEvent_DialogFinished\020\001\022\035\n\031EClient"
  "UIEvent_FireOutput\020\002B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clientmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clientmessages_2eproto = {
  false, false, 907, descriptor_table_protodef_clientmessages_2eproto, "clientmessages.proto", 
  &descriptor_table_clientmessages_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_clientmessages_2eproto::offsets,
  file_level_metadata_clientmessages_2eproto, file_level_enum_descriptors_clientmessages_2eproto, file_level_service_descriptors_clientmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_clientmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clientmessages_2eproto);
  return descriptor_table_clientmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_clientmessages_2eproto(&descriptor_table_clientmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseClientMessages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clientmessages_2eproto);
  return file_level_enum_descriptors_clientmessages_2eproto[0];
}
bool EBaseClientMessages_IsValid(int value) {
  switch (value) {
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 300:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EClientUIEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clientmessages_2eproto);
  return file_level_enum_descriptors_clientmessages_2eproto[1];
}
bool EClientUIEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CClientMsg_CustomGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_CustomGameEvent>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_CustomGameEvent)
}
CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CClientMsg_CustomGameEvent)
}

void CClientMsg_CustomGameEvent::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CClientMsg_CustomGameEvent::~CClientMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:CClientMsg_CustomGameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_CustomGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEvent::ArenaDtor(void* object) {
  CClientMsg_CustomGameEvent* _this = reinterpret_cast< CClientMsg_CustomGameEvent* >(object);
  (void)_this;
}
void CClientMsg_CustomGameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_CustomGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_CustomGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_CustomGameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMsg_CustomGameEvent.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_CustomGameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_CustomGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMsg_CustomGameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_CustomGameEvent)
  return target;
}

size_t CClientMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_CustomGameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_CustomGameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_CustomGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_CustomGameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEvent::MergeFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
  }
}

void CClientMsg_CustomGameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEvent::CopyFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEvent::InternalSwap(CClientMsg_CustomGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_CustomGameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CClientMsg_CustomGameEventBounce::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_CustomGameEventBounce>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_CustomGameEventBounce)
}
CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce(const CClientMsg_CustomGameEventBounce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  player_index_ = from.player_index_;
  // @@protoc_insertion_point(copy_constructor:CClientMsg_CustomGameEventBounce)
}

void CClientMsg_CustomGameEventBounce::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_index_ = 0;
}

CClientMsg_CustomGameEventBounce::~CClientMsg_CustomGameEventBounce() {
  // @@protoc_insertion_point(destructor:CClientMsg_CustomGameEventBounce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_CustomGameEventBounce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEventBounce::ArenaDtor(void* object) {
  CClientMsg_CustomGameEventBounce* _this = reinterpret_cast< CClientMsg_CustomGameEventBounce* >(object);
  (void)_this;
}
void CClientMsg_CustomGameEventBounce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_CustomGameEventBounce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_CustomGameEventBounce::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_CustomGameEventBounce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmpty();
    }
  }
  player_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_CustomGameEventBounce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMsg_CustomGameEventBounce.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_index(&has_bits);
          player_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_CustomGameEventBounce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_CustomGameEventBounce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMsg_CustomGameEventBounce.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_CustomGameEventBounce)
  return target;
}

size_t CClientMsg_CustomGameEventBounce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_CustomGameEventBounce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 player_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEventBounce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_CustomGameEventBounce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_CustomGameEventBounce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_CustomGameEventBounce)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      player_index_ = from.player_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEventBounce::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEventBounce::InternalSwap(CClientMsg_CustomGameEventBounce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(player_index_, other->player_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_CustomGameEventBounce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CClientMsg_ClientUIEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_ClientUIEvent>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ent_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_client_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_data2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_ClientUIEvent)
}
CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent(const CClientMsg_ClientUIEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data1()) {
    data1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data1(), 
      GetArena());
  }
  data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data2()) {
    data2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data2(), 
      GetArena());
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_ehandle_) -
    reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
  // @@protoc_insertion_point(copy_constructor:CClientMsg_ClientUIEvent)
}

void CClientMsg_ClientUIEvent::SharedCtor() {
data1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_ehandle_) -
    reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
}

CClientMsg_ClientUIEvent::~CClientMsg_ClientUIEvent() {
  // @@protoc_insertion_point(destructor:CClientMsg_ClientUIEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_ClientUIEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_ClientUIEvent::ArenaDtor(void* object) {
  CClientMsg_ClientUIEvent* _this = reinterpret_cast< CClientMsg_ClientUIEvent* >(object);
  (void)_this;
}
void CClientMsg_ClientUIEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_ClientUIEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_ClientUIEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_ClientUIEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      data2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_ehandle_) -
        reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_ClientUIEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EClientUIEvent_IsValid(val))) {
            _internal_set_event(static_cast<::EClientUIEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 ent_ehandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ent_ehandle(&has_bits);
          ent_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_ehandle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_ehandle(&has_bits);
          client_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMsg_ClientUIEvent.data1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string data2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_data2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CClientMsg_ClientUIEvent.data2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_ClientUIEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_ClientUIEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // optional uint32 ent_ehandle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ent_ehandle(), target);
  }

  // optional uint32 client_ehandle = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_ehandle(), target);
  }

  // optional string data1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data1().data(), static_cast<int>(this->_internal_data1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMsg_ClientUIEvent.data1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_data1(), target);
  }

  // optional string data2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data2().data(), static_cast<int>(this->_internal_data2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CClientMsg_ClientUIEvent.data2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_data2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_ClientUIEvent)
  return target;
}

size_t CClientMsg_ClientUIEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_ClientUIEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string data1 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data1());
    }

    // optional string data2 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_data2());
    }

    // optional .EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
    }

    // optional uint32 ent_ehandle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ent_ehandle());
    }

    // optional uint32 client_ehandle = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_ehandle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_ClientUIEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_ClientUIEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_ClientUIEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_ClientUIEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_ClientUIEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_ClientUIEvent::MergeFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data1(from._internal_data1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_data2(from._internal_data2());
    }
    if (cached_has_bits & 0x00000004u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_ehandle_ = from.ent_ehandle_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_ehandle_ = from.client_ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_ClientUIEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_ClientUIEvent::CopyFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_ClientUIEvent::IsInitialized() const {
  return true;
}

void CClientMsg_ClientUIEvent::InternalSwap(CClientMsg_ClientUIEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data1_.Swap(&other->data1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data2_.Swap(&other->data2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMsg_ClientUIEvent, client_ehandle_)
      + sizeof(CClientMsg_ClientUIEvent::client_ehandle_)
      - PROTOBUF_FIELD_OFFSET(CClientMsg_ClientUIEvent, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_ClientUIEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CClientMsg_DevPaletteVisibilityChangedEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_DevPaletteVisibilityChangedEvent>()._has_bits_);
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_DevPaletteVisibilityChangedEvent)
}
CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent(const CClientMsg_DevPaletteVisibilityChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:CClientMsg_DevPaletteVisibilityChangedEvent)
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedCtor() {
visible_ = false;
}

CClientMsg_DevPaletteVisibilityChangedEvent::~CClientMsg_DevPaletteVisibilityChangedEvent() {
  // @@protoc_insertion_point(destructor:CClientMsg_DevPaletteVisibilityChangedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CClientMsg_DevPaletteVisibilityChangedEvent::ArenaDtor(void* object) {
  CClientMsg_DevPaletteVisibilityChangedEvent* _this = reinterpret_cast< CClientMsg_DevPaletteVisibilityChangedEvent* >(object);
  (void)_this;
}
void CClientMsg_DevPaletteVisibilityChangedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_DevPaletteVisibilityChangedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_DevPaletteVisibilityChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_DevPaletteVisibilityChangedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool visible = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_visible(&has_bits);
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_DevPaletteVisibilityChangedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_DevPaletteVisibilityChangedEvent)
  return target;
}

size_t CClientMsg_DevPaletteVisibilityChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool visible = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_DevPaletteVisibilityChangedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_DevPaletteVisibilityChangedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_DevPaletteVisibilityChangedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_DevPaletteVisibilityChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_visible()) {
    _internal_set_visible(from._internal_visible());
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_DevPaletteVisibilityChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::InternalSwap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(visible_, other->visible_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_DevPaletteVisibilityChangedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CClientMsg_WorldUIControllerHasPanelChangedEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_WorldUIControllerHasPanelChangedEvent>()._has_bits_);
  static void set_has_has_panel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_ehandle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_literal_hand_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_WorldUIControllerHasPanelChangedEvent)
}
CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_panel_, &from.has_panel_,
    static_cast<size_t>(reinterpret_cast<char*>(&literal_hand_type_) -
    reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
  // @@protoc_insertion_point(copy_constructor:CClientMsg_WorldUIControllerHasPanelChangedEvent)
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&has_panel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&literal_hand_type_) -
    reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
}

CClientMsg_WorldUIControllerHasPanelChangedEvent::~CClientMsg_WorldUIControllerHasPanelChangedEvent() {
  // @@protoc_insertion_point(destructor:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::ArenaDtor(void* object) {
  CClientMsg_WorldUIControllerHasPanelChangedEvent* _this = reinterpret_cast< CClientMsg_WorldUIControllerHasPanelChangedEvent* >(object);
  (void)_this;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&has_panel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&literal_hand_type_) -
        reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_WorldUIControllerHasPanelChangedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_panel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_panel(&has_bits);
          has_panel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_ehandle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_ehandle(&has_bits);
          client_ehandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 literal_hand_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_literal_hand_type(&has_bits);
          literal_hand_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_WorldUIControllerHasPanelChangedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_panel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_panel(), target);
  }

  // optional uint32 client_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_ehandle(), target);
  }

  // optional uint32 literal_hand_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_literal_hand_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return target;
}

size_t CClientMsg_WorldUIControllerHasPanelChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool has_panel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_ehandle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_ehandle());
    }

    // optional uint32 literal_hand_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_literal_hand_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_WorldUIControllerHasPanelChangedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_WorldUIControllerHasPanelChangedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_WorldUIControllerHasPanelChangedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_WorldUIControllerHasPanelChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      has_panel_ = from.has_panel_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_ehandle_ = from.client_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      literal_hand_type_ = from.literal_hand_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_WorldUIControllerHasPanelChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::InternalSwap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, literal_hand_type_)
      + sizeof(CClientMsg_WorldUIControllerHasPanelChangedEvent::literal_hand_type_)
      - PROTOBUF_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, has_panel_)>(
          reinterpret_cast<char*>(&has_panel_),
          reinterpret_cast<char*>(&other->has_panel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_WorldUIControllerHasPanelChangedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CClientMsg_RotateAnchor::_Internal {
 public:
  using HasBits = decltype(std::declval<CClientMsg_RotateAnchor>()._has_bits_);
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CClientMsg_RotateAnchor::CClientMsg_RotateAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CClientMsg_RotateAnchor)
}
CClientMsg_RotateAnchor::CClientMsg_RotateAnchor(const CClientMsg_RotateAnchor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:CClientMsg_RotateAnchor)
}

void CClientMsg_RotateAnchor::SharedCtor() {
angle_ = 0;
}

CClientMsg_RotateAnchor::~CClientMsg_RotateAnchor() {
  // @@protoc_insertion_point(destructor:CClientMsg_RotateAnchor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CClientMsg_RotateAnchor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CClientMsg_RotateAnchor::ArenaDtor(void* object) {
  CClientMsg_RotateAnchor* _this = reinterpret_cast< CClientMsg_RotateAnchor* >(object);
  (void)_this;
}
void CClientMsg_RotateAnchor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CClientMsg_RotateAnchor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CClientMsg_RotateAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:CClientMsg_RotateAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CClientMsg_RotateAnchor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CClientMsg_RotateAnchor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CClientMsg_RotateAnchor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CClientMsg_RotateAnchor)
  return target;
}

size_t CClientMsg_RotateAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CClientMsg_RotateAnchor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_RotateAnchor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_RotateAnchor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CClientMsg_RotateAnchor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CClientMsg_RotateAnchor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CClientMsg_RotateAnchor)
    MergeFrom(*source);
  }
}

void CClientMsg_RotateAnchor::MergeFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_angle()) {
    _internal_set_angle(from._internal_angle());
  }
}

void CClientMsg_RotateAnchor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_RotateAnchor::CopyFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_RotateAnchor::IsInitialized() const {
  return true;
}

void CClientMsg_RotateAnchor::InternalSwap(CClientMsg_RotateAnchor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CClientMsg_RotateAnchor::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CClientMsg_CustomGameEvent* Arena::CreateMaybeMessage< ::CClientMsg_CustomGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_CustomGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMsg_CustomGameEventBounce* Arena::CreateMaybeMessage< ::CClientMsg_CustomGameEventBounce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_CustomGameEventBounce >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMsg_ClientUIEvent* Arena::CreateMaybeMessage< ::CClientMsg_ClientUIEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_ClientUIEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMsg_DevPaletteVisibilityChangedEvent* Arena::CreateMaybeMessage< ::CClientMsg_DevPaletteVisibilityChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_DevPaletteVisibilityChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMsg_WorldUIControllerHasPanelChangedEvent* Arena::CreateMaybeMessage< ::CClientMsg_WorldUIControllerHasPanelChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_WorldUIControllerHasPanelChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CClientMsg_RotateAnchor* Arena::CreateMaybeMessage< ::CClientMsg_RotateAnchor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CClientMsg_RotateAnchor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
