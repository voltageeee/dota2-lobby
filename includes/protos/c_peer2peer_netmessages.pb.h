// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_c_5fpeer2peer_5fnetmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_c_5fpeer2peer_5fnetmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "netmessages.pb.h"
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_c_5fpeer2peer_5fnetmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_c_5fpeer2peer_5fnetmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(int index);
class CP2P_Ping;
struct CP2P_PingDefaultTypeInternal;
extern CP2P_PingDefaultTypeInternal _CP2P_Ping_default_instance_;
class CP2P_TextMessage;
struct CP2P_TextMessageDefaultTypeInternal;
extern CP2P_TextMessageDefaultTypeInternal _CP2P_TextMessage_default_instance_;
class CP2P_VRAvatarPosition;
struct CP2P_VRAvatarPositionDefaultTypeInternal;
extern CP2P_VRAvatarPositionDefaultTypeInternal _CP2P_VRAvatarPosition_default_instance_;
class CP2P_VRAvatarPosition_COrientation;
struct CP2P_VRAvatarPosition_COrientationDefaultTypeInternal;
extern CP2P_VRAvatarPosition_COrientationDefaultTypeInternal _CP2P_VRAvatarPosition_COrientation_default_instance_;
class CP2P_Voice;
struct CP2P_VoiceDefaultTypeInternal;
extern CP2P_VoiceDefaultTypeInternal _CP2P_Voice_default_instance_;
class CP2P_WatchSynchronization;
struct CP2P_WatchSynchronizationDefaultTypeInternal;
extern CP2P_WatchSynchronizationDefaultTypeInternal _CP2P_WatchSynchronization_default_instance_;
class CSteam_Voice_Encoding;
struct CSteam_Voice_EncodingDefaultTypeInternal;
extern CSteam_Voice_EncodingDefaultTypeInternal _CSteam_Voice_Encoding_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CP2P_Ping* Arena::CreateMaybeMessage<::CP2P_Ping>(Arena*);
template<> ::CP2P_TextMessage* Arena::CreateMaybeMessage<::CP2P_TextMessage>(Arena*);
template<> ::CP2P_VRAvatarPosition* Arena::CreateMaybeMessage<::CP2P_VRAvatarPosition>(Arena*);
template<> ::CP2P_VRAvatarPosition_COrientation* Arena::CreateMaybeMessage<::CP2P_VRAvatarPosition_COrientation>(Arena*);
template<> ::CP2P_Voice* Arena::CreateMaybeMessage<::CP2P_Voice>(Arena*);
template<> ::CP2P_WatchSynchronization* Arena::CreateMaybeMessage<::CP2P_WatchSynchronization>(Arena*);
template<> ::CSteam_Voice_Encoding* Arena::CreateMaybeMessage<::CSteam_Voice_Encoding>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CP2P_Voice_Handler_Flags : int {
  CP2P_Voice_Handler_Flags_Played_Audio = 1
};
bool CP2P_Voice_Handler_Flags_IsValid(int value);
constexpr CP2P_Voice_Handler_Flags CP2P_Voice_Handler_Flags_Handler_Flags_MIN = CP2P_Voice_Handler_Flags_Played_Audio;
constexpr CP2P_Voice_Handler_Flags CP2P_Voice_Handler_Flags_Handler_Flags_MAX = CP2P_Voice_Handler_Flags_Played_Audio;
constexpr int CP2P_Voice_Handler_Flags_Handler_Flags_ARRAYSIZE = CP2P_Voice_Handler_Flags_Handler_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor();
template<typename T>
inline const std::string& CP2P_Voice_Handler_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CP2P_Voice_Handler_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CP2P_Voice_Handler_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CP2P_Voice_Handler_Flags_descriptor(), enum_t_value);
}
inline bool CP2P_Voice_Handler_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CP2P_Voice_Handler_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CP2P_Voice_Handler_Flags>(
    CP2P_Voice_Handler_Flags_descriptor(), name, value);
}
enum P2P_Messages : int {
  p2p_TextMessage = 256,
  p2p_Voice = 257,
  p2p_Ping = 258,
  p2p_VRAvatarPosition = 259,
  p2p_WatchSynchronization = 260
};
bool P2P_Messages_IsValid(int value);
constexpr P2P_Messages P2P_Messages_MIN = p2p_TextMessage;
constexpr P2P_Messages P2P_Messages_MAX = p2p_WatchSynchronization;
constexpr int P2P_Messages_ARRAYSIZE = P2P_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2P_Messages_descriptor();
template<typename T>
inline const std::string& P2P_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, P2P_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function P2P_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    P2P_Messages_descriptor(), enum_t_value);
}
inline bool P2P_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, P2P_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<P2P_Messages>(
    P2P_Messages_descriptor(), name, value);
}
// ===================================================================

class CP2P_TextMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_TextMessage) */ {
 public:
  inline CP2P_TextMessage() : CP2P_TextMessage(nullptr) {}
  virtual ~CP2P_TextMessage();
  explicit constexpr CP2P_TextMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_TextMessage(const CP2P_TextMessage& from);
  CP2P_TextMessage(CP2P_TextMessage&& from) noexcept
    : CP2P_TextMessage() {
    *this = ::std::move(from);
  }

  inline CP2P_TextMessage& operator=(const CP2P_TextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_TextMessage& operator=(CP2P_TextMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_TextMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_TextMessage* internal_default_instance() {
    return reinterpret_cast<const CP2P_TextMessage*>(
               &_CP2P_TextMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CP2P_TextMessage& a, CP2P_TextMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_TextMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_TextMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_TextMessage* New() const final {
    return CreateMaybeMessage<CP2P_TextMessage>(nullptr);
  }

  CP2P_TextMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_TextMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_TextMessage& from);
  void MergeFrom(const CP2P_TextMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_TextMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_TextMessage";
  }
  protected:
  explicit CP2P_TextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional bytes text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const void* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:CP2P_TextMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CSteam_Voice_Encoding PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSteam_Voice_Encoding) */ {
 public:
  inline CSteam_Voice_Encoding() : CSteam_Voice_Encoding(nullptr) {}
  virtual ~CSteam_Voice_Encoding();
  explicit constexpr CSteam_Voice_Encoding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from);
  CSteam_Voice_Encoding(CSteam_Voice_Encoding&& from) noexcept
    : CSteam_Voice_Encoding() {
    *this = ::std::move(from);
  }

  inline CSteam_Voice_Encoding& operator=(const CSteam_Voice_Encoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSteam_Voice_Encoding& operator=(CSteam_Voice_Encoding&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSteam_Voice_Encoding& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSteam_Voice_Encoding* internal_default_instance() {
    return reinterpret_cast<const CSteam_Voice_Encoding*>(
               &_CSteam_Voice_Encoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSteam_Voice_Encoding& a, CSteam_Voice_Encoding& b) {
    a.Swap(&b);
  }
  inline void Swap(CSteam_Voice_Encoding* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSteam_Voice_Encoding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSteam_Voice_Encoding* New() const final {
    return CreateMaybeMessage<CSteam_Voice_Encoding>(nullptr);
  }

  CSteam_Voice_Encoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSteam_Voice_Encoding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSteam_Voice_Encoding& from);
  void MergeFrom(const CSteam_Voice_Encoding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSteam_Voice_Encoding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSteam_Voice_Encoding";
  }
  protected:
  explicit CSteam_Voice_Encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceDataFieldNumber = 1,
  };
  // optional bytes voice_data = 1;
  bool has_voice_data() const;
  private:
  bool _internal_has_voice_data() const;
  public:
  void clear_voice_data();
  const std::string& voice_data() const;
  void set_voice_data(const std::string& value);
  void set_voice_data(std::string&& value);
  void set_voice_data(const char* value);
  void set_voice_data(const void* value, size_t size);
  std::string* mutable_voice_data();
  std::string* release_voice_data();
  void set_allocated_voice_data(std::string* voice_data);
  private:
  const std::string& _internal_voice_data() const;
  void _internal_set_voice_data(const std::string& value);
  std::string* _internal_mutable_voice_data();
  public:

  // @@protoc_insertion_point(class_scope:CSteam_Voice_Encoding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_data_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_Voice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_Voice) */ {
 public:
  inline CP2P_Voice() : CP2P_Voice(nullptr) {}
  virtual ~CP2P_Voice();
  explicit constexpr CP2P_Voice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_Voice(const CP2P_Voice& from);
  CP2P_Voice(CP2P_Voice&& from) noexcept
    : CP2P_Voice() {
    *this = ::std::move(from);
  }

  inline CP2P_Voice& operator=(const CP2P_Voice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_Voice& operator=(CP2P_Voice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_Voice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_Voice* internal_default_instance() {
    return reinterpret_cast<const CP2P_Voice*>(
               &_CP2P_Voice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CP2P_Voice& a, CP2P_Voice& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_Voice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_Voice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_Voice* New() const final {
    return CreateMaybeMessage<CP2P_Voice>(nullptr);
  }

  CP2P_Voice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_Voice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_Voice& from);
  void MergeFrom(const CP2P_Voice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_Voice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_Voice";
  }
  protected:
  explicit CP2P_Voice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CP2P_Voice_Handler_Flags Handler_Flags;
  static constexpr Handler_Flags Played_Audio =
    CP2P_Voice_Handler_Flags_Played_Audio;
  static inline bool Handler_Flags_IsValid(int value) {
    return CP2P_Voice_Handler_Flags_IsValid(value);
  }
  static constexpr Handler_Flags Handler_Flags_MIN =
    CP2P_Voice_Handler_Flags_Handler_Flags_MIN;
  static constexpr Handler_Flags Handler_Flags_MAX =
    CP2P_Voice_Handler_Flags_Handler_Flags_MAX;
  static constexpr int Handler_Flags_ARRAYSIZE =
    CP2P_Voice_Handler_Flags_Handler_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Handler_Flags_descriptor() {
    return CP2P_Voice_Handler_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Handler_Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Handler_Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Handler_Flags_Name.");
    return CP2P_Voice_Handler_Flags_Name(enum_t_value);
  }
  static inline bool Handler_Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Handler_Flags* value) {
    return CP2P_Voice_Handler_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kBroadcastGroupFieldNumber = 2,
  };
  // optional .CMsgVoiceAudio audio = 1;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::CMsgVoiceAudio& audio() const;
  ::CMsgVoiceAudio* release_audio();
  ::CMsgVoiceAudio* mutable_audio();
  void set_allocated_audio(::CMsgVoiceAudio* audio);
  private:
  const ::CMsgVoiceAudio& _internal_audio() const;
  ::CMsgVoiceAudio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::CMsgVoiceAudio* audio);
  ::CMsgVoiceAudio* unsafe_arena_release_audio();

  // optional uint32 broadcast_group = 2;
  bool has_broadcast_group() const;
  private:
  bool _internal_has_broadcast_group() const;
  public:
  void clear_broadcast_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 broadcast_group() const;
  void set_broadcast_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_broadcast_group() const;
  void _internal_set_broadcast_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CP2P_Voice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVoiceAudio* audio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 broadcast_group_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_Ping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_Ping) */ {
 public:
  inline CP2P_Ping() : CP2P_Ping(nullptr) {}
  virtual ~CP2P_Ping();
  explicit constexpr CP2P_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_Ping(const CP2P_Ping& from);
  CP2P_Ping(CP2P_Ping&& from) noexcept
    : CP2P_Ping() {
    *this = ::std::move(from);
  }

  inline CP2P_Ping& operator=(const CP2P_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_Ping& operator=(CP2P_Ping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_Ping* internal_default_instance() {
    return reinterpret_cast<const CP2P_Ping*>(
               &_CP2P_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CP2P_Ping& a, CP2P_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_Ping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_Ping* New() const final {
    return CreateMaybeMessage<CP2P_Ping>(nullptr);
  }

  CP2P_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_Ping& from);
  void MergeFrom(const CP2P_Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_Ping";
  }
  protected:
  explicit CP2P_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendTimeFieldNumber = 1,
    kIsReplyFieldNumber = 2,
  };
  // required uint64 send_time = 1;
  bool has_send_time() const;
  private:
  bool _internal_has_send_time() const;
  public:
  void clear_send_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 send_time() const;
  void set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send_time() const;
  void _internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool is_reply = 2;
  bool has_is_reply() const;
  private:
  bool _internal_has_is_reply() const;
  public:
  void clear_is_reply();
  bool is_reply() const;
  void set_is_reply(bool value);
  private:
  bool _internal_is_reply() const;
  void _internal_set_is_reply(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CP2P_Ping)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_time_;
  bool is_reply_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_VRAvatarPosition_COrientation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_VRAvatarPosition.COrientation) */ {
 public:
  inline CP2P_VRAvatarPosition_COrientation() : CP2P_VRAvatarPosition_COrientation(nullptr) {}
  virtual ~CP2P_VRAvatarPosition_COrientation();
  explicit constexpr CP2P_VRAvatarPosition_COrientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_VRAvatarPosition_COrientation(const CP2P_VRAvatarPosition_COrientation& from);
  CP2P_VRAvatarPosition_COrientation(CP2P_VRAvatarPosition_COrientation&& from) noexcept
    : CP2P_VRAvatarPosition_COrientation() {
    *this = ::std::move(from);
  }

  inline CP2P_VRAvatarPosition_COrientation& operator=(const CP2P_VRAvatarPosition_COrientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_VRAvatarPosition_COrientation& operator=(CP2P_VRAvatarPosition_COrientation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_VRAvatarPosition_COrientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_VRAvatarPosition_COrientation* internal_default_instance() {
    return reinterpret_cast<const CP2P_VRAvatarPosition_COrientation*>(
               &_CP2P_VRAvatarPosition_COrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CP2P_VRAvatarPosition_COrientation& a, CP2P_VRAvatarPosition_COrientation& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_VRAvatarPosition_COrientation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_VRAvatarPosition_COrientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_VRAvatarPosition_COrientation* New() const final {
    return CreateMaybeMessage<CP2P_VRAvatarPosition_COrientation>(nullptr);
  }

  CP2P_VRAvatarPosition_COrientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_VRAvatarPosition_COrientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_VRAvatarPosition_COrientation& from);
  void MergeFrom(const CP2P_VRAvatarPosition_COrientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_VRAvatarPosition_COrientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_VRAvatarPosition.COrientation";
  }
  protected:
  explicit CP2P_VRAvatarPosition_COrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kAngFieldNumber = 2,
  };
  // optional .CMsgVector pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::CMsgVector& pos() const;
  ::CMsgVector* release_pos();
  ::CMsgVector* mutable_pos();
  void set_allocated_pos(::CMsgVector* pos);
  private:
  const ::CMsgVector& _internal_pos() const;
  ::CMsgVector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::CMsgVector* pos);
  ::CMsgVector* unsafe_arena_release_pos();

  // optional .CMsgQAngle ang = 2;
  bool has_ang() const;
  private:
  bool _internal_has_ang() const;
  public:
  void clear_ang();
  const ::CMsgQAngle& ang() const;
  ::CMsgQAngle* release_ang();
  ::CMsgQAngle* mutable_ang();
  void set_allocated_ang(::CMsgQAngle* ang);
  private:
  const ::CMsgQAngle& _internal_ang() const;
  ::CMsgQAngle* _internal_mutable_ang();
  public:
  void unsafe_arena_set_allocated_ang(
      ::CMsgQAngle* ang);
  ::CMsgQAngle* unsafe_arena_release_ang();

  // @@protoc_insertion_point(class_scope:CP2P_VRAvatarPosition.COrientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVector* pos_;
  ::CMsgQAngle* ang_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_VRAvatarPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_VRAvatarPosition) */ {
 public:
  inline CP2P_VRAvatarPosition() : CP2P_VRAvatarPosition(nullptr) {}
  virtual ~CP2P_VRAvatarPosition();
  explicit constexpr CP2P_VRAvatarPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_VRAvatarPosition(const CP2P_VRAvatarPosition& from);
  CP2P_VRAvatarPosition(CP2P_VRAvatarPosition&& from) noexcept
    : CP2P_VRAvatarPosition() {
    *this = ::std::move(from);
  }

  inline CP2P_VRAvatarPosition& operator=(const CP2P_VRAvatarPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_VRAvatarPosition& operator=(CP2P_VRAvatarPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_VRAvatarPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_VRAvatarPosition* internal_default_instance() {
    return reinterpret_cast<const CP2P_VRAvatarPosition*>(
               &_CP2P_VRAvatarPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CP2P_VRAvatarPosition& a, CP2P_VRAvatarPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_VRAvatarPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_VRAvatarPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_VRAvatarPosition* New() const final {
    return CreateMaybeMessage<CP2P_VRAvatarPosition>(nullptr);
  }

  CP2P_VRAvatarPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_VRAvatarPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_VRAvatarPosition& from);
  void MergeFrom(const CP2P_VRAvatarPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_VRAvatarPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_VRAvatarPosition";
  }
  protected:
  explicit CP2P_VRAvatarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CP2P_VRAvatarPosition_COrientation COrientation;

  // accessors -------------------------------------------------------

  enum : int {
    kBodyPartsFieldNumber = 1,
    kHatIdFieldNumber = 2,
    kSceneIdFieldNumber = 3,
    kWorldScaleFieldNumber = 4,
  };
  // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
  int body_parts_size() const;
  private:
  int _internal_body_parts_size() const;
  public:
  void clear_body_parts();
  ::CP2P_VRAvatarPosition_COrientation* mutable_body_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CP2P_VRAvatarPosition_COrientation >*
      mutable_body_parts();
  private:
  const ::CP2P_VRAvatarPosition_COrientation& _internal_body_parts(int index) const;
  ::CP2P_VRAvatarPosition_COrientation* _internal_add_body_parts();
  public:
  const ::CP2P_VRAvatarPosition_COrientation& body_parts(int index) const;
  ::CP2P_VRAvatarPosition_COrientation* add_body_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CP2P_VRAvatarPosition_COrientation >&
      body_parts() const;

  // optional int32 hat_id = 2;
  bool has_hat_id() const;
  private:
  bool _internal_has_hat_id() const;
  public:
  void clear_hat_id();
  ::PROTOBUF_NAMESPACE_ID::int32 hat_id() const;
  void set_hat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hat_id() const;
  void _internal_set_hat_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 scene_id = 3;
  bool has_scene_id() const;
  private:
  bool _internal_has_scene_id() const;
  public:
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 world_scale = 4;
  bool has_world_scale() const;
  private:
  bool _internal_has_world_scale() const;
  public:
  void clear_world_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 world_scale() const;
  void set_world_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_scale() const;
  void _internal_set_world_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CP2P_VRAvatarPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CP2P_VRAvatarPosition_COrientation > body_parts_;
  ::PROTOBUF_NAMESPACE_ID::int32 hat_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_scale_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// -------------------------------------------------------------------

class CP2P_WatchSynchronization PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CP2P_WatchSynchronization) */ {
 public:
  inline CP2P_WatchSynchronization() : CP2P_WatchSynchronization(nullptr) {}
  virtual ~CP2P_WatchSynchronization();
  explicit constexpr CP2P_WatchSynchronization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CP2P_WatchSynchronization(const CP2P_WatchSynchronization& from);
  CP2P_WatchSynchronization(CP2P_WatchSynchronization&& from) noexcept
    : CP2P_WatchSynchronization() {
    *this = ::std::move(from);
  }

  inline CP2P_WatchSynchronization& operator=(const CP2P_WatchSynchronization& from) {
    CopyFrom(from);
    return *this;
  }
  inline CP2P_WatchSynchronization& operator=(CP2P_WatchSynchronization&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CP2P_WatchSynchronization& default_instance() {
    return *internal_default_instance();
  }
  static inline const CP2P_WatchSynchronization* internal_default_instance() {
    return reinterpret_cast<const CP2P_WatchSynchronization*>(
               &_CP2P_WatchSynchronization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CP2P_WatchSynchronization& a, CP2P_WatchSynchronization& b) {
    a.Swap(&b);
  }
  inline void Swap(CP2P_WatchSynchronization* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CP2P_WatchSynchronization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CP2P_WatchSynchronization* New() const final {
    return CreateMaybeMessage<CP2P_WatchSynchronization>(nullptr);
  }

  CP2P_WatchSynchronization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CP2P_WatchSynchronization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CP2P_WatchSynchronization& from);
  void MergeFrom(const CP2P_WatchSynchronization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CP2P_WatchSynchronization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CP2P_WatchSynchronization";
  }
  protected:
  explicit CP2P_WatchSynchronization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemoTickFieldNumber = 1,
    kPausedFieldNumber = 2,
    kTvListenVoiceIndicesFieldNumber = 3,
    kDotaSpectatorModeFieldNumber = 4,
    kDotaSpectatorWatchingBroadcasterFieldNumber = 5,
    kDotaSpectatorHeroIndexFieldNumber = 6,
    kDotaSpectatorAutospeedFieldNumber = 7,
    kDotaReplaySpeedFieldNumber = 8,
  };
  // optional int32 demo_tick = 1;
  bool has_demo_tick() const;
  private:
  bool _internal_has_demo_tick() const;
  public:
  void clear_demo_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 demo_tick() const;
  void set_demo_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_demo_tick() const;
  void _internal_set_demo_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool paused = 2;
  bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // optional uint64 tv_listen_voice_indices = 3;
  bool has_tv_listen_voice_indices() const;
  private:
  bool _internal_has_tv_listen_voice_indices() const;
  public:
  void clear_tv_listen_voice_indices();
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_listen_voice_indices() const;
  void set_tv_listen_voice_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tv_listen_voice_indices() const;
  void _internal_set_tv_listen_voice_indices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 dota_spectator_mode = 4;
  bool has_dota_spectator_mode() const;
  private:
  bool _internal_has_dota_spectator_mode() const;
  public:
  void clear_dota_spectator_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_mode() const;
  void set_dota_spectator_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dota_spectator_mode() const;
  void _internal_set_dota_spectator_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dota_spectator_watching_broadcaster = 5;
  bool has_dota_spectator_watching_broadcaster() const;
  private:
  bool _internal_has_dota_spectator_watching_broadcaster() const;
  public:
  void clear_dota_spectator_watching_broadcaster();
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_watching_broadcaster() const;
  void set_dota_spectator_watching_broadcaster(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dota_spectator_watching_broadcaster() const;
  void _internal_set_dota_spectator_watching_broadcaster(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dota_spectator_hero_index = 6;
  bool has_dota_spectator_hero_index() const;
  private:
  bool _internal_has_dota_spectator_hero_index() const;
  public:
  void clear_dota_spectator_hero_index();
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_hero_index() const;
  void set_dota_spectator_hero_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dota_spectator_hero_index() const;
  void _internal_set_dota_spectator_hero_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dota_spectator_autospeed = 7;
  bool has_dota_spectator_autospeed() const;
  private:
  bool _internal_has_dota_spectator_autospeed() const;
  public:
  void clear_dota_spectator_autospeed();
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_autospeed() const;
  void set_dota_spectator_autospeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dota_spectator_autospeed() const;
  void _internal_set_dota_spectator_autospeed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 dota_replay_speed = 8;
  bool has_dota_replay_speed() const;
  private:
  bool _internal_has_dota_replay_speed() const;
  public:
  void clear_dota_replay_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 dota_replay_speed() const;
  void set_dota_replay_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dota_replay_speed() const;
  void _internal_set_dota_replay_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CP2P_WatchSynchronization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 demo_tick_;
  bool paused_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tv_listen_voice_indices_;
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_watching_broadcaster_;
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_hero_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 dota_spectator_autospeed_;
  ::PROTOBUF_NAMESPACE_ID::int32 dota_replay_speed_;
  friend struct ::TableStruct_c_5fpeer2peer_5fnetmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CP2P_TextMessage

// optional bytes text = 1;
inline bool CP2P_TextMessage::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CP2P_TextMessage::has_text() const {
  return _internal_has_text();
}
inline void CP2P_TextMessage::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CP2P_TextMessage::text() const {
  // @@protoc_insertion_point(field_get:CP2P_TextMessage.text)
  return _internal_text();
}
inline void CP2P_TextMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:CP2P_TextMessage.text)
}
inline std::string* CP2P_TextMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:CP2P_TextMessage.text)
  return _internal_mutable_text();
}
inline const std::string& CP2P_TextMessage::_internal_text() const {
  return text_.Get();
}
inline void CP2P_TextMessage::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CP2P_TextMessage::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CP2P_TextMessage.text)
}
inline void CP2P_TextMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CP2P_TextMessage.text)
}
inline void CP2P_TextMessage::set_text(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CP2P_TextMessage.text)
}
inline std::string* CP2P_TextMessage::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CP2P_TextMessage::release_text() {
  // @@protoc_insertion_point(field_release:CP2P_TextMessage.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CP2P_TextMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CP2P_TextMessage.text)
}

// -------------------------------------------------------------------

// CSteam_Voice_Encoding

// optional bytes voice_data = 1;
inline bool CSteam_Voice_Encoding::_internal_has_voice_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSteam_Voice_Encoding::has_voice_data() const {
  return _internal_has_voice_data();
}
inline void CSteam_Voice_Encoding::clear_voice_data() {
  voice_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSteam_Voice_Encoding::voice_data() const {
  // @@protoc_insertion_point(field_get:CSteam_Voice_Encoding.voice_data)
  return _internal_voice_data();
}
inline void CSteam_Voice_Encoding::set_voice_data(const std::string& value) {
  _internal_set_voice_data(value);
  // @@protoc_insertion_point(field_set:CSteam_Voice_Encoding.voice_data)
}
inline std::string* CSteam_Voice_Encoding::mutable_voice_data() {
  // @@protoc_insertion_point(field_mutable:CSteam_Voice_Encoding.voice_data)
  return _internal_mutable_voice_data();
}
inline const std::string& CSteam_Voice_Encoding::_internal_voice_data() const {
  return voice_data_.Get();
}
inline void CSteam_Voice_Encoding::_internal_set_voice_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSteam_Voice_Encoding::set_voice_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSteam_Voice_Encoding.voice_data)
}
inline void CSteam_Voice_Encoding::set_voice_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSteam_Voice_Encoding.voice_data)
}
inline void CSteam_Voice_Encoding::set_voice_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSteam_Voice_Encoding.voice_data)
}
inline std::string* CSteam_Voice_Encoding::_internal_mutable_voice_data() {
  _has_bits_[0] |= 0x00000001u;
  return voice_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSteam_Voice_Encoding::release_voice_data() {
  // @@protoc_insertion_point(field_release:CSteam_Voice_Encoding.voice_data)
  if (!_internal_has_voice_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return voice_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSteam_Voice_Encoding::set_allocated_voice_data(std::string* voice_data) {
  if (voice_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSteam_Voice_Encoding.voice_data)
}

// -------------------------------------------------------------------

// CP2P_Voice

// optional .CMsgVoiceAudio audio = 1;
inline bool CP2P_Voice::_internal_has_audio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || audio_ != nullptr);
  return value;
}
inline bool CP2P_Voice::has_audio() const {
  return _internal_has_audio();
}
inline const ::CMsgVoiceAudio& CP2P_Voice::_internal_audio() const {
  const ::CMsgVoiceAudio* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVoiceAudio&>(
      ::_CMsgVoiceAudio_default_instance_);
}
inline const ::CMsgVoiceAudio& CP2P_Voice::audio() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.audio)
  return _internal_audio();
}
inline void CP2P_Voice::unsafe_arena_set_allocated_audio(
    ::CMsgVoiceAudio* audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_Voice.audio)
}
inline ::CMsgVoiceAudio* CP2P_Voice::release_audio() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVoiceAudio* CP2P_Voice::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:CP2P_Voice.audio)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::CMsgVoiceAudio* CP2P_Voice::_internal_mutable_audio() {
  _has_bits_[0] |= 0x00000001u;
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVoiceAudio>(GetArena());
    audio_ = p;
  }
  return audio_;
}
inline ::CMsgVoiceAudio* CP2P_Voice::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:CP2P_Voice.audio)
  return _internal_mutable_audio();
}
inline void CP2P_Voice::set_allocated_audio(::CMsgVoiceAudio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio)->GetArena();
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:CP2P_Voice.audio)
}

// optional uint32 broadcast_group = 2;
inline bool CP2P_Voice::_internal_has_broadcast_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CP2P_Voice::has_broadcast_group() const {
  return _internal_has_broadcast_group();
}
inline void CP2P_Voice::clear_broadcast_group() {
  broadcast_group_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CP2P_Voice::_internal_broadcast_group() const {
  return broadcast_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CP2P_Voice::broadcast_group() const {
  // @@protoc_insertion_point(field_get:CP2P_Voice.broadcast_group)
  return _internal_broadcast_group();
}
inline void CP2P_Voice::_internal_set_broadcast_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  broadcast_group_ = value;
}
inline void CP2P_Voice::set_broadcast_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_broadcast_group(value);
  // @@protoc_insertion_point(field_set:CP2P_Voice.broadcast_group)
}

// -------------------------------------------------------------------

// CP2P_Ping

// required uint64 send_time = 1;
inline bool CP2P_Ping::_internal_has_send_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CP2P_Ping::has_send_time() const {
  return _internal_has_send_time();
}
inline void CP2P_Ping::clear_send_time() {
  send_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CP2P_Ping::_internal_send_time() const {
  return send_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CP2P_Ping::send_time() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.send_time)
  return _internal_send_time();
}
inline void CP2P_Ping::_internal_set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  send_time_ = value;
}
inline void CP2P_Ping::set_send_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send_time(value);
  // @@protoc_insertion_point(field_set:CP2P_Ping.send_time)
}

// required bool is_reply = 2;
inline bool CP2P_Ping::_internal_has_is_reply() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CP2P_Ping::has_is_reply() const {
  return _internal_has_is_reply();
}
inline void CP2P_Ping::clear_is_reply() {
  is_reply_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CP2P_Ping::_internal_is_reply() const {
  return is_reply_;
}
inline bool CP2P_Ping::is_reply() const {
  // @@protoc_insertion_point(field_get:CP2P_Ping.is_reply)
  return _internal_is_reply();
}
inline void CP2P_Ping::_internal_set_is_reply(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_reply_ = value;
}
inline void CP2P_Ping::set_is_reply(bool value) {
  _internal_set_is_reply(value);
  // @@protoc_insertion_point(field_set:CP2P_Ping.is_reply)
}

// -------------------------------------------------------------------

// CP2P_VRAvatarPosition_COrientation

// optional .CMsgVector pos = 1;
inline bool CP2P_VRAvatarPosition_COrientation::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool CP2P_VRAvatarPosition_COrientation::has_pos() const {
  return _internal_has_pos();
}
inline const ::CMsgVector& CP2P_VRAvatarPosition_COrientation::_internal_pos() const {
  const ::CMsgVector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CP2P_VRAvatarPosition_COrientation::pos() const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.COrientation.pos)
  return _internal_pos();
}
inline void CP2P_VRAvatarPosition_COrientation::unsafe_arena_set_allocated_pos(
    ::CMsgVector* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_VRAvatarPosition.COrientation.pos)
}
inline ::CMsgVector* CP2P_VRAvatarPosition_COrientation::release_pos() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVector* CP2P_VRAvatarPosition_COrientation::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:CP2P_VRAvatarPosition.COrientation.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::CMsgVector* CP2P_VRAvatarPosition_COrientation::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::CMsgVector* CP2P_VRAvatarPosition_COrientation::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:CP2P_VRAvatarPosition.COrientation.pos)
  return _internal_mutable_pos();
}
inline void CP2P_VRAvatarPosition_COrientation::set_allocated_pos(::CMsgVector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:CP2P_VRAvatarPosition.COrientation.pos)
}

// optional .CMsgQAngle ang = 2;
inline bool CP2P_VRAvatarPosition_COrientation::_internal_has_ang() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ang_ != nullptr);
  return value;
}
inline bool CP2P_VRAvatarPosition_COrientation::has_ang() const {
  return _internal_has_ang();
}
inline const ::CMsgQAngle& CP2P_VRAvatarPosition_COrientation::_internal_ang() const {
  const ::CMsgQAngle* p = ang_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CP2P_VRAvatarPosition_COrientation::ang() const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.COrientation.ang)
  return _internal_ang();
}
inline void CP2P_VRAvatarPosition_COrientation::unsafe_arena_set_allocated_ang(
    ::CMsgQAngle* ang) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang_);
  }
  ang_ = ang;
  if (ang) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CP2P_VRAvatarPosition.COrientation.ang)
}
inline ::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::release_ang() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgQAngle* temp = ang_;
  ang_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::unsafe_arena_release_ang() {
  // @@protoc_insertion_point(field_release:CP2P_VRAvatarPosition.COrientation.ang)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgQAngle* temp = ang_;
  ang_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::_internal_mutable_ang() {
  _has_bits_[0] |= 0x00000002u;
  if (ang_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArena());
    ang_ = p;
  }
  return ang_;
}
inline ::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::mutable_ang() {
  // @@protoc_insertion_point(field_mutable:CP2P_VRAvatarPosition.COrientation.ang)
  return _internal_mutable_ang();
}
inline void CP2P_VRAvatarPosition_COrientation::set_allocated_ang(::CMsgQAngle* ang) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang_);
  }
  if (ang) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ang)->GetArena();
    if (message_arena != submessage_arena) {
      ang = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ang, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ang_ = ang;
  // @@protoc_insertion_point(field_set_allocated:CP2P_VRAvatarPosition.COrientation.ang)
}

// -------------------------------------------------------------------

// CP2P_VRAvatarPosition

// repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
inline int CP2P_VRAvatarPosition::_internal_body_parts_size() const {
  return body_parts_.size();
}
inline int CP2P_VRAvatarPosition::body_parts_size() const {
  return _internal_body_parts_size();
}
inline void CP2P_VRAvatarPosition::clear_body_parts() {
  body_parts_.Clear();
}
inline ::CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition::mutable_body_parts(int index) {
  // @@protoc_insertion_point(field_mutable:CP2P_VRAvatarPosition.body_parts)
  return body_parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CP2P_VRAvatarPosition_COrientation >*
CP2P_VRAvatarPosition::mutable_body_parts() {
  // @@protoc_insertion_point(field_mutable_list:CP2P_VRAvatarPosition.body_parts)
  return &body_parts_;
}
inline const ::CP2P_VRAvatarPosition_COrientation& CP2P_VRAvatarPosition::_internal_body_parts(int index) const {
  return body_parts_.Get(index);
}
inline const ::CP2P_VRAvatarPosition_COrientation& CP2P_VRAvatarPosition::body_parts(int index) const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.body_parts)
  return _internal_body_parts(index);
}
inline ::CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition::_internal_add_body_parts() {
  return body_parts_.Add();
}
inline ::CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition::add_body_parts() {
  // @@protoc_insertion_point(field_add:CP2P_VRAvatarPosition.body_parts)
  return _internal_add_body_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CP2P_VRAvatarPosition_COrientation >&
CP2P_VRAvatarPosition::body_parts() const {
  // @@protoc_insertion_point(field_list:CP2P_VRAvatarPosition.body_parts)
  return body_parts_;
}

// optional int32 hat_id = 2;
inline bool CP2P_VRAvatarPosition::_internal_has_hat_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CP2P_VRAvatarPosition::has_hat_id() const {
  return _internal_has_hat_id();
}
inline void CP2P_VRAvatarPosition::clear_hat_id() {
  hat_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::_internal_hat_id() const {
  return hat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::hat_id() const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.hat_id)
  return _internal_hat_id();
}
inline void CP2P_VRAvatarPosition::_internal_set_hat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  hat_id_ = value;
}
inline void CP2P_VRAvatarPosition::set_hat_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hat_id(value);
  // @@protoc_insertion_point(field_set:CP2P_VRAvatarPosition.hat_id)
}

// optional int32 scene_id = 3;
inline bool CP2P_VRAvatarPosition::_internal_has_scene_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CP2P_VRAvatarPosition::has_scene_id() const {
  return _internal_has_scene_id();
}
inline void CP2P_VRAvatarPosition::clear_scene_id() {
  scene_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::scene_id() const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.scene_id)
  return _internal_scene_id();
}
inline void CP2P_VRAvatarPosition::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  scene_id_ = value;
}
inline void CP2P_VRAvatarPosition::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:CP2P_VRAvatarPosition.scene_id)
}

// optional int32 world_scale = 4;
inline bool CP2P_VRAvatarPosition::_internal_has_world_scale() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CP2P_VRAvatarPosition::has_world_scale() const {
  return _internal_has_world_scale();
}
inline void CP2P_VRAvatarPosition::clear_world_scale() {
  world_scale_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::_internal_world_scale() const {
  return world_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_VRAvatarPosition::world_scale() const {
  // @@protoc_insertion_point(field_get:CP2P_VRAvatarPosition.world_scale)
  return _internal_world_scale();
}
inline void CP2P_VRAvatarPosition::_internal_set_world_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  world_scale_ = value;
}
inline void CP2P_VRAvatarPosition::set_world_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_scale(value);
  // @@protoc_insertion_point(field_set:CP2P_VRAvatarPosition.world_scale)
}

// -------------------------------------------------------------------

// CP2P_WatchSynchronization

// optional int32 demo_tick = 1;
inline bool CP2P_WatchSynchronization::_internal_has_demo_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_demo_tick() const {
  return _internal_has_demo_tick();
}
inline void CP2P_WatchSynchronization::clear_demo_tick() {
  demo_tick_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_demo_tick() const {
  return demo_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::demo_tick() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.demo_tick)
  return _internal_demo_tick();
}
inline void CP2P_WatchSynchronization::_internal_set_demo_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  demo_tick_ = value;
}
inline void CP2P_WatchSynchronization::set_demo_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_demo_tick(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.demo_tick)
}

// optional bool paused = 2;
inline bool CP2P_WatchSynchronization::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_paused() const {
  return _internal_has_paused();
}
inline void CP2P_WatchSynchronization::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CP2P_WatchSynchronization::_internal_paused() const {
  return paused_;
}
inline bool CP2P_WatchSynchronization::paused() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.paused)
  return _internal_paused();
}
inline void CP2P_WatchSynchronization::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000002u;
  paused_ = value;
}
inline void CP2P_WatchSynchronization::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.paused)
}

// optional uint64 tv_listen_voice_indices = 3;
inline bool CP2P_WatchSynchronization::_internal_has_tv_listen_voice_indices() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_tv_listen_voice_indices() const {
  return _internal_has_tv_listen_voice_indices();
}
inline void CP2P_WatchSynchronization::clear_tv_listen_voice_indices() {
  tv_listen_voice_indices_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CP2P_WatchSynchronization::_internal_tv_listen_voice_indices() const {
  return tv_listen_voice_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CP2P_WatchSynchronization::tv_listen_voice_indices() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.tv_listen_voice_indices)
  return _internal_tv_listen_voice_indices();
}
inline void CP2P_WatchSynchronization::_internal_set_tv_listen_voice_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  tv_listen_voice_indices_ = value;
}
inline void CP2P_WatchSynchronization::set_tv_listen_voice_indices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tv_listen_voice_indices(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.tv_listen_voice_indices)
}

// optional int32 dota_spectator_mode = 4;
inline bool CP2P_WatchSynchronization::_internal_has_dota_spectator_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_dota_spectator_mode() const {
  return _internal_has_dota_spectator_mode();
}
inline void CP2P_WatchSynchronization::clear_dota_spectator_mode() {
  dota_spectator_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_dota_spectator_mode() const {
  return dota_spectator_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::dota_spectator_mode() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.dota_spectator_mode)
  return _internal_dota_spectator_mode();
}
inline void CP2P_WatchSynchronization::_internal_set_dota_spectator_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  dota_spectator_mode_ = value;
}
inline void CP2P_WatchSynchronization::set_dota_spectator_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dota_spectator_mode(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.dota_spectator_mode)
}

// optional int32 dota_spectator_watching_broadcaster = 5;
inline bool CP2P_WatchSynchronization::_internal_has_dota_spectator_watching_broadcaster() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_dota_spectator_watching_broadcaster() const {
  return _internal_has_dota_spectator_watching_broadcaster();
}
inline void CP2P_WatchSynchronization::clear_dota_spectator_watching_broadcaster() {
  dota_spectator_watching_broadcaster_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_dota_spectator_watching_broadcaster() const {
  return dota_spectator_watching_broadcaster_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::dota_spectator_watching_broadcaster() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.dota_spectator_watching_broadcaster)
  return _internal_dota_spectator_watching_broadcaster();
}
inline void CP2P_WatchSynchronization::_internal_set_dota_spectator_watching_broadcaster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  dota_spectator_watching_broadcaster_ = value;
}
inline void CP2P_WatchSynchronization::set_dota_spectator_watching_broadcaster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dota_spectator_watching_broadcaster(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.dota_spectator_watching_broadcaster)
}

// optional int32 dota_spectator_hero_index = 6;
inline bool CP2P_WatchSynchronization::_internal_has_dota_spectator_hero_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_dota_spectator_hero_index() const {
  return _internal_has_dota_spectator_hero_index();
}
inline void CP2P_WatchSynchronization::clear_dota_spectator_hero_index() {
  dota_spectator_hero_index_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_dota_spectator_hero_index() const {
  return dota_spectator_hero_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::dota_spectator_hero_index() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.dota_spectator_hero_index)
  return _internal_dota_spectator_hero_index();
}
inline void CP2P_WatchSynchronization::_internal_set_dota_spectator_hero_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  dota_spectator_hero_index_ = value;
}
inline void CP2P_WatchSynchronization::set_dota_spectator_hero_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dota_spectator_hero_index(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.dota_spectator_hero_index)
}

// optional int32 dota_spectator_autospeed = 7;
inline bool CP2P_WatchSynchronization::_internal_has_dota_spectator_autospeed() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_dota_spectator_autospeed() const {
  return _internal_has_dota_spectator_autospeed();
}
inline void CP2P_WatchSynchronization::clear_dota_spectator_autospeed() {
  dota_spectator_autospeed_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_dota_spectator_autospeed() const {
  return dota_spectator_autospeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::dota_spectator_autospeed() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.dota_spectator_autospeed)
  return _internal_dota_spectator_autospeed();
}
inline void CP2P_WatchSynchronization::_internal_set_dota_spectator_autospeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  dota_spectator_autospeed_ = value;
}
inline void CP2P_WatchSynchronization::set_dota_spectator_autospeed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dota_spectator_autospeed(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.dota_spectator_autospeed)
}

// optional int32 dota_replay_speed = 8;
inline bool CP2P_WatchSynchronization::_internal_has_dota_replay_speed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CP2P_WatchSynchronization::has_dota_replay_speed() const {
  return _internal_has_dota_replay_speed();
}
inline void CP2P_WatchSynchronization::clear_dota_replay_speed() {
  dota_replay_speed_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::_internal_dota_replay_speed() const {
  return dota_replay_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CP2P_WatchSynchronization::dota_replay_speed() const {
  // @@protoc_insertion_point(field_get:CP2P_WatchSynchronization.dota_replay_speed)
  return _internal_dota_replay_speed();
}
inline void CP2P_WatchSynchronization::_internal_set_dota_replay_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  dota_replay_speed_ = value;
}
inline void CP2P_WatchSynchronization::set_dota_replay_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dota_replay_speed(value);
  // @@protoc_insertion_point(field_set:CP2P_WatchSynchronization.dota_replay_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CP2P_Voice_Handler_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CP2P_Voice_Handler_Flags>() {
  return ::CP2P_Voice_Handler_Flags_descriptor();
}
template <> struct is_proto_enum< ::P2P_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::P2P_Messages>() {
  return ::P2P_Messages_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_c_5fpeer2peer_5fnetmessages_2eproto
