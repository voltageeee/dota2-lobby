// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: econ_gcmessages.proto

#include "econ_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgApplyAutograph::CMsgApplyAutograph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : autograph_item_id_(PROTOBUF_ULONGLONG(0))
  , item_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgApplyAutographDefaultTypeInternal {
  constexpr CMsgApplyAutographDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgApplyAutographDefaultTypeInternal() {}
  union {
    CMsgApplyAutograph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgApplyAutographDefaultTypeInternal _CMsgApplyAutograph_default_instance_;
constexpr CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , new_class_(0u)
  , new_slot_(0u)
  , style_index_(0u){}
struct CMsgAdjustItemEquippedStateDefaultTypeInternal {
  constexpr CMsgAdjustItemEquippedStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAdjustItemEquippedStateDefaultTypeInternal() {}
  union {
    CMsgAdjustItemEquippedState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAdjustItemEquippedStateDefaultTypeInternal _CMsgAdjustItemEquippedState_default_instance_;
constexpr CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , event_type_(0u)
  , adjustment_(0u){}
struct CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal {
  constexpr CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal() {}
  union {
    CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustmentDefaultTypeInternal _CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_default_instance_;
constexpr CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strange_count_adjustments_()
  , account_id_(0u)
  , turbo_mode_(false){}
struct CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal {
  constexpr CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal() {}
  union {
    CMsgEconPlayerStrangeCountAdjustment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgEconPlayerStrangeCountAdjustmentDefaultTypeInternal _CMsgEconPlayerStrangeCountAdjustment_default_instance_;
constexpr CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_(){}
struct CMsgRequestItemPurgatory_FinalizePurchaseDefaultTypeInternal {
  constexpr CMsgRequestItemPurgatory_FinalizePurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestItemPurgatory_FinalizePurchaseDefaultTypeInternal() {}
  union {
    CMsgRequestItemPurgatory_FinalizePurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestItemPurgatory_FinalizePurchaseDefaultTypeInternal _CMsgRequestItemPurgatory_FinalizePurchase_default_instance_;
constexpr CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , result_(0u){}
struct CMsgRequestItemPurgatory_FinalizePurchaseResponseDefaultTypeInternal {
  constexpr CMsgRequestItemPurgatory_FinalizePurchaseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestItemPurgatory_FinalizePurchaseResponseDefaultTypeInternal() {}
  union {
    CMsgRequestItemPurgatory_FinalizePurchaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestItemPurgatory_FinalizePurchaseResponseDefaultTypeInternal _CMsgRequestItemPurgatory_FinalizePurchaseResponse_default_instance_;
constexpr CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_(){}
struct CMsgRequestItemPurgatory_RefundPurchaseDefaultTypeInternal {
  constexpr CMsgRequestItemPurgatory_RefundPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestItemPurgatory_RefundPurchaseDefaultTypeInternal() {}
  union {
    CMsgRequestItemPurgatory_RefundPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestItemPurgatory_RefundPurchaseDefaultTypeInternal _CMsgRequestItemPurgatory_RefundPurchase_default_instance_;
constexpr CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0u){}
struct CMsgRequestItemPurgatory_RefundPurchaseResponseDefaultTypeInternal {
  constexpr CMsgRequestItemPurgatory_RefundPurchaseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestItemPurgatory_RefundPurchaseResponseDefaultTypeInternal() {}
  union {
    CMsgRequestItemPurgatory_RefundPurchaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestItemPurgatory_RefundPurchaseResponseDefaultTypeInternal _CMsgRequestItemPurgatory_RefundPurchaseResponse_default_instance_;
constexpr CMsgCraftingResponse::CMsgCraftingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_(){}
struct CMsgCraftingResponseDefaultTypeInternal {
  constexpr CMsgCraftingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCraftingResponseDefaultTypeInternal() {}
  union {
    CMsgCraftingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCraftingResponseDefaultTypeInternal _CMsgCraftingResponse_default_instance_;
constexpr CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0u)
  , currency_(0u){}
struct CMsgGCRequestStoreSalesDataDefaultTypeInternal {
  constexpr CMsgGCRequestStoreSalesDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestStoreSalesDataDefaultTypeInternal _CMsgGCRequestStoreSalesData_default_instance_;
constexpr CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_(0u)
  , price_(0u){}
struct CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal {
  constexpr CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataResponse_Price _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestStoreSalesDataResponse_PriceDefaultTypeInternal _CMsgGCRequestStoreSalesDataResponse_Price_default_instance_;
constexpr CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sale_price_()
  , version_(0u)
  , expiration_time_(0u){}
struct CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal {
  constexpr CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestStoreSalesDataResponseDefaultTypeInternal _CMsgGCRequestStoreSalesDataResponse_default_instance_;
constexpr CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0u)
  , expiration_time_(0u){}
struct CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal {
  constexpr CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal() {}
  union {
    CMsgGCRequestStoreSalesDataUpToDateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRequestStoreSalesDataUpToDateResponseDefaultTypeInternal _CMsgGCRequestStoreSalesDataUpToDateResponse_default_instance_;
constexpr CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCPingRequestDefaultTypeInternal {
  constexpr CMsgGCToGCPingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCPingRequestDefaultTypeInternal() {}
  union {
    CMsgGCToGCPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCPingRequestDefaultTypeInternal _CMsgGCToGCPingRequest_default_instance_;
constexpr CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCPingResponseDefaultTypeInternal {
  constexpr CMsgGCToGCPingResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCPingResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCPingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCPingResponseDefaultTypeInternal _CMsgGCToGCPingResponse_default_instance_;
constexpr CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGCToGCGetUserSessionServerDefaultTypeInternal {
  constexpr CMsgGCToGCGetUserSessionServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserSessionServerDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserSessionServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetUserSessionServerDefaultTypeInternal _CMsgGCToGCGetUserSessionServer_default_instance_;
constexpr CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_steam_id_(PROTOBUF_ULONGLONG(0))
  , is_online_(false){}
struct CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal {
  constexpr CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserSessionServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetUserSessionServerResponseDefaultTypeInternal _CMsgGCToGCGetUserSessionServerResponse_default_instance_;
constexpr CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , max_spectators_(0u){}
struct CMsgGCToGCGetUserServerMembersDefaultTypeInternal {
  constexpr CMsgGCToGCGetUserServerMembersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserServerMembersDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserServerMembers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetUserServerMembersDefaultTypeInternal _CMsgGCToGCGetUserServerMembers_default_instance_;
constexpr CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : member_account_id_(){}
struct CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal {
  constexpr CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetUserServerMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetUserServerMembersResponseDefaultTypeInternal _CMsgGCToGCGetUserServerMembersResponse_default_instance_;
constexpr CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accountids_()
  , _accountids_cached_byte_size_(){}
struct CMsgLookupMultipleAccountNamesDefaultTypeInternal {
  constexpr CMsgLookupMultipleAccountNamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLookupMultipleAccountNamesDefaultTypeInternal _CMsgLookupMultipleAccountNames_default_instance_;
constexpr CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u){}
struct CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal {
  constexpr CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNamesResponse_Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLookupMultipleAccountNamesResponse_AccountDefaultTypeInternal _CMsgLookupMultipleAccountNamesResponse_Account_default_instance_;
constexpr CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_(){}
struct CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal {
  constexpr CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal() {}
  union {
    CMsgLookupMultipleAccountNamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLookupMultipleAccountNamesResponseDefaultTypeInternal _CMsgLookupMultipleAccountNamesResponse_default_instance_;
constexpr CMsgRequestCrateItems::CMsgRequestCrateItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crate_item_def_(0u){}
struct CMsgRequestCrateItemsDefaultTypeInternal {
  constexpr CMsgRequestCrateItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestCrateItemsDefaultTypeInternal() {}
  union {
    CMsgRequestCrateItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestCrateItemsDefaultTypeInternal _CMsgRequestCrateItems_default_instance_;
constexpr CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_defs_()
  , peek_item_defs_()
  , response_(0u){}
struct CMsgRequestCrateItemsResponseDefaultTypeInternal {
  constexpr CMsgRequestCrateItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestCrateItemsResponseDefaultTypeInternal() {}
  union {
    CMsgRequestCrateItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestCrateItemsResponseDefaultTypeInternal _CMsgRequestCrateItemsResponse_default_instance_;
constexpr CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crate_item_def_(0u){}
struct CMsgRequestCrateEscalationLevelDefaultTypeInternal {
  constexpr CMsgRequestCrateEscalationLevelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestCrateEscalationLevelDefaultTypeInternal() {}
  union {
    CMsgRequestCrateEscalationLevel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestCrateEscalationLevelDefaultTypeInternal _CMsgRequestCrateEscalationLevel_default_instance_;
constexpr CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0u)
  , escalation_level0_(0u)
  , escalation_level1_(0u)
  , escalation_level2_(0u)
  , escalation_level3_(0u){}
struct CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal {
  constexpr CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal() {}
  union {
    CMsgRequestCrateEscalationLevelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestCrateEscalationLevelResponseDefaultTypeInternal _CMsgRequestCrateEscalationLevelResponse_default_instance_;
constexpr CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , drop_rate_bonus_(0)
  , booster_type_(0u)
  , exclusive_item_def_(0u)
  , allow_equal_rate_(false){}
struct CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal {
  constexpr CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal() {}
  union {
    CMsgGCToGCCanUseDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCCanUseDropRateBonusDefaultTypeInternal _CMsgGCToGCCanUseDropRateBonus_default_instance_;
constexpr CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , item_def_(0u)
  , drop_rate_bonus_(0)
  , booster_type_(0u)
  , seconds_duration_(0u)
  , end_time_stamp_(0u){}
struct CMsgSQLAddDropRateBonusDefaultTypeInternal {
  constexpr CMsgSQLAddDropRateBonusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSQLAddDropRateBonusDefaultTypeInternal() {}
  union {
    CMsgSQLAddDropRateBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSQLAddDropRateBonusDefaultTypeInternal _CMsgSQLAddDropRateBonus_default_instance_;
constexpr CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , item_def_(0u)
  , bonus_to_add_(0)
  , booster_type_(0u){}
struct CMsgSQLUpgradeBattleBoosterDefaultTypeInternal {
  constexpr CMsgSQLUpgradeBattleBoosterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSQLUpgradeBattleBoosterDefaultTypeInternal() {}
  union {
    CMsgSQLUpgradeBattleBooster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSQLUpgradeBattleBoosterDefaultTypeInternal _CMsgSQLUpgradeBattleBooster_default_instance_;
constexpr CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , reload_(false){}
struct CMsgGCToGCRefreshSOCacheDefaultTypeInternal {
  constexpr CMsgGCToGCRefreshSOCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCRefreshSOCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCRefreshSOCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCRefreshSOCacheDefaultTypeInternal _CMsgGCToGCRefreshSOCache_default_instance_;
constexpr CMsgGCToGCCheckAccountTradeStatus::CMsgGCToGCCheckAccountTradeStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , initiator_(false){}
struct CMsgGCToGCCheckAccountTradeStatusDefaultTypeInternal {
  constexpr CMsgGCToGCCheckAccountTradeStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCCheckAccountTradeStatusDefaultTypeInternal() {}
  union {
    CMsgGCToGCCheckAccountTradeStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCCheckAccountTradeStatusDefaultTypeInternal _CMsgGCToGCCheckAccountTradeStatus_default_instance_;
constexpr CMsgGCToGCCheckAccountTradeStatusResponse::CMsgGCToGCCheckAccountTradeStatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : can_trade_(false)
  , error_code_(0u){}
struct CMsgGCToGCCheckAccountTradeStatusResponseDefaultTypeInternal {
  constexpr CMsgGCToGCCheckAccountTradeStatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCCheckAccountTradeStatusResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCCheckAccountTradeStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCCheckAccountTradeStatusResponseDefaultTypeInternal _CMsgGCToGCCheckAccountTradeStatusResponse_default_instance_;
constexpr CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matching_subscription_def_indexes_()
  , account_id_(0u)
  , additional_seconds_(0u){}
struct CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal {
  constexpr CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal() {}
  union {
    CMsgGCToGCAddSubscriptionTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCAddSubscriptionTimeDefaultTypeInternal _CMsgGCToGCAddSubscriptionTime_default_instance_;
constexpr CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_uint32_(0u)
  , value_float_(0){}
struct CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal {
  constexpr CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttributeDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute_default_instance_;
constexpr CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_account_id_(0u)
  , audit_action_(0u)
  , audit_data_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal {
  constexpr CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntryDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry_default_instance_;
constexpr CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loot_lists_()
  , dynamic_attributes_()
  , additional_audit_entries_()
  , item_def_(0u)
  , ignore_limit_(false)
  , origin_(0u)
  , inventory_token_(0u){}
struct CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal {
  constexpr CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGrantAccountRolledItems_ItemDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_Item_default_instance_;
constexpr CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , account_id_(0u)
  , audit_action_(0u)
  , audit_data_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal {
  constexpr CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantAccountRolledItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGrantAccountRolledItemsDefaultTypeInternal _CMsgGCToGCGrantAccountRolledItems_default_instance_;
constexpr CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , item_defs_()
  , account_id_(0u){}
struct CMsgGCToGCBetaDeleteItemsDefaultTypeInternal {
  constexpr CMsgGCToGCBetaDeleteItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBetaDeleteItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCBetaDeleteItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBetaDeleteItemsDefaultTypeInternal _CMsgGCToGCBetaDeleteItems_default_instance_;
constexpr CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_index_(0u)
  , accountid_(0u){}
struct CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal {
  constexpr CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal() {}
  union {
    CMsgGCToGCGrantSelfMadeItemToAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGrantSelfMadeItemToAccountDefaultTypeInternal _CMsgGCToGCGrantSelfMadeItemToAccount_default_instance_;
constexpr CMsgUseItem::CMsgUseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gift__potential_targets_()
  , item_id_(PROTOBUF_ULONGLONG(0))
  , target_steam_id_(PROTOBUF_ULONGLONG(0))
  , initiator_steam_id_(PROTOBUF_ULONGLONG(0))
  , duel__class_lock_(0u)
  , itempack__ack_immediately_(false){}
struct CMsgUseItemDefaultTypeInternal {
  constexpr CMsgUseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUseItemDefaultTypeInternal() {}
  union {
    CMsgUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUseItemDefaultTypeInternal _CMsgUseItem_default_instance_;
constexpr CMsgServerUseItem::CMsgServerUseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : use_item_msg_(nullptr)
  , initiator_account_id_(0u){}
struct CMsgServerUseItemDefaultTypeInternal {
  constexpr CMsgServerUseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerUseItemDefaultTypeInternal() {}
  union {
    CMsgServerUseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerUseItemDefaultTypeInternal _CMsgServerUseItem_default_instance_;
constexpr CMsgUseMultipleItems::CMsgUseMultipleItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_(){}
struct CMsgUseMultipleItemsDefaultTypeInternal {
  constexpr CMsgUseMultipleItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUseMultipleItemsDefaultTypeInternal() {}
  union {
    CMsgUseMultipleItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUseMultipleItemsDefaultTypeInternal _CMsgUseMultipleItems_default_instance_;
constexpr CMsgGCPartnerBalanceRequest::CMsgGCPartnerBalanceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCPartnerBalanceRequestDefaultTypeInternal {
  constexpr CMsgGCPartnerBalanceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCPartnerBalanceRequestDefaultTypeInternal() {}
  union {
    CMsgGCPartnerBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCPartnerBalanceRequestDefaultTypeInternal _CMsgGCPartnerBalanceRequest_default_instance_;
constexpr CMsgGCPartnerBalanceResponse::CMsgGCPartnerBalanceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_(0u)
  , result_(1)
{}
struct CMsgGCPartnerBalanceResponseDefaultTypeInternal {
  constexpr CMsgGCPartnerBalanceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCPartnerBalanceResponseDefaultTypeInternal() {}
  union {
    CMsgGCPartnerBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCPartnerBalanceResponseDefaultTypeInternal _CMsgGCPartnerBalanceResponse_default_instance_;
constexpr CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_id_(0u)
  , quantity_(0u){}
struct CGCStoreRechargeRedirect_LineItemDefaultTypeInternal {
  constexpr CGCStoreRechargeRedirect_LineItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCStoreRechargeRedirect_LineItemDefaultTypeInternal() {}
  union {
    CGCStoreRechargeRedirect_LineItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCStoreRechargeRedirect_LineItemDefaultTypeInternal _CGCStoreRechargeRedirect_LineItem_default_instance_;
constexpr CMsgGCPartnerRechargeRedirectURLRequest::CMsgGCPartnerRechargeRedirectURLRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_items_(){}
struct CMsgGCPartnerRechargeRedirectURLRequestDefaultTypeInternal {
  constexpr CMsgGCPartnerRechargeRedirectURLRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCPartnerRechargeRedirectURLRequestDefaultTypeInternal() {}
  union {
    CMsgGCPartnerRechargeRedirectURLRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCPartnerRechargeRedirectURLRequestDefaultTypeInternal _CMsgGCPartnerRechargeRedirectURLRequest_default_instance_;
constexpr CMsgGCPartnerRechargeRedirectURLResponse::CMsgGCPartnerRechargeRedirectURLResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(1)
{}
struct CMsgGCPartnerRechargeRedirectURLResponseDefaultTypeInternal {
  constexpr CMsgGCPartnerRechargeRedirectURLResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCPartnerRechargeRedirectURLResponseDefaultTypeInternal() {}
  union {
    CMsgGCPartnerRechargeRedirectURLResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCPartnerRechargeRedirectURLResponseDefaultTypeInternal _CMsgGCPartnerRechargeRedirectURLResponse_default_instance_;
constexpr CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deleted_item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , old_audit_action_(0u)
  , new_audit_action_(0u)
  , expected_audit_action_(0u){}
struct CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal {
  constexpr CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal() {}
  union {
    CMsgGCEconSQLWorkItemEmbeddedRollbackData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCEconSQLWorkItemEmbeddedRollbackDataDefaultTypeInternal _CMsgGCEconSQLWorkItemEmbeddedRollbackData_default_instance_;
constexpr CMsgCraftStatue::CMsgCraftStatue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequencename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , heroid_(0u)
  , cycle_(0)
  , toolid_(PROTOBUF_ULONGLONG(0))
  , pedestal_itemdef_(0u){}
struct CMsgCraftStatueDefaultTypeInternal {
  constexpr CMsgCraftStatueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCraftStatueDefaultTypeInternal() {}
  union {
    CMsgCraftStatue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCraftStatueDefaultTypeInternal _CMsgCraftStatue_default_instance_;
constexpr CMsgRedeemCode::CMsgRedeemCode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgRedeemCodeDefaultTypeInternal {
  constexpr CMsgRedeemCodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRedeemCodeDefaultTypeInternal() {}
  union {
    CMsgRedeemCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRedeemCodeDefaultTypeInternal _CMsgRedeemCode_default_instance_;
constexpr CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0u){}
struct CMsgRedeemCodeResponseDefaultTypeInternal {
  constexpr CMsgRedeemCodeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRedeemCodeResponseDefaultTypeInternal() {}
  union {
    CMsgRedeemCodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRedeemCodeResponseDefaultTypeInternal _CMsgRedeemCodeResponse_default_instance_;
constexpr CMsgDevNewItemRequest::CMsgDevNewItemRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attr_def_name_()
  , attr_value_()
  , item_def_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loot_list_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgDevNewItemRequestDefaultTypeInternal {
  constexpr CMsgDevNewItemRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDevNewItemRequestDefaultTypeInternal() {}
  union {
    CMsgDevNewItemRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDevNewItemRequestDefaultTypeInternal _CMsgDevNewItemRequest_default_instance_;
constexpr CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgDevNewItemRequestResponseDefaultTypeInternal {
  constexpr CMsgDevNewItemRequestResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDevNewItemRequestResponseDefaultTypeInternal() {}
  union {
    CMsgDevNewItemRequestResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDevNewItemRequestResponseDefaultTypeInternal _CMsgDevNewItemRequestResponse_default_instance_;
constexpr CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDevUnlockAllItemStylesDefaultTypeInternal {
  constexpr CMsgDevUnlockAllItemStylesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDevUnlockAllItemStylesDefaultTypeInternal() {}
  union {
    CMsgDevUnlockAllItemStyles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDevUnlockAllItemStylesDefaultTypeInternal _CMsgDevUnlockAllItemStyles_default_instance_;
constexpr CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal {
  constexpr CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal() {}
  union {
    CMsgDevUnlockAllItemStylesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDevUnlockAllItemStylesResponseDefaultTypeInternal _CMsgDevUnlockAllItemStylesResponse_default_instance_;
constexpr CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGCGetAccountSubscriptionItemDefaultTypeInternal {
  constexpr CMsgGCGetAccountSubscriptionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetAccountSubscriptionItemDefaultTypeInternal() {}
  union {
    CMsgGCGetAccountSubscriptionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetAccountSubscriptionItemDefaultTypeInternal _CMsgGCGetAccountSubscriptionItem_default_instance_;
constexpr CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : def_index_(0u){}
struct CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal {
  constexpr CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetAccountSubscriptionItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetAccountSubscriptionItemResponseDefaultTypeInternal _CMsgGCGetAccountSubscriptionItemResponse_default_instance_;
constexpr CMsgGCAddGiftItem::CMsgGCAddGiftItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u){}
struct CMsgGCAddGiftItemDefaultTypeInternal {
  constexpr CMsgGCAddGiftItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCAddGiftItemDefaultTypeInternal() {}
  union {
    CMsgGCAddGiftItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCAddGiftItemDefaultTypeInternal _CMsgGCAddGiftItem_default_instance_;
constexpr CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gift_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(PROTOBUF_ULONGLONG(0))
  , give_to_account_id_(0u){}
struct CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal {
  constexpr CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal() {}
  union {
    CMsgClientToGCWrapAndDeliverGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCWrapAndDeliverGiftDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGift_default_instance_;
constexpr CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0)

  , gifting_charge_uses_(0u)
  , gifting_charge_max_(0)
  , gifting_uses_(0u)
  , gifting_max_(0)
  , gifting_window_hours_(0u)
  , trade_restriction_(0)
{}
struct CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal {
  constexpr CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCWrapAndDeliverGiftResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCWrapAndDeliverGiftResponseDefaultTypeInternal _CMsgClientToGCWrapAndDeliverGiftResponse_default_instance_;
constexpr CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCUnwrapGiftDefaultTypeInternal {
  constexpr CMsgClientToGCUnwrapGiftDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnwrapGiftDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnwrapGift _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnwrapGiftDefaultTypeInternal _CMsgClientToGCUnwrapGift_default_instance_;
constexpr CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientToGCGetGiftPermissionsDefaultTypeInternal {
  constexpr CMsgClientToGCGetGiftPermissionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetGiftPermissionsDefaultTypeInternal _CMsgClientToGCGetGiftPermissions_default_instance_;
constexpr CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , permission_(0)
{}
struct CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal {
  constexpr CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissionsResponse_FriendPermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetGiftPermissionsResponse_FriendPermissionDefaultTypeInternal _CMsgClientToGCGetGiftPermissionsResponse_FriendPermission_default_instance_;
constexpr CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_permissions_()
  , is_unlimited_(false)
  , has_two_factor_(false)
  , sender_permission_(0)

  , friendship_age_requirement_(0u)
  , friendship_age_requirement_two_factor_(0u){}
struct CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal {
  constexpr CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetGiftPermissionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetGiftPermissionsResponseDefaultTypeInternal _CMsgClientToGCGetGiftPermissionsResponse_default_instance_;
constexpr CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCUnpackBundleDefaultTypeInternal {
  constexpr CMsgClientToGCUnpackBundleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnpackBundleDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnpackBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnpackBundleDefaultTypeInternal _CMsgClientToGCUnpackBundle_default_instance_;
constexpr CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unpacked_item_ids_()
  , unpacked_item_def_indexes_()
  , response_(0)
{}
struct CMsgClientToGCUnpackBundleResponseDefaultTypeInternal {
  constexpr CMsgClientToGCUnpackBundleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnpackBundleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnpackBundleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnpackBundleResponseDefaultTypeInternal _CMsgClientToGCUnpackBundleResponse_default_instance_;
constexpr CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , txn_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal {
  constexpr CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal() {}
  union {
    CMsgGCToClientStoreTransactionCompleted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientStoreTransactionCompletedDefaultTypeInternal _CMsgGCToClientStoreTransactionCompleted_default_instance_;
constexpr CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : equips_(){}
struct CMsgClientToGCEquipItemsDefaultTypeInternal {
  constexpr CMsgClientToGCEquipItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCEquipItemsDefaultTypeInternal() {}
  union {
    CMsgClientToGCEquipItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCEquipItemsDefaultTypeInternal _CMsgClientToGCEquipItems_default_instance_;
constexpr CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : so_cache_version_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCEquipItemsResponseDefaultTypeInternal {
  constexpr CMsgClientToGCEquipItemsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCEquipItemsResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCEquipItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCEquipItemsResponseDefaultTypeInternal _CMsgClientToGCEquipItemsResponse_default_instance_;
constexpr CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , style_index_(0u){}
struct CMsgClientToGCSetItemStyleDefaultTypeInternal {
  constexpr CMsgClientToGCSetItemStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemStyleDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetItemStyleDefaultTypeInternal _CMsgClientToGCSetItemStyle_default_instance_;
constexpr CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(0)
{}
struct CMsgClientToGCSetItemStyleResponseDefaultTypeInternal {
  constexpr CMsgClientToGCSetItemStyleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemStyleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemStyleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetItemStyleResponseDefaultTypeInternal _CMsgClientToGCSetItemStyleResponse_default_instance_;
constexpr CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consumable_item_ids_()
  , item_to_unlock_(PROTOBUF_ULONGLONG(0))
  , style_index_(0u){}
struct CMsgClientToGCUnlockItemStyleDefaultTypeInternal {
  constexpr CMsgClientToGCUnlockItemStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockItemStyleDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockItemStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnlockItemStyleDefaultTypeInternal _CMsgClientToGCUnlockItemStyle_default_instance_;
constexpr CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)

  , style_index_(0u)
  , style_prereq_(0u){}
struct CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal {
  constexpr CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockItemStyleResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnlockItemStyleResponseDefaultTypeInternal _CMsgClientToGCUnlockItemStyleResponse_default_instance_;
constexpr CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_ids_()
  , set_to_value_(0u)
  , remove_categories_(0u)
  , add_categories_(0u){}
struct CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal {
  constexpr CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal() {}
  union {
    CMsgClientToGCSetItemInventoryCategory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCSetItemInventoryCategoryDefaultTypeInternal _CMsgClientToGCSetItemInventoryCategory_default_instance_;
constexpr CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : crate_item_id_(PROTOBUF_ULONGLONG(0))
  , key_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCUnlockCrateDefaultTypeInternal {
  constexpr CMsgClientToGCUnlockCrateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnlockCrateDefaultTypeInternal _CMsgClientToGCUnlockCrate_default_instance_;
constexpr CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , def_index_(0u){}
struct CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal {
  constexpr CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrateResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnlockCrateResponse_ItemDefaultTypeInternal _CMsgClientToGCUnlockCrateResponse_Item_default_instance_;
constexpr CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : granted_items_()
  , result_(0)
{}
struct CMsgClientToGCUnlockCrateResponseDefaultTypeInternal {
  constexpr CMsgClientToGCUnlockCrateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCUnlockCrateResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCUnlockCrateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCUnlockCrateResponseDefaultTypeInternal _CMsgClientToGCUnlockCrateResponse_default_instance_;
constexpr CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCRemoveItemAttributeDefaultTypeInternal {
  constexpr CMsgClientToGCRemoveItemAttributeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRemoveItemAttributeDefaultTypeInternal() {}
  union {
    CMsgClientToGCRemoveItemAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRemoveItemAttributeDefaultTypeInternal _CMsgClientToGCRemoveItemAttribute_default_instance_;
constexpr CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)
{}
struct CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal {
  constexpr CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRemoveItemAttributeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRemoveItemAttributeResponseDefaultTypeInternal _CMsgClientToGCRemoveItemAttributeResponse_default_instance_;
constexpr CMsgClientToGCNameItem::CMsgClientToGCNameItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subject_item_id_(PROTOBUF_ULONGLONG(0))
  , tool_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientToGCNameItemDefaultTypeInternal {
  constexpr CMsgClientToGCNameItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCNameItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCNameItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCNameItemDefaultTypeInternal _CMsgClientToGCNameItem_default_instance_;
constexpr CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , response_(0)
{}
struct CMsgClientToGCNameItemResponseDefaultTypeInternal {
  constexpr CMsgClientToGCNameItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCNameItemResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCNameItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCNameItemResponseDefaultTypeInternal _CMsgClientToGCNameItemResponse_default_instance_;
constexpr CMsgGCSetItemPosition::CMsgGCSetItemPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , new_position_(0u){}
struct CMsgGCSetItemPositionDefaultTypeInternal {
  constexpr CMsgGCSetItemPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCSetItemPositionDefaultTypeInternal() {}
  union {
    CMsgGCSetItemPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCSetItemPositionDefaultTypeInternal _CMsgGCSetItemPosition_default_instance_;
constexpr CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attributes_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lootlist_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_def_(0u)
  , item_quality_(0u)
  , item_flags_(0u)
  , item_count_(0u)
  , items_fulfilled_(0u)
  , item_rarity_(0u)
  , fulfilled_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal {
  constexpr CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal() {}
  union {
    CAttribute_ItemDynamicRecipeComponent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_ItemDynamicRecipeComponentDefaultTypeInternal _CAttribute_ItemDynamicRecipeComponent_default_instance_;
constexpr CProtoItemSocket::CProtoItemSocket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : required_hero_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_item_slot_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(PROTOBUF_ULONGLONG(0))
  , attr_def_index_(0u)
  , required_type_(0u)
  , gem_def_index_(0u)
  , not_tradable_(false){}
struct CProtoItemSocketDefaultTypeInternal {
  constexpr CProtoItemSocketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocketDefaultTypeInternal() {}
  union {
    CProtoItemSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocketDefaultTypeInternal _CProtoItemSocket_default_instance_;
constexpr CProtoItemSocket_Empty::CProtoItemSocket_Empty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr){}
struct CProtoItemSocket_EmptyDefaultTypeInternal {
  constexpr CProtoItemSocket_EmptyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_EmptyDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_EmptyDefaultTypeInternal _CProtoItemSocket_Empty_default_instance_;
constexpr CProtoItemSocket_Effect::CProtoItemSocket_Effect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , effect_(0u){}
struct CProtoItemSocket_EffectDefaultTypeInternal {
  constexpr CProtoItemSocket_EffectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_EffectDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Effect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_EffectDefaultTypeInternal _CProtoItemSocket_Effect_default_instance_;
constexpr CProtoItemSocket_Color::CProtoItemSocket_Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , red_(0u)
  , green_(0u)
  , blue_(0u){}
struct CProtoItemSocket_ColorDefaultTypeInternal {
  constexpr CProtoItemSocket_ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_ColorDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_ColorDefaultTypeInternal _CProtoItemSocket_Color_default_instance_;
constexpr CProtoItemSocket_Strange::CProtoItemSocket_Strange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , strange_type_(0u)
  , strange_value_(0u){}
struct CProtoItemSocket_StrangeDefaultTypeInternal {
  constexpr CProtoItemSocket_StrangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_StrangeDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Strange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_StrangeDefaultTypeInternal _CProtoItemSocket_Strange_default_instance_;
constexpr CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , strange_type_(0u)
  , strange_value_(0u)
  , ability_effect_(0u){}
struct CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal {
  constexpr CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal _CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY_default_instance_;
constexpr CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , games_viewed_(0u)
  , corporation_id_(0u)
  , league_id_(0u)
  , team_id_(0u){}
struct CProtoItemSocket_SpectatorDefaultTypeInternal {
  constexpr CProtoItemSocket_SpectatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_SpectatorDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Spectator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_SpectatorDefaultTypeInternal _CProtoItemSocket_Spectator_default_instance_;
constexpr CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , asset_modifier_(0u){}
struct CProtoItemSocket_AssetModifierDefaultTypeInternal {
  constexpr CProtoItemSocket_AssetModifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_AssetModifierDefaultTypeInternal() {}
  union {
    CProtoItemSocket_AssetModifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_AssetModifierDefaultTypeInternal _CProtoItemSocket_AssetModifier_default_instance_;
constexpr CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr)
  , asset_modifier_(0u)
  , anim_modifier_(0u)
  , ability_effect_(0u){}
struct CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal {
  constexpr CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal() {}
  union {
    CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLYDefaultTypeInternal _CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_default_instance_;
constexpr CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : autograph_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , socket_(nullptr)
  , autograph_id_(0u)
  , autograph_score_(0u){}
struct CProtoItemSocket_AutographDefaultTypeInternal {
  constexpr CProtoItemSocket_AutographDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_AutographDefaultTypeInternal() {}
  union {
    CProtoItemSocket_Autograph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_AutographDefaultTypeInternal _CProtoItemSocket_Autograph_default_instance_;
constexpr CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : socket_(nullptr){}
struct CProtoItemSocket_StaticVisualsDefaultTypeInternal {
  constexpr CProtoItemSocket_StaticVisualsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemSocket_StaticVisualsDefaultTypeInternal() {}
  union {
    CProtoItemSocket_StaticVisuals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemSocket_StaticVisualsDefaultTypeInternal _CProtoItemSocket_StaticVisuals_default_instance_;
constexpr CAttribute_String::CAttribute_String(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CAttribute_StringDefaultTypeInternal {
  constexpr CAttribute_StringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAttribute_StringDefaultTypeInternal() {}
  union {
    CAttribute_String _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAttribute_StringDefaultTypeInternal _CAttribute_String_default_instance_;
constexpr CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u)
  , item_id_(0u)
  , date_start_(0u)
  , date_end_(0u){}
struct CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal {
  constexpr CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetItemDailyRevenue_RequestDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Request_default_instance_;
constexpr CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , revenue_usd_(PROTOBUF_LONGLONG(0))
  , date_(0u)
  , units_(0){}
struct CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal {
  constexpr CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue_default_instance_;
constexpr CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_revenue_(){}
struct CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal {
  constexpr CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetItemDailyRevenue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetItemDailyRevenue_ResponseDefaultTypeInternal _CWorkshop_GetItemDailyRevenue_Response_default_instance_;
constexpr CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packageid_(0u)
  , date_start_(0u)
  , date_end_(0u){}
struct CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal {
  constexpr CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetPackageDailyRevenue_RequestDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Request_default_instance_;
constexpr CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , revenue_usd_(PROTOBUF_LONGLONG(0))
  , date_(0u)
  , units_(0){}
struct CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal {
  constexpr CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenueDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue_default_instance_;
constexpr CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_revenue_(){}
struct CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal {
  constexpr CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal() {}
  union {
    CWorkshop_GetPackageDailyRevenue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWorkshop_GetPackageDailyRevenue_ResponseDefaultTypeInternal _CWorkshop_GetPackageDailyRevenue_Response_default_instance_;
constexpr CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , add_slots_(0u){}
struct CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal {
  constexpr CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal() {}
  union {
    CMsgSQLGCToGCGrantBackpackSlots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSQLGCToGCGrantBackpackSlotsDefaultTypeInternal _CMsgSQLGCToGCGrantBackpackSlots_default_instance_;
constexpr CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgClientToGCLookupAccountNameDefaultTypeInternal {
  constexpr CMsgClientToGCLookupAccountNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCLookupAccountNameDefaultTypeInternal() {}
  union {
    CMsgClientToGCLookupAccountName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCLookupAccountNameDefaultTypeInternal _CMsgClientToGCLookupAccountName_default_instance_;
constexpr CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u){}
struct CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal {
  constexpr CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCLookupAccountNameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCLookupAccountNameResponseDefaultTypeInternal _CMsgClientToGCLookupAccountNameResponse_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , slot_id_(0u){}
struct CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipe_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipe_ItemDefaultTypeInternal _CMsgClientToGCCreateStaticRecipe_Item_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , recipe_def_index_(0u){}
struct CMsgClientToGCCreateStaticRecipeDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipe _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipeDefaultTypeInternal _CMsgClientToGCCreateStaticRecipe_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , def_index_(0u)
  , slot_id_(0u){}
struct CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_OutputItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipeResponse_OutputItemDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_OutputItem_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , error_(0)
{}
struct CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_InputError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipeResponse_InputErrorDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_InputError_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(PROTOBUF_ULONGLONG(0))
  , slot_id_(0u){}
struct CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutputDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput_default_instance_;
constexpr CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : output_items_()
  , input_errors_()
  , additional_outputs_()
  , response_(0)
{}
struct CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal {
  constexpr CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCCreateStaticRecipeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCCreateStaticRecipeResponseDefaultTypeInternal _CMsgClientToGCCreateStaticRecipeResponse_default_instance_;
constexpr CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_def_index_(0u)
  , item_price_(0u)
  , quantity_(0u)
  , store_purchase_type_(0u)
  , source_reference_id_(PROTOBUF_ULONGLONG(0))
  , parent_stack_index_(0)
  , default_price_(false)
  , is_user_facing_(false){}
struct CMsgProcessTransactionOrder_ItemDefaultTypeInternal {
  constexpr CMsgProcessTransactionOrder_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProcessTransactionOrder_ItemDefaultTypeInternal() {}
  union {
    CMsgProcessTransactionOrder_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProcessTransactionOrder_ItemDefaultTypeInternal _CMsgProcessTransactionOrder_Item_default_instance_;
constexpr CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , txn_id_(PROTOBUF_ULONGLONG(0))
  , steam_txn_id_(PROTOBUF_ULONGLONG(0))
  , partner_txn_id_(PROTOBUF_ULONGLONG(0))
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , watermark_(PROTOBUF_ULONGLONG(0))
  , time_stamp_(0u)
  , purchase_report_status_(0)
  , currency_(0u){}
struct CMsgProcessTransactionOrderDefaultTypeInternal {
  constexpr CMsgProcessTransactionOrderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProcessTransactionOrderDefaultTypeInternal() {}
  union {
    CMsgProcessTransactionOrder _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProcessTransactionOrderDefaultTypeInternal _CMsgProcessTransactionOrder_default_instance_;
constexpr CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_(nullptr)
  , reason_code_(0u)
  , partner_(0u){}
struct CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal {
  constexpr CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessCDKeyTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCStoreProcessCDKeyTransactionDefaultTypeInternal _CMsgGCToGCStoreProcessCDKeyTransaction_default_instance_;
constexpr CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal {
  constexpr CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessCDKeyTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCStoreProcessCDKeyTransactionResponseDefaultTypeInternal _CMsgGCToGCStoreProcessCDKeyTransactionResponse_default_instance_;
constexpr CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_(nullptr){}
struct CMsgGCToGCStoreProcessSettlementDefaultTypeInternal {
  constexpr CMsgGCToGCStoreProcessSettlementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessSettlementDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessSettlement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCStoreProcessSettlementDefaultTypeInternal _CMsgGCToGCStoreProcessSettlement_default_instance_;
constexpr CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal {
  constexpr CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCStoreProcessSettlementResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCStoreProcessSettlementResponseDefaultTypeInternal _CMsgGCToGCStoreProcessSettlementResponse_default_instance_;
constexpr CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : con_command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , output_initiator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , report_output_(false)
  , sending_gc_(0u){}
struct CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal {
  constexpr CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal() {}
  union {
    CMsgGCToGCBroadcastConsoleCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBroadcastConsoleCommandDefaultTypeInternal _CMsgGCToGCBroadcastConsoleCommand_default_instance_;
constexpr CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spew_level_(0u){}
struct CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal {
  constexpr CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal() {}
  union {
    CMsgGCToGCConsoleOutput_OutputLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCConsoleOutput_OutputLineDefaultTypeInternal _CMsgGCToGCConsoleOutput_OutputLine_default_instance_;
constexpr CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msgs_()
  , initiator_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sending_gc_(0u)
  , is_last_for_source_job_(false){}
struct CMsgGCToGCConsoleOutputDefaultTypeInternal {
  constexpr CMsgGCToGCConsoleOutputDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCConsoleOutputDefaultTypeInternal() {}
  union {
    CMsgGCToGCConsoleOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCConsoleOutputDefaultTypeInternal _CMsgGCToGCConsoleOutput_default_instance_;
constexpr CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_item_id_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u){}
struct CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal {
  constexpr CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal() {}
  union {
    CMsgItemAges_MaxItemIDTimestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemAges_MaxItemIDTimestampDefaultTypeInternal _CMsgItemAges_MaxItemIDTimestamp_default_instance_;
constexpr CMsgItemAges::CMsgItemAges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_item_id_timestamps_(){}
struct CMsgItemAgesDefaultTypeInternal {
  constexpr CMsgItemAgesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgItemAgesDefaultTypeInternal() {}
  union {
    CMsgItemAges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgItemAgesDefaultTypeInternal _CMsgItemAges_default_instance_;
constexpr CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_id_(PROTOBUF_ULONGLONG(0))
  , sending_gc_(0u)
  , context_(0u)
  , job_id_source_(PROTOBUF_ULONGLONG(0))
  , job_id_target_(PROTOBUF_ULONGLONG(0))
  , message_id_(0u){}
struct CMsgGCToGCInternalTestMsgDefaultTypeInternal {
  constexpr CMsgGCToGCInternalTestMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCInternalTestMsgDefaultTypeInternal() {}
  union {
    CMsgGCToGCInternalTestMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCInternalTestMsgDefaultTypeInternal _CMsgGCToGCInternalTestMsg_default_instance_;
constexpr CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_min_allowed_version_(0u)
  , client_active_version_(0u)
  , server_active_version_(0u)
  , server_deployed_version_(0u)
  , what_changed_(0u){}
struct CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal {
  constexpr CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal() {}
  union {
    CMsgGCToGCClientServerVersionsUpdated _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCClientServerVersionsUpdatedDefaultTypeInternal _CMsgGCToGCClientServerVersionsUpdated_default_instance_;
constexpr CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_list_()
  , _account_id_list_cached_byte_size_()
  , steam_id_list_()
  , _steam_id_list_cached_byte_size_()
  , serialized_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(0u){}
struct CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal {
  constexpr CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal() {}
  union {
    CMsgGCToGCBroadcastMessageFromSub _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCBroadcastMessageFromSubDefaultTypeInternal _CMsgGCToGCBroadcastMessageFromSub_default_instance_;
constexpr CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currency_price_()
  , _currency_price_cached_byte_size_()
  , currency_id_(0u){}
struct CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal {
  constexpr CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal() {}
  union {
    CMsgGCToClientCurrencyPricePoints_Currency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientCurrencyPricePoints_CurrencyDefaultTypeInternal _CMsgGCToClientCurrencyPricePoints_Currency_default_instance_;
constexpr CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_key_()
  , _price_key_cached_byte_size_()
  , currencies_(){}
struct CMsgGCToClientCurrencyPricePointsDefaultTypeInternal {
  constexpr CMsgGCToClientCurrencyPricePointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientCurrencyPricePointsDefaultTypeInternal() {}
  union {
    CMsgGCToClientCurrencyPricePoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientCurrencyPricePointsDefaultTypeInternal _CMsgGCToClientCurrencyPricePoints_default_instance_;
constexpr CMsgBannedWordList::CMsgBannedWordList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : banned_words_()
  , version_(0u){}
struct CMsgBannedWordListDefaultTypeInternal {
  constexpr CMsgBannedWordListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBannedWordListDefaultTypeInternal() {}
  union {
    CMsgBannedWordList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBannedWordListDefaultTypeInternal _CMsgBannedWordList_default_instance_;
constexpr CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , contextid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal {
  constexpr CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal() {}
  union {
    CMsgGCToGCFlushSteamInventoryCache_Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCFlushSteamInventoryCache_KeyDefaultTypeInternal _CMsgGCToGCFlushSteamInventoryCache_Key_default_instance_;
constexpr CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(){}
struct CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal {
  constexpr CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal() {}
  union {
    CMsgGCToGCFlushSteamInventoryCache _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCFlushSteamInventoryCacheDefaultTypeInternal _CMsgGCToGCFlushSteamInventoryCache_default_instance_;
constexpr CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , always_notify_(false){}
struct CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal {
  constexpr CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateSubscriptionItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUpdateSubscriptionItemsDefaultTypeInternal _CMsgGCToGCUpdateSubscriptionItems_default_instance_;
constexpr CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sample_id_(0u){}
struct CMsgGCToGCSelfPingDefaultTypeInternal {
  constexpr CMsgGCToGCSelfPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCSelfPingDefaultTypeInternal() {}
  union {
    CMsgGCToGCSelfPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCSelfPingDefaultTypeInternal _CMsgGCToGCSelfPing_default_instance_;
constexpr CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal {
  constexpr CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetInfuxIntervalStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetInfuxIntervalStatsDefaultTypeInternal _CMsgGCToGCGetInfuxIntervalStats_default_instance_;
constexpr CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_ids_()
  , _stat_ids_cached_byte_size_()
  , stat_total_()
  , _stat_total_cached_byte_size_()
  , stat_samples_()
  , _stat_samples_cached_byte_size_()
  , stat_max_()
  , _stat_max_cached_byte_size_()
  , sample_duration_ms_(0u){}
struct CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal {
  constexpr CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal() {}
  union {
    CMsgGCToGCGetInfuxIntervalStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCGetInfuxIntervalStatsResponseDefaultTypeInternal _CMsgGCToGCGetInfuxIntervalStatsResponse_default_instance_;
constexpr CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgGCToGCPurchaseSucceededDefaultTypeInternal {
  constexpr CMsgGCToGCPurchaseSucceededDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCPurchaseSucceededDefaultTypeInternal() {}
  union {
    CMsgGCToGCPurchaseSucceeded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCPurchaseSucceededDefaultTypeInternal _CMsgGCToGCPurchaseSucceeded_default_instance_;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_(0u){}
struct CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal {
  constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetLimitedItemPurchaseQuantity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetLimitedItemPurchaseQuantityDefaultTypeInternal _CMsgClientToGCGetLimitedItemPurchaseQuantity_default_instance_;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)

  , quantity_purchased_(0u){}
struct CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal {
  constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCGetLimitedItemPurchaseQuantityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCGetLimitedItemPurchaseQuantityResponseDefaultTypeInternal _CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_default_instance_;
constexpr CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_msg_(nullptr)
  , server_(false)
  , broadcast_(false){}
struct CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal {
  constexpr CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal() {}
  union {
    CMsgGCToGCUpdateWelcomeMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCUpdateWelcomeMsgDefaultTypeInternal _CMsgGCToGCUpdateWelcomeMsg_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_econ_5fgcmessages_2eproto[137];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_econ_5fgcmessages_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_econ_5fgcmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_econ_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, autograph_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyAutograph, item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_class_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, new_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgAdjustItemEquippedState, style_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, adjustment_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, strange_count_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CMsgEconPlayerStrangeCountAdjustment, turbo_mode_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchase, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchaseResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_FinalizePurchaseResponse, item_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_RefundPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_RefundPurchase, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_RefundPurchaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_RefundPurchaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestItemPurgatory_RefundPurchaseResponse, result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftingResponse, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesData, currency_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse_Price, price_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, sale_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataResponse, expiration_time_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRequestStoreSalesDataUpToDateResponse, expiration_time_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServer, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserSessionServerResponse, is_online_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembers, max_spectators_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetUserServerMembersResponse, member_account_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNames, accountids_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse_Account, persona_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLookupMultipleAccountNamesResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItems, crate_item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, item_defs_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateItemsResponse, peek_item_defs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevel, crate_item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, escalation_level0_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, escalation_level1_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, escalation_level2_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestCrateEscalationLevelResponse, escalation_level3_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, drop_rate_bonus_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, booster_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, exclusive_item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCanUseDropRateBonus, allow_equal_rate_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, drop_rate_bonus_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, booster_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, seconds_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLAddDropRateBonus, end_time_stamp_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, bonus_to_add_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLUpgradeBattleBooster, booster_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCRefreshSOCache, reload_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatus, initiator_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatusResponse, can_trade_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCheckAccountTradeStatusResponse, error_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, matching_subscription_def_indexes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCAddSubscriptionTime, additional_seconds_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, value_uint32_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, value_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, value_string_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, audit_data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, loot_lists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, ignore_limit_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, dynamic_attributes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, additional_audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems_Item, inventory_token_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantAccountRolledItems, audit_data_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBetaDeleteItems, item_defs_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGrantSelfMadeItemToAccount, accountid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, target_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, gift__potential_targets_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, duel__class_lock_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, initiator_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUseItem, itempack__ack_immediately_),
  0,
  1,
  ~0u,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, initiator_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerUseItem, use_item_msg_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgUseMultipleItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUseMultipleItems, item_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerBalanceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerBalanceResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerBalanceResponse, balance_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, item_def_id_),
  PROTOBUF_FIELD_OFFSET(::CGCStoreRechargeRedirect_LineItem, quantity_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLRequest, line_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCPartnerRechargeRedirectURLResponse, url_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, deleted_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, old_audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, new_audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCEconSQLWorkItemEmbeddedRollbackData, expected_audit_action_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, heroid_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, sequencename_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, cycle_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, description_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, pedestal_itemdef_),
  PROTOBUF_FIELD_OFFSET(::CMsgCraftStatue, toolid_),
  2,
  0,
  3,
  1,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCode, code_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgRedeemCodeResponse, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, item_def_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, loot_list_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, attr_def_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequest, attr_value_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDevNewItemRequestResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStyles, item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDevUnlockAllItemStylesResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItem, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetAccountSubscriptionItemResponse, def_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCAddGiftItem, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, give_to_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGift, gift_message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, gifting_charge_uses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, gifting_charge_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, gifting_uses_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, gifting_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, gifting_window_hours_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCWrapAndDeliverGiftResponse, trade_restriction_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnwrapGift, item_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, permission_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, is_unlimited_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, has_two_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, sender_permission_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, friendship_age_requirement_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, friendship_age_requirement_two_factor_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetGiftPermissionsResponse, friend_permissions_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundle, item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, unpacked_item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnpackBundleResponse, unpacked_item_def_indexes_),
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientStoreTransactionCompleted, item_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItems, equips_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCEquipItemsResponse, so_cache_version_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyle, style_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemStyleResponse, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, item_to_unlock_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, style_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyle, consumable_item_ids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, style_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockItemStyleResponse, style_prereq_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, set_to_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, remove_categories_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCSetItemInventoryCategory, add_categories_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, crate_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrate, key_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse_Item, def_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCUnlockCrateResponse, granted_items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttribute, item_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRemoveItemAttributeResponse, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, subject_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItem, name_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCNameItemResponse, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCSetItemPosition, new_position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, item_def_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, item_quality_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, item_flags_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, attributes_string_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, item_count_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, items_fulfilled_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, item_rarity_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, lootlist_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_ItemDynamicRecipeComponent, fulfilled_item_id_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, item_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, attr_def_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, required_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, required_hero_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, gem_def_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, not_tradable_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket, required_item_slot_),
  2,
  3,
  4,
  0,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Empty, socket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Effect, effect_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, red_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, green_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Color, blue_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, strange_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange, strange_value_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, strange_type_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, strange_value_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, ability_effect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, games_viewed_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, corporation_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, league_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Spectator, team_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier, asset_modifier_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, asset_modifier_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, anim_modifier_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, ability_effect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, socket_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, autograph_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, autograph_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_Autograph, autograph_score_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemSocket_StaticVisuals, socket_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAttribute_String, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, item_id_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, date_start_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Request, date_end_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, country_code_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, revenue_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, units_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetItemDailyRevenue_Response, country_revenue_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, packageid_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, date_start_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Request, date_end_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, country_code_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, date_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, revenue_usd_),
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, units_),
  0,
  2,
  1,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CWorkshop_GetPackageDailyRevenue_Response, country_revenue_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSQLGCToGCGrantBackpackSlots, add_slots_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountName, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCLookupAccountNameResponse, account_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe_Item, slot_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipe, recipe_def_index_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem, slot_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_InputError, error_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, output_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, input_errors_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCCreateStaticRecipeResponse, additional_outputs_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, item_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, quantity_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, category_desc_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, store_purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, source_reference_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, parent_stack_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, default_price_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder_Item, is_user_facing_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, steam_txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, partner_txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, watermark_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, purchase_report_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, currency_),
  PROTOBUF_FIELD_OFFSET(::CMsgProcessTransactionOrder, items_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, order_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, reason_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransaction, partner_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessCDKeyTransactionResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlement, order_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCStoreProcessSettlementResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, con_command_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, report_output_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastConsoleCommand, output_initiator_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, text_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput_OutputLine, spew_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, initiator_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, msgs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCConsoleOutput, is_last_for_source_job_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges_MaxItemIDTimestamp, max_item_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgItemAges, max_item_id_timestamps_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, sending_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, sender_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, context_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, message_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, message_body_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, job_id_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCInternalTestMsg, job_id_target_),
  2,
  1,
  3,
  6,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, client_min_allowed_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, client_active_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, server_active_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, server_deployed_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCClientServerVersionsUpdated, what_changed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, msg_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, serialized_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, account_id_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCBroadcastMessageFromSub, steam_id_list_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, currency_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints_Currency, currency_price_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, price_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientCurrencyPricePoints, currencies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgBannedWordList, banned_words_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache_Key, contextid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFlushSteamInventoryCache, keys_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateSubscriptionItems, always_notify_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCSelfPing, sample_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, stat_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, stat_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, stat_samples_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, stat_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCGetInfuxIntervalStatsResponse, sample_duration_ms_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCPurchaseSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantity, item_def_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, quantity_purchased_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, server_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, new_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCUpdateWelcomeMsg, broadcast_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgApplyAutograph)},
  { 9, 18, sizeof(::CMsgAdjustItemEquippedState)},
  { 22, 30, sizeof(::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment)},
  { 33, 41, sizeof(::CMsgEconPlayerStrangeCountAdjustment)},
  { 44, -1, sizeof(::CMsgRequestItemPurgatory_FinalizePurchase)},
  { 50, 57, sizeof(::CMsgRequestItemPurgatory_FinalizePurchaseResponse)},
  { 59, -1, sizeof(::CMsgRequestItemPurgatory_RefundPurchase)},
  { 65, 71, sizeof(::CMsgRequestItemPurgatory_RefundPurchaseResponse)},
  { 72, -1, sizeof(::CMsgCraftingResponse)},
  { 78, 85, sizeof(::CMsgGCRequestStoreSalesData)},
  { 87, 94, sizeof(::CMsgGCRequestStoreSalesDataResponse_Price)},
  { 96, 104, sizeof(::CMsgGCRequestStoreSalesDataResponse)},
  { 107, 114, sizeof(::CMsgGCRequestStoreSalesDataUpToDateResponse)},
  { 116, -1, sizeof(::CMsgGCToGCPingRequest)},
  { 121, -1, sizeof(::CMsgGCToGCPingResponse)},
  { 126, 132, sizeof(::CMsgGCToGCGetUserSessionServer)},
  { 133, 140, sizeof(::CMsgGCToGCGetUserSessionServerResponse)},
  { 142, 149, sizeof(::CMsgGCToGCGetUserServerMembers)},
  { 151, -1, sizeof(::CMsgGCToGCGetUserServerMembersResponse)},
  { 157, -1, sizeof(::CMsgLookupMultipleAccountNames)},
  { 163, 170, sizeof(::CMsgLookupMultipleAccountNamesResponse_Account)},
  { 172, -1, sizeof(::CMsgLookupMultipleAccountNamesResponse)},
  { 178, 184, sizeof(::CMsgRequestCrateItems)},
  { 185, 193, sizeof(::CMsgRequestCrateItemsResponse)},
  { 196, 202, sizeof(::CMsgRequestCrateEscalationLevel)},
  { 203, 213, sizeof(::CMsgRequestCrateEscalationLevelResponse)},
  { 218, 228, sizeof(::CMsgGCToGCCanUseDropRateBonus)},
  { 233, 245, sizeof(::CMsgSQLAddDropRateBonus)},
  { 252, 261, sizeof(::CMsgSQLUpgradeBattleBooster)},
  { 265, 272, sizeof(::CMsgGCToGCRefreshSOCache)},
  { 274, 281, sizeof(::CMsgGCToGCCheckAccountTradeStatus)},
  { 283, 290, sizeof(::CMsgGCToGCCheckAccountTradeStatusResponse)},
  { 292, 300, sizeof(::CMsgGCToGCAddSubscriptionTime)},
  { 303, 312, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute)},
  { 316, 324, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry)},
  { 327, 339, sizeof(::CMsgGCToGCGrantAccountRolledItems_Item)},
  { 346, 355, sizeof(::CMsgGCToGCGrantAccountRolledItems)},
  { 359, 367, sizeof(::CMsgGCToGCBetaDeleteItems)},
  { 370, 377, sizeof(::CMsgGCToGCGrantSelfMadeItemToAccount)},
  { 379, 390, sizeof(::CMsgUseItem)},
  { 396, 403, sizeof(::CMsgServerUseItem)},
  { 405, -1, sizeof(::CMsgUseMultipleItems)},
  { 411, -1, sizeof(::CMsgGCPartnerBalanceRequest)},
  { 416, 423, sizeof(::CMsgGCPartnerBalanceResponse)},
  { 425, 432, sizeof(::CGCStoreRechargeRedirect_LineItem)},
  { 434, -1, sizeof(::CMsgGCPartnerRechargeRedirectURLRequest)},
  { 440, 447, sizeof(::CMsgGCPartnerRechargeRedirectURLResponse)},
  { 449, 459, sizeof(::CMsgGCEconSQLWorkItemEmbeddedRollbackData)},
  { 464, 475, sizeof(::CMsgCraftStatue)},
  { 481, 487, sizeof(::CMsgRedeemCode)},
  { 488, 495, sizeof(::CMsgRedeemCodeResponse)},
  { 497, 506, sizeof(::CMsgDevNewItemRequest)},
  { 510, 516, sizeof(::CMsgDevNewItemRequestResponse)},
  { 517, 523, sizeof(::CMsgDevUnlockAllItemStyles)},
  { 524, 530, sizeof(::CMsgDevUnlockAllItemStylesResponse)},
  { 531, 537, sizeof(::CMsgGCGetAccountSubscriptionItem)},
  { 538, 544, sizeof(::CMsgGCGetAccountSubscriptionItemResponse)},
  { 545, 552, sizeof(::CMsgGCAddGiftItem)},
  { 554, 562, sizeof(::CMsgClientToGCWrapAndDeliverGift)},
  { 565, 577, sizeof(::CMsgClientToGCWrapAndDeliverGiftResponse)},
  { 584, 590, sizeof(::CMsgClientToGCUnwrapGift)},
  { 591, -1, sizeof(::CMsgClientToGCGetGiftPermissions)},
  { 596, 603, sizeof(::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission)},
  { 605, 616, sizeof(::CMsgClientToGCGetGiftPermissionsResponse)},
  { 622, 628, sizeof(::CMsgClientToGCUnpackBundle)},
  { 629, 637, sizeof(::CMsgClientToGCUnpackBundleResponse)},
  { 640, 647, sizeof(::CMsgGCToClientStoreTransactionCompleted)},
  { 649, -1, sizeof(::CMsgClientToGCEquipItems)},
  { 655, 661, sizeof(::CMsgClientToGCEquipItemsResponse)},
  { 662, 669, sizeof(::CMsgClientToGCSetItemStyle)},
  { 671, 677, sizeof(::CMsgClientToGCSetItemStyleResponse)},
  { 678, 686, sizeof(::CMsgClientToGCUnlockItemStyle)},
  { 689, 698, sizeof(::CMsgClientToGCUnlockItemStyleResponse)},
  { 702, 711, sizeof(::CMsgClientToGCSetItemInventoryCategory)},
  { 715, 722, sizeof(::CMsgClientToGCUnlockCrate)},
  { 724, 731, sizeof(::CMsgClientToGCUnlockCrateResponse_Item)},
  { 733, 740, sizeof(::CMsgClientToGCUnlockCrateResponse)},
  { 742, 748, sizeof(::CMsgClientToGCRemoveItemAttribute)},
  { 749, 756, sizeof(::CMsgClientToGCRemoveItemAttributeResponse)},
  { 758, 766, sizeof(::CMsgClientToGCNameItem)},
  { 769, 776, sizeof(::CMsgClientToGCNameItemResponse)},
  { 778, 785, sizeof(::CMsgGCSetItemPosition)},
  { 787, 801, sizeof(::CAttribute_ItemDynamicRecipeComponent)},
  { 810, 822, sizeof(::CProtoItemSocket)},
  { 829, 835, sizeof(::CProtoItemSocket_Empty)},
  { 836, 843, sizeof(::CProtoItemSocket_Effect)},
  { 845, 854, sizeof(::CProtoItemSocket_Color)},
  { 858, 866, sizeof(::CProtoItemSocket_Strange)},
  { 869, 878, sizeof(::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)},
  { 882, 892, sizeof(::CProtoItemSocket_Spectator)},
  { 897, 904, sizeof(::CProtoItemSocket_AssetModifier)},
  { 906, 915, sizeof(::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)},
  { 919, 928, sizeof(::CProtoItemSocket_Autograph)},
  { 932, 938, sizeof(::CProtoItemSocket_StaticVisuals)},
  { 939, 945, sizeof(::CAttribute_String)},
  { 946, 955, sizeof(::CWorkshop_GetItemDailyRevenue_Request)},
  { 959, 968, sizeof(::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue)},
  { 972, -1, sizeof(::CWorkshop_GetItemDailyRevenue_Response)},
  { 978, 986, sizeof(::CWorkshop_GetPackageDailyRevenue_Request)},
  { 989, 998, sizeof(::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue)},
  { 1002, -1, sizeof(::CWorkshop_GetPackageDailyRevenue_Response)},
  { 1008, 1015, sizeof(::CMsgSQLGCToGCGrantBackpackSlots)},
  { 1017, 1023, sizeof(::CMsgClientToGCLookupAccountName)},
  { 1024, 1031, sizeof(::CMsgClientToGCLookupAccountNameResponse)},
  { 1033, 1040, sizeof(::CMsgClientToGCCreateStaticRecipe_Item)},
  { 1042, 1049, sizeof(::CMsgClientToGCCreateStaticRecipe)},
  { 1051, 1059, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_OutputItem)},
  { 1062, 1069, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_InputError)},
  { 1071, 1078, sizeof(::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput)},
  { 1080, 1089, sizeof(::CMsgClientToGCCreateStaticRecipeResponse)},
  { 1093, 1107, sizeof(::CMsgProcessTransactionOrder_Item)},
  { 1116, 1130, sizeof(::CMsgProcessTransactionOrder)},
  { 1139, 1147, sizeof(::CMsgGCToGCStoreProcessCDKeyTransaction)},
  { 1150, 1156, sizeof(::CMsgGCToGCStoreProcessCDKeyTransactionResponse)},
  { 1157, 1163, sizeof(::CMsgGCToGCStoreProcessSettlement)},
  { 1164, 1170, sizeof(::CMsgGCToGCStoreProcessSettlementResponse)},
  { 1171, 1180, sizeof(::CMsgGCToGCBroadcastConsoleCommand)},
  { 1184, 1191, sizeof(::CMsgGCToGCConsoleOutput_OutputLine)},
  { 1193, 1202, sizeof(::CMsgGCToGCConsoleOutput)},
  { 1206, 1213, sizeof(::CMsgItemAges_MaxItemIDTimestamp)},
  { 1215, -1, sizeof(::CMsgItemAges)},
  { 1221, 1233, sizeof(::CMsgGCToGCInternalTestMsg)},
  { 1240, 1250, sizeof(::CMsgGCToGCClientServerVersionsUpdated)},
  { 1255, 1264, sizeof(::CMsgGCToGCBroadcastMessageFromSub)},
  { 1268, 1275, sizeof(::CMsgGCToClientCurrencyPricePoints_Currency)},
  { 1277, -1, sizeof(::CMsgGCToClientCurrencyPricePoints)},
  { 1284, 1291, sizeof(::CMsgBannedWordList)},
  { 1293, 1300, sizeof(::CMsgGCToGCFlushSteamInventoryCache_Key)},
  { 1302, -1, sizeof(::CMsgGCToGCFlushSteamInventoryCache)},
  { 1308, 1315, sizeof(::CMsgGCToGCUpdateSubscriptionItems)},
  { 1317, 1323, sizeof(::CMsgGCToGCSelfPing)},
  { 1324, -1, sizeof(::CMsgGCToGCGetInfuxIntervalStats)},
  { 1329, 1339, sizeof(::CMsgGCToGCGetInfuxIntervalStatsResponse)},
  { 1344, -1, sizeof(::CMsgGCToGCPurchaseSucceeded)},
  { 1349, 1355, sizeof(::CMsgClientToGCGetLimitedItemPurchaseQuantity)},
  { 1356, 1363, sizeof(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)},
  { 1365, 1373, sizeof(::CMsgGCToGCUpdateWelcomeMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgApplyAutograph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAdjustItemEquippedState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgEconPlayerStrangeCountAdjustment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestItemPurgatory_FinalizePurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestItemPurgatory_FinalizePurchaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestItemPurgatory_RefundPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestItemPurgatory_RefundPurchaseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCraftingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestStoreSalesData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestStoreSalesDataResponse_Price_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestStoreSalesDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRequestStoreSalesDataUpToDateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCPingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCPingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetUserSessionServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetUserSessionServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetUserServerMembers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetUserServerMembersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLookupMultipleAccountNames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLookupMultipleAccountNamesResponse_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLookupMultipleAccountNamesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestCrateItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestCrateItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestCrateEscalationLevel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestCrateEscalationLevelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCCanUseDropRateBonus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSQLAddDropRateBonus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSQLUpgradeBattleBooster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCRefreshSOCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCCheckAccountTradeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCCheckAccountTradeStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCAddSubscriptionTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGrantAccountRolledItems_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGrantAccountRolledItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBetaDeleteItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGrantSelfMadeItemToAccount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerUseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUseMultipleItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCPartnerBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCPartnerBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCStoreRechargeRedirect_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCPartnerRechargeRedirectURLRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCPartnerRechargeRedirectURLResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCEconSQLWorkItemEmbeddedRollbackData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCraftStatue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRedeemCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRedeemCodeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDevNewItemRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDevNewItemRequestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDevUnlockAllItemStyles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDevUnlockAllItemStylesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetAccountSubscriptionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetAccountSubscriptionItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCAddGiftItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCWrapAndDeliverGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCWrapAndDeliverGiftResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnwrapGift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetGiftPermissions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetGiftPermissionsResponse_FriendPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetGiftPermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnpackBundle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnpackBundleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientStoreTransactionCompleted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCEquipItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCEquipItemsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetItemStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetItemStyleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnlockItemStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnlockItemStyleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCSetItemInventoryCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnlockCrate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnlockCrateResponse_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCUnlockCrateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRemoveItemAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRemoveItemAttributeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCNameItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCNameItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCSetItemPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_ItemDynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Effect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Strange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Spectator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_AssetModifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_Autograph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemSocket_StaticVisuals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAttribute_String_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetItemDailyRevenue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetItemDailyRevenue_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetPackageDailyRevenue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CWorkshop_GetPackageDailyRevenue_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSQLGCToGCGrantBackpackSlots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCLookupAccountName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCLookupAccountNameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipe_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipeResponse_OutputItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipeResponse_InputError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCCreateStaticRecipeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProcessTransactionOrder_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProcessTransactionOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCStoreProcessCDKeyTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCStoreProcessCDKeyTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCStoreProcessSettlement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCStoreProcessSettlementResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBroadcastConsoleCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCConsoleOutput_OutputLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCConsoleOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemAges_MaxItemIDTimestamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgItemAges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCInternalTestMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCClientServerVersionsUpdated_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCBroadcastMessageFromSub_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientCurrencyPricePoints_Currency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientCurrencyPricePoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBannedWordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCFlushSteamInventoryCache_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCFlushSteamInventoryCache_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUpdateSubscriptionItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCSelfPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetInfuxIntervalStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCGetInfuxIntervalStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCPurchaseSucceeded_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetLimitedItemPurchaseQuantity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCUpdateWelcomeMsg_default_instance_),
};

const char descriptor_table_protodef_econ_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025econ_gcmessages.proto\032\023steammessages.p"
  "roto\032\027econ_shared_enums.proto\032\026gcsdk_gcm"
  "essages.proto\"E\n\022CMsgApplyAutograph\022\031\n\021a"
  "utograph_item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002"
  " \001(\004\"h\n\033CMsgAdjustItemEquippedState\022\017\n\007i"
  "tem_id\030\001 \001(\004\022\021\n\tnew_class\030\002 \001(\r\022\020\n\010new_s"
  "lot\030\003 \001(\r\022\023\n\013style_index\030\004 \001(\r\"\204\002\n$CMsgE"
  "conPlayerStrangeCountAdjustment\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022`\n\031strange_count_adjustments"
  "\030\002 \003(\0132=.CMsgEconPlayerStrangeCountAdjus"
  "tment.CStrangeCountAdjustment\022\022\n\nturbo_m"
  "ode\030\003 \001(\010\032R\n\027CStrangeCountAdjustment\022\022\n\n"
  "event_type\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\022\n\nadj"
  "ustment\030\003 \001(\r\"=\n)CMsgRequestItemPurgator"
  "y_FinalizePurchase\022\020\n\010item_ids\030\001 \003(\004\"U\n1"
  "CMsgRequestItemPurgatory_FinalizePurchas"
  "eResponse\022\016\n\006result\030\001 \001(\r\022\020\n\010item_ids\030\002 "
  "\003(\004\";\n\'CMsgRequestItemPurgatory_RefundPu"
  "rchase\022\020\n\010item_ids\030\001 \003(\004\"A\n/CMsgRequestI"
  "temPurgatory_RefundPurchaseResponse\022\016\n\006r"
  "esult\030\001 \001(\r\"(\n\024CMsgCraftingResponse\022\020\n\010i"
  "tem_ids\030\001 \003(\004\"@\n\033CMsgGCRequestStoreSales"
  "Data\022\017\n\007version\030\001 \001(\r\022\020\n\010currency\030\002 \001(\r\""
  "\271\001\n#CMsgGCRequestStoreSalesDataResponse\022"
  ">\n\nsale_price\030\001 \003(\0132*.CMsgGCRequestStore"
  "SalesDataResponse.Price\022\017\n\007version\030\002 \001(\r"
  "\022\027\n\017expiration_time\030\003 \001(\r\032(\n\005Price\022\020\n\010it"
  "em_def\030\001 \001(\r\022\r\n\005price\030\002 \001(\r\"W\n+CMsgGCReq"
  "uestStoreSalesDataUpToDateResponse\022\017\n\007ve"
  "rsion\030\001 \001(\r\022\027\n\017expiration_time\030\002 \001(\r\"\027\n\025"
  "CMsgGCToGCPingRequest\"\030\n\026CMsgGCToGCPingR"
  "esponse\"4\n\036CMsgGCToGCGetUserSessionServe"
  "r\022\022\n\naccount_id\030\001 \001(\r\"T\n&CMsgGCToGCGetUs"
  "erSessionServerResponse\022\027\n\017server_steam_"
  "id\030\001 \001(\006\022\021\n\tis_online\030\002 \001(\010\"L\n\036CMsgGCToG"
  "CGetUserServerMembers\022\022\n\naccount_id\030\001 \001("
  "\r\022\026\n\016max_spectators\030\002 \001(\r\"C\n&CMsgGCToGCG"
  "etUserServerMembersResponse\022\031\n\021member_ac"
  "count_id\030\001 \003(\r\"8\n\036CMsgLookupMultipleAcco"
  "untNames\022\026\n\naccountids\030\001 \003(\rB\002\020\001\"\232\001\n&CMs"
  "gLookupMultipleAccountNamesResponse\022A\n\010a"
  "ccounts\030\001 \003(\0132/.CMsgLookupMultipleAccoun"
  "tNamesResponse.Account\032-\n\007Account\022\021\n\tacc"
  "ountid\030\001 \001(\r\022\017\n\007persona\030\002 \001(\t\"/\n\025CMsgReq"
  "uestCrateItems\022\026\n\016crate_item_def\030\001 \001(\r\"\206"
  "\001\n\035CMsgRequestCrateItemsResponse\022\020\n\010resp"
  "onse\030\001 \001(\r\022\021\n\titem_defs\030\002 \003(\r\022\026\n\016peek_it"
  "em_defs\030\003 \003(\r\"(\n\007EResult\022\017\n\013k_Succeeded\020"
  "\000\022\014\n\010k_Failed\020\001\"9\n\037CMsgRequestCrateEscal"
  "ationLevel\022\026\n\016crate_item_def\030\001 \001(\r\"\321\001\n\'C"
  "MsgRequestCrateEscalationLevelResponse\022\020"
  "\n\010response\030\001 \001(\r\022\031\n\021escalation_level0\030\002 "
  "\001(\r\022\031\n\021escalation_level1\030\003 \001(\r\022\031\n\021escala"
  "tion_level2\030\004 \001(\r\022\031\n\021escalation_level3\030\005"
  " \001(\r\"(\n\007EResult\022\017\n\013k_Succeeded\020\000\022\014\n\010k_Fa"
  "iled\020\001\"\230\001\n\035CMsgGCToGCCanUseDropRateBonus"
  "\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017drop_rate_bonus\030"
  "\002 \001(\002\022\024\n\014booster_type\030\003 \001(\r\022\032\n\022exclusive"
  "_item_def\030\004 \001(\r\022\030\n\020allow_equal_rate\030\005 \001("
  "\010\"\261\001\n\027CMsgSQLAddDropRateBonus\022\022\n\naccount"
  "_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\020\n\010item_def\030\003"
  " \001(\r\022\027\n\017drop_rate_bonus\030\004 \001(\002\022\024\n\014booster"
  "_type\030\005 \001(\r\022\030\n\020seconds_duration\030\006 \001(\r\022\026\n"
  "\016end_time_stamp\030\007 \001(\r\"o\n\033CMsgSQLUpgradeB"
  "attleBooster\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010item"
  "_def\030\002 \001(\r\022\024\n\014bonus_to_add\030\003 \001(\002\022\024\n\014boos"
  "ter_type\030\004 \001(\r\">\n\030CMsgGCToGCRefreshSOCac"
  "he\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006reload\030\002 \001(\010\"J"
  "\n!CMsgGCToGCCheckAccountTradeStatus\022\022\n\na"
  "ccount_id\030\001 \001(\r\022\021\n\tinitiator\030\002 \001(\010\"R\n)CM"
  "sgGCToGCCheckAccountTradeStatusResponse\022"
  "\021\n\tcan_trade\030\001 \001(\010\022\022\n\nerror_code\030\002 \001(\r\"z"
  "\n\035CMsgGCToGCAddSubscriptionTime\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022)\n!matching_subscription_def"
  "_indexes\030\002 \003(\r\022\032\n\022additional_seconds\030\003 \001"
  "(\r\"\374\004\n!CMsgGCToGCGrantAccountRolledItems"
  "\022\022\n\naccount_id\030\001 \001(\r\0226\n\005items\030\002 \003(\0132\'.CM"
  "sgGCToGCGrantAccountRolledItems.Item\022\024\n\014"
  "audit_action\030\003 \001(\r\022\022\n\naudit_data\030\004 \001(\004\032\340"
  "\003\n\004Item\022\020\n\010item_def\030\001 \001(\r\022\022\n\nloot_lists\030"
  "\002 \003(\t\022\024\n\014ignore_limit\030\003 \001(\010\022\016\n\006origin\030\004 "
  "\001(\r\022T\n\022dynamic_attributes\030\005 \003(\01328.CMsgGC"
  "ToGCGrantAccountRolledItems.Item.Dynamic"
  "Attribute\022^\n\030additional_audit_entries\030\006 "
  "\003(\0132<.CMsgGCToGCGrantAccountRolledItems."
  "Item.AdditionalAuditEntry\022\027\n\017inventory_t"
  "oken\030\007 \001(\r\032a\n\020DynamicAttribute\022\014\n\004name\030\001"
  " \001(\t\022\024\n\014value_uint32\030\002 \001(\r\022\023\n\013value_floa"
  "t\030\003 \001(\002\022\024\n\014value_string\030\004 \001(\t\032Z\n\024Additio"
  "nalAuditEntry\022\030\n\020owner_account_id\030\001 \001(\r\022"
  "\024\n\014audit_action\030\002 \001(\r\022\022\n\naudit_data\030\003 \001("
  "\004\"T\n\031CMsgGCToGCBetaDeleteItems\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\020\n\010item_ids\030\002 \003(\004\022\021\n\titem_def"
  "s\030\003 \003(\r\"Q\n$CMsgGCToGCGrantSelfMadeItemTo"
  "Account\022\026\n\016item_def_index\030\001 \001(\r\022\021\n\taccou"
  "ntid\030\002 \001(\r\"\261\001\n\013CMsgUseItem\022\017\n\007item_id\030\001 "
  "\001(\004\022\027\n\017target_steam_id\030\002 \001(\006\022\037\n\027gift__po"
  "tential_targets\030\003 \003(\r\022\030\n\020duel__class_loc"
  "k\030\004 \001(\r\022\032\n\022initiator_steam_id\030\005 \001(\004\022!\n\031i"
  "tempack__ack_immediately\030\006 \001(\010\"U\n\021CMsgSe"
  "rverUseItem\022\034\n\024initiator_account_id\030\001 \001("
  "\r\022\"\n\014use_item_msg\030\002 \001(\0132\014.CMsgUseItem\"(\n"
  "\024CMsgUseMultipleItems\022\020\n\010item_ids\030\001 \003(\004\""
  "\035\n\033CMsgGCPartnerBalanceRequest\"p\n\034CMsgGC"
  "PartnerBalanceResponse\022\?\n\006result\030\001 \001(\0162\032"
  ".EGCPartnerRequestResponse:\023k_EPartnerRe"
  "questOK\022\017\n\007balance\030\002 \001(\r\"J\n!CGCStoreRech"
  "argeRedirect_LineItem\022\023\n\013item_def_id\030\001 \001"
  "(\r\022\020\n\010quantity\030\002 \001(\r\"a\n\'CMsgGCPartnerRec"
  "hargeRedirectURLRequest\0226\n\nline_items\030\001 "
  "\003(\0132\".CGCStoreRechargeRedirect_LineItem\""
  "x\n(CMsgGCPartnerRechargeRedirectURLRespo"
  "nse\022\?\n\006result\030\001 \001(\0162\032.EGCPartnerRequestR"
  "esponse:\023k_EPartnerRequestOK\022\013\n\003url\030\002 \001("
  "\t\"\253\001\n)CMsgGCEconSQLWorkItemEmbeddedRollb"
  "ackData\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017deleted_i"
  "tem_id\030\002 \001(\004\022\030\n\020old_audit_action\030\003 \001(\r\022\030"
  "\n\020new_audit_action\030\004 \001(\r\022\035\n\025expected_aud"
  "it_action\030\005 \001(\r\"\205\001\n\017CMsgCraftStatue\022\016\n\006h"
  "eroid\030\001 \001(\r\022\024\n\014sequencename\030\002 \001(\t\022\r\n\005cyc"
  "le\030\003 \001(\002\022\023\n\013description\030\004 \001(\t\022\030\n\020pedesta"
  "l_itemdef\030\005 \001(\r\022\016\n\006toolid\030\006 \001(\004\"\036\n\016CMsgR"
  "edeemCode\022\014\n\004code\030\001 \001(\t\"\255\001\n\026CMsgRedeemCo"
  "deResponse\022\020\n\010response\030\001 \001(\r\022\017\n\007item_id\030"
  "\002 \001(\004\"p\n\013EResultCode\022\017\n\013k_Succeeded\020\000\022\031\n"
  "\025k_Failed_CodeNotFound\020\001\022\034\n\030k_Failed_Cod"
  "eAlreadyUsed\020\002\022\027\n\023k_Failed_OtherError\020\003\""
  "q\n\025CMsgDevNewItemRequest\022\025\n\ritem_def_nam"
  "e\030\003 \001(\t\022\026\n\016loot_list_name\030\004 \001(\t\022\025\n\rattr_"
  "def_name\030\005 \003(\t\022\022\n\nattr_value\030\006 \003(\t\"0\n\035CM"
  "sgDevNewItemRequestResponse\022\017\n\007success\030\001"
  " \001(\010\"-\n\032CMsgDevUnlockAllItemStyles\022\017\n\007it"
  "em_id\030\001 \001(\004\"5\n\"CMsgDevUnlockAllItemStyle"
  "sResponse\022\017\n\007success\030\001 \001(\010\"6\n CMsgGCGetA"
  "ccountSubscriptionItem\022\022\n\naccount_id\030\001 \001"
  "(\r\"=\n(CMsgGCGetAccountSubscriptionItemRe"
  "sponse\022\021\n\tdef_index\030\001 \001(\r\"8\n\021CMsgGCAddGi"
  "ftItem\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 "
  "\001(\004\"e\n CMsgClientToGCWrapAndDeliverGift\022"
  "\017\n\007item_id\030\001 \001(\004\022\032\n\022give_to_account_id\030\002"
  " \001(\r\022\024\n\014gift_message\030\003 \001(\t\"\304\002\n(CMsgClien"
  "tToGCWrapAndDeliverGiftResponse\0225\n\010respo"
  "nse\030\001 \001(\0162\017.EGCMsgResponse:\022k_EGCMsgResp"
  "onseOK\022\033\n\023gifting_charge_uses\030\002 \001(\r\022\032\n\022g"
  "ifting_charge_max\030\003 \001(\005\022\024\n\014gifting_uses\030"
  "\004 \001(\r\022\023\n\013gifting_max\030\005 \001(\005\022\034\n\024gifting_wi"
  "ndow_hours\030\006 \001(\r\022_\n\021trade_restriction\030\007 "
  "\001(\0162\034.EGCMsgInitiateTradeResponse:&k_EGC"
  "MsgInitiateTradeResponse_Accepted\"+\n\030CMs"
  "gClientToGCUnwrapGift\022\017\n\007item_id\030\001 \001(\004\"\""
  "\n CMsgClientToGCGetGiftPermissions\"\347\003\n(C"
  "MsgClientToGCGetGiftPermissionsResponse\022"
  "\024\n\014is_unlimited\030\001 \001(\010\022\026\n\016has_two_factor\030"
  "\003 \001(\010\022_\n\021sender_permission\030\006 \001(\0162\034.EGCMs"
  "gInitiateTradeResponse:&k_EGCMsgInitiate"
  "TradeResponse_Accepted\022\"\n\032friendship_age"
  "_requirement\030\007 \001(\r\022-\n%friendship_age_req"
  "uirement_two_factor\030\010 \001(\r\022V\n\022friend_perm"
  "issions\030\t \003(\0132:.CMsgClientToGCGetGiftPer"
  "missionsResponse.FriendPermission\032\200\001\n\020Fr"
  "iendPermission\022\022\n\naccount_id\030\001 \001(\r\022X\n\npe"
  "rmission\030\002 \001(\0162\034.EGCMsgInitiateTradeResp"
  "onse:&k_EGCMsgInitiateTradeResponse_Acce"
  "pted\"-\n\032CMsgClientToGCUnpackBundle\022\017\n\007it"
  "em_id\030\001 \001(\004\"\375\003\n\"CMsgClientToGCUnpackBund"
  "leResponse\022\031\n\021unpacked_item_ids\030\001 \003(\004\022]\n"
  "\010response\030\002 \001(\01621.CMsgClientToGCUnpackBu"
  "ndleResponse.EUnpackBundle:\030k_UnpackBund"
  "le_Succeeded\022!\n\031unpacked_item_def_indexe"
  "s\030\003 \003(\r\"\271\002\n\rEUnpackBundle\022\034\n\030k_UnpackBun"
  "dle_Succeeded\020\000\022)\n%k_UnpackBundle_Failed"
  "_ItemIsNotBundle\020\001\0225\n1k_UnpackBundle_Fai"
  "led_UnableToCreateContainedItem\020\002\022&\n\"k_U"
  "npackBundle_Failed_SOCacheError\020\003\022\'\n#k_U"
  "npackBundle_Failed_ItemIsInvalid\020\004\022)\n%k_"
  "UnpackBundle_Failed_BadItemQuantity\020\005\022,\n"
  "(k_UnpackBundle_Failed_UnableToDeleteIte"
  "m\020\006\"K\n\'CMsgGCToClientStoreTransactionCom"
  "pleted\022\016\n\006txn_id\030\001 \001(\004\022\020\n\010item_ids\030\002 \003(\004"
  "\"H\n\030CMsgClientToGCEquipItems\022,\n\006equips\030\001"
  " \003(\0132\034.CMsgAdjustItemEquippedState\"\?\n CM"
  "sgClientToGCEquipItemsResponse\022\033\n\023so_cac"
  "he_version_id\030\001 \001(\006\"B\n\032CMsgClientToGCSet"
  "ItemStyle\022\017\n\007item_id\030\001 \001(\004\022\023\n\013style_inde"
  "x\030\002 \001(\r\"\336\001\n\"CMsgClientToGCSetItemStyleRe"
  "sponse\022U\n\010response\030\001 \001(\0162-.CMsgClientToG"
  "CSetItemStyleResponse.ESetStyle:\024k_SetSt"
  "yle_Succeeded\"a\n\tESetStyle\022\030\n\024k_SetStyle"
  "_Succeeded\020\000\022\025\n\021k_SetStyle_Failed\020\001\022#\n\037k"
  "_SetStyle_Failed_StyleIsLocked\020\002\"i\n\035CMsg"
  "ClientToGCUnlockItemStyle\022\026\n\016item_to_unl"
  "ock\030\001 \001(\004\022\023\n\013style_index\030\002 \001(\r\022\033\n\023consum"
  "able_item_ids\030\003 \003(\004\"\242\005\n%CMsgClientToGCUn"
  "lockItemStyleResponse\022^\n\010response\030\001 \001(\0162"
  "3.CMsgClientToGCUnlockItemStyleResponse."
  "EUnlockStyle:\027k_UnlockStyle_Succeeded\022\017\n"
  "\007item_id\030\002 \001(\004\022\023\n\013style_index\030\003 \001(\r\022\024\n\014s"
  "tyle_prereq\030\004 \001(\r\"\334\003\n\014EUnlockStyle\022\033\n\027k_"
  "UnlockStyle_Succeeded\020\000\022\037\n\033k_UnlockStyle"
  "_Failed_PreReq\020\001\022#\n\037k_UnlockStyle_Failed"
  "_CantAfford\020\002\022#\n\037k_UnlockStyle_Failed_Ca"
  "ntCommit\020\003\022&\n\"k_UnlockStyle_Failed_CantL"
  "ockCache\020\004\022)\n%k_UnlockStyle_Failed_CantA"
  "ffordAttrib\020\005\022&\n\"k_UnlockStyle_Failed_Ca"
  "ntAffordGem\020\006\022*\n&k_UnlockStyle_Failed_No"
  "CompendiumLevel\020\007\022(\n$k_UnlockStyle_Faile"
  "d_AlreadyUnlocked\020\010\022#\n\037k_UnlockStyle_Fai"
  "led_OtherError\020\t\022&\n\"k_UnlockStyle_Failed"
  "_ItemIsInvalid\020\n\022&\n\"k_UnlockStyle_Failed"
  "_ToolIsInvalid\020\013\"\203\001\n&CMsgClientToGCSetIt"
  "emInventoryCategory\022\020\n\010item_ids\030\001 \003(\004\022\024\n"
  "\014set_to_value\030\002 \001(\r\022\031\n\021remove_categories"
  "\030\003 \001(\r\022\026\n\016add_categories\030\004 \001(\r\"G\n\031CMsgCl"
  "ientToGCUnlockCrate\022\025\n\rcrate_item_id\030\001 \001"
  "(\004\022\023\n\013key_item_id\030\002 \001(\004\"\304\001\n!CMsgClientTo"
  "GCUnlockCrateResponse\0223\n\006result\030\001 \001(\0162\017."
  "EGCMsgResponse:\022k_EGCMsgResponseOK\022>\n\rgr"
  "anted_items\030\002 \003(\0132\'.CMsgClientToGCUnlock"
  "CrateResponse.Item\032*\n\004Item\022\017\n\007item_id\030\001 "
  "\001(\004\022\021\n\tdef_index\030\002 \001(\r\"4\n!CMsgClientToGC"
  "RemoveItemAttribute\022\017\n\007item_id\030\001 \001(\004\"\262\003\n"
  ")CMsgClientToGCRemoveItemAttributeRespon"
  "se\022r\n\010response\030\001 \001(\0162\?.CMsgClientToGCRem"
  "oveItemAttributeResponse.ERemoveItemAttr"
  "ibute:\037k_RemoveItemAttribute_Succeeded\022\017"
  "\n\007item_id\030\002 \001(\004\"\377\001\n\024ERemoveItemAttribute"
  "\022#\n\037k_RemoveItemAttribute_Succeeded\020\000\022 \n"
  "\034k_RemoveItemAttribute_Failed\020\001\022.\n*k_Rem"
  "oveItemAttribute_Failed_ItemIsInvalid\020\002\022"
  "9\n5k_RemoveItemAttribute_Failed_Attribut"
  "eCannotBeRemoved\020\003\0225\n1k_RemoveItemAttrib"
  "ute_Failed_AttributeDoesntExist\020\004\"U\n\026CMs"
  "gClientToGCNameItem\022\027\n\017subject_item_id\030\001"
  " \001(\004\022\024\n\014tool_item_id\030\002 \001(\004\022\014\n\004name\030\003 \001(\t"
  "\"\262\002\n\036CMsgClientToGCNameItemResponse\022Q\n\010r"
  "esponse\030\001 \001(\0162).CMsgClientToGCNameItemRe"
  "sponse.ENameItem:\024k_NameItem_Succeeded\022\017"
  "\n\007item_id\030\002 \001(\004\"\253\001\n\tENameItem\022\030\n\024k_NameI"
  "tem_Succeeded\020\000\022\025\n\021k_NameItem_Failed\020\001\022#"
  "\n\037k_NameItem_Failed_ToolIsInvalid\020\002\022#\n\037k"
  "_NameItem_Failed_ItemIsInvalid\020\003\022#\n\037k_Na"
  "meItem_Failed_NameIsInvalid\020\004\">\n\025CMsgGCS"
  "etItemPosition\022\017\n\007item_id\030\001 \001(\004\022\024\n\014new_p"
  "osition\030\002 \001(\r\"\355\001\n%CAttribute_ItemDynamic"
  "RecipeComponent\022\020\n\010item_def\030\001 \001(\r\022\024\n\014ite"
  "m_quality\030\002 \001(\r\022\022\n\nitem_flags\030\003 \001(\r\022\031\n\021a"
  "ttributes_string\030\004 \001(\t\022\022\n\nitem_count\030\005 \001"
  "(\r\022\027\n\017items_fulfilled\030\006 \001(\r\022\023\n\013item_rari"
  "ty\030\007 \001(\r\022\020\n\010lootlist\030\010 \001(\t\022\031\n\021fulfilled_"
  "item_id\030\t \001(\004\"\262\001\n\020CProtoItemSocket\022\017\n\007it"
  "em_id\030\001 \001(\004\022\026\n\016attr_def_index\030\002 \001(\r\022\025\n\rr"
  "equired_type\030\003 \001(\r\022\025\n\rrequired_hero\030\004 \001("
  "\t\022\025\n\rgem_def_index\030\005 \001(\r\022\024\n\014not_tradable"
  "\030\006 \001(\010\022\032\n\022required_item_slot\030\007 \001(\t\";\n\026CP"
  "rotoItemSocket_Empty\022!\n\006socket\030\001 \001(\0132\021.C"
  "ProtoItemSocket\"L\n\027CProtoItemSocket_Effe"
  "ct\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\016\n"
  "\006effect\030\002 \001(\r\"e\n\026CProtoItemSocket_Color\022"
  "!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\013\n\003re"
  "d\030\002 \001(\r\022\r\n\005green\030\003 \001(\r\022\014\n\004blue\030\004 \001(\r\"j\n\030"
  "CProtoItemSocket_Strange\022!\n\006socket\030\001 \001(\013"
  "2\021.CProtoItemSocket\022\024\n\014strange_type\030\002 \001("
  "\r\022\025\n\rstrange_value\030\003 \001(\r\"\237\001\n5CProtoItemS"
  "ocket_Strange_DESERIALIZE_FROM_STRING_ON"
  "LY\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\022\024\n"
  "\014strange_type\030\002 \001(\r\022\025\n\rstrange_value\030\003 \001"
  "(\r\022\026\n\016ability_effect\030\004 \001(\r\"\221\001\n\032CProtoIte"
  "mSocket_Spectator\022!\n\006socket\030\001 \001(\0132\021.CPro"
  "toItemSocket\022\024\n\014games_viewed\030\002 \001(\r\022\026\n\016co"
  "rporation_id\030\003 \001(\r\022\021\n\tleague_id\030\004 \001(\r\022\017\n"
  "\007team_id\030\005 \001(\r\"[\n\036CProtoItemSocket_Asset"
  "Modifier\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSoc"
  "ket\022\026\n\016asset_modifier\030\002 \001(\r\"\247\001\n;CProtoIt"
  "emSocket_AssetModifier_DESERIALIZE_FROM_"
  "STRING_ONLY\022!\n\006socket\030\001 \001(\0132\021.CProtoItem"
  "Socket\022\026\n\016asset_modifier\030\002 \001(\r\022\025\n\ranim_m"
  "odifier\030\003 \001(\r\022\026\n\016ability_effect\030\004 \001(\r\"\201\001"
  "\n\032CProtoItemSocket_Autograph\022!\n\006socket\030\001"
  " \001(\0132\021.CProtoItemSocket\022\021\n\tautograph\030\002 \001"
  "(\t\022\024\n\014autograph_id\030\003 \001(\r\022\027\n\017autograph_sc"
  "ore\030\004 \001(\r\"C\n\036CProtoItemSocket_StaticVisu"
  "als\022!\n\006socket\030\001 \001(\0132\021.CProtoItemSocket\"\""
  "\n\021CAttribute_String\022\r\n\005value\030\001 \001(\t\"m\n%CW"
  "orkshop_GetItemDailyRevenue_Request\022\r\n\005a"
  "ppid\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\r\022\022\n\ndate_star"
  "t\030\003 \001(\r\022\020\n\010date_end\030\004 \001(\r\"\335\001\n&CWorkshop_"
  "GetItemDailyRevenue_Response\022T\n\017country_"
  "revenue\030\001 \003(\0132;.CWorkshop_GetItemDailyRe"
  "venue_Response.CountryDailyRevenue\032]\n\023Co"
  "untryDailyRevenue\022\024\n\014country_code\030\001 \001(\t\022"
  "\014\n\004date\030\002 \001(\r\022\023\n\013revenue_usd\030\003 \001(\003\022\r\n\005un"
  "its\030\004 \001(\005\"c\n(CWorkshop_GetPackageDailyRe"
  "venue_Request\022\021\n\tpackageid\030\001 \001(\r\022\022\n\ndate"
  "_start\030\002 \001(\r\022\020\n\010date_end\030\003 \001(\r\"\343\001\n)CWork"
  "shop_GetPackageDailyRevenue_Response\022W\n\017"
  "country_revenue\030\001 \003(\0132>.CWorkshop_GetPac"
  "kageDailyRevenue_Response.CountryDailyRe"
  "venue\032]\n\023CountryDailyRevenue\022\024\n\014country_"
  "code\030\001 \001(\t\022\014\n\004date\030\002 \001(\r\022\023\n\013revenue_usd\030"
  "\003 \001(\003\022\r\n\005units\030\004 \001(\005\"H\n\037CMsgSQLGCToGCGra"
  "ntBackpackSlots\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ta"
  "dd_slots\030\002 \001(\r\"5\n\037CMsgClientToGCLookupAc"
  "countName\022\022\n\naccount_id\030\001 \001(\r\"S\n\'CMsgCli"
  "entToGCLookupAccountNameResponse\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022\024\n\014account_name\030\002 \001(\t\"\235\001\n C"
  "MsgClientToGCCreateStaticRecipe\0225\n\005items"
  "\030\001 \003(\0132&.CMsgClientToGCCreateStaticRecip"
  "e.Item\022\030\n\020recipe_def_index\030\002 \001(\r\032(\n\004Item"
  "\022\017\n\007item_id\030\001 \001(\004\022\017\n\007slot_id\030\002 \001(\r\"\230\006\n(C"
  "MsgClientToGCCreateStaticRecipeResponse\022"
  "X\n\010response\030\001 \001(\01623.CMsgClientToGCCreate"
  "StaticRecipeResponse.EResponse:\021eRespons"
  "e_Success\022J\n\014output_items\030\002 \003(\01324.CMsgCl"
  "ientToGCCreateStaticRecipeResponse.Outpu"
  "tItem\022J\n\014input_errors\030\003 \003(\01324.CMsgClient"
  "ToGCCreateStaticRecipeResponse.InputErro"
  "r\022V\n\022additional_outputs\030\004 \003(\0132:.CMsgClie"
  "ntToGCCreateStaticRecipeResponse.Additio"
  "nalOutput\032A\n\nOutputItem\022\021\n\tdef_index\030\001 \001"
  "(\r\022\017\n\007item_id\030\002 \001(\004\022\017\n\007slot_id\030\003 \001(\r\032t\n\n"
  "InputError\022\017\n\007slot_id\030\001 \001(\r\022U\n\005error\030\002 \001"
  "(\01623.CMsgClientToGCCreateStaticRecipeRes"
  "ponse.EResponse:\021eResponse_Success\0322\n\020Ad"
  "ditionalOutput\022\017\n\007slot_id\030\001 \001(\r\022\r\n\005value"
  "\030\002 \001(\004\"\264\001\n\tEResponse\022\025\n\021eResponse_Succes"
  "s\020\000\022\036\n\032eResponse_OfferingDisabled\020\001\022\032\n\026e"
  "Response_InvalidItems\020\002\022\033\n\027eResponse_Int"
  "ernalError\020\003\022\033\n\027eResponse_MissingLeague\020"
  "\004\022\032\n\026eResponse_MissingEvent\020\005\"\333\003\n\033CMsgPr"
  "ocessTransactionOrder\022\016\n\006txn_id\030\001 \001(\004\022\024\n"
  "\014steam_txn_id\030\002 \001(\004\022\026\n\016partner_txn_id\030\003 "
  "\001(\004\022\020\n\010steam_id\030\004 \001(\006\022\022\n\ntime_stamp\030\005 \001("
  "\r\022\021\n\twatermark\030\006 \001(\004\022\036\n\026purchase_report_"
  "status\030\007 \001(\005\022\020\n\010currency\030\010 \001(\r\0220\n\005items\030"
  "\t \003(\0132!.CMsgProcessTransactionOrder.Item"
  "\032\340\001\n\004Item\022\026\n\016item_def_index\030\001 \001(\r\022\022\n\nite"
  "m_price\030\002 \001(\r\022\020\n\010quantity\030\003 \001(\r\022\025\n\rcateg"
  "ory_desc\030\004 \001(\t\022\033\n\023store_purchase_type\030\005 "
  "\001(\r\022\033\n\023source_reference_id\030\006 \001(\004\022\032\n\022pare"
  "nt_stack_index\030\007 \001(\005\022\025\n\rdefault_price\030\010 "
  "\001(\010\022\026\n\016is_user_facing\030\t \001(\010\"{\n&CMsgGCToG"
  "CStoreProcessCDKeyTransaction\022+\n\005order\030\001"
  " \001(\0132\034.CMsgProcessTransactionOrder\022\023\n\013re"
  "ason_code\030\002 \001(\r\022\017\n\007partner\030\003 \001(\r\"A\n.CMsg"
  "GCToGCStoreProcessCDKeyTransactionRespon"
  "se\022\017\n\007success\030\001 \001(\010\"O\n CMsgGCToGCStorePr"
  "ocessSettlement\022+\n\005order\030\001 \001(\0132\034.CMsgPro"
  "cessTransactionOrder\";\n(CMsgGCToGCStoreP"
  "rocessSettlementResponse\022\017\n\007success\030\001 \001("
  "\010\"}\n!CMsgGCToGCBroadcastConsoleCommand\022\023"
  "\n\013con_command\030\001 \001(\t\022\025\n\rreport_output\030\002 \001"
  "(\010\022\022\n\nsending_gc\030\003 \001(\r\022\030\n\020output_initiat"
  "or\030\004 \001(\t\"\303\001\n\027CMsgGCToGCConsoleOutput\022\021\n\t"
  "initiator\030\001 \001(\t\022\022\n\nsending_gc\030\002 \001(\r\0221\n\004m"
  "sgs\030\003 \003(\0132#.CMsgGCToGCConsoleOutput.Outp"
  "utLine\022\036\n\026is_last_for_source_job\030\004 \001(\010\032."
  "\n\nOutputLine\022\014\n\004text\030\001 \001(\t\022\022\n\nspew_level"
  "\030\002 \001(\r\"\216\001\n\014CMsgItemAges\022@\n\026max_item_id_t"
  "imestamps\030\001 \003(\0132 .CMsgItemAges.MaxItemID"
  "Timestamp\032<\n\022MaxItemIDTimestamp\022\021\n\ttimes"
  "tamp\030\001 \001(\r\022\023\n\013max_item_id\030\002 \001(\004\"\253\001\n\031CMsg"
  "GCToGCInternalTestMsg\022\022\n\nsending_gc\030\001 \001("
  "\r\022\021\n\tsender_id\030\002 \001(\006\022\017\n\007context\030\003 \001(\r\022\022\n"
  "\nmessage_id\030\004 \001(\r\022\024\n\014message_body\030\005 \001(\014\022"
  "\025\n\rjob_id_source\030\006 \001(\006\022\025\n\rjob_id_target\030"
  "\007 \001(\006\"\300\001\n%CMsgGCToGCClientServerVersions"
  "Updated\022\"\n\032client_min_allowed_version\030\001 "
  "\001(\r\022\035\n\025client_active_version\030\002 \001(\r\022\035\n\025se"
  "rver_active_version\030\003 \001(\r\022\037\n\027server_depl"
  "oyed_version\030\004 \001(\r\022\024\n\014what_changed\030\005 \001(\r"
  "\"\203\001\n!CMsgGCToGCBroadcastMessageFromSub\022\016"
  "\n\006msg_id\030\001 \001(\r\022\026\n\016serialized_msg\030\002 \001(\014\022\033"
  "\n\017account_id_list\030\003 \003(\rB\002\020\001\022\031\n\rsteam_id_"
  "list\030\004 \003(\006B\002\020\001\"\270\001\n!CMsgGCToClientCurrenc"
  "yPricePoints\022\025\n\tprice_key\030\001 \003(\004B\002\020\001\022\?\n\nc"
  "urrencies\030\002 \003(\0132+.CMsgGCToClientCurrency"
  "PricePoints.Currency\032;\n\010Currency\022\023\n\013curr"
  "ency_id\030\001 \001(\r\022\032\n\016currency_price\030\002 \003(\004B\002\020"
  "\001\";\n\022CMsgBannedWordList\022\017\n\007version\030\001 \001(\r"
  "\022\024\n\014banned_words\030\002 \003(\t\"\206\001\n\"CMsgGCToGCFlu"
  "shSteamInventoryCache\0225\n\004keys\030\001 \003(\0132\'.CM"
  "sgGCToGCFlushSteamInventoryCache.Key\032)\n\003"
  "Key\022\017\n\007steamid\030\001 \001(\004\022\021\n\tcontextid\030\002 \001(\004\""
  "N\n!CMsgGCToGCUpdateSubscriptionItems\022\022\n\n"
  "account_id\030\001 \001(\r\022\025\n\ralways_notify\030\002 \001(\010\""
  "\'\n\022CMsgGCToGCSelfPing\022\021\n\tsample_id\030\001 \001(\r"
  "\"!\n\037CMsgGCToGCGetInfuxIntervalStats\"\243\001\n\'"
  "CMsgGCToGCGetInfuxIntervalStatsResponse\022"
  "\024\n\010stat_ids\030\001 \003(\007B\002\020\001\022\026\n\nstat_total\030\002 \003("
  "\004B\002\020\001\022\030\n\014stat_samples\030\003 \003(\rB\002\020\001\022\024\n\010stat_"
  "max\030\004 \003(\rB\002\020\001\022\032\n\022sample_duration_ms\030\005 \001("
  "\r\"\035\n\033CMsgGCToGCPurchaseSucceeded\"@\n,CMsg"
  "ClientToGCGetLimitedItemPurchaseQuantity"
  "\022\020\n\010item_def\030\001 \001(\r\"\313\002\n4CMsgClientToGCGet"
  "LimitedItemPurchaseQuantityResponse\022a\n\006r"
  "esult\030\001 \001(\0162\?.CMsgClientToGCGetLimitedIt"
  "emPurchaseQuantityResponse.EResponse:\020k_"
  "eInternalError\022\032\n\022quantity_purchased\030\002 \001"
  "(\r\"\223\001\n\tEResponse\022\024\n\020k_eInternalError\020\000\022\016"
  "\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_eDis"
  "abled\020\003\022\016\n\nk_eTimeout\020\004\022\025\n\021k_eInvalidIte"
  "mDef\020\005\022\030\n\024k_eItemDefNotLimited\020\006\"a\n\032CMsg"
  "GCToGCUpdateWelcomeMsg\022\016\n\006server\030\001 \001(\010\022 "
  "\n\007new_msg\030\002 \001(\0132\017.CExtraMsgBlock\022\021\n\tbroa"
  "dcast\030\003 \001(\010*\2319\n\nEGCItemMsg\022\021\n\014k_EMsgGCBa"
  "se\020\350\007\022\034\n\027k_EMsgGCSetItemPosition\020\351\007\022\023\n\016k"
  "_EMsgGCDelete\020\354\007\022$\n\037k_EMsgGCVerifyCacheS"
  "ubscription\020\355\007\022\035\n\030k_EMsgClientToGCNameIt"
  "em\020\356\007\022\026\n\021k_EMsgGCPaintItem\020\361\007\022\036\n\031k_EMsgG"
  "CPaintItemResponse\020\362\007\022\"\n\035k_EMsgGCGoldenW"
  "renchBroadcast\020\363\007\022\030\n\023k_EMsgGCMOTDRequest"
  "\020\364\007\022 \n\033k_EMsgGCMOTDRequestResponse\020\365\007\022\'\n"
  "\"k_EMsgGCAddItemToSocket_DEPRECATED\020\366\007\022/"
  "\n*k_EMsgGCAddItemToSocketResponse_DEPREC"
  "ATED\020\367\007\022+\n&k_EMsgGCAddSocketToBaseItem_D"
  "EPRECATED\020\370\007\022\'\n\"k_EMsgGCAddSocketToItem_"
  "DEPRECATED\020\371\007\022/\n*k_EMsgGCAddSocketToItem"
  "Response_DEPRECATED\020\372\007\022\031\n\024k_EMsgGCNameBa"
  "seItem\020\373\007\022!\n\034k_EMsgGCNameBaseItemRespons"
  "e\020\374\007\022(\n#k_EMsgGCRemoveSocketItem_DEPRECA"
  "TED\020\375\007\0220\n+k_EMsgGCRemoveSocketItemRespon"
  "se_DEPRECATED\020\376\007\022!\n\034k_EMsgGCCustomizeIte"
  "mTexture\020\377\007\022)\n$k_EMsgGCCustomizeItemText"
  "ureResponse\020\200\010\022\033\n\026k_EMsgGCUseItemRequest"
  "\020\201\010\022\034\n\027k_EMsgGCUseItemResponse\020\202\010\022\030\n\023k_E"
  "MsgGCGiftedItems\020\203\010\022\033\n\026k_EMsgGCRemoveIte"
  "mName\020\206\010\022\034\n\027k_EMsgGCRemoveItemPaint\020\207\010\022\036"
  "\n\031k_EMsgGCUnwrapGiftRequest\020\215\010\022\037\n\032k_EMsg"
  "GCUnwrapGiftResponse\020\216\010\022$\n\037k_EMsgGCSetIt"
  "emStyle_DEPRECATED\020\217\010\022\036\n\031k_EMsgGCUsedCla"
  "imCodeItem\020\220\010\022\026\n\021k_EMsgGCSortItems\020\221\010\022*\n"
  "%k_EMsgGC_RevolvingLootList_DEPRECATED\020\222"
  "\010\022\035\n\030k_EMsgGCUpdateItemSchema\020\231\010\022 \n\033k_EM"
  "sgGCRemoveCustomTexture\020\233\010\022(\n#k_EMsgGCRe"
  "moveCustomTextureResponse\020\234\010\022\035\n\030k_EMsgGC"
  "RemoveMakersMark\020\235\010\022%\n k_EMsgGCRemoveMak"
  "ersMarkResponse\020\236\010\022#\n\036k_EMsgGCRemoveUniq"
  "ueCraftIndex\020\237\010\022+\n&k_EMsgGCRemoveUniqueC"
  "raftIndexResponse\020\240\010\022\033\n\026k_EMsgGCSaxxyBro"
  "adcast\020\241\010\022!\n\034k_EMsgGCBackpackSortFinishe"
  "d\020\242\010\022$\n\037k_EMsgGCAdjustItemEquippedState\020"
  "\243\010\022\030\n\023k_EMsgGCCollectItem\020\245\010\022\035\n\030k_EMsgGC"
  "ItemAcknowledged\020\246\010\022)\n$k_EMsgGCPresets_S"
  "electPresetForClass\020\247\010\022$\n\037k_EMsgGCPreset"
  "s_SetItemPosition\020\250\010\022.\n)k_EMsgGCPresets_"
  "SelectPresetForClassReply\020\253\010\022%\n k_EMsgCl"
  "ientToGCNameItemResponse\020\254\010\022#\n\036k_EMsgGCA"
  "pplyConsumableEffects\020\255\010\022\036\n\031k_EMsgGCShow"
  "ItemsPickedUp\020\257\010\022&\n!k_EMsgGCClientDispla"
  "yNotification\020\260\010\022\035\n\030k_EMsgGCApplyStrange"
  "Part\020\261\010\022(\n#k_EMsgGC_IncrementKillCountRe"
  "sponse\020\263\010\022 \n\033k_EMsgGCApplyPennantUpgrade"
  "\020\264\010\022\035\n\030k_EMsgGCSetItemPositions\020\265\010\022)\n$k_"
  "EMsgGCSetItemPositions_RateLimited\020\310\010\022\034\n"
  "\027k_EMsgGCApplyEggEssence\020\266\010\022#\n\036k_EMsgGCN"
  "ameEggEssenceResponse\020\267\010\022*\n%k_EMsgGCFulf"
  "illDynamicRecipeComponent\020\272\010\0222\n-k_EMsgGC"
  "FulfillDynamicRecipeComponentResponse\020\273\010"
  "\022$\n\037k_EMsgGCClientRequestMarketData\020\274\010\022,"
  "\n\'k_EMsgGCClientRequestMarketDataRespons"
  "e\020\275\010\022\030\n\023k_EMsgGCExtractGems\020\276\010\022\026\n\021k_EMsg"
  "GCAddSocket\020\277\010\022\034\n\027k_EMsgGCAddItemToSocke"
  "t\020\300\010\022$\n\037k_EMsgGCAddItemToSocketResponse\020"
  "\301\010\022\036\n\031k_EMsgGCAddSocketResponse\020\302\010\022!\n\034k_"
  "EMsgGCResetStrangeGemCount\020\303\010\022\036\n\031k_EMsgG"
  "CRequestCrateItems\020\304\010\022&\n!k_EMsgGCRequest"
  "CrateItemsResponse\020\305\010\022 \n\033k_EMsgGCExtract"
  "GemsResponse\020\306\010\022)\n$k_EMsgGCResetStrangeG"
  "emCountResponse\020\307\010\022!\n\034k_EMsgGCServerUseI"
  "temRequest\020\317\010\022\030\n\023k_EMsgGCAddGiftItem\020\320\010\022"
  "\"\n\035k_EMsgGCRemoveItemGiftMessage\020\321\010\022*\n%k"
  "_EMsgGCRemoveItemGiftMessageResponse\020\322\010\022"
  "&\n!k_EMsgGCRemoveItemGifterAccountId\020\323\010\022"
  ".\n)k_EMsgGCRemoveItemGifterAccountIdResp"
  "onse\020\324\010\022/\n*k_EMsgClientToGCRemoveItemGif"
  "terAttributes\020\325\010\022#\n\036k_EMsgClientToGCRemo"
  "veItemName\020\326\010\022*\n%k_EMsgClientToGCRemoveI"
  "temDescription\020\327\010\0220\n+k_EMsgClientToGCRem"
  "oveItemAttributeResponse\020\330\010\022\030\n\023k_EMsgGCT"
  "radingBase\020\334\013\022)\n$k_EMsgGCTrading_Initiat"
  "eTradeRequest\020\335\013\022*\n%k_EMsgGCTrading_Init"
  "iateTradeResponse\020\336\013\022!\n\034k_EMsgGCTrading_"
  "StartSession\020\337\013\022\"\n\035k_EMsgGCTrading_Sessi"
  "onClosed\020\345\013\0221\n,k_EMsgGCTrading_InitiateT"
  "radeRequestResponse\020\352\013\022)\n$k_EMsgGCServer"
  "Browser_FavoriteServer\020\301\014\022*\n%k_EMsgGCSer"
  "verBrowser_BlacklistServer\020\302\014\022\036\n\031k_EMsgG"
  "CServerRentalsBase\020\244\r\022\037\n\032k_EMsgGCDev_New"
  "ItemRequest\020\321\017\022\'\n\"k_EMsgGCDev_NewItemReq"
  "uestResponse\020\322\017\022+\n&k_EMsgGCDev_UnlockAll"
  "ItemStylesRequest\020\323\017\022,\n\'k_EMsgGCDev_Unlo"
  "ckAllItemStylesResponse\020\324\017\022\"\n\035k_EMsgGCSt"
  "orePurchaseFinalize\020\310\023\022*\n%k_EMsgGCStoreP"
  "urchaseFinalizeResponse\020\311\023\022 \n\033k_EMsgGCSt"
  "orePurchaseCancel\020\312\023\022(\n#k_EMsgGCStorePur"
  "chaseCancelResponse\020\313\023\022\036\n\031k_EMsgGCStoreP"
  "urchaseInit\020\316\023\022&\n!k_EMsgGCStorePurchaseI"
  "nitResponse\020\317\023\022&\n!k_EMsgGCToGCBannedWord"
  "ListUpdated\020\323\023\022\036\n\031k_EMsgGCToGCDirtySDOCa"
  "che\020\324\023\022&\n!k_EMsgGCToGCDirtyMultipleSDOCa"
  "che\020\325\023\022\"\n\035k_EMsgGCToGCUpdateSQLKeyValue\020"
  "\326\023\022(\n#k_EMsgGCToGCBroadcastConsoleComman"
  "d\020\331\023\022!\n\034k_EMsgGCServerVersionUpdated\020\332\023\022"
  "\033\n\026k_EMsgGCApplyAutograph\020\333\023\022%\n k_EMsgGC"
  "ToGCWebAPIAccountChanged\020\334\023\022!\n\034k_EMsgGCC"
  "lientVersionUpdated\020\340\023\022!\n\034k_EMsgGCToGCUp"
  "dateWelcomeMsg\020\341\023\022+\n&k_EMsgGCItemPurgato"
  "ry_FinalizePurchase\020\343\023\0223\n.k_EMsgGCItemPu"
  "rgatory_FinalizePurchaseResponse\020\344\023\022)\n$k"
  "_EMsgGCItemPurgatory_RefundPurchase\020\345\023\0221"
  "\n,k_EMsgGCItemPurgatory_RefundPurchaseRe"
  "sponse\020\346\023\022.\n)k_EMsgGCToGCPlayerStrangeCo"
  "untAdjustments\020\347\023\022\"\n\035k_EMsgGCRequestStor"
  "eSalesData\020\350\023\022*\n%k_EMsgGCRequestStoreSal"
  "esDataResponse\020\351\023\0222\n-k_EMsgGCRequestStor"
  "eSalesDataUpToDateResponse\020\352\023\022\034\n\027k_EMsgG"
  "CToGCPingRequest\020\353\023\022\035\n\030k_EMsgGCToGCPingR"
  "esponse\020\354\023\022%\n k_EMsgGCToGCGetUserSession"
  "Server\020\355\023\022-\n(k_EMsgGCToGCGetUserSessionS"
  "erverResponse\020\356\023\022%\n k_EMsgGCToGCGetUserS"
  "erverMembers\020\357\023\022-\n(k_EMsgGCToGCGetUserSe"
  "rverMembersResponse\020\360\023\022 \n\033k_EMsgGCToGCGe"
  "tUserPCBangNo\020\361\023\022(\n#k_EMsgGCToGCGetUserP"
  "CBangNoResponse\020\362\023\022$\n\037k_EMsgGCToGCCanUse"
  "DropRateBonus\020\363\023\022\036\n\031k_EMsgSQLAddDropRate"
  "Bonus\020\364\023\022\037\n\032k_EMsgGCToGCRefreshSOCache\020\365"
  "\023\022&\n!k_EMsgGCToGCApplyLocalizationDiff\020\366"
  "\023\022.\n)k_EMsgGCToGCApplyLocalizationDiffRe"
  "sponse\020\367\023\022(\n#k_EMsgGCToGCCheckAccountTra"
  "deStatus\020\370\023\0220\n+k_EMsgGCToGCCheckAccountT"
  "radeStatusResponse\020\371\023\022(\n#k_EMsgGCToGCGra"
  "ntAccountRolledItems\020\372\023\022+\n&k_EMsgGCToGCG"
  "rantSelfMadeItemToAccount\020\373\023\022\"\n\035k_EMsgGC"
  "PartnerBalanceRequest\020\375\023\022#\n\036k_EMsgGCPart"
  "nerBalanceResponse\020\376\023\022.\n)k_EMsgGCPartner"
  "RechargeRedirectURLRequest\020\377\023\022/\n*k_EMsgG"
  "CPartnerRechargeRedirectURLResponse\020\200\024\022\030"
  "\n\023k_EMsgGCStatueCraft\020\201\024\022\027\n\022k_EMsgGCRede"
  "emCode\020\202\024\022\037\n\032k_EMsgGCRedeemCodeResponse\020"
  "\203\024\022(\n#k_EMsgGCToGCItemConsumptionRollbac"
  "k\020\204\024\022\'\n\"k_EMsgClientToGCWrapAndDeliverGi"
  "ft\020\205\024\022/\n*k_EMsgClientToGCWrapAndDeliverG"
  "iftResponse\020\206\024\022)\n$k_EMsgClientToGCUnpack"
  "BundleResponse\020\207\024\022.\n)k_EMsgGCToClientSto"
  "reTransactionCompleted\020\210\024\022\037\n\032k_EMsgClien"
  "tToGCEquipItems\020\211\024\022\'\n\"k_EMsgClientToGCEq"
  "uipItemsResponse\020\212\024\022$\n\037k_EMsgClientToGCU"
  "nlockItemStyle\020\213\024\022,\n\'k_EMsgClientToGCUnl"
  "ockItemStyleResponse\020\214\024\022-\n(k_EMsgClientT"
  "oGCSetItemInventoryCategory\020\215\024\022 \n\033k_EMsg"
  "ClientToGCUnlockCrate\020\216\024\022(\n#k_EMsgClient"
  "ToGCUnlockCrateResponse\020\217\024\022!\n\034k_EMsgClie"
  "ntToGCUnpackBundle\020\220\024\022!\n\034k_EMsgClientToG"
  "CSetItemStyle\020\221\024\022)\n$k_EMsgClientToGCSetI"
  "temStyleResponse\020\222\024\022&\n!k_EMsgSQLGCToGCGr"
  "antBackpackSlots\020\224\024\022&\n!k_EMsgClientToGCL"
  "ookupAccountName\020\225\024\022.\n)k_EMsgClientToGCL"
  "ookupAccountNameResponse\020\226\024\022#\n\036k_EMsgGCT"
  "oGCDevRevokeUserItems\020\227\024\022\'\n\"k_EMsgClient"
  "ToGCCreateStaticRecipe\020\230\024\022/\n*k_EMsgClien"
  "tToGCCreateStaticRecipeResponse\020\231\024\022-\n(k_"
  "EMsgGCToGCStoreProcessCDKeyTransaction\020\232"
  "\024\0225\n0k_EMsgGCToGCStoreProcessCDKeyTransa"
  "ctionResponse\020\233\024\022\'\n\"k_EMsgGCToGCStorePro"
  "cessSettlement\020\234\024\022/\n*k_EMsgGCToGCStorePr"
  "ocessSettlementResponse\020\235\024\022\036\n\031k_EMsgGCTo"
  "GCConsoleOutput\020\236\024\022\035\n\030k_EMsgGCToClientIt"
  "emAges\020\237\024\022 \n\033k_EMsgGCToGCInternalTestMsg"
  "\020\240\024\022,\n\'k_EMsgGCToGCClientServerVersionsU"
  "pdated\020\241\024\022$\n\037k_EMsgGCUseMultipleItemsReq"
  "uest\020\242\024\022\'\n\"k_EMsgGCGetAccountSubscriptio"
  "nItem\020\243\024\022/\n*k_EMsgGCGetAccountSubscripti"
  "onItemResponse\020\244\024\022(\n#k_EMsgGCToGCBroadca"
  "stMessageFromSub\020\246\024\022(\n#k_EMsgGCToClientC"
  "urrencyPricePoints\020\247\024\022$\n\037k_EMsgGCToGCAdd"
  "SubscriptionTime\020\250\024\022)\n$k_EMsgGCToGCFlush"
  "SteamInventoryCache\020\251\024\022(\n#k_EMsgGCReques"
  "tCrateEscalationLevel\020\252\024\0220\n+k_EMsgGCRequ"
  "estCrateEscalationLevelResponse\020\253\024\022(\n#k_"
  "EMsgGCToGCUpdateSubscriptionItems\020\254\024\022\031\n\024"
  "k_EMsgGCToGCSelfPing\020\255\024\022&\n!k_EMsgGCToGCG"
  "etInfuxIntervalStats\020\256\024\022.\n)k_EMsgGCToGCG"
  "etInfuxIntervalStatsResponse\020\257\024\022\"\n\035k_EMs"
  "gGCToGCPurchaseSucceeded\020\260\024\0223\n.k_EMsgCli"
  "entToGCGetLimitedItemPurchaseQuantity\020\261\024"
  "\022;\n6k_EMsgClientToGCGetLimitedItemPurcha"
  "seQuantityResponse\020\262\024\022 \n\033k_EMsgGCToGCBet"
  "aDeleteItems\020\263\024*\363\002\n\037EItemPurgatoryRespon"
  "se_Finalize\022.\n*k_ItemPurgatoryResponse_F"
  "inalize_Succeeded\020\000\0226\n2k_ItemPurgatoryRe"
  "sponse_Finalize_Failed_Incomplete\020\001\022\?\n;k"
  "_ItemPurgatoryResponse_Finalize_Failed_I"
  "temsNotInPurgatory\020\002\022=\n9k_ItemPurgatoryR"
  "esponse_Finalize_Failed_CouldNotFindItem"
  "s\020\003\0225\n1k_ItemPurgatoryResponse_Finalize_"
  "Failed_NoSOCache\020\004\0221\n-k_ItemPurgatoryRes"
  "ponse_Finalize_BackpackFull\020\005*\260\002\n\035EItemP"
  "urgatoryResponse_Refund\022,\n(k_ItemPurgato"
  "ryResponse_Refund_Succeeded\020\000\022<\n8k_ItemP"
  "urgatoryResponse_Refund_Failed_ItemNotIn"
  "Purgatory\020\001\022:\n6k_ItemPurgatoryResponse_R"
  "efund_Failed_CouldNotFindItem\020\002\0223\n/k_Ite"
  "mPurgatoryResponse_Refund_Failed_NoSOCac"
  "he\020\003\0222\n.k_ItemPurgatoryResponse_Refund_F"
  "ailed_NoDetail\020\004*\271\n\n\033EGCMsgInitiateTrade"
  "Response\022*\n&k_EGCMsgInitiateTradeRespons"
  "e_Accepted\020\000\022*\n&k_EGCMsgInitiateTradeRes"
  "ponse_Declined\020\001\0226\n2k_EGCMsgInitiateTrad"
  "eResponse_VAC_Banned_Initiator\020\002\0223\n/k_EG"
  "CMsgInitiateTradeResponse_VAC_Banned_Tar"
  "get\020\003\0228\n4k_EGCMsgInitiateTradeResponse_T"
  "arget_Already_Trading\020\004\022*\n&k_EGCMsgIniti"
  "ateTradeResponse_Disabled\020\005\022-\n)k_EGCMsgI"
  "nitiateTradeResponse_NotLoggedIn\020\006\022(\n$k_"
  "EGCMsgInitiateTradeResponse_Cancel\020\007\022)\n%"
  "k_EGCMsgInitiateTradeResponse_TooSoon\020\010\022"
  "0\n,k_EGCMsgInitiateTradeResponse_TooSoon"
  "Penalty\020\t\0228\n4k_EGCMsgInitiateTradeRespon"
  "se_Trade_Banned_Initiator\020\n\0225\n1k_EGCMsgI"
  "nitiateTradeResponse_Trade_Banned_Target"
  "\020\013\022C\n\?k_EGCMsgInitiateTradeResponse_Free"
  "_Account_Initiator_DEPRECATED\020\014\022:\n6k_EGC"
  "MsgInitiateTradeResponse_Shared_Account_"
  "Initiator\020\r\0225\n1k_EGCMsgInitiateTradeResp"
  "onse_Service_Unavailable\020\016\0220\n,k_EGCMsgIn"
  "itiateTradeResponse_Target_Blocked\020\017\0223\n/"
  "k_EGCMsgInitiateTradeResponse_NeedVerifi"
  "edEmail\020\020\0220\n,k_EGCMsgInitiateTradeRespon"
  "se_NeedSteamGuard\020\021\0224\n0k_EGCMsgInitiateT"
  "radeResponse_SteamGuardDuration\020\022\0221\n-k_E"
  "GCMsgInitiateTradeResponse_TheyCannotTra"
  "de\020\023\0227\n3k_EGCMsgInitiateTradeResponse_Re"
  "cent_Password_Reset\020\024\0222\n.k_EGCMsgInitiat"
  "eTradeResponse_Using_New_Device\020\025\0225\n1k_E"
  "GCMsgInitiateTradeResponse_Sent_Invalid_"
  "Cookie\020\026\0221\n-k_EGCMsgInitiateTradeRespons"
  "e_TooRecentFriend\020\027\0227\n3k_EGCMsgInitiateT"
  "radeResponse_WalledFundsNotTrusted\020\030B\005H\001"
  "\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_econ_5fgcmessages_2eproto_deps[3] = {
  &::descriptor_table_econ_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_econ_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_econ_5fgcmessages_2eproto = {
  false, false, 25523, descriptor_table_protodef_econ_5fgcmessages_2eproto, "econ_gcmessages.proto", 
  &descriptor_table_econ_5fgcmessages_2eproto_once, descriptor_table_econ_5fgcmessages_2eproto_deps, 3, 137,
  schemas, file_default_instances, TableStruct_econ_5fgcmessages_2eproto::offsets,
  file_level_metadata_econ_5fgcmessages_2eproto, file_level_enum_descriptors_econ_5fgcmessages_2eproto, file_level_service_descriptors_econ_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_econ_5fgcmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return descriptor_table_econ_5fgcmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_econ_5fgcmessages_2eproto(&descriptor_table_econ_5fgcmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRequestCrateItemsResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[0];
}
bool CMsgRequestCrateItemsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::k_Succeeded;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::k_Failed;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::EResult_MIN;
constexpr CMsgRequestCrateItemsResponse_EResult CMsgRequestCrateItemsResponse::EResult_MAX;
constexpr int CMsgRequestCrateItemsResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRequestCrateEscalationLevelResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[1];
}
bool CMsgRequestCrateEscalationLevelResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::k_Succeeded;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::k_Failed;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::EResult_MIN;
constexpr CMsgRequestCrateEscalationLevelResponse_EResult CMsgRequestCrateEscalationLevelResponse::EResult_MAX;
constexpr int CMsgRequestCrateEscalationLevelResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRedeemCodeResponse_EResultCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[2];
}
bool CMsgRedeemCodeResponse_EResultCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Succeeded;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_CodeNotFound;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_CodeAlreadyUsed;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::k_Failed_OtherError;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::EResultCode_MIN;
constexpr CMsgRedeemCodeResponse_EResultCode CMsgRedeemCodeResponse::EResultCode_MAX;
constexpr int CMsgRedeemCodeResponse::EResultCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCUnpackBundleResponse_EUnpackBundle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[3];
}
bool CMsgClientToGCUnpackBundleResponse_EUnpackBundle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Succeeded;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_ItemIsNotBundle;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_UnableToCreateContainedItem;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_SOCacheError;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_ItemIsInvalid;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_BadItemQuantity;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::k_UnpackBundle_Failed_UnableToDeleteItem;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::EUnpackBundle_MIN;
constexpr CMsgClientToGCUnpackBundleResponse_EUnpackBundle CMsgClientToGCUnpackBundleResponse::EUnpackBundle_MAX;
constexpr int CMsgClientToGCUnpackBundleResponse::EUnpackBundle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetItemStyleResponse_ESetStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[4];
}
bool CMsgClientToGCSetItemStyleResponse_ESetStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Succeeded;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Failed;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::k_SetStyle_Failed_StyleIsLocked;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::ESetStyle_MIN;
constexpr CMsgClientToGCSetItemStyleResponse_ESetStyle CMsgClientToGCSetItemStyleResponse::ESetStyle_MAX;
constexpr int CMsgClientToGCSetItemStyleResponse::ESetStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[5];
}
bool CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Succeeded;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_PreReq;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAfford;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantCommit;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantLockCache;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAffordAttrib;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_CantAffordGem;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_NoCompendiumLevel;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_AlreadyUnlocked;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_OtherError;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_ItemIsInvalid;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::k_UnlockStyle_Failed_ToolIsInvalid;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_MIN;
constexpr CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_MAX;
constexpr int CMsgClientToGCUnlockItemStyleResponse::EUnlockStyle_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[6];
}
bool CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Succeeded;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_ItemIsInvalid;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_AttributeCannotBeRemoved;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::k_RemoveItemAttribute_Failed_AttributeDoesntExist;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_MIN;
constexpr CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_MAX;
constexpr int CMsgClientToGCRemoveItemAttributeResponse::ERemoveItemAttribute_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCNameItemResponse_ENameItem_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[7];
}
bool CMsgClientToGCNameItemResponse_ENameItem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Succeeded;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_ToolIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_ItemIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::k_NameItem_Failed_NameIsInvalid;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::ENameItem_MIN;
constexpr CMsgClientToGCNameItemResponse_ENameItem CMsgClientToGCNameItemResponse::ENameItem_MAX;
constexpr int CMsgClientToGCNameItemResponse::ENameItem_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCCreateStaticRecipeResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[8];
}
bool CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_Success;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_OfferingDisabled;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_InvalidItems;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_InternalError;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_MissingLeague;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::eResponse_MissingEvent;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::EResponse_MIN;
constexpr CMsgClientToGCCreateStaticRecipeResponse_EResponse CMsgClientToGCCreateStaticRecipeResponse::EResponse_MAX;
constexpr int CMsgClientToGCCreateStaticRecipeResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[9];
}
bool CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eInternalError;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eSuccess;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eTooBusy;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eDisabled;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eTimeout;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eInvalidItemDef;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::k_eItemDefNotLimited;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_MIN;
constexpr CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_MAX;
constexpr int CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCItemMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[10];
}
bool EGCItemMsg_IsValid(int value) {
  switch (value) {
    case 1000:
    case 1001:
    case 1004:
    case 1005:
    case 1006:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1030:
    case 1031:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1049:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1067:
    case 1068:
    case 1069:
    case 1071:
    case 1072:
    case 1073:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1509:
    case 1514:
    case 1601:
    case 1602:
    case 1700:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2510:
    case 2511:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2528:
    case 2529:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemPurgatoryResponse_Finalize_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[11];
}
bool EItemPurgatoryResponse_Finalize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EItemPurgatoryResponse_Refund_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[12];
}
bool EItemPurgatoryResponse_Refund_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGCMsgInitiateTradeResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_econ_5fgcmessages_2eproto);
  return file_level_enum_descriptors_econ_5fgcmessages_2eproto[13];
}
bool EGCMsgInitiateTradeResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgApplyAutograph::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyAutograph>()._has_bits_);
  static void set_has_autograph_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgApplyAutograph::CMsgApplyAutograph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyAutograph)
}
CMsgApplyAutograph::CMsgApplyAutograph(const CMsgApplyAutograph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&autograph_item_id_, &from.autograph_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&autograph_item_id_)) + sizeof(item_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgApplyAutograph)
}

void CMsgApplyAutograph::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&autograph_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&autograph_item_id_)) + sizeof(item_item_id_));
}

CMsgApplyAutograph::~CMsgApplyAutograph() {
  // @@protoc_insertion_point(destructor:CMsgApplyAutograph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgApplyAutograph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgApplyAutograph::ArenaDtor(void* object) {
  CMsgApplyAutograph* _this = reinterpret_cast< CMsgApplyAutograph* >(object);
  (void)_this;
}
void CMsgApplyAutograph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgApplyAutograph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgApplyAutograph::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyAutograph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&autograph_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&autograph_item_id_)) + sizeof(item_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyAutograph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 autograph_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_autograph_item_id(&has_bits);
          autograph_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_item_id(&has_bits);
          item_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgApplyAutograph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyAutograph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 autograph_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_autograph_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyAutograph)
  return target;
}

size_t CMsgApplyAutograph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyAutograph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 autograph_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_autograph_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyAutograph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgApplyAutograph)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyAutograph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgApplyAutograph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgApplyAutograph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgApplyAutograph)
    MergeFrom(*source);
  }
}

void CMsgApplyAutograph::MergeFrom(const CMsgApplyAutograph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyAutograph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      autograph_item_id_ = from.autograph_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyAutograph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgApplyAutograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyAutograph::CopyFrom(const CMsgApplyAutograph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyAutograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyAutograph::IsInitialized() const {
  return true;
}

void CMsgApplyAutograph::InternalSwap(CMsgApplyAutograph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgApplyAutograph, item_item_id_)
      + sizeof(CMsgApplyAutograph::item_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgApplyAutograph, autograph_item_id_)>(
          reinterpret_cast<char*>(&autograph_item_id_),
          reinterpret_cast<char*>(&other->autograph_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyAutograph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAdjustItemEquippedState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAdjustItemEquippedState>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAdjustItemEquippedState)
}
CMsgAdjustItemEquippedState::CMsgAdjustItemEquippedState(const CMsgAdjustItemEquippedState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgAdjustItemEquippedState)
}

void CMsgAdjustItemEquippedState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
}

CMsgAdjustItemEquippedState::~CMsgAdjustItemEquippedState() {
  // @@protoc_insertion_point(destructor:CMsgAdjustItemEquippedState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAdjustItemEquippedState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAdjustItemEquippedState::ArenaDtor(void* object) {
  CMsgAdjustItemEquippedState* _this = reinterpret_cast< CMsgAdjustItemEquippedState* >(object);
  (void)_this;
}
void CMsgAdjustItemEquippedState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAdjustItemEquippedState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAdjustItemEquippedState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAdjustItemEquippedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAdjustItemEquippedState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_class(&has_bits);
          new_class_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_new_slot(&has_bits);
          new_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAdjustItemEquippedState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAdjustItemEquippedState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_class = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_class(), target);
  }

  // optional uint32 new_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_new_slot(), target);
  }

  // optional uint32 style_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAdjustItemEquippedState)
  return target;
}

size_t CMsgAdjustItemEquippedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAdjustItemEquippedState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 new_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_class());
    }

    // optional uint32 new_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_slot());
    }

    // optional uint32 style_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAdjustItemEquippedState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAdjustItemEquippedState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAdjustItemEquippedState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAdjustItemEquippedState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAdjustItemEquippedState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAdjustItemEquippedState)
    MergeFrom(*source);
  }
}

void CMsgAdjustItemEquippedState::MergeFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAdjustItemEquippedState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_slot_ = from.new_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      style_index_ = from.style_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAdjustItemEquippedState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAdjustItemEquippedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAdjustItemEquippedState::CopyFrom(const CMsgAdjustItemEquippedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAdjustItemEquippedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAdjustItemEquippedState::IsInitialized() const {
  return true;
}

void CMsgAdjustItemEquippedState::InternalSwap(CMsgAdjustItemEquippedState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, style_index_)
      + sizeof(CMsgAdjustItemEquippedState::style_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgAdjustItemEquippedState, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAdjustItemEquippedState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>()._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
}
CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&adjustment_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(adjustment_));
  // @@protoc_insertion_point(copy_constructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&adjustment_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(adjustment_));
}

CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment() {
  // @@protoc_insertion_point(destructor:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ArenaDtor(void* object) {
  CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* _this = reinterpret_cast< CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* >(object);
  (void)_this;
}
void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adjustment_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(adjustment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 adjustment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_adjustment(&has_bits);
          adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_type(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 adjustment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_adjustment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  return target;
}

size_t CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 event_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_type());
    }

    // optional uint32 adjustment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_adjustment());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      adjustment_ = from.adjustment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::IsInitialized() const {
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::InternalSwap(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, adjustment_)
      + sizeof(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::adjustment_)
      - PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgEconPlayerStrangeCountAdjustment::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgEconPlayerStrangeCountAdjustment>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_turbo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  strange_count_adjustments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgEconPlayerStrangeCountAdjustment)
}
CMsgEconPlayerStrangeCountAdjustment::CMsgEconPlayerStrangeCountAdjustment(const CMsgEconPlayerStrangeCountAdjustment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      strange_count_adjustments_(from.strange_count_adjustments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&turbo_mode_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(turbo_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgEconPlayerStrangeCountAdjustment)
}

void CMsgEconPlayerStrangeCountAdjustment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&turbo_mode_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(turbo_mode_));
}

CMsgEconPlayerStrangeCountAdjustment::~CMsgEconPlayerStrangeCountAdjustment() {
  // @@protoc_insertion_point(destructor:CMsgEconPlayerStrangeCountAdjustment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgEconPlayerStrangeCountAdjustment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgEconPlayerStrangeCountAdjustment::ArenaDtor(void* object) {
  CMsgEconPlayerStrangeCountAdjustment* _this = reinterpret_cast< CMsgEconPlayerStrangeCountAdjustment* >(object);
  (void)_this;
}
void CMsgEconPlayerStrangeCountAdjustment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgEconPlayerStrangeCountAdjustment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgEconPlayerStrangeCountAdjustment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgEconPlayerStrangeCountAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strange_count_adjustments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&turbo_mode_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(turbo_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgEconPlayerStrangeCountAdjustment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strange_count_adjustments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool turbo_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_turbo_mode(&has_bits);
          turbo_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgEconPlayerStrangeCountAdjustment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgEconPlayerStrangeCountAdjustment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strange_count_adjustments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_strange_count_adjustments(i), target, stream);
  }

  // optional bool turbo_mode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_turbo_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgEconPlayerStrangeCountAdjustment)
  return target;
}

size_t CMsgEconPlayerStrangeCountAdjustment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgEconPlayerStrangeCountAdjustment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgEconPlayerStrangeCountAdjustment.CStrangeCountAdjustment strange_count_adjustments = 2;
  total_size += 1UL * this->_internal_strange_count_adjustments_size();
  for (const auto& msg : this->strange_count_adjustments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool turbo_mode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgEconPlayerStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEconPlayerStrangeCountAdjustment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgEconPlayerStrangeCountAdjustment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgEconPlayerStrangeCountAdjustment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgEconPlayerStrangeCountAdjustment)
    MergeFrom(*source);
  }
}

void CMsgEconPlayerStrangeCountAdjustment::MergeFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgEconPlayerStrangeCountAdjustment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strange_count_adjustments_.MergeFrom(from.strange_count_adjustments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      turbo_mode_ = from.turbo_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgEconPlayerStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEconPlayerStrangeCountAdjustment::CopyFrom(const CMsgEconPlayerStrangeCountAdjustment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgEconPlayerStrangeCountAdjustment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEconPlayerStrangeCountAdjustment::IsInitialized() const {
  return true;
}

void CMsgEconPlayerStrangeCountAdjustment::InternalSwap(CMsgEconPlayerStrangeCountAdjustment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strange_count_adjustments_.InternalSwap(&other->strange_count_adjustments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, turbo_mode_)
      + sizeof(CMsgEconPlayerStrangeCountAdjustment::turbo_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgEconPlayerStrangeCountAdjustment, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgEconPlayerStrangeCountAdjustment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestItemPurgatory_FinalizePurchase::_Internal {
 public:
};

CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestItemPurgatory_FinalizePurchase)
}
CMsgRequestItemPurgatory_FinalizePurchase::CMsgRequestItemPurgatory_FinalizePurchase(const CMsgRequestItemPurgatory_FinalizePurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestItemPurgatory_FinalizePurchase)
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedCtor() {
}

CMsgRequestItemPurgatory_FinalizePurchase::~CMsgRequestItemPurgatory_FinalizePurchase() {
  // @@protoc_insertion_point(destructor:CMsgRequestItemPurgatory_FinalizePurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestItemPurgatory_FinalizePurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestItemPurgatory_FinalizePurchase::ArenaDtor(void* object) {
  CMsgRequestItemPurgatory_FinalizePurchase* _this = reinterpret_cast< CMsgRequestItemPurgatory_FinalizePurchase* >(object);
  (void)_this;
}
void CMsgRequestItemPurgatory_FinalizePurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestItemPurgatory_FinalizePurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestItemPurgatory_FinalizePurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestItemPurgatory_FinalizePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestItemPurgatory_FinalizePurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestItemPurgatory_FinalizePurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestItemPurgatory_FinalizePurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestItemPurgatory_FinalizePurchase)
  return target;
}

size_t CMsgRequestItemPurgatory_FinalizePurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestItemPurgatory_FinalizePurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestItemPurgatory_FinalizePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestItemPurgatory_FinalizePurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestItemPurgatory_FinalizePurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestItemPurgatory_FinalizePurchase)
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchase::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestItemPurgatory_FinalizePurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestItemPurgatory_FinalizePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchase::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestItemPurgatory_FinalizePurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchase::IsInitialized() const {
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchase::InternalSwap(CMsgRequestItemPurgatory_FinalizePurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_ids_.InternalSwap(&other->item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestItemPurgatory_FinalizePurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestItemPurgatory_FinalizePurchaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestItemPurgatory_FinalizePurchaseResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
}
CMsgRequestItemPurgatory_FinalizePurchaseResponse::CMsgRequestItemPurgatory_FinalizePurchaseResponse(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedCtor() {
result_ = 0u;
}

CMsgRequestItemPurgatory_FinalizePurchaseResponse::~CMsgRequestItemPurgatory_FinalizePurchaseResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::ArenaDtor(void* object) {
  CMsgRequestItemPurgatory_FinalizePurchaseResponse* _this = reinterpret_cast< CMsgRequestItemPurgatory_FinalizePurchaseResponse* >(object);
  (void)_this;
}
void CMsgRequestItemPurgatory_FinalizePurchaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestItemPurgatory_FinalizePurchaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestItemPurgatory_FinalizePurchaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestItemPurgatory_FinalizePurchaseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  return target;
}

size_t CMsgRequestItemPurgatory_FinalizePurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_FinalizePurchaseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestItemPurgatory_FinalizePurchaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_FinalizePurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestItemPurgatory_FinalizePurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_FinalizePurchaseResponse::IsInitialized() const {
  return true;
}

void CMsgRequestItemPurgatory_FinalizePurchaseResponse::InternalSwap(CMsgRequestItemPurgatory_FinalizePurchaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestItemPurgatory_FinalizePurchaseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestItemPurgatory_RefundPurchase::_Internal {
 public:
};

CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestItemPurgatory_RefundPurchase)
}
CMsgRequestItemPurgatory_RefundPurchase::CMsgRequestItemPurgatory_RefundPurchase(const CMsgRequestItemPurgatory_RefundPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestItemPurgatory_RefundPurchase)
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedCtor() {
}

CMsgRequestItemPurgatory_RefundPurchase::~CMsgRequestItemPurgatory_RefundPurchase() {
  // @@protoc_insertion_point(destructor:CMsgRequestItemPurgatory_RefundPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestItemPurgatory_RefundPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestItemPurgatory_RefundPurchase::ArenaDtor(void* object) {
  CMsgRequestItemPurgatory_RefundPurchase* _this = reinterpret_cast< CMsgRequestItemPurgatory_RefundPurchase* >(object);
  (void)_this;
}
void CMsgRequestItemPurgatory_RefundPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestItemPurgatory_RefundPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestItemPurgatory_RefundPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestItemPurgatory_RefundPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestItemPurgatory_RefundPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestItemPurgatory_RefundPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestItemPurgatory_RefundPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestItemPurgatory_RefundPurchase)
  return target;
}

size_t CMsgRequestItemPurgatory_RefundPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestItemPurgatory_RefundPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestItemPurgatory_RefundPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestItemPurgatory_RefundPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestItemPurgatory_RefundPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestItemPurgatory_RefundPurchase)
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchase::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestItemPurgatory_RefundPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestItemPurgatory_RefundPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchase::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestItemPurgatory_RefundPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchase::IsInitialized() const {
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchase::InternalSwap(CMsgRequestItemPurgatory_RefundPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_ids_.InternalSwap(&other->item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestItemPurgatory_RefundPurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestItemPurgatory_RefundPurchaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestItemPurgatory_RefundPurchaseResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestItemPurgatory_RefundPurchaseResponse)
}
CMsgRequestItemPurgatory_RefundPurchaseResponse::CMsgRequestItemPurgatory_RefundPurchaseResponse(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestItemPurgatory_RefundPurchaseResponse)
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedCtor() {
result_ = 0u;
}

CMsgRequestItemPurgatory_RefundPurchaseResponse::~CMsgRequestItemPurgatory_RefundPurchaseResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::ArenaDtor(void* object) {
  CMsgRequestItemPurgatory_RefundPurchaseResponse* _this = reinterpret_cast< CMsgRequestItemPurgatory_RefundPurchaseResponse* >(object);
  (void)_this;
}
void CMsgRequestItemPurgatory_RefundPurchaseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestItemPurgatory_RefundPurchaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestItemPurgatory_RefundPurchaseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestItemPurgatory_RefundPurchaseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  return target;
}

size_t CMsgRequestItemPurgatory_RefundPurchaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestItemPurgatory_RefundPurchaseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestItemPurgatory_RefundPurchaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestItemPurgatory_RefundPurchaseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestItemPurgatory_RefundPurchaseResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::MergeFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::CopyFrom(const CMsgRequestItemPurgatory_RefundPurchaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestItemPurgatory_RefundPurchaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestItemPurgatory_RefundPurchaseResponse::IsInitialized() const {
  return true;
}

void CMsgRequestItemPurgatory_RefundPurchaseResponse::InternalSwap(CMsgRequestItemPurgatory_RefundPurchaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestItemPurgatory_RefundPurchaseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCraftingResponse::_Internal {
 public:
};

CMsgCraftingResponse::CMsgCraftingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCraftingResponse)
}
CMsgCraftingResponse::CMsgCraftingResponse(const CMsgCraftingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCraftingResponse)
}

void CMsgCraftingResponse::SharedCtor() {
}

CMsgCraftingResponse::~CMsgCraftingResponse() {
  // @@protoc_insertion_point(destructor:CMsgCraftingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCraftingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCraftingResponse::ArenaDtor(void* object) {
  CMsgCraftingResponse* _this = reinterpret_cast< CMsgCraftingResponse* >(object);
  (void)_this;
}
void CMsgCraftingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCraftingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCraftingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCraftingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCraftingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCraftingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCraftingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCraftingResponse)
  return target;
}

size_t CMsgCraftingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCraftingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCraftingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCraftingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCraftingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCraftingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCraftingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCraftingResponse)
    MergeFrom(*source);
  }
}

void CMsgCraftingResponse::MergeFrom(const CMsgCraftingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCraftingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
}

void CMsgCraftingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCraftingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftingResponse::CopyFrom(const CMsgCraftingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCraftingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftingResponse::IsInitialized() const {
  return true;
}

void CMsgCraftingResponse::InternalSwap(CMsgCraftingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_ids_.InternalSwap(&other->item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCraftingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestStoreSalesData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesData>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesData)
}
CMsgGCRequestStoreSalesData::CMsgGCRequestStoreSalesData(const CMsgGCRequestStoreSalesData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&version_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesData)
}

void CMsgGCRequestStoreSalesData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&version_)) + sizeof(currency_));
}

CMsgGCRequestStoreSalesData::~CMsgGCRequestStoreSalesData() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestStoreSalesData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestStoreSalesData::ArenaDtor(void* object) {
  CMsgGCRequestStoreSalesData* _this = reinterpret_cast< CMsgGCRequestStoreSalesData* >(object);
  (void)_this;
}
void CMsgGCRequestStoreSalesData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestStoreSalesData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&version_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestStoreSalesData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 currency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesData)
  return target;
}

size_t CMsgGCRequestStoreSalesData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 currency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_currency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestStoreSalesData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestStoreSalesData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestStoreSalesData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestStoreSalesData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestStoreSalesData)
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesData::MergeFrom(const CMsgGCRequestStoreSalesData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestStoreSalesData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestStoreSalesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesData::CopyFrom(const CMsgGCRequestStoreSalesData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesData::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesData::InternalSwap(CMsgGCRequestStoreSalesData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesData, currency_)
      + sizeof(CMsgGCRequestStoreSalesData::currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesData, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestStoreSalesDataResponse_Price::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataResponse_Price>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataResponse.Price)
}
CMsgGCRequestStoreSalesDataResponse_Price::CMsgGCRequestStoreSalesDataResponse_Price(const CMsgGCRequestStoreSalesDataResponse_Price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataResponse.Price)
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(price_));
}

CMsgGCRequestStoreSalesDataResponse_Price::~CMsgGCRequestStoreSalesDataResponse_Price() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataResponse.Price)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestStoreSalesDataResponse_Price::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestStoreSalesDataResponse_Price::ArenaDtor(void* object) {
  CMsgGCRequestStoreSalesDataResponse_Price* _this = reinterpret_cast< CMsgGCRequestStoreSalesDataResponse_Price* >(object);
  (void)_this;
}
void CMsgGCRequestStoreSalesDataResponse_Price::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestStoreSalesDataResponse_Price::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataResponse_Price::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataResponse.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(price_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataResponse_Price::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestStoreSalesDataResponse_Price::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataResponse.Price)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataResponse.Price)
  return target;
}

size_t CMsgGCRequestStoreSalesDataResponse_Price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataResponse.Price)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 price = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_price());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse_Price* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestStoreSalesDataResponse_Price>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestStoreSalesDataResponse.Price)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestStoreSalesDataResponse.Price)
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::MergeFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      price_ = from.price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse_Price::CopyFrom(const CMsgGCRequestStoreSalesDataResponse_Price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataResponse.Price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse_Price::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataResponse_Price::InternalSwap(CMsgGCRequestStoreSalesDataResponse_Price* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, price_)
      + sizeof(CMsgGCRequestStoreSalesDataResponse_Price::price_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse_Price, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataResponse_Price::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestStoreSalesDataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataResponse>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sale_price_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataResponse)
}
CMsgGCRequestStoreSalesDataResponse::CMsgGCRequestStoreSalesDataResponse(const CMsgGCRequestStoreSalesDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sale_price_(from.sale_price_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataResponse)
}

void CMsgGCRequestStoreSalesDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
}

CMsgGCRequestStoreSalesDataResponse::~CMsgGCRequestStoreSalesDataResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestStoreSalesDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestStoreSalesDataResponse::ArenaDtor(void* object) {
  CMsgGCRequestStoreSalesDataResponse* _this = reinterpret_cast< CMsgGCRequestStoreSalesDataResponse* >(object);
  (void)_this;
}
void CMsgGCRequestStoreSalesDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestStoreSalesDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sale_price_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sale_price(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expiration_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestStoreSalesDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sale_price_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sale_price(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // optional uint32 expiration_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataResponse)
  return target;
}

size_t CMsgGCRequestStoreSalesDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCRequestStoreSalesDataResponse.Price sale_price = 1;
  total_size += 1UL * this->_internal_sale_price_size();
  for (const auto& msg : this->sale_price_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 expiration_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestStoreSalesDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestStoreSalesDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestStoreSalesDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestStoreSalesDataResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataResponse::MergeFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sale_price_.MergeFrom(from.sale_price_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestStoreSalesDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataResponse::CopyFrom(const CMsgGCRequestStoreSalesDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataResponse::InternalSwap(CMsgGCRequestStoreSalesDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sale_price_.InternalSwap(&other->sale_price_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, expiration_time_)
      + sizeof(CMsgGCRequestStoreSalesDataResponse::expiration_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataResponse, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRequestStoreSalesDataUpToDateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRequestStoreSalesDataUpToDateResponse>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expiration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
}
CMsgGCRequestStoreSalesDataUpToDateResponse::CMsgGCRequestStoreSalesDataUpToDateResponse(const CMsgGCRequestStoreSalesDataUpToDateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expiration_time_) -
    reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
}

CMsgGCRequestStoreSalesDataUpToDateResponse::~CMsgGCRequestStoreSalesDataUpToDateResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRequestStoreSalesDataUpToDateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::ArenaDtor(void* object) {
  CMsgGCRequestStoreSalesDataUpToDateResponse* _this = reinterpret_cast< CMsgGCRequestStoreSalesDataUpToDateResponse* >(object);
  (void)_this;
}
void CMsgGCRequestStoreSalesDataUpToDateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRequestStoreSalesDataUpToDateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expiration_time_) -
        reinterpret_cast<char*>(&version_)) + sizeof(expiration_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRequestStoreSalesDataUpToDateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expiration_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_expiration_time(&has_bits);
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRequestStoreSalesDataUpToDateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 expiration_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expiration_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRequestStoreSalesDataUpToDateResponse)
  return target;
}

size_t CMsgGCRequestStoreSalesDataUpToDateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 expiration_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expiration_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRequestStoreSalesDataUpToDateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRequestStoreSalesDataUpToDateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRequestStoreSalesDataUpToDateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRequestStoreSalesDataUpToDateResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::MergeFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_time_ = from.expiration_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::CopyFrom(const CMsgGCRequestStoreSalesDataUpToDateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRequestStoreSalesDataUpToDateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRequestStoreSalesDataUpToDateResponse::IsInitialized() const {
  return true;
}

void CMsgGCRequestStoreSalesDataUpToDateResponse::InternalSwap(CMsgGCRequestStoreSalesDataUpToDateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, expiration_time_)
      + sizeof(CMsgGCRequestStoreSalesDataUpToDateResponse::expiration_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRequestStoreSalesDataUpToDateResponse, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRequestStoreSalesDataUpToDateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCPingRequest::_Internal {
 public:
};

CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPingRequest)
}
CMsgGCToGCPingRequest::CMsgGCToGCPingRequest(const CMsgGCToGCPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPingRequest)
}

void CMsgGCToGCPingRequest::SharedCtor() {
}

CMsgGCToGCPingRequest::~CMsgGCToGCPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCPingRequest::ArenaDtor(void* object) {
  CMsgGCToGCPingRequest* _this = reinterpret_cast< CMsgGCToGCPingRequest* >(object);
  (void)_this;
}
void CMsgGCToGCPingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCPingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCPingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPingRequest)
  return target;
}

size_t CMsgGCToGCPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCPingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCPingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCPingRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingRequest::MergeFrom(const CMsgGCToGCPingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCPingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingRequest::CopyFrom(const CMsgGCToGCPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingRequest::IsInitialized() const {
  return true;
}

void CMsgGCToGCPingRequest::InternalSwap(CMsgGCToGCPingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCPingResponse::_Internal {
 public:
};

CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPingResponse)
}
CMsgGCToGCPingResponse::CMsgGCToGCPingResponse(const CMsgGCToGCPingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPingResponse)
}

void CMsgGCToGCPingResponse::SharedCtor() {
}

CMsgGCToGCPingResponse::~CMsgGCToGCPingResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCPingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCPingResponse::ArenaDtor(void* object) {
  CMsgGCToGCPingResponse* _this = reinterpret_cast< CMsgGCToGCPingResponse* >(object);
  (void)_this;
}
void CMsgGCToGCPingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCPingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCPingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPingResponse)
  return target;
}

size_t CMsgGCToGCPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCPingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCPingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCPingResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPingResponse::MergeFrom(const CMsgGCToGCPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCPingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPingResponse::CopyFrom(const CMsgGCToGCPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPingResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCPingResponse::InternalSwap(CMsgGCToGCPingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetUserSessionServer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserSessionServer>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserSessionServer)
}
CMsgGCToGCGetUserSessionServer::CMsgGCToGCGetUserSessionServer(const CMsgGCToGCGetUserSessionServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserSessionServer)
}

void CMsgGCToGCGetUserSessionServer::SharedCtor() {
account_id_ = 0u;
}

CMsgGCToGCGetUserSessionServer::~CMsgGCToGCGetUserSessionServer() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserSessionServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetUserSessionServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetUserSessionServer::ArenaDtor(void* object) {
  CMsgGCToGCGetUserSessionServer* _this = reinterpret_cast< CMsgGCToGCGetUserSessionServer* >(object);
  (void)_this;
}
void CMsgGCToGCGetUserSessionServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetUserSessionServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetUserSessionServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserSessionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserSessionServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetUserSessionServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserSessionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserSessionServer)
  return target;
}

size_t CMsgGCToGCGetUserSessionServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserSessionServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetUserSessionServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetUserSessionServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetUserSessionServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetUserSessionServer)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServer::MergeFrom(const CMsgGCToGCGetUserSessionServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserSessionServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetUserSessionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServer::CopyFrom(const CMsgGCToGCGetUserSessionServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserSessionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServer::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserSessionServer::InternalSwap(CMsgGCToGCGetUserSessionServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserSessionServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetUserSessionServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserSessionServerResponse>()._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_online(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserSessionServerResponse)
}
CMsgGCToGCGetUserSessionServerResponse::CMsgGCToGCGetUserSessionServerResponse(const CMsgGCToGCGetUserSessionServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_online_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(is_online_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserSessionServerResponse)
}

void CMsgGCToGCGetUserSessionServerResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_online_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(is_online_));
}

CMsgGCToGCGetUserSessionServerResponse::~CMsgGCToGCGetUserSessionServerResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserSessionServerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetUserSessionServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetUserSessionServerResponse::ArenaDtor(void* object) {
  CMsgGCToGCGetUserSessionServerResponse* _this = reinterpret_cast< CMsgGCToGCGetUserSessionServerResponse* >(object);
  (void)_this;
}
void CMsgGCToGCGetUserSessionServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetUserSessionServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetUserSessionServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserSessionServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_online_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(is_online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserSessionServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool is_online = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_online(&has_bits);
          is_online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetUserSessionServerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserSessionServerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional bool is_online = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserSessionServerResponse)
  return target;
}

size_t CMsgGCToGCGetUserSessionServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserSessionServerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool is_online = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetUserSessionServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetUserSessionServerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetUserSessionServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetUserSessionServerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetUserSessionServerResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserSessionServerResponse::MergeFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserSessionServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_online_ = from.is_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetUserSessionServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserSessionServerResponse::CopyFrom(const CMsgGCToGCGetUserSessionServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserSessionServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserSessionServerResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserSessionServerResponse::InternalSwap(CMsgGCToGCGetUserSessionServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, is_online_)
      + sizeof(CMsgGCToGCGetUserSessionServerResponse::is_online_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserSessionServerResponse, server_steam_id_)>(
          reinterpret_cast<char*>(&server_steam_id_),
          reinterpret_cast<char*>(&other->server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserSessionServerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetUserServerMembers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetUserServerMembers>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserServerMembers)
}
CMsgGCToGCGetUserServerMembers::CMsgGCToGCGetUserServerMembers(const CMsgGCToGCGetUserServerMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_spectators_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(max_spectators_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserServerMembers)
}

void CMsgGCToGCGetUserServerMembers::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_spectators_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(max_spectators_));
}

CMsgGCToGCGetUserServerMembers::~CMsgGCToGCGetUserServerMembers() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserServerMembers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetUserServerMembers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetUserServerMembers::ArenaDtor(void* object) {
  CMsgGCToGCGetUserServerMembers* _this = reinterpret_cast< CMsgGCToGCGetUserServerMembers* >(object);
  (void)_this;
}
void CMsgGCToGCGetUserServerMembers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetUserServerMembers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetUserServerMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserServerMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_spectators_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(max_spectators_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserServerMembers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_spectators = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_spectators(&has_bits);
          max_spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetUserServerMembers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserServerMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 max_spectators = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_spectators(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserServerMembers)
  return target;
}

size_t CMsgGCToGCGetUserServerMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserServerMembers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 max_spectators = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_spectators());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetUserServerMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetUserServerMembers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetUserServerMembers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetUserServerMembers)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembers::MergeFrom(const CMsgGCToGCGetUserServerMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserServerMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_spectators_ = from.max_spectators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetUserServerMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembers::CopyFrom(const CMsgGCToGCGetUserServerMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserServerMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembers::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserServerMembers::InternalSwap(CMsgGCToGCGetUserServerMembers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, max_spectators_)
      + sizeof(CMsgGCToGCGetUserServerMembers::max_spectators_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGetUserServerMembers, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserServerMembers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetUserServerMembersResponse::_Internal {
 public:
};

CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  member_account_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetUserServerMembersResponse)
}
CMsgGCToGCGetUserServerMembersResponse::CMsgGCToGCGetUserServerMembersResponse(const CMsgGCToGCGetUserServerMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      member_account_id_(from.member_account_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetUserServerMembersResponse)
}

void CMsgGCToGCGetUserServerMembersResponse::SharedCtor() {
}

CMsgGCToGCGetUserServerMembersResponse::~CMsgGCToGCGetUserServerMembersResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetUserServerMembersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetUserServerMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetUserServerMembersResponse::ArenaDtor(void* object) {
  CMsgGCToGCGetUserServerMembersResponse* _this = reinterpret_cast< CMsgGCToGCGetUserServerMembersResponse* >(object);
  (void)_this;
}
void CMsgGCToGCGetUserServerMembersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetUserServerMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetUserServerMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetUserServerMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_account_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetUserServerMembersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 member_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_member_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_member_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetUserServerMembersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetUserServerMembersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 member_account_id = 1;
  for (int i = 0, n = this->_internal_member_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_member_account_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetUserServerMembersResponse)
  return target;
}

size_t CMsgGCToGCGetUserServerMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetUserServerMembersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 member_account_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->member_account_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_member_account_id_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetUserServerMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetUserServerMembersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetUserServerMembersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetUserServerMembersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetUserServerMembersResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetUserServerMembersResponse::MergeFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetUserServerMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_account_id_.MergeFrom(from.member_account_id_);
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetUserServerMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetUserServerMembersResponse::CopyFrom(const CMsgGCToGCGetUserServerMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetUserServerMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetUserServerMembersResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetUserServerMembersResponse::InternalSwap(CMsgGCToGCGetUserServerMembersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  member_account_id_.InternalSwap(&other->member_account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetUserServerMembersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLookupMultipleAccountNames::_Internal {
 public:
};

CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accountids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNames)
}
CMsgLookupMultipleAccountNames::CMsgLookupMultipleAccountNames(const CMsgLookupMultipleAccountNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accountids_(from.accountids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNames)
}

void CMsgLookupMultipleAccountNames::SharedCtor() {
}

CMsgLookupMultipleAccountNames::~CMsgLookupMultipleAccountNames() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLookupMultipleAccountNames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLookupMultipleAccountNames::ArenaDtor(void* object) {
  CMsgLookupMultipleAccountNames* _this = reinterpret_cast< CMsgLookupMultipleAccountNames* >(object);
  (void)_this;
}
void CMsgLookupMultipleAccountNames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLookupMultipleAccountNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accountids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 accountids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accountids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_accountids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLookupMultipleAccountNames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 accountids = 1 [packed = true];
  {
    int byte_size = _accountids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_accountids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNames)
  return target;
}

size_t CMsgLookupMultipleAccountNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accountids = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->accountids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _accountids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLookupMultipleAccountNames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLookupMultipleAccountNames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLookupMultipleAccountNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLookupMultipleAccountNames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLookupMultipleAccountNames)
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNames::MergeFrom(const CMsgLookupMultipleAccountNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accountids_.MergeFrom(from.accountids_);
}

void CMsgLookupMultipleAccountNames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLookupMultipleAccountNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNames::CopyFrom(const CMsgLookupMultipleAccountNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNames::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNames::InternalSwap(CMsgLookupMultipleAccountNames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accountids_.InternalSwap(&other->accountids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLookupMultipleAccountNamesResponse_Account::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLookupMultipleAccountNamesResponse_Account>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNamesResponse.Account)
}
CMsgLookupMultipleAccountNamesResponse_Account::CMsgLookupMultipleAccountNamesResponse_Account(const CMsgLookupMultipleAccountNamesResponse_Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona()) {
    persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona(), 
      GetArena());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNamesResponse.Account)
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedCtor() {
persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accountid_ = 0u;
}

CMsgLookupMultipleAccountNamesResponse_Account::~CMsgLookupMultipleAccountNamesResponse_Account() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNamesResponse.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLookupMultipleAccountNamesResponse_Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgLookupMultipleAccountNamesResponse_Account::ArenaDtor(void* object) {
  CMsgLookupMultipleAccountNamesResponse_Account* _this = reinterpret_cast< CMsgLookupMultipleAccountNamesResponse_Account* >(object);
  (void)_this;
}
void CMsgLookupMultipleAccountNamesResponse_Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLookupMultipleAccountNamesResponse_Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNamesResponse_Account::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNamesResponse.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_.ClearNonDefaultToEmpty();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNamesResponse_Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string persona = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_persona();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgLookupMultipleAccountNamesResponse.Account.persona");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLookupMultipleAccountNamesResponse_Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNamesResponse.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgLookupMultipleAccountNamesResponse.Account.persona");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNamesResponse.Account)
  return target;
}

size_t CMsgLookupMultipleAccountNamesResponse_Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNamesResponse.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse_Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLookupMultipleAccountNamesResponse_Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLookupMultipleAccountNamesResponse.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLookupMultipleAccountNamesResponse.Account)
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::MergeFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse_Account::CopyFrom(const CMsgLookupMultipleAccountNamesResponse_Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNamesResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse_Account::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNamesResponse_Account::InternalSwap(CMsgLookupMultipleAccountNamesResponse_Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_.Swap(&other->persona_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNamesResponse_Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLookupMultipleAccountNamesResponse::_Internal {
 public:
};

CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLookupMultipleAccountNamesResponse)
}
CMsgLookupMultipleAccountNamesResponse::CMsgLookupMultipleAccountNamesResponse(const CMsgLookupMultipleAccountNamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLookupMultipleAccountNamesResponse)
}

void CMsgLookupMultipleAccountNamesResponse::SharedCtor() {
}

CMsgLookupMultipleAccountNamesResponse::~CMsgLookupMultipleAccountNamesResponse() {
  // @@protoc_insertion_point(destructor:CMsgLookupMultipleAccountNamesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLookupMultipleAccountNamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLookupMultipleAccountNamesResponse::ArenaDtor(void* object) {
  CMsgLookupMultipleAccountNamesResponse* _this = reinterpret_cast< CMsgLookupMultipleAccountNamesResponse* >(object);
  (void)_this;
}
void CMsgLookupMultipleAccountNamesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLookupMultipleAccountNamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLookupMultipleAccountNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLookupMultipleAccountNamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLookupMultipleAccountNamesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLookupMultipleAccountNamesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLookupMultipleAccountNamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLookupMultipleAccountNamesResponse)
  return target;
}

size_t CMsgLookupMultipleAccountNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLookupMultipleAccountNamesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLookupMultipleAccountNamesResponse.Account accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLookupMultipleAccountNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLookupMultipleAccountNamesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLookupMultipleAccountNamesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLookupMultipleAccountNamesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLookupMultipleAccountNamesResponse)
    MergeFrom(*source);
  }
}

void CMsgLookupMultipleAccountNamesResponse::MergeFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLookupMultipleAccountNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLookupMultipleAccountNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLookupMultipleAccountNamesResponse::CopyFrom(const CMsgLookupMultipleAccountNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLookupMultipleAccountNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLookupMultipleAccountNamesResponse::IsInitialized() const {
  return true;
}

void CMsgLookupMultipleAccountNamesResponse::InternalSwap(CMsgLookupMultipleAccountNamesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLookupMultipleAccountNamesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestCrateItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateItems>()._has_bits_);
  static void set_has_crate_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateItems::CMsgRequestCrateItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateItems)
}
CMsgRequestCrateItems::CMsgRequestCrateItems(const CMsgRequestCrateItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crate_item_def_ = from.crate_item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateItems)
}

void CMsgRequestCrateItems::SharedCtor() {
crate_item_def_ = 0u;
}

CMsgRequestCrateItems::~CMsgRequestCrateItems() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestCrateItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestCrateItems::ArenaDtor(void* object) {
  CMsgRequestCrateItems* _this = reinterpret_cast< CMsgRequestCrateItems* >(object);
  (void)_this;
}
void CMsgRequestCrateItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestCrateItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestCrateItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crate_item_def_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 crate_item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crate_item_def(&has_bits);
          crate_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestCrateItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 crate_item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crate_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateItems)
  return target;
}

size_t CMsgRequestCrateItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 crate_item_def = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crate_item_def());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestCrateItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestCrateItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestCrateItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestCrateItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestCrateItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestCrateItems)
    MergeFrom(*source);
  }
}

void CMsgRequestCrateItems::MergeFrom(const CMsgRequestCrateItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crate_item_def()) {
    _internal_set_crate_item_def(from._internal_crate_item_def());
  }
}

void CMsgRequestCrateItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestCrateItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateItems::CopyFrom(const CMsgRequestCrateItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItems::IsInitialized() const {
  return true;
}

void CMsgRequestCrateItems::InternalSwap(CMsgRequestCrateItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crate_item_def_, other->crate_item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestCrateItemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateItemsResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_defs_(arena),
  peek_item_defs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateItemsResponse)
}
CMsgRequestCrateItemsResponse::CMsgRequestCrateItemsResponse(const CMsgRequestCrateItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_defs_(from.item_defs_),
      peek_item_defs_(from.peek_item_defs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateItemsResponse)
}

void CMsgRequestCrateItemsResponse::SharedCtor() {
response_ = 0u;
}

CMsgRequestCrateItemsResponse::~CMsgRequestCrateItemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestCrateItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestCrateItemsResponse::ArenaDtor(void* object) {
  CMsgRequestCrateItemsResponse* _this = reinterpret_cast< CMsgRequestCrateItemsResponse* >(object);
  (void)_this;
}
void CMsgRequestCrateItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestCrateItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestCrateItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_defs_.Clear();
  peek_item_defs_.Clear();
  response_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 item_defs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 peek_item_defs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_peek_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_peek_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestCrateItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // repeated uint32 item_defs = 2;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_defs(i), target);
  }

  // repeated uint32 peek_item_defs = 3;
  for (int i = 0, n = this->_internal_peek_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_peek_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateItemsResponse)
  return target;
}

size_t CMsgRequestCrateItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_defs = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // repeated uint32 peek_item_defs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->peek_item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_peek_item_defs_size());
    total_size += data_size;
  }

  // optional uint32 response = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestCrateItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestCrateItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestCrateItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestCrateItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestCrateItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestCrateItemsResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestCrateItemsResponse::MergeFrom(const CMsgRequestCrateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  peek_item_defs_.MergeFrom(from.peek_item_defs_);
  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgRequestCrateItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestCrateItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateItemsResponse::CopyFrom(const CMsgRequestCrateItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateItemsResponse::IsInitialized() const {
  return true;
}

void CMsgRequestCrateItemsResponse::InternalSwap(CMsgRequestCrateItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_defs_.InternalSwap(&other->item_defs_);
  peek_item_defs_.InternalSwap(&other->peek_item_defs_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestCrateEscalationLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateEscalationLevel>()._has_bits_);
  static void set_has_crate_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateEscalationLevel)
}
CMsgRequestCrateEscalationLevel::CMsgRequestCrateEscalationLevel(const CMsgRequestCrateEscalationLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crate_item_def_ = from.crate_item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateEscalationLevel)
}

void CMsgRequestCrateEscalationLevel::SharedCtor() {
crate_item_def_ = 0u;
}

CMsgRequestCrateEscalationLevel::~CMsgRequestCrateEscalationLevel() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateEscalationLevel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestCrateEscalationLevel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestCrateEscalationLevel::ArenaDtor(void* object) {
  CMsgRequestCrateEscalationLevel* _this = reinterpret_cast< CMsgRequestCrateEscalationLevel* >(object);
  (void)_this;
}
void CMsgRequestCrateEscalationLevel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestCrateEscalationLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestCrateEscalationLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateEscalationLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crate_item_def_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateEscalationLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 crate_item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crate_item_def(&has_bits);
          crate_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestCrateEscalationLevel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateEscalationLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 crate_item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crate_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateEscalationLevel)
  return target;
}

size_t CMsgRequestCrateEscalationLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateEscalationLevel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 crate_item_def = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crate_item_def());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestCrateEscalationLevel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestCrateEscalationLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestCrateEscalationLevel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestCrateEscalationLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestCrateEscalationLevel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestCrateEscalationLevel)
    MergeFrom(*source);
  }
}

void CMsgRequestCrateEscalationLevel::MergeFrom(const CMsgRequestCrateEscalationLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateEscalationLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crate_item_def()) {
    _internal_set_crate_item_def(from._internal_crate_item_def());
  }
}

void CMsgRequestCrateEscalationLevel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestCrateEscalationLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateEscalationLevel::CopyFrom(const CMsgRequestCrateEscalationLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateEscalationLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateEscalationLevel::IsInitialized() const {
  return true;
}

void CMsgRequestCrateEscalationLevel::InternalSwap(CMsgRequestCrateEscalationLevel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crate_item_def_, other->crate_item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateEscalationLevel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestCrateEscalationLevelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestCrateEscalationLevelResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_escalation_level0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_escalation_level1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_escalation_level2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_escalation_level3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestCrateEscalationLevelResponse)
}
CMsgRequestCrateEscalationLevelResponse::CMsgRequestCrateEscalationLevelResponse(const CMsgRequestCrateEscalationLevelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&escalation_level3_) -
    reinterpret_cast<char*>(&response_)) + sizeof(escalation_level3_));
  // @@protoc_insertion_point(copy_constructor:CMsgRequestCrateEscalationLevelResponse)
}

void CMsgRequestCrateEscalationLevelResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&escalation_level3_) -
    reinterpret_cast<char*>(&response_)) + sizeof(escalation_level3_));
}

CMsgRequestCrateEscalationLevelResponse::~CMsgRequestCrateEscalationLevelResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestCrateEscalationLevelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestCrateEscalationLevelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestCrateEscalationLevelResponse::ArenaDtor(void* object) {
  CMsgRequestCrateEscalationLevelResponse* _this = reinterpret_cast< CMsgRequestCrateEscalationLevelResponse* >(object);
  (void)_this;
}
void CMsgRequestCrateEscalationLevelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestCrateEscalationLevelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestCrateEscalationLevelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestCrateEscalationLevelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&escalation_level3_) -
        reinterpret_cast<char*>(&response_)) + sizeof(escalation_level3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestCrateEscalationLevelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 escalation_level0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_escalation_level0(&has_bits);
          escalation_level0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 escalation_level1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_escalation_level1(&has_bits);
          escalation_level1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 escalation_level2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_escalation_level2(&has_bits);
          escalation_level2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 escalation_level3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_escalation_level3(&has_bits);
          escalation_level3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestCrateEscalationLevelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestCrateEscalationLevelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional uint32 escalation_level0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_escalation_level0(), target);
  }

  // optional uint32 escalation_level1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_escalation_level1(), target);
  }

  // optional uint32 escalation_level2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_escalation_level2(), target);
  }

  // optional uint32 escalation_level3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_escalation_level3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestCrateEscalationLevelResponse)
  return target;
}

size_t CMsgRequestCrateEscalationLevelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestCrateEscalationLevelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_response());
    }

    // optional uint32 escalation_level0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_escalation_level0());
    }

    // optional uint32 escalation_level1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_escalation_level1());
    }

    // optional uint32 escalation_level2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_escalation_level2());
    }

    // optional uint32 escalation_level3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_escalation_level3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestCrateEscalationLevelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestCrateEscalationLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestCrateEscalationLevelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestCrateEscalationLevelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestCrateEscalationLevelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestCrateEscalationLevelResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestCrateEscalationLevelResponse::MergeFrom(const CMsgRequestCrateEscalationLevelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestCrateEscalationLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      escalation_level0_ = from.escalation_level0_;
    }
    if (cached_has_bits & 0x00000004u) {
      escalation_level1_ = from.escalation_level1_;
    }
    if (cached_has_bits & 0x00000008u) {
      escalation_level2_ = from.escalation_level2_;
    }
    if (cached_has_bits & 0x00000010u) {
      escalation_level3_ = from.escalation_level3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRequestCrateEscalationLevelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestCrateEscalationLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestCrateEscalationLevelResponse::CopyFrom(const CMsgRequestCrateEscalationLevelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestCrateEscalationLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestCrateEscalationLevelResponse::IsInitialized() const {
  return true;
}

void CMsgRequestCrateEscalationLevelResponse::InternalSwap(CMsgRequestCrateEscalationLevelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRequestCrateEscalationLevelResponse, escalation_level3_)
      + sizeof(CMsgRequestCrateEscalationLevelResponse::escalation_level3_)
      - PROTOBUF_FIELD_OFFSET(CMsgRequestCrateEscalationLevelResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestCrateEscalationLevelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCCanUseDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCanUseDropRateBonus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_drop_rate_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exclusive_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_allow_equal_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCanUseDropRateBonus)
}
CMsgGCToGCCanUseDropRateBonus::CMsgGCToGCCanUseDropRateBonus(const CMsgGCToGCCanUseDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_equal_rate_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(allow_equal_rate_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCanUseDropRateBonus)
}

void CMsgGCToGCCanUseDropRateBonus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&allow_equal_rate_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(allow_equal_rate_));
}

CMsgGCToGCCanUseDropRateBonus::~CMsgGCToGCCanUseDropRateBonus() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCanUseDropRateBonus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCCanUseDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCCanUseDropRateBonus::ArenaDtor(void* object) {
  CMsgGCToGCCanUseDropRateBonus* _this = reinterpret_cast< CMsgGCToGCCanUseDropRateBonus* >(object);
  (void)_this;
}
void CMsgGCToGCCanUseDropRateBonus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCCanUseDropRateBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCCanUseDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCanUseDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allow_equal_rate_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(allow_equal_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCanUseDropRateBonus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float drop_rate_bonus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_drop_rate_bonus(&has_bits);
          drop_rate_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 booster_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_booster_type(&has_bits);
          booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exclusive_item_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_exclusive_item_def(&has_bits);
          exclusive_item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_equal_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allow_equal_rate(&has_bits);
          allow_equal_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCCanUseDropRateBonus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCanUseDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional float drop_rate_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_drop_rate_bonus(), target);
  }

  // optional uint32 booster_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_booster_type(), target);
  }

  // optional uint32 exclusive_item_def = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_exclusive_item_def(), target);
  }

  // optional bool allow_equal_rate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_equal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCanUseDropRateBonus)
  return target;
}

size_t CMsgGCToGCCanUseDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCanUseDropRateBonus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional float drop_rate_bonus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_booster_type());
    }

    // optional uint32 exclusive_item_def = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exclusive_item_def());
    }

    // optional bool allow_equal_rate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCCanUseDropRateBonus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCCanUseDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCanUseDropRateBonus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCCanUseDropRateBonus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCCanUseDropRateBonus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCCanUseDropRateBonus)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCanUseDropRateBonus::MergeFrom(const CMsgGCToGCCanUseDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCanUseDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      drop_rate_bonus_ = from.drop_rate_bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      booster_type_ = from.booster_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      exclusive_item_def_ = from.exclusive_item_def_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_equal_rate_ = from.allow_equal_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCCanUseDropRateBonus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCCanUseDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCanUseDropRateBonus::CopyFrom(const CMsgGCToGCCanUseDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCanUseDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCanUseDropRateBonus::IsInitialized() const {
  return true;
}

void CMsgGCToGCCanUseDropRateBonus::InternalSwap(CMsgGCToGCCanUseDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, allow_equal_rate_)
      + sizeof(CMsgGCToGCCanUseDropRateBonus::allow_equal_rate_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCCanUseDropRateBonus, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCanUseDropRateBonus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSQLAddDropRateBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLAddDropRateBonus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_drop_rate_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_seconds_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_end_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLAddDropRateBonus)
}
CMsgSQLAddDropRateBonus::CMsgSQLAddDropRateBonus(const CMsgSQLAddDropRateBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_stamp_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(end_time_stamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLAddDropRateBonus)
}

void CMsgSQLAddDropRateBonus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_stamp_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(end_time_stamp_));
}

CMsgSQLAddDropRateBonus::~CMsgSQLAddDropRateBonus() {
  // @@protoc_insertion_point(destructor:CMsgSQLAddDropRateBonus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSQLAddDropRateBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSQLAddDropRateBonus::ArenaDtor(void* object) {
  CMsgSQLAddDropRateBonus* _this = reinterpret_cast< CMsgSQLAddDropRateBonus* >(object);
  (void)_this;
}
void CMsgSQLAddDropRateBonus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSQLAddDropRateBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSQLAddDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLAddDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_stamp_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(end_time_stamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLAddDropRateBonus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float drop_rate_bonus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_drop_rate_bonus(&has_bits);
          drop_rate_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 booster_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_booster_type(&has_bits);
          booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seconds_duration(&has_bits);
          seconds_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_time_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_end_time_stamp(&has_bits);
          end_time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSQLAddDropRateBonus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLAddDropRateBonus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_def(), target);
  }

  // optional float drop_rate_bonus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_drop_rate_bonus(), target);
  }

  // optional uint32 booster_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_booster_type(), target);
  }

  // optional uint32 seconds_duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_seconds_duration(), target);
  }

  // optional uint32 end_time_stamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_end_time_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLAddDropRateBonus)
  return target;
}

size_t CMsgSQLAddDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLAddDropRateBonus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 item_def = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional float drop_rate_bonus = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_booster_type());
    }

    // optional uint32 seconds_duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_duration());
    }

    // optional uint32 end_time_stamp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_time_stamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSQLAddDropRateBonus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSQLAddDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSQLAddDropRateBonus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSQLAddDropRateBonus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSQLAddDropRateBonus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSQLAddDropRateBonus)
    MergeFrom(*source);
  }
}

void CMsgSQLAddDropRateBonus::MergeFrom(const CMsgSQLAddDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLAddDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      drop_rate_bonus_ = from.drop_rate_bonus_;
    }
    if (cached_has_bits & 0x00000010u) {
      booster_type_ = from.booster_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_duration_ = from.seconds_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      end_time_stamp_ = from.end_time_stamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSQLAddDropRateBonus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSQLAddDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSQLAddDropRateBonus::CopyFrom(const CMsgSQLAddDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLAddDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLAddDropRateBonus::IsInitialized() const {
  return true;
}

void CMsgSQLAddDropRateBonus::InternalSwap(CMsgSQLAddDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLAddDropRateBonus, end_time_stamp_)
      + sizeof(CMsgSQLAddDropRateBonus::end_time_stamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLAddDropRateBonus, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLAddDropRateBonus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSQLUpgradeBattleBooster::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLUpgradeBattleBooster>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus_to_add(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_booster_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLUpgradeBattleBooster)
}
CMsgSQLUpgradeBattleBooster::CMsgSQLUpgradeBattleBooster(const CMsgSQLUpgradeBattleBooster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLUpgradeBattleBooster)
}

void CMsgSQLUpgradeBattleBooster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
}

CMsgSQLUpgradeBattleBooster::~CMsgSQLUpgradeBattleBooster() {
  // @@protoc_insertion_point(destructor:CMsgSQLUpgradeBattleBooster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSQLUpgradeBattleBooster::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSQLUpgradeBattleBooster::ArenaDtor(void* object) {
  CMsgSQLUpgradeBattleBooster* _this = reinterpret_cast< CMsgSQLUpgradeBattleBooster* >(object);
  (void)_this;
}
void CMsgSQLUpgradeBattleBooster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSQLUpgradeBattleBooster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSQLUpgradeBattleBooster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLUpgradeBattleBooster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&booster_type_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLUpgradeBattleBooster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float bonus_to_add = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_bonus_to_add(&has_bits);
          bonus_to_add_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 booster_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_booster_type(&has_bits);
          booster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSQLUpgradeBattleBooster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLUpgradeBattleBooster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 item_def = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def(), target);
  }

  // optional float bonus_to_add = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_bonus_to_add(), target);
  }

  // optional uint32 booster_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_booster_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLUpgradeBattleBooster)
  return target;
}

size_t CMsgSQLUpgradeBattleBooster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLUpgradeBattleBooster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 item_def = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional float bonus_to_add = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 booster_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_booster_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSQLUpgradeBattleBooster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSQLUpgradeBattleBooster)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSQLUpgradeBattleBooster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSQLUpgradeBattleBooster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSQLUpgradeBattleBooster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSQLUpgradeBattleBooster)
    MergeFrom(*source);
  }
}

void CMsgSQLUpgradeBattleBooster::MergeFrom(const CMsgSQLUpgradeBattleBooster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLUpgradeBattleBooster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_to_add_ = from.bonus_to_add_;
    }
    if (cached_has_bits & 0x00000008u) {
      booster_type_ = from.booster_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSQLUpgradeBattleBooster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSQLUpgradeBattleBooster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSQLUpgradeBattleBooster::CopyFrom(const CMsgSQLUpgradeBattleBooster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLUpgradeBattleBooster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLUpgradeBattleBooster::IsInitialized() const {
  return true;
}

void CMsgSQLUpgradeBattleBooster::InternalSwap(CMsgSQLUpgradeBattleBooster* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLUpgradeBattleBooster, booster_type_)
      + sizeof(CMsgSQLUpgradeBattleBooster::booster_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLUpgradeBattleBooster, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLUpgradeBattleBooster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCRefreshSOCache::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCRefreshSOCache>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCRefreshSOCache)
}
CMsgGCToGCRefreshSOCache::CMsgGCToGCRefreshSOCache(const CMsgGCToGCRefreshSOCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reload_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reload_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCRefreshSOCache)
}

void CMsgGCToGCRefreshSOCache::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reload_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reload_));
}

CMsgGCToGCRefreshSOCache::~CMsgGCToGCRefreshSOCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCRefreshSOCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCRefreshSOCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCRefreshSOCache::ArenaDtor(void* object) {
  CMsgGCToGCRefreshSOCache* _this = reinterpret_cast< CMsgGCToGCRefreshSOCache* >(object);
  (void)_this;
}
void CMsgGCToGCRefreshSOCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCRefreshSOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCRefreshSOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCRefreshSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reload_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(reload_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCRefreshSOCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reload(&has_bits);
          reload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCRefreshSOCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCRefreshSOCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool reload = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_reload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCRefreshSOCache)
  return target;
}

size_t CMsgGCToGCRefreshSOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCRefreshSOCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool reload = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCRefreshSOCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCRefreshSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCRefreshSOCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCRefreshSOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCRefreshSOCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCRefreshSOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCRefreshSOCache::MergeFrom(const CMsgGCToGCRefreshSOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCRefreshSOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      reload_ = from.reload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCRefreshSOCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCRefreshSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCRefreshSOCache::CopyFrom(const CMsgGCToGCRefreshSOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCRefreshSOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCRefreshSOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCRefreshSOCache::InternalSwap(CMsgGCToGCRefreshSOCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, reload_)
      + sizeof(CMsgGCToGCRefreshSOCache::reload_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCRefreshSOCache, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCRefreshSOCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCCheckAccountTradeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCheckAccountTradeStatus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCCheckAccountTradeStatus::CMsgGCToGCCheckAccountTradeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCheckAccountTradeStatus)
}
CMsgGCToGCCheckAccountTradeStatus::CMsgGCToGCCheckAccountTradeStatus(const CMsgGCToGCCheckAccountTradeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&initiator_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(initiator_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCheckAccountTradeStatus)
}

void CMsgGCToGCCheckAccountTradeStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initiator_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(initiator_));
}

CMsgGCToGCCheckAccountTradeStatus::~CMsgGCToGCCheckAccountTradeStatus() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCheckAccountTradeStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCCheckAccountTradeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCCheckAccountTradeStatus::ArenaDtor(void* object) {
  CMsgGCToGCCheckAccountTradeStatus* _this = reinterpret_cast< CMsgGCToGCCheckAccountTradeStatus* >(object);
  (void)_this;
}
void CMsgGCToGCCheckAccountTradeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCCheckAccountTradeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCCheckAccountTradeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCheckAccountTradeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initiator_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(initiator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCheckAccountTradeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool initiator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_initiator(&has_bits);
          initiator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCCheckAccountTradeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCheckAccountTradeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool initiator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_initiator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCheckAccountTradeStatus)
  return target;
}

size_t CMsgGCToGCCheckAccountTradeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCheckAccountTradeStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool initiator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCCheckAccountTradeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCCheckAccountTradeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCheckAccountTradeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCCheckAccountTradeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCCheckAccountTradeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCCheckAccountTradeStatus)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCheckAccountTradeStatus::MergeFrom(const CMsgGCToGCCheckAccountTradeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCheckAccountTradeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      initiator_ = from.initiator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCCheckAccountTradeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCCheckAccountTradeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatus::CopyFrom(const CMsgGCToGCCheckAccountTradeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCheckAccountTradeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCheckAccountTradeStatus::IsInitialized() const {
  return true;
}

void CMsgGCToGCCheckAccountTradeStatus::InternalSwap(CMsgGCToGCCheckAccountTradeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, initiator_)
      + sizeof(CMsgGCToGCCheckAccountTradeStatus::initiator_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatus, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCheckAccountTradeStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCCheckAccountTradeStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCheckAccountTradeStatusResponse>()._has_bits_);
  static void set_has_can_trade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCCheckAccountTradeStatusResponse::CMsgGCToGCCheckAccountTradeStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCheckAccountTradeStatusResponse)
}
CMsgGCToGCCheckAccountTradeStatusResponse::CMsgGCToGCCheckAccountTradeStatusResponse(const CMsgGCToGCCheckAccountTradeStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&can_trade_, &from.can_trade_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&can_trade_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCheckAccountTradeStatusResponse)
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&can_trade_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&can_trade_)) + sizeof(error_code_));
}

CMsgGCToGCCheckAccountTradeStatusResponse::~CMsgGCToGCCheckAccountTradeStatusResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCheckAccountTradeStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCCheckAccountTradeStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCCheckAccountTradeStatusResponse::ArenaDtor(void* object) {
  CMsgGCToGCCheckAccountTradeStatusResponse* _this = reinterpret_cast< CMsgGCToGCCheckAccountTradeStatusResponse* >(object);
  (void)_this;
}
void CMsgGCToGCCheckAccountTradeStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCCheckAccountTradeStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCCheckAccountTradeStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&can_trade_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_code_) -
        reinterpret_cast<char*>(&can_trade_)) + sizeof(error_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCheckAccountTradeStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool can_trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_trade(&has_bits);
          can_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_error_code(&has_bits);
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCCheckAccountTradeStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_trade = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_can_trade(), target);
  }

  // optional uint32 error_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCheckAccountTradeStatusResponse)
  return target;
}

size_t CMsgGCToGCCheckAccountTradeStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool can_trade = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 error_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCCheckAccountTradeStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCCheckAccountTradeStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCCheckAccountTradeStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCCheckAccountTradeStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCCheckAccountTradeStatusResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCCheckAccountTradeStatusResponse::MergeFrom(const CMsgGCToGCCheckAccountTradeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      can_trade_ = from.can_trade_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCCheckAccountTradeStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCCheckAccountTradeStatusResponse::CopyFrom(const CMsgGCToGCCheckAccountTradeStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCheckAccountTradeStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCheckAccountTradeStatusResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCCheckAccountTradeStatusResponse::InternalSwap(CMsgGCToGCCheckAccountTradeStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, error_code_)
      + sizeof(CMsgGCToGCCheckAccountTradeStatusResponse::error_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCCheckAccountTradeStatusResponse, can_trade_)>(
          reinterpret_cast<char*>(&can_trade_),
          reinterpret_cast<char*>(&other->can_trade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCheckAccountTradeStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCAddSubscriptionTime::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCAddSubscriptionTime>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_additional_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matching_subscription_def_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCAddSubscriptionTime)
}
CMsgGCToGCAddSubscriptionTime::CMsgGCToGCAddSubscriptionTime(const CMsgGCToGCAddSubscriptionTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matching_subscription_def_indexes_(from.matching_subscription_def_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&additional_seconds_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(additional_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCAddSubscriptionTime)
}

void CMsgGCToGCAddSubscriptionTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&additional_seconds_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(additional_seconds_));
}

CMsgGCToGCAddSubscriptionTime::~CMsgGCToGCAddSubscriptionTime() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCAddSubscriptionTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCAddSubscriptionTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCAddSubscriptionTime::ArenaDtor(void* object) {
  CMsgGCToGCAddSubscriptionTime* _this = reinterpret_cast< CMsgGCToGCAddSubscriptionTime* >(object);
  (void)_this;
}
void CMsgGCToGCAddSubscriptionTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCAddSubscriptionTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCAddSubscriptionTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCAddSubscriptionTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matching_subscription_def_indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&additional_seconds_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(additional_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCAddSubscriptionTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 matching_subscription_def_indexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_matching_subscription_def_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_matching_subscription_def_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 additional_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_additional_seconds(&has_bits);
          additional_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCAddSubscriptionTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCAddSubscriptionTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 matching_subscription_def_indexes = 2;
  for (int i = 0, n = this->_internal_matching_subscription_def_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matching_subscription_def_indexes(i), target);
  }

  // optional uint32 additional_seconds = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_additional_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCAddSubscriptionTime)
  return target;
}

size_t CMsgGCToGCAddSubscriptionTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCAddSubscriptionTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 matching_subscription_def_indexes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->matching_subscription_def_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_matching_subscription_def_indexes_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 additional_seconds = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_additional_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCAddSubscriptionTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCAddSubscriptionTime)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCAddSubscriptionTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCAddSubscriptionTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCAddSubscriptionTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCAddSubscriptionTime)
    MergeFrom(*source);
  }
}

void CMsgGCToGCAddSubscriptionTime::MergeFrom(const CMsgGCToGCAddSubscriptionTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCAddSubscriptionTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matching_subscription_def_indexes_.MergeFrom(from.matching_subscription_def_indexes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      additional_seconds_ = from.additional_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCAddSubscriptionTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCAddSubscriptionTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCAddSubscriptionTime::CopyFrom(const CMsgGCToGCAddSubscriptionTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCAddSubscriptionTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCAddSubscriptionTime::IsInitialized() const {
  return true;
}

void CMsgGCToGCAddSubscriptionTime::InternalSwap(CMsgGCToGCAddSubscriptionTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matching_subscription_def_indexes_.InternalSwap(&other->matching_subscription_def_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCAddSubscriptionTime, additional_seconds_)
      + sizeof(CMsgGCToGCAddSubscriptionTime::additional_seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCAddSubscriptionTime, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCAddSubscriptionTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
}
CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute(const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value_string()) {
    value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_string(), 
      GetArena());
  }
  ::memcpy(&value_uint32_, &from.value_uint32_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_float_) -
    reinterpret_cast<char*>(&value_uint32_)) + sizeof(value_float_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_uint32_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_float_) -
    reinterpret_cast<char*>(&value_uint32_)) + sizeof(value_float_));
}

CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::~CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::ArenaDtor(void* object) {
  CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* _this = reinterpret_cast< CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* >(object);
  (void)_this;
}
void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_string_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&value_uint32_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_float_) -
        reinterpret_cast<char*>(&value_uint32_)) + sizeof(value_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value_uint32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value_uint32(&has_bits);
          value_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_value_float(&has_bits);
          value_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.value_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 value_uint32 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value_uint32(), target);
  }

  // optional float value_float = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_value_float(), target);
  }

  // optional string value_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value_string().data(), static_cast<int>(this->_internal_value_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute.value_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value_string = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value_string());
    }

    // optional uint32 value_uint32 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value_uint32());
    }

    // optional float value_float = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::MergeFrom(const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value_string(from._internal_value_string());
    }
    if (cached_has_bits & 0x00000004u) {
      value_uint32_ = from.value_uint32_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_float_ = from.value_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_string_.Swap(&other->value_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, value_float_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::value_float_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute, value_uint32_)>(
          reinterpret_cast<char*>(&value_uint32_),
          reinterpret_cast<char*>(&other->value_uint32_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>()._has_bits_);
  static void set_has_owner_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
}
CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry(const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_account_id_, &from.owner_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(audit_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&owner_account_id_)) + sizeof(audit_data_));
}

CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::~CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::ArenaDtor(void* object) {
  CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* _this = reinterpret_cast< CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* >(object);
  (void)_this;
}
void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&owner_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_data_) -
        reinterpret_cast<char*>(&owner_account_id_)) + sizeof(audit_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 owner_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_account_id(&has_bits);
          owner_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_audit_action(&has_bits);
          audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 audit_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_audit_data(&has_bits);
          audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_account_id(), target);
  }

  // optional uint32 audit_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_audit_action(), target);
  }

  // optional uint64 audit_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 owner_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_account_id());
    }

    // optional uint32 audit_action = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_action());
    }

    // optional uint64 audit_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_audit_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::MergeFrom(const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      audit_action_ = from.audit_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      audit_data_ = from.audit_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, audit_data_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::audit_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry, owner_account_id_)>(
          reinterpret_cast<char*>(&owner_account_id_),
          reinterpret_cast<char*>(&other->owner_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGrantAccountRolledItems_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems_Item>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inventory_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loot_lists_(arena),
  dynamic_attributes_(arena),
  additional_audit_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems.Item)
}
CMsgGCToGCGrantAccountRolledItems_Item::CMsgGCToGCGrantAccountRolledItems_Item(const CMsgGCToGCGrantAccountRolledItems_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      loot_lists_(from.loot_lists_),
      dynamic_attributes_(from.dynamic_attributes_),
      additional_audit_entries_(from.additional_audit_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&inventory_token_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(inventory_token_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems.Item)
}

void CMsgGCToGCGrantAccountRolledItems_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inventory_token_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(inventory_token_));
}

CMsgGCToGCGrantAccountRolledItems_Item::~CMsgGCToGCGrantAccountRolledItems_Item() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGrantAccountRolledItems_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGrantAccountRolledItems_Item::ArenaDtor(void* object) {
  CMsgGCToGCGrantAccountRolledItems_Item* _this = reinterpret_cast< CMsgGCToGCGrantAccountRolledItems_Item* >(object);
  (void)_this;
}
void CMsgGCToGCGrantAccountRolledItems_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGrantAccountRolledItems_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loot_lists_.Clear();
  dynamic_attributes_.Clear();
  additional_audit_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inventory_token_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(inventory_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string loot_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loot_lists();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCGrantAccountRolledItems.Item.loot_lists");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool ignore_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ignore_limit(&has_bits);
          ignore_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 origin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_origin(&has_bits);
          origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynamic_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 inventory_token = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_inventory_token(&has_bits);
          inventory_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGrantAccountRolledItems_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // repeated string loot_lists = 2;
  for (int i = 0, n = this->_internal_loot_lists_size(); i < n; i++) {
    const auto& s = this->_internal_loot_lists(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCGrantAccountRolledItems.Item.loot_lists");
    target = stream->WriteString(2, s, target);
  }

  // optional bool ignore_limit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_ignore_limit(), target);
  }

  // optional uint32 origin = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_origin(), target);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dynamic_attributes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dynamic_attributes(i), target, stream);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_audit_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_additional_audit_entries(i), target, stream);
  }

  // optional uint32 inventory_token = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_inventory_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems.Item)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loot_lists = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loot_lists_.size());
  for (int i = 0, n = loot_lists_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loot_lists_.Get(i));
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.DynamicAttribute dynamic_attributes = 5;
  total_size += 1UL * this->_internal_dynamic_attributes_size();
  for (const auto& msg : this->dynamic_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item.AdditionalAuditEntry additional_audit_entries = 6;
  total_size += 1UL * this->_internal_additional_audit_entries_size();
  for (const auto& msg : this->additional_audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional bool ignore_limit = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 origin = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_origin());
    }

    // optional uint32 inventory_token = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventory_token());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGrantAccountRolledItems_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGrantAccountRolledItems_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGrantAccountRolledItems_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGrantAccountRolledItems.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGrantAccountRolledItems.Item)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item::MergeFrom(const CMsgGCToGCGrantAccountRolledItems_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loot_lists_.MergeFrom(from.loot_lists_);
  dynamic_attributes_.MergeFrom(from.dynamic_attributes_);
  additional_audit_entries_.MergeFrom(from.additional_audit_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      ignore_limit_ = from.ignore_limit_;
    }
    if (cached_has_bits & 0x00000004u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_token_ = from.inventory_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGrantAccountRolledItems_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantAccountRolledItems_Item::CopyFrom(const CMsgGCToGCGrantAccountRolledItems_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems_Item::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems_Item::InternalSwap(CMsgGCToGCGrantAccountRolledItems_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  loot_lists_.InternalSwap(&other->loot_lists_);
  dynamic_attributes_.InternalSwap(&other->dynamic_attributes_);
  additional_audit_entries_.InternalSwap(&other->additional_audit_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item, inventory_token_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems_Item::inventory_token_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems_Item, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGrantAccountRolledItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantAccountRolledItems>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantAccountRolledItems)
}
CMsgGCToGCGrantAccountRolledItems::CMsgGCToGCGrantAccountRolledItems(const CMsgGCToGCGrantAccountRolledItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(audit_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantAccountRolledItems)
}

void CMsgGCToGCGrantAccountRolledItems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(audit_data_));
}

CMsgGCToGCGrantAccountRolledItems::~CMsgGCToGCGrantAccountRolledItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantAccountRolledItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGrantAccountRolledItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGrantAccountRolledItems::ArenaDtor(void* object) {
  CMsgGCToGCGrantAccountRolledItems* _this = reinterpret_cast< CMsgGCToGCGrantAccountRolledItems* >(object);
  (void)_this;
}
void CMsgGCToGCGrantAccountRolledItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGrantAccountRolledItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGrantAccountRolledItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantAccountRolledItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_data_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(audit_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantAccountRolledItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 audit_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_audit_action(&has_bits);
          audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 audit_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_audit_data(&has_bits);
          audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGrantAccountRolledItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantAccountRolledItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  // optional uint32 audit_action = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit_action(), target);
  }

  // optional uint64 audit_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantAccountRolledItems)
  return target;
}

size_t CMsgGCToGCGrantAccountRolledItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantAccountRolledItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCGrantAccountRolledItems.Item items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 audit_action = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_action());
    }

    // optional uint64 audit_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_audit_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGrantAccountRolledItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGrantAccountRolledItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGrantAccountRolledItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGrantAccountRolledItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGrantAccountRolledItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGrantAccountRolledItems)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantAccountRolledItems::MergeFrom(const CMsgGCToGCGrantAccountRolledItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantAccountRolledItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      audit_action_ = from.audit_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      audit_data_ = from.audit_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGrantAccountRolledItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGrantAccountRolledItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantAccountRolledItems::CopyFrom(const CMsgGCToGCGrantAccountRolledItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantAccountRolledItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantAccountRolledItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantAccountRolledItems::InternalSwap(CMsgGCToGCGrantAccountRolledItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems, audit_data_)
      + sizeof(CMsgGCToGCGrantAccountRolledItems::audit_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantAccountRolledItems, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantAccountRolledItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCBetaDeleteItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBetaDeleteItems>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena),
  item_defs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBetaDeleteItems)
}
CMsgGCToGCBetaDeleteItems::CMsgGCToGCBetaDeleteItems(const CMsgGCToGCBetaDeleteItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_),
      item_defs_(from.item_defs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBetaDeleteItems)
}

void CMsgGCToGCBetaDeleteItems::SharedCtor() {
account_id_ = 0u;
}

CMsgGCToGCBetaDeleteItems::~CMsgGCToGCBetaDeleteItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBetaDeleteItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCBetaDeleteItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCBetaDeleteItems::ArenaDtor(void* object) {
  CMsgGCToGCBetaDeleteItems* _this = reinterpret_cast< CMsgGCToGCBetaDeleteItems* >(object);
  (void)_this;
}
void CMsgGCToGCBetaDeleteItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBetaDeleteItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBetaDeleteItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBetaDeleteItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  item_defs_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBetaDeleteItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 item_defs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBetaDeleteItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBetaDeleteItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  // repeated uint32 item_defs = 3;
  for (int i = 0, n = this->_internal_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBetaDeleteItems)
  return target;
}

size_t CMsgGCToGCBetaDeleteItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBetaDeleteItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // repeated uint32 item_defs = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_defs_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCBetaDeleteItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCBetaDeleteItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBetaDeleteItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCBetaDeleteItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCBetaDeleteItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCBetaDeleteItems)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBetaDeleteItems::MergeFrom(const CMsgGCToGCBetaDeleteItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBetaDeleteItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  item_defs_.MergeFrom(from.item_defs_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGCToGCBetaDeleteItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCBetaDeleteItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBetaDeleteItems::CopyFrom(const CMsgGCToGCBetaDeleteItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBetaDeleteItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBetaDeleteItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCBetaDeleteItems::InternalSwap(CMsgGCToGCBetaDeleteItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  item_defs_.InternalSwap(&other->item_defs_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBetaDeleteItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGrantSelfMadeItemToAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGrantSelfMadeItemToAccount>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGrantSelfMadeItemToAccount)
}
CMsgGCToGCGrantSelfMadeItemToAccount::CMsgGCToGCGrantSelfMadeItemToAccount(const CMsgGCToGCGrantSelfMadeItemToAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(accountid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGrantSelfMadeItemToAccount)
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accountid_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(accountid_));
}

CMsgGCToGCGrantSelfMadeItemToAccount::~CMsgGCToGCGrantSelfMadeItemToAccount() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGrantSelfMadeItemToAccount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGrantSelfMadeItemToAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::ArenaDtor(void* object) {
  CMsgGCToGCGrantSelfMadeItemToAccount* _this = reinterpret_cast< CMsgGCToGCGrantSelfMadeItemToAccount* >(object);
  (void)_this;
}
void CMsgGCToGCGrantSelfMadeItemToAccount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGrantSelfMadeItemToAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accountid_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(accountid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGrantSelfMadeItemToAccount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGrantSelfMadeItemToAccount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional uint32 accountid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGrantSelfMadeItemToAccount)
  return target;
}

size_t CMsgGCToGCGrantSelfMadeItemToAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional uint32 accountid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGrantSelfMadeItemToAccount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGrantSelfMadeItemToAccount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGrantSelfMadeItemToAccount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGrantSelfMadeItemToAccount)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGrantSelfMadeItemToAccount::MergeFrom(const CMsgGCToGCGrantSelfMadeItemToAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCGrantSelfMadeItemToAccount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGrantSelfMadeItemToAccount::CopyFrom(const CMsgGCToGCGrantSelfMadeItemToAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGrantSelfMadeItemToAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGrantSelfMadeItemToAccount::IsInitialized() const {
  return true;
}

void CMsgGCToGCGrantSelfMadeItemToAccount::InternalSwap(CMsgGCToGCGrantSelfMadeItemToAccount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, accountid_)
      + sizeof(CMsgGCToGCGrantSelfMadeItemToAccount::accountid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCGrantSelfMadeItemToAccount, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGrantSelfMadeItemToAccount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUseItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duel__class_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initiator_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itempack__ack_immediately(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgUseItem::CMsgUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  gift__potential_targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUseItem)
}
CMsgUseItem::CMsgUseItem(const CMsgUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      gift__potential_targets_(from.gift__potential_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&itempack__ack_immediately_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(itempack__ack_immediately_));
  // @@protoc_insertion_point(copy_constructor:CMsgUseItem)
}

void CMsgUseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itempack__ack_immediately_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(itempack__ack_immediately_));
}

CMsgUseItem::~CMsgUseItem() {
  // @@protoc_insertion_point(destructor:CMsgUseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgUseItem::ArenaDtor(void* object) {
  CMsgUseItem* _this = reinterpret_cast< CMsgUseItem* >(object);
  (void)_this;
}
void CMsgUseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gift__potential_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itempack__ack_immediately_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(itempack__ack_immediately_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 target_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_target_steam_id(&has_bits);
          target_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gift__potential_targets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_gift__potential_targets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gift__potential_targets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duel__class_lock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duel__class_lock(&has_bits);
          duel__class_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 initiator_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_initiator_steam_id(&has_bits);
          initiator_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool itempack__ack_immediately = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_itempack__ack_immediately(&has_bits);
          itempack__ack_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional fixed64 target_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_target_steam_id(), target);
  }

  // repeated uint32 gift__potential_targets = 3;
  for (int i = 0, n = this->_internal_gift__potential_targets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gift__potential_targets(i), target);
  }

  // optional uint32 duel__class_lock = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_duel__class_lock(), target);
  }

  // optional uint64 initiator_steam_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_initiator_steam_id(), target);
  }

  // optional bool itempack__ack_immediately = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_itempack__ack_immediately(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUseItem)
  return target;
}

size_t CMsgUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gift__potential_targets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gift__potential_targets_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gift__potential_targets_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional fixed64 target_steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 initiator_steam_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_initiator_steam_id());
    }

    // optional uint32 duel__class_lock = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duel__class_lock());
    }

    // optional bool itempack__ack_immediately = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUseItem)
    MergeFrom(*source);
  }
}

void CMsgUseItem::MergeFrom(const CMsgUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gift__potential_targets_.MergeFrom(from.gift__potential_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_steam_id_ = from.target_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      initiator_steam_id_ = from.initiator_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      duel__class_lock_ = from.duel__class_lock_;
    }
    if (cached_has_bits & 0x00000010u) {
      itempack__ack_immediately_ = from.itempack__ack_immediately_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUseItem::CopyFrom(const CMsgUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseItem::IsInitialized() const {
  return true;
}

void CMsgUseItem::InternalSwap(CMsgUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gift__potential_targets_.InternalSwap(&other->gift__potential_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUseItem, itempack__ack_immediately_)
      + sizeof(CMsgUseItem::itempack__ack_immediately_)
      - PROTOBUF_FIELD_OFFSET(CMsgUseItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerUseItem>()._has_bits_);
  static void set_has_initiator_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgUseItem& use_item_msg(const CMsgServerUseItem* msg);
  static void set_has_use_item_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgUseItem&
CMsgServerUseItem::_Internal::use_item_msg(const CMsgServerUseItem* msg) {
  return *msg->use_item_msg_;
}
CMsgServerUseItem::CMsgServerUseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerUseItem)
}
CMsgServerUseItem::CMsgServerUseItem(const CMsgServerUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_use_item_msg()) {
    use_item_msg_ = new ::CMsgUseItem(*from.use_item_msg_);
  } else {
    use_item_msg_ = nullptr;
  }
  initiator_account_id_ = from.initiator_account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerUseItem)
}

void CMsgServerUseItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_item_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initiator_account_id_) -
    reinterpret_cast<char*>(&use_item_msg_)) + sizeof(initiator_account_id_));
}

CMsgServerUseItem::~CMsgServerUseItem() {
  // @@protoc_insertion_point(destructor:CMsgServerUseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerUseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete use_item_msg_;
}

void CMsgServerUseItem::ArenaDtor(void* object) {
  CMsgServerUseItem* _this = reinterpret_cast< CMsgServerUseItem* >(object);
  (void)_this;
}
void CMsgServerUseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(use_item_msg_ != nullptr);
    use_item_msg_->Clear();
  }
  initiator_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 initiator_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_initiator_account_id(&has_bits);
          initiator_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgUseItem use_item_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_item_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerUseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 initiator_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_initiator_account_id(), target);
  }

  // optional .CMsgUseItem use_item_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::use_item_msg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerUseItem)
  return target;
}

size_t CMsgServerUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerUseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgUseItem use_item_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *use_item_msg_);
    }

    // optional uint32 initiator_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initiator_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerUseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerUseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerUseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerUseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerUseItem)
    MergeFrom(*source);
  }
}

void CMsgServerUseItem::MergeFrom(const CMsgServerUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_use_item_msg()->::CMsgUseItem::MergeFrom(from._internal_use_item_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      initiator_account_id_ = from.initiator_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerUseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerUseItem::CopyFrom(const CMsgServerUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerUseItem::IsInitialized() const {
  return true;
}

void CMsgServerUseItem::InternalSwap(CMsgServerUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerUseItem, initiator_account_id_)
      + sizeof(CMsgServerUseItem::initiator_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerUseItem, use_item_msg_)>(
          reinterpret_cast<char*>(&use_item_msg_),
          reinterpret_cast<char*>(&other->use_item_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerUseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUseMultipleItems::_Internal {
 public:
};

CMsgUseMultipleItems::CMsgUseMultipleItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUseMultipleItems)
}
CMsgUseMultipleItems::CMsgUseMultipleItems(const CMsgUseMultipleItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgUseMultipleItems)
}

void CMsgUseMultipleItems::SharedCtor() {
}

CMsgUseMultipleItems::~CMsgUseMultipleItems() {
  // @@protoc_insertion_point(destructor:CMsgUseMultipleItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUseMultipleItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgUseMultipleItems::ArenaDtor(void* object) {
  CMsgUseMultipleItems* _this = reinterpret_cast< CMsgUseMultipleItems* >(object);
  (void)_this;
}
void CMsgUseMultipleItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUseMultipleItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUseMultipleItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUseMultipleItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUseMultipleItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUseMultipleItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUseMultipleItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUseMultipleItems)
  return target;
}

size_t CMsgUseMultipleItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUseMultipleItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUseMultipleItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUseMultipleItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUseMultipleItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUseMultipleItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUseMultipleItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUseMultipleItems)
    MergeFrom(*source);
  }
}

void CMsgUseMultipleItems::MergeFrom(const CMsgUseMultipleItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUseMultipleItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
}

void CMsgUseMultipleItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUseMultipleItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUseMultipleItems::CopyFrom(const CMsgUseMultipleItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUseMultipleItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUseMultipleItems::IsInitialized() const {
  return true;
}

void CMsgUseMultipleItems::InternalSwap(CMsgUseMultipleItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  item_ids_.InternalSwap(&other->item_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUseMultipleItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCPartnerBalanceRequest::_Internal {
 public:
};

CMsgGCPartnerBalanceRequest::CMsgGCPartnerBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCPartnerBalanceRequest)
}
CMsgGCPartnerBalanceRequest::CMsgGCPartnerBalanceRequest(const CMsgGCPartnerBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCPartnerBalanceRequest)
}

void CMsgGCPartnerBalanceRequest::SharedCtor() {
}

CMsgGCPartnerBalanceRequest::~CMsgGCPartnerBalanceRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCPartnerBalanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCPartnerBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCPartnerBalanceRequest::ArenaDtor(void* object) {
  CMsgGCPartnerBalanceRequest* _this = reinterpret_cast< CMsgGCPartnerBalanceRequest* >(object);
  (void)_this;
}
void CMsgGCPartnerBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCPartnerBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCPartnerBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCPartnerBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCPartnerBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCPartnerBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPartnerBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPartnerBalanceRequest)
  return target;
}

size_t CMsgGCPartnerBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCPartnerBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCPartnerBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCPartnerBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPartnerBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCPartnerBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCPartnerBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCPartnerBalanceRequest)
    MergeFrom(*source);
  }
}

void CMsgGCPartnerBalanceRequest::MergeFrom(const CMsgGCPartnerBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCPartnerBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCPartnerBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCPartnerBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPartnerBalanceRequest::CopyFrom(const CMsgGCPartnerBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCPartnerBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPartnerBalanceRequest::IsInitialized() const {
  return true;
}

void CMsgGCPartnerBalanceRequest::InternalSwap(CMsgGCPartnerBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCPartnerBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCPartnerBalanceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCPartnerBalanceResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCPartnerBalanceResponse::CMsgGCPartnerBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCPartnerBalanceResponse)
}
CMsgGCPartnerBalanceResponse::CMsgGCPartnerBalanceResponse(const CMsgGCPartnerBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCPartnerBalanceResponse)
}

void CMsgGCPartnerBalanceResponse::SharedCtor() {
balance_ = 0u;
result_ = 1;
}

CMsgGCPartnerBalanceResponse::~CMsgGCPartnerBalanceResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCPartnerBalanceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCPartnerBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCPartnerBalanceResponse::ArenaDtor(void* object) {
  CMsgGCPartnerBalanceResponse* _this = reinterpret_cast< CMsgGCPartnerBalanceResponse* >(object);
  (void)_this;
}
void CMsgGCPartnerBalanceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCPartnerBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCPartnerBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCPartnerBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    balance_ = 0u;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCPartnerBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPartnerRequestResponse_IsValid(val))) {
            _internal_set_result(static_cast<::EGCPartnerRequestResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCPartnerBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPartnerBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 balance = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPartnerBalanceResponse)
  return target;
}

size_t CMsgGCPartnerBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCPartnerBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 balance = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance());
    }

    // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCPartnerBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCPartnerBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPartnerBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCPartnerBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCPartnerBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCPartnerBalanceResponse)
    MergeFrom(*source);
  }
}

void CMsgGCPartnerBalanceResponse::MergeFrom(const CMsgGCPartnerBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCPartnerBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCPartnerBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCPartnerBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPartnerBalanceResponse::CopyFrom(const CMsgGCPartnerBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCPartnerBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPartnerBalanceResponse::IsInitialized() const {
  return true;
}

void CMsgGCPartnerBalanceResponse::InternalSwap(CMsgGCPartnerBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(balance_, other->balance_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCPartnerBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGCStoreRechargeRedirect_LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCStoreRechargeRedirect_LineItem>()._has_bits_);
  static void set_has_item_def_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGCStoreRechargeRedirect_LineItem)
}
CGCStoreRechargeRedirect_LineItem::CGCStoreRechargeRedirect_LineItem(const CGCStoreRechargeRedirect_LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_id_, &from.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:CGCStoreRechargeRedirect_LineItem)
}

void CGCStoreRechargeRedirect_LineItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(quantity_));
}

CGCStoreRechargeRedirect_LineItem::~CGCStoreRechargeRedirect_LineItem() {
  // @@protoc_insertion_point(destructor:CGCStoreRechargeRedirect_LineItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGCStoreRechargeRedirect_LineItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGCStoreRechargeRedirect_LineItem::ArenaDtor(void* object) {
  CGCStoreRechargeRedirect_LineItem* _this = reinterpret_cast< CGCStoreRechargeRedirect_LineItem* >(object);
  (void)_this;
}
void CGCStoreRechargeRedirect_LineItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCStoreRechargeRedirect_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCStoreRechargeRedirect_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCStoreRechargeRedirect_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&item_def_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCStoreRechargeRedirect_LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_id(&has_bits);
          item_def_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGCStoreRechargeRedirect_LineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCStoreRechargeRedirect_LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCStoreRechargeRedirect_LineItem)
  return target;
}

size_t CGCStoreRechargeRedirect_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCStoreRechargeRedirect_LineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCStoreRechargeRedirect_LineItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGCStoreRechargeRedirect_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCStoreRechargeRedirect_LineItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGCStoreRechargeRedirect_LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGCStoreRechargeRedirect_LineItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGCStoreRechargeRedirect_LineItem)
    MergeFrom(*source);
  }
}

void CGCStoreRechargeRedirect_LineItem::MergeFrom(const CGCStoreRechargeRedirect_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCStoreRechargeRedirect_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_id_ = from.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCStoreRechargeRedirect_LineItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGCStoreRechargeRedirect_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCStoreRechargeRedirect_LineItem::CopyFrom(const CGCStoreRechargeRedirect_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCStoreRechargeRedirect_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStoreRechargeRedirect_LineItem::IsInitialized() const {
  return true;
}

void CGCStoreRechargeRedirect_LineItem::InternalSwap(CGCStoreRechargeRedirect_LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCStoreRechargeRedirect_LineItem, quantity_)
      + sizeof(CGCStoreRechargeRedirect_LineItem::quantity_)
      - PROTOBUF_FIELD_OFFSET(CGCStoreRechargeRedirect_LineItem, item_def_id_)>(
          reinterpret_cast<char*>(&item_def_id_),
          reinterpret_cast<char*>(&other->item_def_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCStoreRechargeRedirect_LineItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCPartnerRechargeRedirectURLRequest::_Internal {
 public:
};

CMsgGCPartnerRechargeRedirectURLRequest::CMsgGCPartnerRechargeRedirectURLRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  line_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCPartnerRechargeRedirectURLRequest)
}
CMsgGCPartnerRechargeRedirectURLRequest::CMsgGCPartnerRechargeRedirectURLRequest(const CMsgGCPartnerRechargeRedirectURLRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCPartnerRechargeRedirectURLRequest)
}

void CMsgGCPartnerRechargeRedirectURLRequest::SharedCtor() {
}

CMsgGCPartnerRechargeRedirectURLRequest::~CMsgGCPartnerRechargeRedirectURLRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCPartnerRechargeRedirectURLRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCPartnerRechargeRedirectURLRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCPartnerRechargeRedirectURLRequest::ArenaDtor(void* object) {
  CMsgGCPartnerRechargeRedirectURLRequest* _this = reinterpret_cast< CMsgGCPartnerRechargeRedirectURLRequest* >(object);
  (void)_this;
}
void CMsgGCPartnerRechargeRedirectURLRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCPartnerRechargeRedirectURLRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCPartnerRechargeRedirectURLRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCPartnerRechargeRedirectURLRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCPartnerRechargeRedirectURLRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGCStoreRechargeRedirect_LineItem line_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_line_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCPartnerRechargeRedirectURLRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPartnerRechargeRedirectURLRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCStoreRechargeRedirect_LineItem line_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_line_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_line_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPartnerRechargeRedirectURLRequest)
  return target;
}

size_t CMsgGCPartnerRechargeRedirectURLRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCPartnerRechargeRedirectURLRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCStoreRechargeRedirect_LineItem line_items = 1;
  total_size += 1UL * this->_internal_line_items_size();
  for (const auto& msg : this->line_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCPartnerRechargeRedirectURLRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCPartnerRechargeRedirectURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPartnerRechargeRedirectURLRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCPartnerRechargeRedirectURLRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCPartnerRechargeRedirectURLRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCPartnerRechargeRedirectURLRequest)
    MergeFrom(*source);
  }
}

void CMsgGCPartnerRechargeRedirectURLRequest::MergeFrom(const CMsgGCPartnerRechargeRedirectURLRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCPartnerRechargeRedirectURLRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
}

void CMsgGCPartnerRechargeRedirectURLRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCPartnerRechargeRedirectURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPartnerRechargeRedirectURLRequest::CopyFrom(const CMsgGCPartnerRechargeRedirectURLRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCPartnerRechargeRedirectURLRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPartnerRechargeRedirectURLRequest::IsInitialized() const {
  return true;
}

void CMsgGCPartnerRechargeRedirectURLRequest::InternalSwap(CMsgGCPartnerRechargeRedirectURLRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  line_items_.InternalSwap(&other->line_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCPartnerRechargeRedirectURLRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCPartnerRechargeRedirectURLResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCPartnerRechargeRedirectURLResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCPartnerRechargeRedirectURLResponse::CMsgGCPartnerRechargeRedirectURLResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCPartnerRechargeRedirectURLResponse)
}
CMsgGCPartnerRechargeRedirectURLResponse::CMsgGCPartnerRechargeRedirectURLResponse(const CMsgGCPartnerRechargeRedirectURLResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCPartnerRechargeRedirectURLResponse)
}

void CMsgGCPartnerRechargeRedirectURLResponse::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 1;
}

CMsgGCPartnerRechargeRedirectURLResponse::~CMsgGCPartnerRechargeRedirectURLResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCPartnerRechargeRedirectURLResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCPartnerRechargeRedirectURLResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCPartnerRechargeRedirectURLResponse::ArenaDtor(void* object) {
  CMsgGCPartnerRechargeRedirectURLResponse* _this = reinterpret_cast< CMsgGCPartnerRechargeRedirectURLResponse* >(object);
  (void)_this;
}
void CMsgGCPartnerRechargeRedirectURLResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCPartnerRechargeRedirectURLResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCPartnerRechargeRedirectURLResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCPartnerRechargeRedirectURLResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCPartnerRechargeRedirectURLResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCPartnerRequestResponse_IsValid(val))) {
            _internal_set_result(static_cast<::EGCPartnerRequestResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCPartnerRechargeRedirectURLResponse.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCPartnerRechargeRedirectURLResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCPartnerRechargeRedirectURLResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCPartnerRechargeRedirectURLResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCPartnerRechargeRedirectURLResponse)
  return target;
}

size_t CMsgGCPartnerRechargeRedirectURLResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCPartnerRechargeRedirectURLResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional .EGCPartnerRequestResponse result = 1 [default = k_EPartnerRequestOK];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCPartnerRechargeRedirectURLResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCPartnerRechargeRedirectURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPartnerRechargeRedirectURLResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCPartnerRechargeRedirectURLResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCPartnerRechargeRedirectURLResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCPartnerRechargeRedirectURLResponse)
    MergeFrom(*source);
  }
}

void CMsgGCPartnerRechargeRedirectURLResponse::MergeFrom(const CMsgGCPartnerRechargeRedirectURLResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCPartnerRechargeRedirectURLResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCPartnerRechargeRedirectURLResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCPartnerRechargeRedirectURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPartnerRechargeRedirectURLResponse::CopyFrom(const CMsgGCPartnerRechargeRedirectURLResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCPartnerRechargeRedirectURLResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPartnerRechargeRedirectURLResponse::IsInitialized() const {
  return true;
}

void CMsgGCPartnerRechargeRedirectURLResponse::InternalSwap(CMsgGCPartnerRechargeRedirectURLResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCPartnerRechargeRedirectURLResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCEconSQLWorkItemEmbeddedRollbackData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCEconSQLWorkItemEmbeddedRollbackData>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deleted_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expected_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
}
CMsgGCEconSQLWorkItemEmbeddedRollbackData::CMsgGCEconSQLWorkItemEmbeddedRollbackData(const CMsgGCEconSQLWorkItemEmbeddedRollbackData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&deleted_item_id_, &from.deleted_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&expected_audit_action_) -
    reinterpret_cast<char*>(&deleted_item_id_)) + sizeof(expected_audit_action_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deleted_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&expected_audit_action_) -
    reinterpret_cast<char*>(&deleted_item_id_)) + sizeof(expected_audit_action_));
}

CMsgGCEconSQLWorkItemEmbeddedRollbackData::~CMsgGCEconSQLWorkItemEmbeddedRollbackData() {
  // @@protoc_insertion_point(destructor:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::ArenaDtor(void* object) {
  CMsgGCEconSQLWorkItemEmbeddedRollbackData* _this = reinterpret_cast< CMsgGCEconSQLWorkItemEmbeddedRollbackData* >(object);
  (void)_this;
}
void CMsgGCEconSQLWorkItemEmbeddedRollbackData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCEconSQLWorkItemEmbeddedRollbackData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&deleted_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expected_audit_action_) -
        reinterpret_cast<char*>(&deleted_item_id_)) + sizeof(expected_audit_action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCEconSQLWorkItemEmbeddedRollbackData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 deleted_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deleted_item_id(&has_bits);
          deleted_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 old_audit_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_old_audit_action(&has_bits);
          old_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_audit_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_new_audit_action(&has_bits);
          new_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expected_audit_action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expected_audit_action(&has_bits);
          expected_audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCEconSQLWorkItemEmbeddedRollbackData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 deleted_item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_deleted_item_id(), target);
  }

  // optional uint32 old_audit_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_old_audit_action(), target);
  }

  // optional uint32 new_audit_action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_new_audit_action(), target);
  }

  // optional uint32 expected_audit_action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expected_audit_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  return target;
}

size_t CMsgGCEconSQLWorkItemEmbeddedRollbackData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 deleted_item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_deleted_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 old_audit_action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old_audit_action());
    }

    // optional uint32 new_audit_action = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_audit_action());
    }

    // optional uint32 expected_audit_action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expected_audit_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCEconSQLWorkItemEmbeddedRollbackData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCEconSQLWorkItemEmbeddedRollbackData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
    MergeFrom(*source);
  }
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::MergeFrom(const CMsgGCEconSQLWorkItemEmbeddedRollbackData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      deleted_item_id_ = from.deleted_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_audit_action_ = from.old_audit_action_;
    }
    if (cached_has_bits & 0x00000008u) {
      new_audit_action_ = from.new_audit_action_;
    }
    if (cached_has_bits & 0x00000010u) {
      expected_audit_action_ = from.expected_audit_action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::CopyFrom(const CMsgGCEconSQLWorkItemEmbeddedRollbackData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCEconSQLWorkItemEmbeddedRollbackData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCEconSQLWorkItemEmbeddedRollbackData::IsInitialized() const {
  return true;
}

void CMsgGCEconSQLWorkItemEmbeddedRollbackData::InternalSwap(CMsgGCEconSQLWorkItemEmbeddedRollbackData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCEconSQLWorkItemEmbeddedRollbackData, expected_audit_action_)
      + sizeof(CMsgGCEconSQLWorkItemEmbeddedRollbackData::expected_audit_action_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCEconSQLWorkItemEmbeddedRollbackData, deleted_item_id_)>(
          reinterpret_cast<char*>(&deleted_item_id_),
          reinterpret_cast<char*>(&other->deleted_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCEconSQLWorkItemEmbeddedRollbackData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCraftStatue::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCraftStatue>()._has_bits_);
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sequencename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pedestal_itemdef(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_toolid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgCraftStatue::CMsgCraftStatue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCraftStatue)
}
CMsgCraftStatue::CMsgCraftStatue(const CMsgCraftStatue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequencename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sequencename()) {
    sequencename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequencename(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pedestal_itemdef_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(pedestal_itemdef_));
  // @@protoc_insertion_point(copy_constructor:CMsgCraftStatue)
}

void CMsgCraftStatue::SharedCtor() {
sequencename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heroid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pedestal_itemdef_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(pedestal_itemdef_));
}

CMsgCraftStatue::~CMsgCraftStatue() {
  // @@protoc_insertion_point(destructor:CMsgCraftStatue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCraftStatue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequencename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgCraftStatue::ArenaDtor(void* object) {
  CMsgCraftStatue* _this = reinterpret_cast< CMsgCraftStatue* >(object);
  (void)_this;
}
void CMsgCraftStatue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCraftStatue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCraftStatue::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCraftStatue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequencename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pedestal_itemdef_) -
        reinterpret_cast<char*>(&heroid_)) + sizeof(pedestal_itemdef_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCraftStatue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sequencename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sequencename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCraftStatue.sequencename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cycle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cycle(&has_bits);
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgCraftStatue.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pedestal_itemdef = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pedestal_itemdef(&has_bits);
          pedestal_itemdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 toolid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_toolid(&has_bits);
          toolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCraftStatue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCraftStatue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 heroid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heroid(), target);
  }

  // optional string sequencename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequencename().data(), static_cast<int>(this->_internal_sequencename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCraftStatue.sequencename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sequencename(), target);
  }

  // optional float cycle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cycle(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgCraftStatue.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // optional uint32 pedestal_itemdef = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pedestal_itemdef(), target);
  }

  // optional uint64 toolid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_toolid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCraftStatue)
  return target;
}

size_t CMsgCraftStatue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCraftStatue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string sequencename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sequencename());
    }

    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 heroid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional float cycle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint64 toolid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_toolid());
    }

    // optional uint32 pedestal_itemdef = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pedestal_itemdef());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCraftStatue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCraftStatue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCraftStatue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCraftStatue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCraftStatue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCraftStatue)
    MergeFrom(*source);
  }
}

void CMsgCraftStatue::MergeFrom(const CMsgCraftStatue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCraftStatue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sequencename(from._internal_sequencename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cycle_ = from.cycle_;
    }
    if (cached_has_bits & 0x00000010u) {
      toolid_ = from.toolid_;
    }
    if (cached_has_bits & 0x00000020u) {
      pedestal_itemdef_ = from.pedestal_itemdef_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCraftStatue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCraftStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCraftStatue::CopyFrom(const CMsgCraftStatue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCraftStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCraftStatue::IsInitialized() const {
  return true;
}

void CMsgCraftStatue::InternalSwap(CMsgCraftStatue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sequencename_.Swap(&other->sequencename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCraftStatue, pedestal_itemdef_)
      + sizeof(CMsgCraftStatue::pedestal_itemdef_)
      - PROTOBUF_FIELD_OFFSET(CMsgCraftStatue, heroid_)>(
          reinterpret_cast<char*>(&heroid_),
          reinterpret_cast<char*>(&other->heroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCraftStatue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRedeemCode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRedeemCode>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRedeemCode::CMsgRedeemCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRedeemCode)
}
CMsgRedeemCode::CMsgRedeemCode(const CMsgRedeemCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_code()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgRedeemCode)
}

void CMsgRedeemCode::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgRedeemCode::~CMsgRedeemCode() {
  // @@protoc_insertion_point(destructor:CMsgRedeemCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRedeemCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgRedeemCode::ArenaDtor(void* object) {
  CMsgRedeemCode* _this = reinterpret_cast< CMsgRedeemCode* >(object);
  (void)_this;
}
void CMsgRedeemCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRedeemCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRedeemCode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRedeemCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRedeemCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgRedeemCode.code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRedeemCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRedeemCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgRedeemCode.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRedeemCode)
  return target;
}

size_t CMsgRedeemCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRedeemCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string code = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRedeemCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRedeemCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRedeemCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRedeemCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRedeemCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRedeemCode)
    MergeFrom(*source);
  }
}

void CMsgRedeemCode::MergeFrom(const CMsgRedeemCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRedeemCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_code()) {
    _internal_set_code(from._internal_code());
  }
}

void CMsgRedeemCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRedeemCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRedeemCode::CopyFrom(const CMsgRedeemCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRedeemCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRedeemCode::IsInitialized() const {
  return true;
}

void CMsgRedeemCode::InternalSwap(CMsgRedeemCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRedeemCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRedeemCodeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRedeemCodeResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRedeemCodeResponse)
}
CMsgRedeemCodeResponse::CMsgRedeemCodeResponse(const CMsgRedeemCodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgRedeemCodeResponse)
}

void CMsgRedeemCodeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgRedeemCodeResponse::~CMsgRedeemCodeResponse() {
  // @@protoc_insertion_point(destructor:CMsgRedeemCodeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRedeemCodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRedeemCodeResponse::ArenaDtor(void* object) {
  CMsgRedeemCodeResponse* _this = reinterpret_cast< CMsgRedeemCodeResponse* >(object);
  (void)_this;
}
void CMsgRedeemCodeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRedeemCodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRedeemCodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRedeemCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRedeemCodeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRedeemCodeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRedeemCodeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRedeemCodeResponse)
  return target;
}

size_t CMsgRedeemCodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRedeemCodeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRedeemCodeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRedeemCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRedeemCodeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRedeemCodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRedeemCodeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRedeemCodeResponse)
    MergeFrom(*source);
  }
}

void CMsgRedeemCodeResponse::MergeFrom(const CMsgRedeemCodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRedeemCodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRedeemCodeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRedeemCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRedeemCodeResponse::CopyFrom(const CMsgRedeemCodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRedeemCodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRedeemCodeResponse::IsInitialized() const {
  return true;
}

void CMsgRedeemCodeResponse::InternalSwap(CMsgRedeemCodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRedeemCodeResponse, response_)
      + sizeof(CMsgRedeemCodeResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgRedeemCodeResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRedeemCodeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDevNewItemRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevNewItemRequest>()._has_bits_);
  static void set_has_item_def_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loot_list_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDevNewItemRequest::CMsgDevNewItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_def_name_(arena),
  attr_value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDevNewItemRequest)
}
CMsgDevNewItemRequest::CMsgDevNewItemRequest(const CMsgDevNewItemRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attr_def_name_(from.attr_def_name_),
      attr_value_(from.attr_value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_def_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_def_name()) {
    item_def_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_def_name(), 
      GetArena());
  }
  loot_list_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loot_list_name()) {
    loot_list_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loot_list_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDevNewItemRequest)
}

void CMsgDevNewItemRequest::SharedCtor() {
item_def_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loot_list_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgDevNewItemRequest::~CMsgDevNewItemRequest() {
  // @@protoc_insertion_point(destructor:CMsgDevNewItemRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDevNewItemRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_def_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loot_list_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDevNewItemRequest::ArenaDtor(void* object) {
  CMsgDevNewItemRequest* _this = reinterpret_cast< CMsgDevNewItemRequest* >(object);
  (void)_this;
}
void CMsgDevNewItemRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDevNewItemRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDevNewItemRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevNewItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_def_name_.Clear();
  attr_value_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      loot_list_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevNewItemRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string item_def_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_item_def_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDevNewItemRequest.item_def_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string loot_list_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_loot_list_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDevNewItemRequest.loot_list_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string attr_def_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attr_def_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDevNewItemRequest.attr_def_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string attr_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attr_value();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDevNewItemRequest.attr_value");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDevNewItemRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevNewItemRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string item_def_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_def_name().data(), static_cast<int>(this->_internal_item_def_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.item_def_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_item_def_name(), target);
  }

  // optional string loot_list_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loot_list_name().data(), static_cast<int>(this->_internal_loot_list_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.loot_list_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_loot_list_name(), target);
  }

  // repeated string attr_def_name = 5;
  for (int i = 0, n = this->_internal_attr_def_name_size(); i < n; i++) {
    const auto& s = this->_internal_attr_def_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.attr_def_name");
    target = stream->WriteString(5, s, target);
  }

  // repeated string attr_value = 6;
  for (int i = 0, n = this->_internal_attr_value_size(); i < n; i++) {
    const auto& s = this->_internal_attr_value(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDevNewItemRequest.attr_value");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevNewItemRequest)
  return target;
}

size_t CMsgDevNewItemRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevNewItemRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attr_def_name = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(attr_def_name_.size());
  for (int i = 0, n = attr_def_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      attr_def_name_.Get(i));
  }

  // repeated string attr_value = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(attr_value_.size());
  for (int i = 0, n = attr_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      attr_value_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string item_def_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_def_name());
    }

    // optional string loot_list_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loot_list_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDevNewItemRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDevNewItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDevNewItemRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDevNewItemRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDevNewItemRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDevNewItemRequest)
    MergeFrom(*source);
  }
}

void CMsgDevNewItemRequest::MergeFrom(const CMsgDevNewItemRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevNewItemRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_def_name_.MergeFrom(from.attr_def_name_);
  attr_value_.MergeFrom(from.attr_value_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_def_name(from._internal_item_def_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_loot_list_name(from._internal_loot_list_name());
    }
  }
}

void CMsgDevNewItemRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDevNewItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevNewItemRequest::CopyFrom(const CMsgDevNewItemRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevNewItemRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequest::IsInitialized() const {
  return true;
}

void CMsgDevNewItemRequest::InternalSwap(CMsgDevNewItemRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attr_def_name_.InternalSwap(&other->attr_def_name_);
  attr_value_.InternalSwap(&other->attr_value_);
  item_def_name_.Swap(&other->item_def_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  loot_list_name_.Swap(&other->loot_list_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevNewItemRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDevNewItemRequestResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevNewItemRequestResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDevNewItemRequestResponse)
}
CMsgDevNewItemRequestResponse::CMsgDevNewItemRequestResponse(const CMsgDevNewItemRequestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevNewItemRequestResponse)
}

void CMsgDevNewItemRequestResponse::SharedCtor() {
success_ = false;
}

CMsgDevNewItemRequestResponse::~CMsgDevNewItemRequestResponse() {
  // @@protoc_insertion_point(destructor:CMsgDevNewItemRequestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDevNewItemRequestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDevNewItemRequestResponse::ArenaDtor(void* object) {
  CMsgDevNewItemRequestResponse* _this = reinterpret_cast< CMsgDevNewItemRequestResponse* >(object);
  (void)_this;
}
void CMsgDevNewItemRequestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDevNewItemRequestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDevNewItemRequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevNewItemRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevNewItemRequestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDevNewItemRequestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevNewItemRequestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevNewItemRequestResponse)
  return target;
}

size_t CMsgDevNewItemRequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevNewItemRequestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDevNewItemRequestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDevNewItemRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDevNewItemRequestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDevNewItemRequestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDevNewItemRequestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDevNewItemRequestResponse)
    MergeFrom(*source);
  }
}

void CMsgDevNewItemRequestResponse::MergeFrom(const CMsgDevNewItemRequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevNewItemRequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgDevNewItemRequestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDevNewItemRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevNewItemRequestResponse::CopyFrom(const CMsgDevNewItemRequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevNewItemRequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevNewItemRequestResponse::IsInitialized() const {
  return true;
}

void CMsgDevNewItemRequestResponse::InternalSwap(CMsgDevNewItemRequestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevNewItemRequestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDevUnlockAllItemStyles::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevUnlockAllItemStyles>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDevUnlockAllItemStyles)
}
CMsgDevUnlockAllItemStyles::CMsgDevUnlockAllItemStyles(const CMsgDevUnlockAllItemStyles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevUnlockAllItemStyles)
}

void CMsgDevUnlockAllItemStyles::SharedCtor() {
item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDevUnlockAllItemStyles::~CMsgDevUnlockAllItemStyles() {
  // @@protoc_insertion_point(destructor:CMsgDevUnlockAllItemStyles)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDevUnlockAllItemStyles::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDevUnlockAllItemStyles::ArenaDtor(void* object) {
  CMsgDevUnlockAllItemStyles* _this = reinterpret_cast< CMsgDevUnlockAllItemStyles* >(object);
  (void)_this;
}
void CMsgDevUnlockAllItemStyles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDevUnlockAllItemStyles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDevUnlockAllItemStyles::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevUnlockAllItemStyles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevUnlockAllItemStyles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDevUnlockAllItemStyles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevUnlockAllItemStyles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevUnlockAllItemStyles)
  return target;
}

size_t CMsgDevUnlockAllItemStyles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevUnlockAllItemStyles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDevUnlockAllItemStyles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDevUnlockAllItemStyles)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDevUnlockAllItemStyles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDevUnlockAllItemStyles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDevUnlockAllItemStyles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDevUnlockAllItemStyles)
    MergeFrom(*source);
  }
}

void CMsgDevUnlockAllItemStyles::MergeFrom(const CMsgDevUnlockAllItemStyles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevUnlockAllItemStyles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void CMsgDevUnlockAllItemStyles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDevUnlockAllItemStyles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevUnlockAllItemStyles::CopyFrom(const CMsgDevUnlockAllItemStyles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevUnlockAllItemStyles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevUnlockAllItemStyles::IsInitialized() const {
  return true;
}

void CMsgDevUnlockAllItemStyles::InternalSwap(CMsgDevUnlockAllItemStyles* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevUnlockAllItemStyles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDevUnlockAllItemStylesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDevUnlockAllItemStylesResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDevUnlockAllItemStylesResponse)
}
CMsgDevUnlockAllItemStylesResponse::CMsgDevUnlockAllItemStylesResponse(const CMsgDevUnlockAllItemStylesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgDevUnlockAllItemStylesResponse)
}

void CMsgDevUnlockAllItemStylesResponse::SharedCtor() {
success_ = false;
}

CMsgDevUnlockAllItemStylesResponse::~CMsgDevUnlockAllItemStylesResponse() {
  // @@protoc_insertion_point(destructor:CMsgDevUnlockAllItemStylesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDevUnlockAllItemStylesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDevUnlockAllItemStylesResponse::ArenaDtor(void* object) {
  CMsgDevUnlockAllItemStylesResponse* _this = reinterpret_cast< CMsgDevUnlockAllItemStylesResponse* >(object);
  (void)_this;
}
void CMsgDevUnlockAllItemStylesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDevUnlockAllItemStylesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDevUnlockAllItemStylesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDevUnlockAllItemStylesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDevUnlockAllItemStylesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDevUnlockAllItemStylesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDevUnlockAllItemStylesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDevUnlockAllItemStylesResponse)
  return target;
}

size_t CMsgDevUnlockAllItemStylesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDevUnlockAllItemStylesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDevUnlockAllItemStylesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDevUnlockAllItemStylesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDevUnlockAllItemStylesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDevUnlockAllItemStylesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDevUnlockAllItemStylesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDevUnlockAllItemStylesResponse)
    MergeFrom(*source);
  }
}

void CMsgDevUnlockAllItemStylesResponse::MergeFrom(const CMsgDevUnlockAllItemStylesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDevUnlockAllItemStylesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgDevUnlockAllItemStylesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDevUnlockAllItemStylesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDevUnlockAllItemStylesResponse::CopyFrom(const CMsgDevUnlockAllItemStylesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDevUnlockAllItemStylesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDevUnlockAllItemStylesResponse::IsInitialized() const {
  return true;
}

void CMsgDevUnlockAllItemStylesResponse::InternalSwap(CMsgDevUnlockAllItemStylesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDevUnlockAllItemStylesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGetAccountSubscriptionItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAccountSubscriptionItem>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAccountSubscriptionItem)
}
CMsgGCGetAccountSubscriptionItem::CMsgGCGetAccountSubscriptionItem(const CMsgGCGetAccountSubscriptionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAccountSubscriptionItem)
}

void CMsgGCGetAccountSubscriptionItem::SharedCtor() {
account_id_ = 0u;
}

CMsgGCGetAccountSubscriptionItem::~CMsgGCGetAccountSubscriptionItem() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAccountSubscriptionItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGetAccountSubscriptionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGetAccountSubscriptionItem::ArenaDtor(void* object) {
  CMsgGCGetAccountSubscriptionItem* _this = reinterpret_cast< CMsgGCGetAccountSubscriptionItem* >(object);
  (void)_this;
}
void CMsgGCGetAccountSubscriptionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetAccountSubscriptionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetAccountSubscriptionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAccountSubscriptionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAccountSubscriptionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGetAccountSubscriptionItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAccountSubscriptionItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAccountSubscriptionItem)
  return target;
}

size_t CMsgGCGetAccountSubscriptionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAccountSubscriptionItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetAccountSubscriptionItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGetAccountSubscriptionItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAccountSubscriptionItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGetAccountSubscriptionItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGetAccountSubscriptionItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGetAccountSubscriptionItem)
    MergeFrom(*source);
  }
}

void CMsgGCGetAccountSubscriptionItem::MergeFrom(const CMsgGCGetAccountSubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAccountSubscriptionItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGCGetAccountSubscriptionItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGetAccountSubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAccountSubscriptionItem::CopyFrom(const CMsgGCGetAccountSubscriptionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAccountSubscriptionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAccountSubscriptionItem::IsInitialized() const {
  return true;
}

void CMsgGCGetAccountSubscriptionItem::InternalSwap(CMsgGCGetAccountSubscriptionItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAccountSubscriptionItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGetAccountSubscriptionItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetAccountSubscriptionItemResponse>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetAccountSubscriptionItemResponse)
}
CMsgGCGetAccountSubscriptionItemResponse::CMsgGCGetAccountSubscriptionItemResponse(const CMsgGCGetAccountSubscriptionItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  def_index_ = from.def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetAccountSubscriptionItemResponse)
}

void CMsgGCGetAccountSubscriptionItemResponse::SharedCtor() {
def_index_ = 0u;
}

CMsgGCGetAccountSubscriptionItemResponse::~CMsgGCGetAccountSubscriptionItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetAccountSubscriptionItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGetAccountSubscriptionItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGetAccountSubscriptionItemResponse::ArenaDtor(void* object) {
  CMsgGCGetAccountSubscriptionItemResponse* _this = reinterpret_cast< CMsgGCGetAccountSubscriptionItemResponse* >(object);
  (void)_this;
}
void CMsgGCGetAccountSubscriptionItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetAccountSubscriptionItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetAccountSubscriptionItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetAccountSubscriptionItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  def_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetAccountSubscriptionItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGetAccountSubscriptionItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetAccountSubscriptionItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetAccountSubscriptionItemResponse)
  return target;
}

size_t CMsgGCGetAccountSubscriptionItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetAccountSubscriptionItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 def_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_def_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetAccountSubscriptionItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetAccountSubscriptionItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGetAccountSubscriptionItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGetAccountSubscriptionItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGetAccountSubscriptionItemResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetAccountSubscriptionItemResponse::MergeFrom(const CMsgGCGetAccountSubscriptionItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_def_index()) {
    _internal_set_def_index(from._internal_def_index());
  }
}

void CMsgGCGetAccountSubscriptionItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetAccountSubscriptionItemResponse::CopyFrom(const CMsgGCGetAccountSubscriptionItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetAccountSubscriptionItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetAccountSubscriptionItemResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetAccountSubscriptionItemResponse::InternalSwap(CMsgGCGetAccountSubscriptionItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(def_index_, other->def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetAccountSubscriptionItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCAddGiftItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCAddGiftItem>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCAddGiftItem::CMsgGCAddGiftItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCAddGiftItem)
}
CMsgGCAddGiftItem::CMsgGCAddGiftItem(const CMsgGCAddGiftItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCAddGiftItem)
}

void CMsgGCAddGiftItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgGCAddGiftItem::~CMsgGCAddGiftItem() {
  // @@protoc_insertion_point(destructor:CMsgGCAddGiftItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCAddGiftItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCAddGiftItem::ArenaDtor(void* object) {
  CMsgGCAddGiftItem* _this = reinterpret_cast< CMsgGCAddGiftItem* >(object);
  (void)_this;
}
void CMsgGCAddGiftItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCAddGiftItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCAddGiftItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCAddGiftItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCAddGiftItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCAddGiftItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCAddGiftItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCAddGiftItem)
  return target;
}

size_t CMsgGCAddGiftItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCAddGiftItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCAddGiftItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCAddGiftItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCAddGiftItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCAddGiftItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCAddGiftItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCAddGiftItem)
    MergeFrom(*source);
  }
}

void CMsgGCAddGiftItem::MergeFrom(const CMsgGCAddGiftItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCAddGiftItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCAddGiftItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCAddGiftItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCAddGiftItem::CopyFrom(const CMsgGCAddGiftItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCAddGiftItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCAddGiftItem::IsInitialized() const {
  return true;
}

void CMsgGCAddGiftItem::InternalSwap(CMsgGCAddGiftItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCAddGiftItem, account_id_)
      + sizeof(CMsgGCAddGiftItem::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCAddGiftItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCAddGiftItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCWrapAndDeliverGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCWrapAndDeliverGift>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_give_to_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gift_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCWrapAndDeliverGift)
}
CMsgClientToGCWrapAndDeliverGift::CMsgClientToGCWrapAndDeliverGift(const CMsgClientToGCWrapAndDeliverGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gift_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gift_message()) {
    gift_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gift_message(), 
      GetArena());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&give_to_account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCWrapAndDeliverGift)
}

void CMsgClientToGCWrapAndDeliverGift::SharedCtor() {
gift_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&give_to_account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
}

CMsgClientToGCWrapAndDeliverGift::~CMsgClientToGCWrapAndDeliverGift() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCWrapAndDeliverGift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCWrapAndDeliverGift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gift_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCWrapAndDeliverGift::ArenaDtor(void* object) {
  CMsgClientToGCWrapAndDeliverGift* _this = reinterpret_cast< CMsgClientToGCWrapAndDeliverGift* >(object);
  (void)_this;
}
void CMsgClientToGCWrapAndDeliverGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCWrapAndDeliverGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCWrapAndDeliverGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCWrapAndDeliverGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gift_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&give_to_account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(give_to_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCWrapAndDeliverGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 give_to_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_give_to_account_id(&has_bits);
          give_to_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gift_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gift_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCWrapAndDeliverGift.gift_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCWrapAndDeliverGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCWrapAndDeliverGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 give_to_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_give_to_account_id(), target);
  }

  // optional string gift_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gift_message().data(), static_cast<int>(this->_internal_gift_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCWrapAndDeliverGift.gift_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gift_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCWrapAndDeliverGift)
  return target;
}

size_t CMsgClientToGCWrapAndDeliverGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCWrapAndDeliverGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gift_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gift_message());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 give_to_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_give_to_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCWrapAndDeliverGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCWrapAndDeliverGift)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCWrapAndDeliverGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCWrapAndDeliverGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCWrapAndDeliverGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCWrapAndDeliverGift)
    MergeFrom(*source);
  }
}

void CMsgClientToGCWrapAndDeliverGift::MergeFrom(const CMsgClientToGCWrapAndDeliverGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCWrapAndDeliverGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gift_message(from._internal_gift_message());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      give_to_account_id_ = from.give_to_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCWrapAndDeliverGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCWrapAndDeliverGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCWrapAndDeliverGift::CopyFrom(const CMsgClientToGCWrapAndDeliverGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCWrapAndDeliverGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCWrapAndDeliverGift::IsInitialized() const {
  return true;
}

void CMsgClientToGCWrapAndDeliverGift::InternalSwap(CMsgClientToGCWrapAndDeliverGift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gift_message_.Swap(&other->gift_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, give_to_account_id_)
      + sizeof(CMsgClientToGCWrapAndDeliverGift::give_to_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGift, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCWrapAndDeliverGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCWrapAndDeliverGiftResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCWrapAndDeliverGiftResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gifting_charge_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gifting_charge_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gifting_uses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gifting_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gifting_window_hours(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trade_restriction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCWrapAndDeliverGiftResponse)
}
CMsgClientToGCWrapAndDeliverGiftResponse::CMsgClientToGCWrapAndDeliverGiftResponse(const CMsgClientToGCWrapAndDeliverGiftResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&trade_restriction_) -
    reinterpret_cast<char*>(&response_)) + sizeof(trade_restriction_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCWrapAndDeliverGiftResponse)
}

void CMsgClientToGCWrapAndDeliverGiftResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&response_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trade_restriction_) -
    reinterpret_cast<char*>(&response_)) + sizeof(trade_restriction_));
}

CMsgClientToGCWrapAndDeliverGiftResponse::~CMsgClientToGCWrapAndDeliverGiftResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCWrapAndDeliverGiftResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCWrapAndDeliverGiftResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::ArenaDtor(void* object) {
  CMsgClientToGCWrapAndDeliverGiftResponse* _this = reinterpret_cast< CMsgClientToGCWrapAndDeliverGiftResponse* >(object);
  (void)_this;
}
void CMsgClientToGCWrapAndDeliverGiftResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCWrapAndDeliverGiftResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trade_restriction_) -
        reinterpret_cast<char*>(&response_)) + sizeof(trade_restriction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCWrapAndDeliverGiftResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgResponse_IsValid(val))) {
            _internal_set_response(static_cast<::EGCMsgResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 gifting_charge_uses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gifting_charge_uses(&has_bits);
          gifting_charge_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gifting_charge_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gifting_charge_max(&has_bits);
          gifting_charge_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gifting_uses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gifting_uses(&has_bits);
          gifting_uses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gifting_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gifting_max(&has_bits);
          gifting_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gifting_window_hours = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gifting_window_hours(&has_bits);
          gifting_window_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_trade_restriction(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCWrapAndDeliverGiftResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint32 gifting_charge_uses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gifting_charge_uses(), target);
  }

  // optional int32 gifting_charge_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gifting_charge_max(), target);
  }

  // optional uint32 gifting_uses = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gifting_uses(), target);
  }

  // optional int32 gifting_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gifting_max(), target);
  }

  // optional uint32 gifting_window_hours = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gifting_window_hours(), target);
  }

  // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_trade_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCWrapAndDeliverGiftResponse)
  return target;
}

size_t CMsgClientToGCWrapAndDeliverGiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .EGCMsgResponse response = 1 [default = k_EGCMsgResponseOK];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 gifting_charge_uses = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gifting_charge_uses());
    }

    // optional int32 gifting_charge_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gifting_charge_max());
    }

    // optional uint32 gifting_uses = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gifting_uses());
    }

    // optional int32 gifting_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gifting_max());
    }

    // optional uint32 gifting_window_hours = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gifting_window_hours());
    }

    // optional .EGCMsgInitiateTradeResponse trade_restriction = 7 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trade_restriction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCWrapAndDeliverGiftResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCWrapAndDeliverGiftResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCWrapAndDeliverGiftResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCWrapAndDeliverGiftResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCWrapAndDeliverGiftResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCWrapAndDeliverGiftResponse::MergeFrom(const CMsgClientToGCWrapAndDeliverGiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000002u) {
      gifting_charge_uses_ = from.gifting_charge_uses_;
    }
    if (cached_has_bits & 0x00000004u) {
      gifting_charge_max_ = from.gifting_charge_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      gifting_uses_ = from.gifting_uses_;
    }
    if (cached_has_bits & 0x00000010u) {
      gifting_max_ = from.gifting_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      gifting_window_hours_ = from.gifting_window_hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      trade_restriction_ = from.trade_restriction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCWrapAndDeliverGiftResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCWrapAndDeliverGiftResponse::CopyFrom(const CMsgClientToGCWrapAndDeliverGiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCWrapAndDeliverGiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCWrapAndDeliverGiftResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCWrapAndDeliverGiftResponse::InternalSwap(CMsgClientToGCWrapAndDeliverGiftResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGiftResponse, trade_restriction_)
      + sizeof(CMsgClientToGCWrapAndDeliverGiftResponse::trade_restriction_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCWrapAndDeliverGiftResponse, response_)>(
          reinterpret_cast<char*>(&response_),
          reinterpret_cast<char*>(&other->response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCWrapAndDeliverGiftResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnwrapGift::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnwrapGift>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnwrapGift)
}
CMsgClientToGCUnwrapGift::CMsgClientToGCUnwrapGift(const CMsgClientToGCUnwrapGift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnwrapGift)
}

void CMsgClientToGCUnwrapGift::SharedCtor() {
item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCUnwrapGift::~CMsgClientToGCUnwrapGift() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnwrapGift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnwrapGift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnwrapGift::ArenaDtor(void* object) {
  CMsgClientToGCUnwrapGift* _this = reinterpret_cast< CMsgClientToGCUnwrapGift* >(object);
  (void)_this;
}
void CMsgClientToGCUnwrapGift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnwrapGift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnwrapGift::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnwrapGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnwrapGift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnwrapGift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnwrapGift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnwrapGift)
  return target;
}

size_t CMsgClientToGCUnwrapGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnwrapGift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnwrapGift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnwrapGift)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnwrapGift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnwrapGift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnwrapGift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnwrapGift)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnwrapGift::MergeFrom(const CMsgClientToGCUnwrapGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnwrapGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void CMsgClientToGCUnwrapGift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnwrapGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnwrapGift::CopyFrom(const CMsgClientToGCUnwrapGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnwrapGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnwrapGift::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnwrapGift::InternalSwap(CMsgClientToGCUnwrapGift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnwrapGift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetGiftPermissions::_Internal {
 public:
};

CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissions)
}
CMsgClientToGCGetGiftPermissions::CMsgClientToGCGetGiftPermissions(const CMsgClientToGCGetGiftPermissions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissions)
}

void CMsgClientToGCGetGiftPermissions::SharedCtor() {
}

CMsgClientToGCGetGiftPermissions::~CMsgClientToGCGetGiftPermissions() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetGiftPermissions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetGiftPermissions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetGiftPermissions::ArenaDtor(void* object) {
  CMsgClientToGCGetGiftPermissions* _this = reinterpret_cast< CMsgClientToGCGetGiftPermissions* >(object);
  (void)_this;
}
void CMsgClientToGCGetGiftPermissions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetGiftPermissions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetGiftPermissions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetGiftPermissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetGiftPermissions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetGiftPermissions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetGiftPermissions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetGiftPermissions)
  return target;
}

size_t CMsgClientToGCGetGiftPermissions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetGiftPermissions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetGiftPermissions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetGiftPermissions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetGiftPermissions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetGiftPermissions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetGiftPermissions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetGiftPermissions)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetGiftPermissions::MergeFrom(const CMsgClientToGCGetGiftPermissions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetGiftPermissions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCGetGiftPermissions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetGiftPermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetGiftPermissions::CopyFrom(const CMsgClientToGCGetGiftPermissions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetGiftPermissions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetGiftPermissions::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetGiftPermissions::InternalSwap(CMsgClientToGCGetGiftPermissions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
}
CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission(const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(permission_));
}

CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::~CMsgClientToGCGetGiftPermissionsResponse_FriendPermission() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::ArenaDtor(void* object) {
  CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* _this = reinterpret_cast< CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* >(object);
  (void)_this;
}
void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&permission_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_permission(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_permission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  return target;
}

size_t CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional .EGCMsgInitiateTradeResponse permission = 2 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_permission());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetGiftPermissionsResponse_FriendPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::MergeFrom(const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::CopyFrom(const CMsgClientToGCGetGiftPermissionsResponse_FriendPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse.FriendPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::InternalSwap(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, permission_)
      + sizeof(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::permission_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse_FriendPermission, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissionsResponse_FriendPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetGiftPermissionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetGiftPermissionsResponse>()._has_bits_);
  static void set_has_is_unlimited(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_two_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sender_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_friendship_age_requirement(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friendship_age_requirement_two_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friend_permissions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetGiftPermissionsResponse)
}
CMsgClientToGCGetGiftPermissionsResponse::CMsgClientToGCGetGiftPermissionsResponse(const CMsgClientToGCGetGiftPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      friend_permissions_(from.friend_permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_unlimited_, &from.is_unlimited_,
    static_cast<size_t>(reinterpret_cast<char*>(&friendship_age_requirement_two_factor_) -
    reinterpret_cast<char*>(&is_unlimited_)) + sizeof(friendship_age_requirement_two_factor_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetGiftPermissionsResponse)
}

void CMsgClientToGCGetGiftPermissionsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_unlimited_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&friendship_age_requirement_two_factor_) -
    reinterpret_cast<char*>(&is_unlimited_)) + sizeof(friendship_age_requirement_two_factor_));
}

CMsgClientToGCGetGiftPermissionsResponse::~CMsgClientToGCGetGiftPermissionsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetGiftPermissionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetGiftPermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetGiftPermissionsResponse::ArenaDtor(void* object) {
  CMsgClientToGCGetGiftPermissionsResponse* _this = reinterpret_cast< CMsgClientToGCGetGiftPermissionsResponse* >(object);
  (void)_this;
}
void CMsgClientToGCGetGiftPermissionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetGiftPermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetGiftPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetGiftPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_permissions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&is_unlimited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friendship_age_requirement_two_factor_) -
        reinterpret_cast<char*>(&is_unlimited_)) + sizeof(friendship_age_requirement_two_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetGiftPermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_unlimited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_unlimited(&has_bits);
          is_unlimited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_two_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_two_factor(&has_bits);
          has_two_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgInitiateTradeResponse_IsValid(val))) {
            _internal_set_sender_permission(static_cast<::EGCMsgInitiateTradeResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 friendship_age_requirement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_friendship_age_requirement(&has_bits);
          friendship_age_requirement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 friendship_age_requirement_two_factor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_friendship_age_requirement_two_factor(&has_bits);
          friendship_age_requirement_two_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friend_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetGiftPermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetGiftPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_unlimited = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_unlimited(), target);
  }

  // optional bool has_two_factor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_two_factor(), target);
  }

  // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sender_permission(), target);
  }

  // optional uint32 friendship_age_requirement = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_friendship_age_requirement(), target);
  }

  // optional uint32 friendship_age_requirement_two_factor = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_friendship_age_requirement_two_factor(), target);
  }

  // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friend_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_friend_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetGiftPermissionsResponse)
  return target;
}

size_t CMsgClientToGCGetGiftPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetGiftPermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCGetGiftPermissionsResponse.FriendPermission friend_permissions = 9;
  total_size += 1UL * this->_internal_friend_permissions_size();
  for (const auto& msg : this->friend_permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool is_unlimited = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_two_factor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .EGCMsgInitiateTradeResponse sender_permission = 6 [default = k_EGCMsgInitiateTradeResponse_Accepted];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sender_permission());
    }

    // optional uint32 friendship_age_requirement = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friendship_age_requirement());
    }

    // optional uint32 friendship_age_requirement_two_factor = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friendship_age_requirement_two_factor());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetGiftPermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetGiftPermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetGiftPermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetGiftPermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetGiftPermissionsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetGiftPermissionsResponse::MergeFrom(const CMsgClientToGCGetGiftPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friend_permissions_.MergeFrom(from.friend_permissions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      is_unlimited_ = from.is_unlimited_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_two_factor_ = from.has_two_factor_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_permission_ = from.sender_permission_;
    }
    if (cached_has_bits & 0x00000008u) {
      friendship_age_requirement_ = from.friendship_age_requirement_;
    }
    if (cached_has_bits & 0x00000010u) {
      friendship_age_requirement_two_factor_ = from.friendship_age_requirement_two_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetGiftPermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetGiftPermissionsResponse::CopyFrom(const CMsgClientToGCGetGiftPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetGiftPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetGiftPermissionsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetGiftPermissionsResponse::InternalSwap(CMsgClientToGCGetGiftPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  friend_permissions_.InternalSwap(&other->friend_permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse, friendship_age_requirement_two_factor_)
      + sizeof(CMsgClientToGCGetGiftPermissionsResponse::friendship_age_requirement_two_factor_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetGiftPermissionsResponse, is_unlimited_)>(
          reinterpret_cast<char*>(&is_unlimited_),
          reinterpret_cast<char*>(&other->is_unlimited_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetGiftPermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnpackBundle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnpackBundle>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnpackBundle)
}
CMsgClientToGCUnpackBundle::CMsgClientToGCUnpackBundle(const CMsgClientToGCUnpackBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnpackBundle)
}

void CMsgClientToGCUnpackBundle::SharedCtor() {
item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCUnpackBundle::~CMsgClientToGCUnpackBundle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnpackBundle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnpackBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnpackBundle::ArenaDtor(void* object) {
  CMsgClientToGCUnpackBundle* _this = reinterpret_cast< CMsgClientToGCUnpackBundle* >(object);
  (void)_this;
}
void CMsgClientToGCUnpackBundle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnpackBundle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnpackBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnpackBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnpackBundle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnpackBundle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnpackBundle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnpackBundle)
  return target;
}

size_t CMsgClientToGCUnpackBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnpackBundle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnpackBundle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnpackBundle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnpackBundle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnpackBundle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnpackBundle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnpackBundle)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnpackBundle::MergeFrom(const CMsgClientToGCUnpackBundle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnpackBundle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void CMsgClientToGCUnpackBundle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnpackBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnpackBundle::CopyFrom(const CMsgClientToGCUnpackBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnpackBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnpackBundle::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnpackBundle::InternalSwap(CMsgClientToGCUnpackBundle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnpackBundle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnpackBundleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnpackBundleResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unpacked_item_ids_(arena),
  unpacked_item_def_indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnpackBundleResponse)
}
CMsgClientToGCUnpackBundleResponse::CMsgClientToGCUnpackBundleResponse(const CMsgClientToGCUnpackBundleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unpacked_item_ids_(from.unpacked_item_ids_),
      unpacked_item_def_indexes_(from.unpacked_item_def_indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnpackBundleResponse)
}

void CMsgClientToGCUnpackBundleResponse::SharedCtor() {
response_ = 0;
}

CMsgClientToGCUnpackBundleResponse::~CMsgClientToGCUnpackBundleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnpackBundleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnpackBundleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnpackBundleResponse::ArenaDtor(void* object) {
  CMsgClientToGCUnpackBundleResponse* _this = reinterpret_cast< CMsgClientToGCUnpackBundleResponse* >(object);
  (void)_this;
}
void CMsgClientToGCUnpackBundleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnpackBundleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnpackBundleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnpackBundleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unpacked_item_ids_.Clear();
  unpacked_item_def_indexes_.Clear();
  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnpackBundleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 unpacked_item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unpacked_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unpacked_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCUnpackBundleResponse_EUnpackBundle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCUnpackBundleResponse_EUnpackBundle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 unpacked_item_def_indexes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unpacked_item_def_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unpacked_item_def_indexes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnpackBundleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnpackBundleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 unpacked_item_ids = 1;
  for (int i = 0, n = this->_internal_unpacked_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unpacked_item_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_response(), target);
  }

  // repeated uint32 unpacked_item_def_indexes = 3;
  for (int i = 0, n = this->_internal_unpacked_item_def_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unpacked_item_def_indexes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnpackBundleResponse)
  return target;
}

size_t CMsgClientToGCUnpackBundleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnpackBundleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 unpacked_item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->unpacked_item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_item_ids_size());
    total_size += data_size;
  }

  // repeated uint32 unpacked_item_def_indexes = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unpacked_item_def_indexes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unpacked_item_def_indexes_size());
    total_size += data_size;
  }

  // optional .CMsgClientToGCUnpackBundleResponse.EUnpackBundle response = 2 [default = k_UnpackBundle_Succeeded];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnpackBundleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnpackBundleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnpackBundleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnpackBundleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnpackBundleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnpackBundleResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnpackBundleResponse::MergeFrom(const CMsgClientToGCUnpackBundleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnpackBundleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unpacked_item_ids_.MergeFrom(from.unpacked_item_ids_);
  unpacked_item_def_indexes_.MergeFrom(from.unpacked_item_def_indexes_);
  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgClientToGCUnpackBundleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnpackBundleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnpackBundleResponse::CopyFrom(const CMsgClientToGCUnpackBundleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnpackBundleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnpackBundleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnpackBundleResponse::InternalSwap(CMsgClientToGCUnpackBundleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unpacked_item_ids_.InternalSwap(&other->unpacked_item_ids_);
  unpacked_item_def_indexes_.InternalSwap(&other->unpacked_item_def_indexes_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnpackBundleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientStoreTransactionCompleted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientStoreTransactionCompleted>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientStoreTransactionCompleted)
}
CMsgGCToClientStoreTransactionCompleted::CMsgGCToClientStoreTransactionCompleted(const CMsgGCToClientStoreTransactionCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientStoreTransactionCompleted)
}

void CMsgGCToClientStoreTransactionCompleted::SharedCtor() {
txn_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCToClientStoreTransactionCompleted::~CMsgGCToClientStoreTransactionCompleted() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientStoreTransactionCompleted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientStoreTransactionCompleted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientStoreTransactionCompleted::ArenaDtor(void* object) {
  CMsgGCToClientStoreTransactionCompleted* _this = reinterpret_cast< CMsgGCToClientStoreTransactionCompleted* >(object);
  (void)_this;
}
void CMsgGCToClientStoreTransactionCompleted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientStoreTransactionCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientStoreTransactionCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientStoreTransactionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  txn_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientStoreTransactionCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientStoreTransactionCompleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientStoreTransactionCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientStoreTransactionCompleted)
  return target;
}

size_t CMsgGCToClientStoreTransactionCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientStoreTransactionCompleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_txn_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientStoreTransactionCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientStoreTransactionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientStoreTransactionCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientStoreTransactionCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientStoreTransactionCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientStoreTransactionCompleted)
    MergeFrom(*source);
  }
}

void CMsgGCToClientStoreTransactionCompleted::MergeFrom(const CMsgGCToClientStoreTransactionCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientStoreTransactionCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from._internal_has_txn_id()) {
    _internal_set_txn_id(from._internal_txn_id());
  }
}

void CMsgGCToClientStoreTransactionCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientStoreTransactionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientStoreTransactionCompleted::CopyFrom(const CMsgGCToClientStoreTransactionCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientStoreTransactionCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientStoreTransactionCompleted::IsInitialized() const {
  return true;
}

void CMsgGCToClientStoreTransactionCompleted::InternalSwap(CMsgGCToClientStoreTransactionCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(txn_id_, other->txn_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientStoreTransactionCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCEquipItems::_Internal {
 public:
};

CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  equips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCEquipItems)
}
CMsgClientToGCEquipItems::CMsgClientToGCEquipItems(const CMsgClientToGCEquipItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      equips_(from.equips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCEquipItems)
}

void CMsgClientToGCEquipItems::SharedCtor() {
}

CMsgClientToGCEquipItems::~CMsgClientToGCEquipItems() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCEquipItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCEquipItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCEquipItems::ArenaDtor(void* object) {
  CMsgClientToGCEquipItems* _this = reinterpret_cast< CMsgClientToGCEquipItems* >(object);
  (void)_this;
}
void CMsgClientToGCEquipItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCEquipItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCEquipItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCEquipItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  equips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCEquipItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgAdjustItemEquippedState equips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCEquipItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCEquipItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_equips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCEquipItems)
  return target;
}

size_t CMsgClientToGCEquipItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCEquipItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAdjustItemEquippedState equips = 1;
  total_size += 1UL * this->_internal_equips_size();
  for (const auto& msg : this->equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCEquipItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCEquipItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCEquipItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCEquipItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCEquipItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCEquipItems)
    MergeFrom(*source);
  }
}

void CMsgClientToGCEquipItems::MergeFrom(const CMsgClientToGCEquipItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCEquipItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  equips_.MergeFrom(from.equips_);
}

void CMsgClientToGCEquipItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCEquipItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCEquipItems::CopyFrom(const CMsgClientToGCEquipItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCEquipItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCEquipItems::IsInitialized() const {
  return true;
}

void CMsgClientToGCEquipItems::InternalSwap(CMsgClientToGCEquipItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  equips_.InternalSwap(&other->equips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCEquipItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCEquipItemsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCEquipItemsResponse>()._has_bits_);
  static void set_has_so_cache_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCEquipItemsResponse)
}
CMsgClientToGCEquipItemsResponse::CMsgClientToGCEquipItemsResponse(const CMsgClientToGCEquipItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  so_cache_version_id_ = from.so_cache_version_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCEquipItemsResponse)
}

void CMsgClientToGCEquipItemsResponse::SharedCtor() {
so_cache_version_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCEquipItemsResponse::~CMsgClientToGCEquipItemsResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCEquipItemsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCEquipItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCEquipItemsResponse::ArenaDtor(void* object) {
  CMsgClientToGCEquipItemsResponse* _this = reinterpret_cast< CMsgClientToGCEquipItemsResponse* >(object);
  (void)_this;
}
void CMsgClientToGCEquipItemsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCEquipItemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCEquipItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCEquipItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  so_cache_version_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCEquipItemsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 so_cache_version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_so_cache_version_id(&has_bits);
          so_cache_version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCEquipItemsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCEquipItemsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 so_cache_version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_so_cache_version_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCEquipItemsResponse)
  return target;
}

size_t CMsgClientToGCEquipItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCEquipItemsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 so_cache_version_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCEquipItemsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCEquipItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCEquipItemsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCEquipItemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCEquipItemsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCEquipItemsResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCEquipItemsResponse::MergeFrom(const CMsgClientToGCEquipItemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCEquipItemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_so_cache_version_id()) {
    _internal_set_so_cache_version_id(from._internal_so_cache_version_id());
  }
}

void CMsgClientToGCEquipItemsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCEquipItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCEquipItemsResponse::CopyFrom(const CMsgClientToGCEquipItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCEquipItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCEquipItemsResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCEquipItemsResponse::InternalSwap(CMsgClientToGCEquipItemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(so_cache_version_id_, other->so_cache_version_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCEquipItemsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSetItemStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemStyle>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemStyle)
}
CMsgClientToGCSetItemStyle::CMsgClientToGCSetItemStyle(const CMsgClientToGCSetItemStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemStyle)
}

void CMsgClientToGCSetItemStyle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
}

CMsgClientToGCSetItemStyle::~CMsgClientToGCSetItemStyle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSetItemStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSetItemStyle::ArenaDtor(void* object) {
  CMsgClientToGCSetItemStyle* _this = reinterpret_cast< CMsgClientToGCSetItemStyle* >(object);
  (void)_this;
}
void CMsgClientToGCSetItemStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetItemStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetItemStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(style_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSetItemStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 style_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemStyle)
  return target;
}

size_t CMsgClientToGCSetItemStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 style_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetItemStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSetItemStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetItemStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSetItemStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSetItemStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSetItemStyle)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetItemStyle::MergeFrom(const CMsgClientToGCSetItemStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      style_index_ = from.style_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSetItemStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSetItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetItemStyle::CopyFrom(const CMsgClientToGCSetItemStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemStyle::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemStyle::InternalSwap(CMsgClientToGCSetItemStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemStyle, style_index_)
      + sizeof(CMsgClientToGCSetItemStyle::style_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemStyle, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSetItemStyleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemStyleResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemStyleResponse)
}
CMsgClientToGCSetItemStyleResponse::CMsgClientToGCSetItemStyleResponse(const CMsgClientToGCSetItemStyleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemStyleResponse)
}

void CMsgClientToGCSetItemStyleResponse::SharedCtor() {
response_ = 0;
}

CMsgClientToGCSetItemStyleResponse::~CMsgClientToGCSetItemStyleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemStyleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSetItemStyleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSetItemStyleResponse::ArenaDtor(void* object) {
  CMsgClientToGCSetItemStyleResponse* _this = reinterpret_cast< CMsgClientToGCSetItemStyleResponse* >(object);
  (void)_this;
}
void CMsgClientToGCSetItemStyleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetItemStyleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetItemStyleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemStyleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCSetItemStyleResponse_ESetStyle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCSetItemStyleResponse_ESetStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSetItemStyleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemStyleResponse)
  return target;
}

size_t CMsgClientToGCSetItemStyleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemStyleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgClientToGCSetItemStyleResponse.ESetStyle response = 1 [default = k_SetStyle_Succeeded];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetItemStyleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSetItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetItemStyleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSetItemStyleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSetItemStyleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSetItemStyleResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetItemStyleResponse::MergeFrom(const CMsgClientToGCSetItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgClientToGCSetItemStyleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSetItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetItemStyleResponse::CopyFrom(const CMsgClientToGCSetItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemStyleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemStyleResponse::InternalSwap(CMsgClientToGCSetItemStyleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemStyleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnlockItemStyle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockItemStyle>()._has_bits_);
  static void set_has_item_to_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  consumable_item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockItemStyle)
}
CMsgClientToGCUnlockItemStyle::CMsgClientToGCUnlockItemStyle(const CMsgClientToGCUnlockItemStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      consumable_item_ids_(from.consumable_item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_to_unlock_, &from.item_to_unlock_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_to_unlock_)) + sizeof(style_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockItemStyle)
}

void CMsgClientToGCUnlockItemStyle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_to_unlock_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_index_) -
    reinterpret_cast<char*>(&item_to_unlock_)) + sizeof(style_index_));
}

CMsgClientToGCUnlockItemStyle::~CMsgClientToGCUnlockItemStyle() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockItemStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnlockItemStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnlockItemStyle::ArenaDtor(void* object) {
  CMsgClientToGCUnlockItemStyle* _this = reinterpret_cast< CMsgClientToGCUnlockItemStyle* >(object);
  (void)_this;
}
void CMsgClientToGCUnlockItemStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnlockItemStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnlockItemStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockItemStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumable_item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_to_unlock_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_index_) -
        reinterpret_cast<char*>(&item_to_unlock_)) + sizeof(style_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockItemStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_to_unlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_to_unlock(&has_bits);
          item_to_unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 consumable_item_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_consumable_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_consumable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnlockItemStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockItemStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_to_unlock = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_to_unlock(), target);
  }

  // optional uint32 style_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_style_index(), target);
  }

  // repeated uint64 consumable_item_ids = 3;
  for (int i = 0, n = this->_internal_consumable_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_consumable_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockItemStyle)
  return target;
}

size_t CMsgClientToGCUnlockItemStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockItemStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 consumable_item_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->consumable_item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_consumable_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_to_unlock = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_to_unlock());
    }

    // optional uint32 style_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnlockItemStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnlockItemStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnlockItemStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnlockItemStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnlockItemStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnlockItemStyle)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnlockItemStyle::MergeFrom(const CMsgClientToGCUnlockItemStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockItemStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumable_item_ids_.MergeFrom(from.consumable_item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_to_unlock_ = from.item_to_unlock_;
    }
    if (cached_has_bits & 0x00000002u) {
      style_index_ = from.style_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCUnlockItemStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnlockItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnlockItemStyle::CopyFrom(const CMsgClientToGCUnlockItemStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockItemStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockItemStyle::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockItemStyle::InternalSwap(CMsgClientToGCUnlockItemStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  consumable_item_ids_.InternalSwap(&other->consumable_item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyle, style_index_)
      + sizeof(CMsgClientToGCUnlockItemStyle::style_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyle, item_to_unlock_)>(
          reinterpret_cast<char*>(&item_to_unlock_),
          reinterpret_cast<char*>(&other->item_to_unlock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockItemStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnlockItemStyleResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockItemStyleResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style_prereq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockItemStyleResponse)
}
CMsgClientToGCUnlockItemStyleResponse::CMsgClientToGCUnlockItemStyleResponse(const CMsgClientToGCUnlockItemStyleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_prereq_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_prereq_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockItemStyleResponse)
}

void CMsgClientToGCUnlockItemStyleResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_prereq_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(style_prereq_));
}

CMsgClientToGCUnlockItemStyleResponse::~CMsgClientToGCUnlockItemStyleResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockItemStyleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnlockItemStyleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnlockItemStyleResponse::ArenaDtor(void* object) {
  CMsgClientToGCUnlockItemStyleResponse* _this = reinterpret_cast< CMsgClientToGCUnlockItemStyleResponse* >(object);
  (void)_this;
}
void CMsgClientToGCUnlockItemStyleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnlockItemStyleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnlockItemStyleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockItemStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_prereq_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(style_prereq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockItemStyleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCUnlockItemStyleResponse_EUnlockStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_style_index(&has_bits);
          style_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style_prereq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style_prereq(&has_bits);
          style_prereq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnlockItemStyleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockItemStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 style_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_style_index(), target);
  }

  // optional uint32 style_prereq = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style_prereq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockItemStyleResponse)
  return target;
}

size_t CMsgClientToGCUnlockItemStyleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockItemStyleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .CMsgClientToGCUnlockItemStyleResponse.EUnlockStyle response = 1 [default = k_UnlockStyle_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

    // optional uint32 style_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_index());
    }

    // optional uint32 style_prereq = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style_prereq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnlockItemStyleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnlockItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnlockItemStyleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnlockItemStyleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnlockItemStyleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnlockItemStyleResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnlockItemStyleResponse::MergeFrom(const CMsgClientToGCUnlockItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockItemStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000004u) {
      style_index_ = from.style_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      style_prereq_ = from.style_prereq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCUnlockItemStyleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnlockItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnlockItemStyleResponse::CopyFrom(const CMsgClientToGCUnlockItemStyleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockItemStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockItemStyleResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockItemStyleResponse::InternalSwap(CMsgClientToGCUnlockItemStyleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyleResponse, style_prereq_)
      + sizeof(CMsgClientToGCUnlockItemStyleResponse::style_prereq_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockItemStyleResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockItemStyleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCSetItemInventoryCategory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCSetItemInventoryCategory>()._has_bits_);
  static void set_has_set_to_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remove_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_add_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCSetItemInventoryCategory)
}
CMsgClientToGCSetItemInventoryCategory::CMsgClientToGCSetItemInventoryCategory(const CMsgClientToGCSetItemInventoryCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&set_to_value_, &from.set_to_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_categories_) -
    reinterpret_cast<char*>(&set_to_value_)) + sizeof(add_categories_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCSetItemInventoryCategory)
}

void CMsgClientToGCSetItemInventoryCategory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&set_to_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&add_categories_) -
    reinterpret_cast<char*>(&set_to_value_)) + sizeof(add_categories_));
}

CMsgClientToGCSetItemInventoryCategory::~CMsgClientToGCSetItemInventoryCategory() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCSetItemInventoryCategory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCSetItemInventoryCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCSetItemInventoryCategory::ArenaDtor(void* object) {
  CMsgClientToGCSetItemInventoryCategory* _this = reinterpret_cast< CMsgClientToGCSetItemInventoryCategory* >(object);
  (void)_this;
}
void CMsgClientToGCSetItemInventoryCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCSetItemInventoryCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCSetItemInventoryCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCSetItemInventoryCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&set_to_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&add_categories_) -
        reinterpret_cast<char*>(&set_to_value_)) + sizeof(add_categories_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCSetItemInventoryCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 item_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 set_to_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_set_to_value(&has_bits);
          set_to_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remove_categories = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remove_categories(&has_bits);
          remove_categories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 add_categories = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_add_categories(&has_bits);
          add_categories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCSetItemInventoryCategory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCSetItemInventoryCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_ids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 set_to_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_set_to_value(), target);
  }

  // optional uint32 remove_categories = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remove_categories(), target);
  }

  // optional uint32 add_categories = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_add_categories(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCSetItemInventoryCategory)
  return target;
}

size_t CMsgClientToGCSetItemInventoryCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCSetItemInventoryCategory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 set_to_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_set_to_value());
    }

    // optional uint32 remove_categories = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remove_categories());
    }

    // optional uint32 add_categories = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_add_categories());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCSetItemInventoryCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCSetItemInventoryCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetItemInventoryCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCSetItemInventoryCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCSetItemInventoryCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCSetItemInventoryCategory)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetItemInventoryCategory::MergeFrom(const CMsgClientToGCSetItemInventoryCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCSetItemInventoryCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      set_to_value_ = from.set_to_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      remove_categories_ = from.remove_categories_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_categories_ = from.add_categories_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSetItemInventoryCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCSetItemInventoryCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetItemInventoryCategory::CopyFrom(const CMsgClientToGCSetItemInventoryCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCSetItemInventoryCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetItemInventoryCategory::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetItemInventoryCategory::InternalSwap(CMsgClientToGCSetItemInventoryCategory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemInventoryCategory, add_categories_)
      + sizeof(CMsgClientToGCSetItemInventoryCategory::add_categories_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCSetItemInventoryCategory, set_to_value_)>(
          reinterpret_cast<char*>(&set_to_value_),
          reinterpret_cast<char*>(&other->set_to_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCSetItemInventoryCategory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnlockCrate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrate>()._has_bits_);
  static void set_has_crate_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrate)
}
CMsgClientToGCUnlockCrate::CMsgClientToGCUnlockCrate(const CMsgClientToGCUnlockCrate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&crate_item_id_, &from.crate_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_item_id_) -
    reinterpret_cast<char*>(&crate_item_id_)) + sizeof(key_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrate)
}

void CMsgClientToGCUnlockCrate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&crate_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_item_id_) -
    reinterpret_cast<char*>(&crate_item_id_)) + sizeof(key_item_id_));
}

CMsgClientToGCUnlockCrate::~CMsgClientToGCUnlockCrate() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnlockCrate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnlockCrate::ArenaDtor(void* object) {
  CMsgClientToGCUnlockCrate* _this = reinterpret_cast< CMsgClientToGCUnlockCrate* >(object);
  (void)_this;
}
void CMsgClientToGCUnlockCrate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnlockCrate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&crate_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_item_id_) -
        reinterpret_cast<char*>(&crate_item_id_)) + sizeof(key_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 crate_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crate_item_id(&has_bits);
          crate_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 key_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_key_item_id(&has_bits);
          key_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnlockCrate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 crate_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_crate_item_id(), target);
  }

  // optional uint64 key_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrate)
  return target;
}

size_t CMsgClientToGCUnlockCrate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 crate_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_crate_item_id());
    }

    // optional uint64 key_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_key_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnlockCrate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnlockCrate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnlockCrate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnlockCrate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnlockCrate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnlockCrate)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnlockCrate::MergeFrom(const CMsgClientToGCUnlockCrate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      crate_item_id_ = from.crate_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      key_item_id_ = from.key_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCUnlockCrate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnlockCrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnlockCrate::CopyFrom(const CMsgClientToGCUnlockCrate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrate::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrate::InternalSwap(CMsgClientToGCUnlockCrate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrate, key_item_id_)
      + sizeof(CMsgClientToGCUnlockCrate::key_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrate, crate_item_id_)>(
          reinterpret_cast<char*>(&crate_item_id_),
          reinterpret_cast<char*>(&other->crate_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnlockCrateResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrateResponse_Item>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrateResponse.Item)
}
CMsgClientToGCUnlockCrateResponse_Item::CMsgClientToGCUnlockCrateResponse_Item(const CMsgClientToGCUnlockCrateResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrateResponse.Item)
}

void CMsgClientToGCUnlockCrateResponse_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(def_index_));
}

CMsgClientToGCUnlockCrateResponse_Item::~CMsgClientToGCUnlockCrateResponse_Item() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrateResponse.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnlockCrateResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnlockCrateResponse_Item::ArenaDtor(void* object) {
  CMsgClientToGCUnlockCrateResponse_Item* _this = reinterpret_cast< CMsgClientToGCUnlockCrateResponse_Item* >(object);
  (void)_this;
}
void CMsgClientToGCUnlockCrateResponse_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnlockCrateResponse_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrateResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrateResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrateResponse_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnlockCrateResponse_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrateResponse.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrateResponse.Item)
  return target;
}

size_t CMsgClientToGCUnlockCrateResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrateResponse.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnlockCrateResponse_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnlockCrateResponse_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnlockCrateResponse_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnlockCrateResponse.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnlockCrateResponse.Item)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnlockCrateResponse_Item::MergeFrom(const CMsgClientToGCUnlockCrateResponse_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCUnlockCrateResponse_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnlockCrateResponse_Item::CopyFrom(const CMsgClientToGCUnlockCrateResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrateResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrateResponse_Item::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrateResponse_Item::InternalSwap(CMsgClientToGCUnlockCrateResponse_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrateResponse_Item, def_index_)
      + sizeof(CMsgClientToGCUnlockCrateResponse_Item::def_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCUnlockCrateResponse_Item, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrateResponse_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCUnlockCrateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCUnlockCrateResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  granted_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCUnlockCrateResponse)
}
CMsgClientToGCUnlockCrateResponse::CMsgClientToGCUnlockCrateResponse(const CMsgClientToGCUnlockCrateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      granted_items_(from.granted_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCUnlockCrateResponse)
}

void CMsgClientToGCUnlockCrateResponse::SharedCtor() {
result_ = 0;
}

CMsgClientToGCUnlockCrateResponse::~CMsgClientToGCUnlockCrateResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCUnlockCrateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCUnlockCrateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCUnlockCrateResponse::ArenaDtor(void* object) {
  CMsgClientToGCUnlockCrateResponse* _this = reinterpret_cast< CMsgClientToGCUnlockCrateResponse* >(object);
  (void)_this;
}
void CMsgClientToGCUnlockCrateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCUnlockCrateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCUnlockCrateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCUnlockCrateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  granted_items_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCUnlockCrateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EGCMsgResponse_IsValid(val))) {
            _internal_set_result(static_cast<::EGCMsgResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_granted_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCUnlockCrateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCUnlockCrateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_granted_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_granted_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCUnlockCrateResponse)
  return target;
}

size_t CMsgClientToGCUnlockCrateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCUnlockCrateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCUnlockCrateResponse.Item granted_items = 2;
  total_size += 1UL * this->_internal_granted_items_size();
  for (const auto& msg : this->granted_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EGCMsgResponse result = 1 [default = k_EGCMsgResponseOK];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCUnlockCrateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCUnlockCrateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCUnlockCrateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCUnlockCrateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCUnlockCrateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCUnlockCrateResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCUnlockCrateResponse::MergeFrom(const CMsgClientToGCUnlockCrateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCUnlockCrateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_items_.MergeFrom(from.granted_items_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgClientToGCUnlockCrateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCUnlockCrateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCUnlockCrateResponse::CopyFrom(const CMsgClientToGCUnlockCrateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCUnlockCrateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCUnlockCrateResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCUnlockCrateResponse::InternalSwap(CMsgClientToGCUnlockCrateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  granted_items_.InternalSwap(&other->granted_items_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCUnlockCrateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRemoveItemAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRemoveItemAttribute>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRemoveItemAttribute)
}
CMsgClientToGCRemoveItemAttribute::CMsgClientToGCRemoveItemAttribute(const CMsgClientToGCRemoveItemAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRemoveItemAttribute)
}

void CMsgClientToGCRemoveItemAttribute::SharedCtor() {
item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientToGCRemoveItemAttribute::~CMsgClientToGCRemoveItemAttribute() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRemoveItemAttribute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRemoveItemAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRemoveItemAttribute::ArenaDtor(void* object) {
  CMsgClientToGCRemoveItemAttribute* _this = reinterpret_cast< CMsgClientToGCRemoveItemAttribute* >(object);
  (void)_this;
}
void CMsgClientToGCRemoveItemAttribute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRemoveItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRemoveItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRemoveItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRemoveItemAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRemoveItemAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRemoveItemAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRemoveItemAttribute)
  return target;
}

size_t CMsgClientToGCRemoveItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRemoveItemAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRemoveItemAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRemoveItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRemoveItemAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRemoveItemAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRemoveItemAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRemoveItemAttribute)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRemoveItemAttribute::MergeFrom(const CMsgClientToGCRemoveItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRemoveItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_id()) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void CMsgClientToGCRemoveItemAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRemoveItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRemoveItemAttribute::CopyFrom(const CMsgClientToGCRemoveItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRemoveItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRemoveItemAttribute::IsInitialized() const {
  return true;
}

void CMsgClientToGCRemoveItemAttribute::InternalSwap(CMsgClientToGCRemoveItemAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRemoveItemAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRemoveItemAttributeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRemoveItemAttributeResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRemoveItemAttributeResponse)
}
CMsgClientToGCRemoveItemAttributeResponse::CMsgClientToGCRemoveItemAttributeResponse(const CMsgClientToGCRemoveItemAttributeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRemoveItemAttributeResponse)
}

void CMsgClientToGCRemoveItemAttributeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgClientToGCRemoveItemAttributeResponse::~CMsgClientToGCRemoveItemAttributeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRemoveItemAttributeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRemoveItemAttributeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRemoveItemAttributeResponse::ArenaDtor(void* object) {
  CMsgClientToGCRemoveItemAttributeResponse* _this = reinterpret_cast< CMsgClientToGCRemoveItemAttributeResponse* >(object);
  (void)_this;
}
void CMsgClientToGCRemoveItemAttributeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRemoveItemAttributeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRemoveItemAttributeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRemoveItemAttributeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRemoveItemAttributeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCRemoveItemAttributeResponse_ERemoveItemAttribute>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRemoveItemAttributeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRemoveItemAttributeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRemoveItemAttributeResponse)
  return target;
}

size_t CMsgClientToGCRemoveItemAttributeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRemoveItemAttributeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .CMsgClientToGCRemoveItemAttributeResponse.ERemoveItemAttribute response = 1 [default = k_RemoveItemAttribute_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRemoveItemAttributeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRemoveItemAttributeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRemoveItemAttributeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRemoveItemAttributeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRemoveItemAttributeResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRemoveItemAttributeResponse::MergeFrom(const CMsgClientToGCRemoveItemAttributeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRemoveItemAttributeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRemoveItemAttributeResponse::CopyFrom(const CMsgClientToGCRemoveItemAttributeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRemoveItemAttributeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRemoveItemAttributeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRemoveItemAttributeResponse::InternalSwap(CMsgClientToGCRemoveItemAttributeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRemoveItemAttributeResponse, response_)
      + sizeof(CMsgClientToGCRemoveItemAttributeResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRemoveItemAttributeResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRemoveItemAttributeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCNameItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCNameItem>()._has_bits_);
  static void set_has_subject_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tool_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCNameItem::CMsgClientToGCNameItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCNameItem)
}
CMsgClientToGCNameItem::CMsgClientToGCNameItem(const CMsgClientToGCNameItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&subject_item_id_, &from.subject_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tool_item_id_) -
    reinterpret_cast<char*>(&subject_item_id_)) + sizeof(tool_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCNameItem)
}

void CMsgClientToGCNameItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subject_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tool_item_id_) -
    reinterpret_cast<char*>(&subject_item_id_)) + sizeof(tool_item_id_));
}

CMsgClientToGCNameItem::~CMsgClientToGCNameItem() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCNameItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCNameItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCNameItem::ArenaDtor(void* object) {
  CMsgClientToGCNameItem* _this = reinterpret_cast< CMsgClientToGCNameItem* >(object);
  (void)_this;
}
void CMsgClientToGCNameItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCNameItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCNameItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCNameItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&subject_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tool_item_id_) -
        reinterpret_cast<char*>(&subject_item_id_)) + sizeof(tool_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCNameItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 subject_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subject_item_id(&has_bits);
          subject_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tool_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tool_item_id(&has_bits);
          tool_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCNameItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCNameItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCNameItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_subject_item_id(), target);
  }

  // optional uint64 tool_item_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tool_item_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCNameItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCNameItem)
  return target;
}

size_t CMsgClientToGCNameItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCNameItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 subject_item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_subject_item_id());
    }

    // optional uint64 tool_item_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tool_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCNameItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCNameItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCNameItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCNameItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCNameItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCNameItem)
    MergeFrom(*source);
  }
}

void CMsgClientToGCNameItem::MergeFrom(const CMsgClientToGCNameItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCNameItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      subject_item_id_ = from.subject_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tool_item_id_ = from.tool_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCNameItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCNameItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCNameItem::CopyFrom(const CMsgClientToGCNameItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCNameItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCNameItem::IsInitialized() const {
  return true;
}

void CMsgClientToGCNameItem::InternalSwap(CMsgClientToGCNameItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItem, tool_item_id_)
      + sizeof(CMsgClientToGCNameItem::tool_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItem, subject_item_id_)>(
          reinterpret_cast<char*>(&subject_item_id_),
          reinterpret_cast<char*>(&other->subject_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCNameItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCNameItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCNameItemResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCNameItemResponse)
}
CMsgClientToGCNameItemResponse::CMsgClientToGCNameItemResponse(const CMsgClientToGCNameItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCNameItemResponse)
}

void CMsgClientToGCNameItemResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgClientToGCNameItemResponse::~CMsgClientToGCNameItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCNameItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCNameItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCNameItemResponse::ArenaDtor(void* object) {
  CMsgClientToGCNameItemResponse* _this = reinterpret_cast< CMsgClientToGCNameItemResponse* >(object);
  (void)_this;
}
void CMsgClientToGCNameItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCNameItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCNameItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCNameItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCNameItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCNameItemResponse_ENameItem_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCNameItemResponse_ENameItem>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCNameItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCNameItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCNameItemResponse)
  return target;
}

size_t CMsgClientToGCNameItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCNameItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional .CMsgClientToGCNameItemResponse.ENameItem response = 1 [default = k_NameItem_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCNameItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCNameItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCNameItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCNameItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCNameItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCNameItemResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCNameItemResponse::MergeFrom(const CMsgClientToGCNameItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCNameItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCNameItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCNameItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCNameItemResponse::CopyFrom(const CMsgClientToGCNameItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCNameItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCNameItemResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCNameItemResponse::InternalSwap(CMsgClientToGCNameItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItemResponse, response_)
      + sizeof(CMsgClientToGCNameItemResponse::response_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCNameItemResponse, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCNameItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCSetItemPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCSetItemPosition>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCSetItemPosition::CMsgGCSetItemPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCSetItemPosition)
}
CMsgGCSetItemPosition::CMsgGCSetItemPosition(const CMsgGCSetItemPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(new_position_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCSetItemPosition)
}

void CMsgGCSetItemPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(new_position_));
}

CMsgGCSetItemPosition::~CMsgGCSetItemPosition() {
  // @@protoc_insertion_point(destructor:CMsgGCSetItemPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCSetItemPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCSetItemPosition::ArenaDtor(void* object) {
  CMsgGCSetItemPosition* _this = reinterpret_cast< CMsgGCSetItemPosition* >(object);
  (void)_this;
}
void CMsgGCSetItemPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCSetItemPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCSetItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCSetItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_position_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(new_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCSetItemPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_position(&has_bits);
          new_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCSetItemPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCSetItemPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 new_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCSetItemPosition)
  return target;
}

size_t CMsgGCSetItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCSetItemPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 new_position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_position());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCSetItemPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCSetItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCSetItemPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCSetItemPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCSetItemPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCSetItemPosition)
    MergeFrom(*source);
  }
}

void CMsgGCSetItemPosition::MergeFrom(const CMsgGCSetItemPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCSetItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_position_ = from.new_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCSetItemPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCSetItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCSetItemPosition::CopyFrom(const CMsgGCSetItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCSetItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCSetItemPosition::IsInitialized() const {
  return true;
}

void CMsgGCSetItemPosition::InternalSwap(CMsgGCSetItemPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCSetItemPosition, new_position_)
      + sizeof(CMsgGCSetItemPosition::new_position_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCSetItemPosition, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCSetItemPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAttribute_ItemDynamicRecipeComponent::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_ItemDynamicRecipeComponent>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_item_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_attributes_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_items_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_rarity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lootlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fulfilled_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_ItemDynamicRecipeComponent)
}
CAttribute_ItemDynamicRecipeComponent::CAttribute_ItemDynamicRecipeComponent(const CAttribute_ItemDynamicRecipeComponent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attributes_string()) {
    attributes_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attributes_string(), 
      GetArena());
  }
  lootlist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lootlist()) {
    lootlist_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lootlist(), 
      GetArena());
  }
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&fulfilled_item_id_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(fulfilled_item_id_));
  // @@protoc_insertion_point(copy_constructor:CAttribute_ItemDynamicRecipeComponent)
}

void CAttribute_ItemDynamicRecipeComponent::SharedCtor() {
attributes_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lootlist_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fulfilled_item_id_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(fulfilled_item_id_));
}

CAttribute_ItemDynamicRecipeComponent::~CAttribute_ItemDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:CAttribute_ItemDynamicRecipeComponent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_ItemDynamicRecipeComponent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  attributes_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lootlist_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_ItemDynamicRecipeComponent::ArenaDtor(void* object) {
  CAttribute_ItemDynamicRecipeComponent* _this = reinterpret_cast< CAttribute_ItemDynamicRecipeComponent* >(object);
  (void)_this;
}
void CAttribute_ItemDynamicRecipeComponent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_ItemDynamicRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_ItemDynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_ItemDynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      attributes_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lootlist_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_rarity_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(item_rarity_));
  }
  fulfilled_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_ItemDynamicRecipeComponent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_item_flags(&has_bits);
          item_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string attributes_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_attributes_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_ItemDynamicRecipeComponent.attributes_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 items_fulfilled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_items_fulfilled(&has_bits);
          items_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_rarity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_rarity(&has_bits);
          item_rarity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lootlist = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_lootlist();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_ItemDynamicRecipeComponent.lootlist");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 fulfilled_item_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fulfilled_item_id(&has_bits);
          fulfilled_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_ItemDynamicRecipeComponent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_ItemDynamicRecipeComponent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_quality(), target);
  }

  // optional uint32 item_flags = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item_flags(), target);
  }

  // optional string attributes_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attributes_string().data(), static_cast<int>(this->_internal_attributes_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.attributes_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_attributes_string(), target);
  }

  // optional uint32 item_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_item_count(), target);
  }

  // optional uint32 items_fulfilled = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_items_fulfilled(), target);
  }

  // optional uint32 item_rarity = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_rarity(), target);
  }

  // optional string lootlist = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lootlist().data(), static_cast<int>(this->_internal_lootlist().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_ItemDynamicRecipeComponent.lootlist");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lootlist(), target);
  }

  // optional uint64 fulfilled_item_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_fulfilled_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_ItemDynamicRecipeComponent)
  return target;
}

size_t CAttribute_ItemDynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_ItemDynamicRecipeComponent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string attributes_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attributes_string());
    }

    // optional string lootlist = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lootlist());
    }

    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional uint32 item_quality = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_quality());
    }

    // optional uint32 item_flags = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_flags());
    }

    // optional uint32 item_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_count());
    }

    // optional uint32 items_fulfilled = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_items_fulfilled());
    }

    // optional uint32 item_rarity = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_rarity());
    }

  }
  // optional uint64 fulfilled_item_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fulfilled_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_ItemDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_ItemDynamicRecipeComponent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_ItemDynamicRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_ItemDynamicRecipeComponent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_ItemDynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CAttribute_ItemDynamicRecipeComponent::MergeFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_ItemDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_attributes_string(from._internal_attributes_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lootlist(from._internal_lootlist());
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_flags_ = from.item_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      items_fulfilled_ = from.items_fulfilled_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_rarity_ = from.item_rarity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_fulfilled_item_id(from._internal_fulfilled_item_id());
  }
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_ItemDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_ItemDynamicRecipeComponent::CopyFrom(const CAttribute_ItemDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_ItemDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_ItemDynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CAttribute_ItemDynamicRecipeComponent::InternalSwap(CAttribute_ItemDynamicRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attributes_string_.Swap(&other->attributes_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lootlist_.Swap(&other->lootlist_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, fulfilled_item_id_)
      + sizeof(CAttribute_ItemDynamicRecipeComponent::fulfilled_item_id_)
      - PROTOBUF_FIELD_OFFSET(CAttribute_ItemDynamicRecipeComponent, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_ItemDynamicRecipeComponent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attr_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_required_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_required_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_not_tradable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_required_item_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CProtoItemSocket::CProtoItemSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket)
}
CProtoItemSocket::CProtoItemSocket(const CProtoItemSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_hero()) {
    required_hero_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_hero(), 
      GetArena());
  }
  required_item_slot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_item_slot()) {
    required_item_slot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_item_slot(), 
      GetArena());
  }
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_tradable_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(not_tradable_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket)
}

void CProtoItemSocket::SharedCtor() {
required_hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
required_item_slot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_tradable_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(not_tradable_));
}

CProtoItemSocket::~CProtoItemSocket() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  required_hero_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_item_slot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemSocket::ArenaDtor(void* object) {
  CProtoItemSocket* _this = reinterpret_cast< CProtoItemSocket* >(object);
  (void)_this;
}
void CProtoItemSocket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      required_hero_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      required_item_slot_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_tradable_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(not_tradable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attr_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attr_def_index(&has_bits);
          attr_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required_type(&has_bits);
          required_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_hero = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_required_hero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemSocket.required_hero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gem_def_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gem_def_index(&has_bits);
          gem_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool not_tradable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_not_tradable(&has_bits);
          not_tradable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string required_item_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_required_item_slot();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemSocket.required_item_slot");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 attr_def_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_attr_def_index(), target);
  }

  // optional uint32 required_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_type(), target);
  }

  // optional string required_hero = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_hero().data(), static_cast<int>(this->_internal_required_hero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_hero");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_required_hero(), target);
  }

  // optional uint32 gem_def_index = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gem_def_index(), target);
  }

  // optional bool not_tradable = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_not_tradable(), target);
  }

  // optional string required_item_slot = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_item_slot().data(), static_cast<int>(this->_internal_required_item_slot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket.required_item_slot");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_required_item_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket)
  return target;
}

size_t CProtoItemSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string required_hero = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_hero());
    }

    // optional string required_item_slot = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_required_item_slot());
    }

    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 attr_def_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attr_def_index());
    }

    // optional uint32 required_type = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_type());
    }

    // optional uint32 gem_def_index = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gem_def_index());
    }

    // optional bool not_tradable = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket)
    MergeFrom(*source);
  }
}

void CProtoItemSocket::MergeFrom(const CProtoItemSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_required_hero(from._internal_required_hero());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_required_item_slot(from._internal_required_item_slot());
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      attr_def_index_ = from.attr_def_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      required_type_ = from.required_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      gem_def_index_ = from.gem_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      not_tradable_ = from.not_tradable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket::CopyFrom(const CProtoItemSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket::IsInitialized() const {
  return true;
}

void CProtoItemSocket::InternalSwap(CProtoItemSocket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  required_hero_.Swap(&other->required_hero_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  required_item_slot_.Swap(&other->required_item_slot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket, not_tradable_)
      + sizeof(CProtoItemSocket::not_tradable_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Empty::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Empty>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Empty* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Empty::_Internal::socket(const CProtoItemSocket_Empty* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Empty::CProtoItemSocket_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Empty)
}
CProtoItemSocket_Empty::CProtoItemSocket_Empty(const CProtoItemSocket_Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Empty)
}

void CProtoItemSocket_Empty::SharedCtor() {
socket_ = nullptr;
}

CProtoItemSocket_Empty::~CProtoItemSocket_Empty() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Empty::ArenaDtor(void* object) {
  CProtoItemSocket_Empty* _this = reinterpret_cast< CProtoItemSocket_Empty* >(object);
  (void)_this;
}
void CProtoItemSocket_Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Empty)
  return target;
}

size_t CProtoItemSocket_Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CProtoItemSocket socket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Empty)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Empty::MergeFrom(const CProtoItemSocket_Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
  }
}

void CProtoItemSocket_Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Empty::CopyFrom(const CProtoItemSocket_Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Empty::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Empty::InternalSwap(CProtoItemSocket_Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Effect::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Effect>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Effect* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Effect::_Internal::socket(const CProtoItemSocket_Effect* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Effect::CProtoItemSocket_Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Effect)
}
CProtoItemSocket_Effect::CProtoItemSocket_Effect(const CProtoItemSocket_Effect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  effect_ = from.effect_;
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Effect)
}

void CProtoItemSocket_Effect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&effect_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(effect_));
}

CProtoItemSocket_Effect::~CProtoItemSocket_Effect() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Effect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Effect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Effect::ArenaDtor(void* object) {
  CProtoItemSocket_Effect* _this = reinterpret_cast< CProtoItemSocket_Effect* >(object);
  (void)_this;
}
void CProtoItemSocket_Effect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Effect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Effect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  effect_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Effect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_effect(&has_bits);
          effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Effect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Effect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 effect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Effect)
  return target;
}

size_t CProtoItemSocket_Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Effect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 effect = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effect());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Effect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Effect)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Effect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Effect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Effect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Effect)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Effect::MergeFrom(const CProtoItemSocket_Effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Effect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      effect_ = from.effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Effect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Effect::CopyFrom(const CProtoItemSocket_Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Effect::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Effect::InternalSwap(CProtoItemSocket_Effect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Effect, effect_)
      + sizeof(CProtoItemSocket_Effect::effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Effect, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Effect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Color::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Color>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Color* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_red(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_green(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Color::_Internal::socket(const CProtoItemSocket_Color* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Color::CProtoItemSocket_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Color)
}
CProtoItemSocket_Color::CProtoItemSocket_Color(const CProtoItemSocket_Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Color)
}

void CProtoItemSocket_Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(blue_));
}

CProtoItemSocket_Color::~CProtoItemSocket_Color() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Color::ArenaDtor(void* object) {
  CProtoItemSocket_Color* _this = reinterpret_cast< CProtoItemSocket_Color* >(object);
  (void)_this;
}
void CProtoItemSocket_Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Color::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blue_) -
        reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 red = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_red(&has_bits);
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 green = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_green(&has_bits);
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_blue(&has_bits);
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 red = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_red(), target);
  }

  // optional uint32 green = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_green(), target);
  }

  // optional uint32 blue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Color)
  return target;
}

size_t CProtoItemSocket_Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 red = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_red());
    }

    // optional uint32 green = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_green());
    }

    // optional uint32 blue = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Color)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Color)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Color::MergeFrom(const CProtoItemSocket_Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000004u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000008u) {
      blue_ = from.blue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Color::CopyFrom(const CProtoItemSocket_Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Color::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Color::InternalSwap(CProtoItemSocket_Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Color, blue_)
      + sizeof(CProtoItemSocket_Color::blue_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Color, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Strange::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Strange>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Strange* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strange_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strange_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Strange::_Internal::socket(const CProtoItemSocket_Strange* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Strange::CProtoItemSocket_Strange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Strange)
}
CProtoItemSocket_Strange::CProtoItemSocket_Strange(const CProtoItemSocket_Strange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&strange_type_, &from.strange_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&strange_value_) -
    reinterpret_cast<char*>(&strange_type_)) + sizeof(strange_value_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Strange)
}

void CProtoItemSocket_Strange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&strange_value_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(strange_value_));
}

CProtoItemSocket_Strange::~CProtoItemSocket_Strange() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Strange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Strange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Strange::ArenaDtor(void* object) {
  CProtoItemSocket_Strange* _this = reinterpret_cast< CProtoItemSocket_Strange* >(object);
  (void)_this;
}
void CProtoItemSocket_Strange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Strange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Strange::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Strange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&strange_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&strange_value_) -
        reinterpret_cast<char*>(&strange_type_)) + sizeof(strange_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Strange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strange_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_strange_type(&has_bits);
          strange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strange_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_strange_value(&has_bits);
          strange_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Strange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Strange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 strange_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strange_type(), target);
  }

  // optional uint32 strange_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_strange_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Strange)
  return target;
}

size_t CProtoItemSocket_Strange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Strange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 strange_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strange_type());
    }

    // optional uint32 strange_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strange_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Strange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Strange)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Strange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Strange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Strange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Strange)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Strange::MergeFrom(const CProtoItemSocket_Strange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Strange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      strange_type_ = from.strange_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      strange_value_ = from.strange_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Strange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Strange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Strange::CopyFrom(const CProtoItemSocket_Strange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Strange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Strange::InternalSwap(CProtoItemSocket_Strange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange, strange_value_)
      + sizeof(CProtoItemSocket_Strange::strange_value_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Strange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strange_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strange_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_Internal::socket(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
}
CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&strange_type_, &from.strange_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_effect_) -
    reinterpret_cast<char*>(&strange_type_)) + sizeof(ability_effect_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ability_effect_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(ability_effect_));
}

CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::~CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::ArenaDtor(void* object) {
  CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* _this = reinterpret_cast< CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* >(object);
  (void)_this;
}
void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&strange_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_effect_) -
        reinterpret_cast<char*>(&strange_type_)) + sizeof(ability_effect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strange_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_strange_type(&has_bits);
          strange_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strange_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_strange_value(&has_bits);
          strange_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_effect(&has_bits);
          ability_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 strange_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_strange_type(), target);
  }

  // optional uint32 strange_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_strange_value(), target);
  }

  // optional uint32 ability_effect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  return target;
}

size_t CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 strange_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strange_type());
    }

    // optional uint32 strange_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strange_value());
    }

    // optional uint32 ability_effect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_effect());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      strange_type_ = from.strange_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      strange_value_ = from.strange_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_effect_ = from.ability_effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::InternalSwap(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, ability_effect_)
      + sizeof(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::ability_effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Spectator::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Spectator>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Spectator* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_games_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_corporation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Spectator::_Internal::socket(const CProtoItemSocket_Spectator* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Spectator)
}
CProtoItemSocket_Spectator::CProtoItemSocket_Spectator(const CProtoItemSocket_Spectator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&games_viewed_, &from.games_viewed_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&games_viewed_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Spectator)
}

void CProtoItemSocket_Spectator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(team_id_));
}

CProtoItemSocket_Spectator::~CProtoItemSocket_Spectator() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Spectator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Spectator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Spectator::ArenaDtor(void* object) {
  CProtoItemSocket_Spectator* _this = reinterpret_cast< CProtoItemSocket_Spectator* >(object);
  (void)_this;
}
void CProtoItemSocket_Spectator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Spectator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Spectator::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Spectator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&games_viewed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&games_viewed_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Spectator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 games_viewed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_games_viewed(&has_bits);
          games_viewed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 corporation_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_corporation_id(&has_bits);
          corporation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Spectator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Spectator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 games_viewed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_games_viewed(), target);
  }

  // optional uint32 corporation_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_corporation_id(), target);
  }

  // optional uint32 league_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_league_id(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Spectator)
  return target;
}

size_t CProtoItemSocket_Spectator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Spectator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 games_viewed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_games_viewed());
    }

    // optional uint32 corporation_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_corporation_id());
    }

    // optional uint32 league_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 team_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Spectator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Spectator)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Spectator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Spectator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Spectator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Spectator)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Spectator::MergeFrom(const CProtoItemSocket_Spectator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Spectator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      games_viewed_ = from.games_viewed_;
    }
    if (cached_has_bits & 0x00000004u) {
      corporation_id_ = from.corporation_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Spectator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Spectator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Spectator::CopyFrom(const CProtoItemSocket_Spectator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Spectator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Spectator::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Spectator::InternalSwap(CProtoItemSocket_Spectator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Spectator, team_id_)
      + sizeof(CProtoItemSocket_Spectator::team_id_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Spectator, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Spectator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_AssetModifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_AssetModifier>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_AssetModifier* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_AssetModifier::_Internal::socket(const CProtoItemSocket_AssetModifier* msg) {
  return *msg->socket_;
}
CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_AssetModifier)
}
CProtoItemSocket_AssetModifier::CProtoItemSocket_AssetModifier(const CProtoItemSocket_AssetModifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  asset_modifier_ = from.asset_modifier_;
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier)
}

void CProtoItemSocket_AssetModifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&asset_modifier_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(asset_modifier_));
}

CProtoItemSocket_AssetModifier::~CProtoItemSocket_AssetModifier() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_AssetModifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_AssetModifier::ArenaDtor(void* object) {
  CProtoItemSocket_AssetModifier* _this = reinterpret_cast< CProtoItemSocket_AssetModifier* >(object);
  (void)_this;
}
void CProtoItemSocket_AssetModifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_AssetModifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_AssetModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_AssetModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  asset_modifier_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_AssetModifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 asset_modifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_asset_modifier(&has_bits);
          asset_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_AssetModifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 asset_modifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asset_modifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier)
  return target;
}

size_t CProtoItemSocket_AssetModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_AssetModifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asset_modifier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_AssetModifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_AssetModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_AssetModifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_AssetModifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_AssetModifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_AssetModifier)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AssetModifier::MergeFrom(const CProtoItemSocket_AssetModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_AssetModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      asset_modifier_ = from.asset_modifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_AssetModifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_AssetModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AssetModifier::CopyFrom(const CProtoItemSocket_AssetModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_AssetModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier::IsInitialized() const {
  return true;
}

void CProtoItemSocket_AssetModifier::InternalSwap(CProtoItemSocket_AssetModifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier, asset_modifier_)
      + sizeof(CProtoItemSocket_AssetModifier::asset_modifier_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_AssetModifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_asset_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_anim_modifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_Internal::socket(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* msg) {
  return *msg->socket_;
}
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}
CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&asset_modifier_, &from.asset_modifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_effect_) -
    reinterpret_cast<char*>(&asset_modifier_)) + sizeof(ability_effect_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ability_effect_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(ability_effect_));
}

CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::~CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ArenaDtor(void* object) {
  CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* _this = reinterpret_cast< CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* >(object);
  (void)_this;
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&asset_modifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_effect_) -
        reinterpret_cast<char*>(&asset_modifier_)) + sizeof(ability_effect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 asset_modifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_asset_modifier(&has_bits);
          asset_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 anim_modifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_anim_modifier(&has_bits);
          anim_modifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_effect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_effect(&has_bits);
          ability_effect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional uint32 asset_modifier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_asset_modifier(), target);
  }

  // optional uint32 anim_modifier = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_anim_modifier(), target);
  }

  // optional uint32 ability_effect = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  return target;
}

size_t CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 asset_modifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_asset_modifier());
    }

    // optional uint32 anim_modifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_anim_modifier());
    }

    // optional uint32 ability_effect = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_effect());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::MergeFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000002u) {
      asset_modifier_ = from.asset_modifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      anim_modifier_ = from.anim_modifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_effect_ = from.ability_effect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::CopyFrom(const CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::IsInitialized() const {
  return true;
}

void CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::InternalSwap(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, ability_effect_)
      + sizeof(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::ability_effect_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_Autograph::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_Autograph>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_Autograph* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_autograph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_autograph_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_autograph_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_Autograph::_Internal::socket(const CProtoItemSocket_Autograph* msg) {
  return *msg->socket_;
}
CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_Autograph)
}
CProtoItemSocket_Autograph::CProtoItemSocket_Autograph(const CProtoItemSocket_Autograph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  autograph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_autograph()) {
    autograph_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_autograph(), 
      GetArena());
  }
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  ::memcpy(&autograph_id_, &from.autograph_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&autograph_score_) -
    reinterpret_cast<char*>(&autograph_id_)) + sizeof(autograph_score_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_Autograph)
}

void CProtoItemSocket_Autograph::SharedCtor() {
autograph_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&socket_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autograph_score_) -
    reinterpret_cast<char*>(&socket_)) + sizeof(autograph_score_));
}

CProtoItemSocket_Autograph::~CProtoItemSocket_Autograph() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_Autograph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_Autograph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  autograph_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_Autograph::ArenaDtor(void* object) {
  CProtoItemSocket_Autograph* _this = reinterpret_cast< CProtoItemSocket_Autograph* >(object);
  (void)_this;
}
void CProtoItemSocket_Autograph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_Autograph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_Autograph::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_Autograph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      autograph_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(socket_ != nullptr);
      socket_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&autograph_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&autograph_score_) -
        reinterpret_cast<char*>(&autograph_id_)) + sizeof(autograph_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_Autograph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string autograph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_autograph();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemSocket_Autograph.autograph");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 autograph_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_autograph_id(&has_bits);
          autograph_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 autograph_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_autograph_score(&has_bits);
          autograph_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_Autograph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_Autograph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  // optional string autograph = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_autograph().data(), static_cast<int>(this->_internal_autograph().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemSocket_Autograph.autograph");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_autograph(), target);
  }

  // optional uint32 autograph_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_autograph_id(), target);
  }

  // optional uint32 autograph_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_autograph_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_Autograph)
  return target;
}

size_t CProtoItemSocket_Autograph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_Autograph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string autograph = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_autograph());
    }

    // optional .CProtoItemSocket socket = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *socket_);
    }

    // optional uint32 autograph_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_autograph_id());
    }

    // optional uint32 autograph_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_autograph_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_Autograph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_Autograph)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_Autograph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_Autograph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_Autograph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_Autograph)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_Autograph::MergeFrom(const CProtoItemSocket_Autograph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_Autograph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_autograph(from._internal_autograph());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
    }
    if (cached_has_bits & 0x00000004u) {
      autograph_id_ = from.autograph_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      autograph_score_ = from.autograph_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemSocket_Autograph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_Autograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_Autograph::CopyFrom(const CProtoItemSocket_Autograph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_Autograph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_Autograph::IsInitialized() const {
  return true;
}

void CProtoItemSocket_Autograph::InternalSwap(CProtoItemSocket_Autograph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  autograph_.Swap(&other->autograph_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Autograph, autograph_score_)
      + sizeof(CProtoItemSocket_Autograph::autograph_score_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemSocket_Autograph, socket_)>(
          reinterpret_cast<char*>(&socket_),
          reinterpret_cast<char*>(&other->socket_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_Autograph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemSocket_StaticVisuals::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemSocket_StaticVisuals>()._has_bits_);
  static const ::CProtoItemSocket& socket(const CProtoItemSocket_StaticVisuals* msg);
  static void set_has_socket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CProtoItemSocket&
CProtoItemSocket_StaticVisuals::_Internal::socket(const CProtoItemSocket_StaticVisuals* msg) {
  return *msg->socket_;
}
CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemSocket_StaticVisuals)
}
CProtoItemSocket_StaticVisuals::CProtoItemSocket_StaticVisuals(const CProtoItemSocket_StaticVisuals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_socket()) {
    socket_ = new ::CProtoItemSocket(*from.socket_);
  } else {
    socket_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CProtoItemSocket_StaticVisuals)
}

void CProtoItemSocket_StaticVisuals::SharedCtor() {
socket_ = nullptr;
}

CProtoItemSocket_StaticVisuals::~CProtoItemSocket_StaticVisuals() {
  // @@protoc_insertion_point(destructor:CProtoItemSocket_StaticVisuals)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemSocket_StaticVisuals::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete socket_;
}

void CProtoItemSocket_StaticVisuals::ArenaDtor(void* object) {
  CProtoItemSocket_StaticVisuals* _this = reinterpret_cast< CProtoItemSocket_StaticVisuals* >(object);
  (void)_this;
}
void CProtoItemSocket_StaticVisuals::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemSocket_StaticVisuals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemSocket_StaticVisuals::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemSocket_StaticVisuals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(socket_ != nullptr);
    socket_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemSocket_StaticVisuals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CProtoItemSocket socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_socket(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemSocket_StaticVisuals::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemSocket_StaticVisuals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CProtoItemSocket socket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::socket(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemSocket_StaticVisuals)
  return target;
}

size_t CProtoItemSocket_StaticVisuals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemSocket_StaticVisuals)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CProtoItemSocket socket = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *socket_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemSocket_StaticVisuals)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemSocket_StaticVisuals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemSocket_StaticVisuals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemSocket_StaticVisuals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemSocket_StaticVisuals)
    MergeFrom(*source);
  }
}

void CProtoItemSocket_StaticVisuals::MergeFrom(const CProtoItemSocket_StaticVisuals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemSocket_StaticVisuals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_socket()) {
    _internal_mutable_socket()->::CProtoItemSocket::MergeFrom(from._internal_socket());
  }
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemSocket_StaticVisuals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemSocket_StaticVisuals::CopyFrom(const CProtoItemSocket_StaticVisuals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemSocket_StaticVisuals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemSocket_StaticVisuals::IsInitialized() const {
  return true;
}

void CProtoItemSocket_StaticVisuals::InternalSwap(CProtoItemSocket_StaticVisuals* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(socket_, other->socket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemSocket_StaticVisuals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAttribute_String::_Internal {
 public:
  using HasBits = decltype(std::declval<CAttribute_String>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAttribute_String::CAttribute_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAttribute_String)
}
CAttribute_String::CAttribute_String(const CAttribute_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CAttribute_String)
}

void CAttribute_String::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CAttribute_String::~CAttribute_String() {
  // @@protoc_insertion_point(destructor:CAttribute_String)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAttribute_String::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAttribute_String::ArenaDtor(void* object) {
  CAttribute_String* _this = reinterpret_cast< CAttribute_String* >(object);
  (void)_this;
}
void CAttribute_String::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAttribute_String::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAttribute_String::Clear() {
// @@protoc_insertion_point(message_clear_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAttribute_String::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAttribute_String.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAttribute_String::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAttribute_String)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAttribute_String.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAttribute_String)
  return target;
}

size_t CAttribute_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAttribute_String)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAttribute_String::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  const CAttribute_String* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAttribute_String>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAttribute_String)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAttribute_String)
    MergeFrom(*source);
  }
}

void CAttribute_String::MergeFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAttribute_String)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void CAttribute_String::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAttribute_String::CopyFrom(const CAttribute_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAttribute_String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAttribute_String::IsInitialized() const {
  return true;
}

void CAttribute_String::InternalSwap(CAttribute_String* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CAttribute_String::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetItemDailyRevenue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetItemDailyRevenue_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_end(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Request)
}
CWorkshop_GetItemDailyRevenue_Request::CWorkshop_GetItemDailyRevenue_Request(const CWorkshop_GetItemDailyRevenue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_end_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(date_end_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Request)
}

void CWorkshop_GetItemDailyRevenue_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_end_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(date_end_));
}

CWorkshop_GetItemDailyRevenue_Request::~CWorkshop_GetItemDailyRevenue_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetItemDailyRevenue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetItemDailyRevenue_Request::ArenaDtor(void* object) {
  CWorkshop_GetItemDailyRevenue_Request* _this = reinterpret_cast< CWorkshop_GetItemDailyRevenue_Request* >(object);
  (void)_this;
}
void CWorkshop_GetItemDailyRevenue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetItemDailyRevenue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_end_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(date_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_date_start(&has_bits);
          date_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_date_end(&has_bits);
          date_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetItemDailyRevenue_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 date_start = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_start(), target);
  }

  // optional uint32 date_end = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_date_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Request)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

    // optional uint32 date_start = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_start());
    }

    // optional uint32 date_end = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_end());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetItemDailyRevenue_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetItemDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetItemDailyRevenue_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetItemDailyRevenue_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetItemDailyRevenue_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetItemDailyRevenue_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_GetItemDailyRevenue_Request::MergeFrom(const CWorkshop_GetItemDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      date_start_ = from.date_start_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_end_ = from.date_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetItemDailyRevenue_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetItemDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetItemDailyRevenue_Request::CopyFrom(const CWorkshop_GetItemDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Request::InternalSwap(CWorkshop_GetItemDailyRevenue_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Request, date_end_)
      + sizeof(CWorkshop_GetItemDailyRevenue_Request::date_end_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revenue_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
}
CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue(const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  ::memcpy(&revenue_usd_, &from.revenue_usd_,
    static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&revenue_usd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
}

CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::~CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::ArenaDtor(void* object) {
  CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* _this = reinterpret_cast< CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* >(object);
  (void)_this;
}
void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&revenue_usd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&units_) -
        reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 revenue_usd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_revenue_usd(&has_bits);
          revenue_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_units(&has_bits);
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional uint32 date = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date(), target);
  }

  // optional int64 revenue_usd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revenue_usd(), target);
  }

  // optional int32 units = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional int64 revenue_usd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_revenue_usd());
    }

    // optional uint32 date = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date());
    }

    // optional int32 units = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_units());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
    MergeFrom(*source);
  }
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::MergeFrom(const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      revenue_usd_ = from.revenue_usd_;
    }
    if (cached_has_bits & 0x00000004u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000008u) {
      units_ = from.units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::InternalSwap(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, units_)
      + sizeof(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::units_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue, revenue_usd_)>(
          reinterpret_cast<char*>(&revenue_usd_),
          reinterpret_cast<char*>(&other->revenue_usd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetItemDailyRevenue_Response::_Internal {
 public:
};

CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  country_revenue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetItemDailyRevenue_Response)
}
CWorkshop_GetItemDailyRevenue_Response::CWorkshop_GetItemDailyRevenue_Response(const CWorkshop_GetItemDailyRevenue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      country_revenue_(from.country_revenue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetItemDailyRevenue_Response)
}

void CWorkshop_GetItemDailyRevenue_Response::SharedCtor() {
}

CWorkshop_GetItemDailyRevenue_Response::~CWorkshop_GetItemDailyRevenue_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetItemDailyRevenue_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetItemDailyRevenue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetItemDailyRevenue_Response::ArenaDtor(void* object) {
  CWorkshop_GetItemDailyRevenue_Response* _this = reinterpret_cast< CWorkshop_GetItemDailyRevenue_Response* >(object);
  (void)_this;
}
void CWorkshop_GetItemDailyRevenue_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetItemDailyRevenue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetItemDailyRevenue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetItemDailyRevenue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_revenue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetItemDailyRevenue_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_country_revenue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetItemDailyRevenue_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetItemDailyRevenue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_country_revenue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_country_revenue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetItemDailyRevenue_Response)
  return target;
}

size_t CWorkshop_GetItemDailyRevenue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetItemDailyRevenue_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_GetItemDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  total_size += 1UL * this->_internal_country_revenue_size();
  for (const auto& msg : this->country_revenue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetItemDailyRevenue_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetItemDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetItemDailyRevenue_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetItemDailyRevenue_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetItemDailyRevenue_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetItemDailyRevenue_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_GetItemDailyRevenue_Response::MergeFrom(const CWorkshop_GetItemDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetItemDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  country_revenue_.MergeFrom(from.country_revenue_);
}

void CWorkshop_GetItemDailyRevenue_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetItemDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetItemDailyRevenue_Response::CopyFrom(const CWorkshop_GetItemDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetItemDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetItemDailyRevenue_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetItemDailyRevenue_Response::InternalSwap(CWorkshop_GetItemDailyRevenue_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  country_revenue_.InternalSwap(&other->country_revenue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetItemDailyRevenue_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetPackageDailyRevenue_Request>()._has_bits_);
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_date_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Request)
}
CWorkshop_GetPackageDailyRevenue_Request::CWorkshop_GetPackageDailyRevenue_Request(const CWorkshop_GetPackageDailyRevenue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packageid_, &from.packageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_end_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(date_end_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Request)
}

void CWorkshop_GetPackageDailyRevenue_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packageid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_end_) -
    reinterpret_cast<char*>(&packageid_)) + sizeof(date_end_));
}

CWorkshop_GetPackageDailyRevenue_Request::~CWorkshop_GetPackageDailyRevenue_Request() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetPackageDailyRevenue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetPackageDailyRevenue_Request::ArenaDtor(void* object) {
  CWorkshop_GetPackageDailyRevenue_Request* _this = reinterpret_cast< CWorkshop_GetPackageDailyRevenue_Request* >(object);
  (void)_this;
}
void CWorkshop_GetPackageDailyRevenue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetPackageDailyRevenue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_end_) -
        reinterpret_cast<char*>(&packageid_)) + sizeof(date_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 packageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_date_start(&has_bits);
          date_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date_end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_date_end(&has_bits);
          date_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetPackageDailyRevenue_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 packageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packageid(), target);
  }

  // optional uint32 date_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date_start(), target);
  }

  // optional uint32 date_end = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_date_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Request)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 packageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_packageid());
    }

    // optional uint32 date_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_start());
    }

    // optional uint32 date_end = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date_end());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetPackageDailyRevenue_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetPackageDailyRevenue_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetPackageDailyRevenue_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetPackageDailyRevenue_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetPackageDailyRevenue_Request)
    MergeFrom(*source);
  }
}

void CWorkshop_GetPackageDailyRevenue_Request::MergeFrom(const CWorkshop_GetPackageDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packageid_ = from.packageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      date_start_ = from.date_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      date_end_ = from.date_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetPackageDailyRevenue_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetPackageDailyRevenue_Request::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Request::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Request::InternalSwap(CWorkshop_GetPackageDailyRevenue_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Request, date_end_)
      + sizeof(CWorkshop_GetPackageDailyRevenue_Request::date_end_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Request, packageid_)>(
          reinterpret_cast<char*>(&packageid_),
          reinterpret_cast<char*>(&other->packageid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_Internal {
 public:
  using HasBits = decltype(std::declval<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_revenue_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_units(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
}
CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue(const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  ::memcpy(&revenue_usd_, &from.revenue_usd_,
    static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&revenue_usd_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&units_) -
    reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
}

CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::~CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::ArenaDtor(void* object) {
  CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* _this = reinterpret_cast< CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* >(object);
  (void)_this;
}
void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&revenue_usd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&units_) -
        reinterpret_cast<char*>(&revenue_usd_)) + sizeof(units_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 revenue_usd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_revenue_usd(&has_bits);
          revenue_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_units(&has_bits);
          units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional uint32 date = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_date(), target);
  }

  // optional int64 revenue_usd = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_revenue_usd(), target);
  }

  // optional int32 units = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional int64 revenue_usd = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_revenue_usd());
    }

    // optional uint32 date = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_date());
    }

    // optional int32 units = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_units());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
    MergeFrom(*source);
  }
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::MergeFrom(const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      revenue_usd_ = from.revenue_usd_;
    }
    if (cached_has_bits & 0x00000004u) {
      date_ = from.date_;
    }
    if (cached_has_bits & 0x00000008u) {
      units_ = from.units_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::InternalSwap(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, units_)
      + sizeof(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::units_)
      - PROTOBUF_FIELD_OFFSET(CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue, revenue_usd_)>(
          reinterpret_cast<char*>(&revenue_usd_),
          reinterpret_cast<char*>(&other->revenue_usd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWorkshop_GetPackageDailyRevenue_Response::_Internal {
 public:
};

CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  country_revenue_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CWorkshop_GetPackageDailyRevenue_Response)
}
CWorkshop_GetPackageDailyRevenue_Response::CWorkshop_GetPackageDailyRevenue_Response(const CWorkshop_GetPackageDailyRevenue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      country_revenue_(from.country_revenue_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CWorkshop_GetPackageDailyRevenue_Response)
}

void CWorkshop_GetPackageDailyRevenue_Response::SharedCtor() {
}

CWorkshop_GetPackageDailyRevenue_Response::~CWorkshop_GetPackageDailyRevenue_Response() {
  // @@protoc_insertion_point(destructor:CWorkshop_GetPackageDailyRevenue_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWorkshop_GetPackageDailyRevenue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWorkshop_GetPackageDailyRevenue_Response::ArenaDtor(void* object) {
  CWorkshop_GetPackageDailyRevenue_Response* _this = reinterpret_cast< CWorkshop_GetPackageDailyRevenue_Response* >(object);
  (void)_this;
}
void CWorkshop_GetPackageDailyRevenue_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWorkshop_GetPackageDailyRevenue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWorkshop_GetPackageDailyRevenue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CWorkshop_GetPackageDailyRevenue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_revenue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWorkshop_GetPackageDailyRevenue_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_country_revenue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWorkshop_GetPackageDailyRevenue_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CWorkshop_GetPackageDailyRevenue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_country_revenue_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_country_revenue(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CWorkshop_GetPackageDailyRevenue_Response)
  return target;
}

size_t CWorkshop_GetPackageDailyRevenue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CWorkshop_GetPackageDailyRevenue_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CWorkshop_GetPackageDailyRevenue_Response.CountryDailyRevenue country_revenue = 1;
  total_size += 1UL * this->_internal_country_revenue_size();
  for (const auto& msg : this->country_revenue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWorkshop_GetPackageDailyRevenue_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CWorkshop_GetPackageDailyRevenue_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWorkshop_GetPackageDailyRevenue_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CWorkshop_GetPackageDailyRevenue_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CWorkshop_GetPackageDailyRevenue_Response)
    MergeFrom(*source);
  }
}

void CWorkshop_GetPackageDailyRevenue_Response::MergeFrom(const CWorkshop_GetPackageDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  country_revenue_.MergeFrom(from.country_revenue_);
}

void CWorkshop_GetPackageDailyRevenue_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWorkshop_GetPackageDailyRevenue_Response::CopyFrom(const CWorkshop_GetPackageDailyRevenue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CWorkshop_GetPackageDailyRevenue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWorkshop_GetPackageDailyRevenue_Response::IsInitialized() const {
  return true;
}

void CWorkshop_GetPackageDailyRevenue_Response::InternalSwap(CWorkshop_GetPackageDailyRevenue_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  country_revenue_.InternalSwap(&other->country_revenue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CWorkshop_GetPackageDailyRevenue_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSQLGCToGCGrantBackpackSlots::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSQLGCToGCGrantBackpackSlots>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_add_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSQLGCToGCGrantBackpackSlots)
}
CMsgSQLGCToGCGrantBackpackSlots::CMsgSQLGCToGCGrantBackpackSlots(const CMsgSQLGCToGCGrantBackpackSlots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_slots_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(add_slots_));
  // @@protoc_insertion_point(copy_constructor:CMsgSQLGCToGCGrantBackpackSlots)
}

void CMsgSQLGCToGCGrantBackpackSlots::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&add_slots_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(add_slots_));
}

CMsgSQLGCToGCGrantBackpackSlots::~CMsgSQLGCToGCGrantBackpackSlots() {
  // @@protoc_insertion_point(destructor:CMsgSQLGCToGCGrantBackpackSlots)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSQLGCToGCGrantBackpackSlots::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSQLGCToGCGrantBackpackSlots::ArenaDtor(void* object) {
  CMsgSQLGCToGCGrantBackpackSlots* _this = reinterpret_cast< CMsgSQLGCToGCGrantBackpackSlots* >(object);
  (void)_this;
}
void CMsgSQLGCToGCGrantBackpackSlots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSQLGCToGCGrantBackpackSlots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSQLGCToGCGrantBackpackSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSQLGCToGCGrantBackpackSlots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&add_slots_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(add_slots_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSQLGCToGCGrantBackpackSlots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 add_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_add_slots(&has_bits);
          add_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSQLGCToGCGrantBackpackSlots::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSQLGCToGCGrantBackpackSlots)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 add_slots = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_add_slots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSQLGCToGCGrantBackpackSlots)
  return target;
}

size_t CMsgSQLGCToGCGrantBackpackSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSQLGCToGCGrantBackpackSlots)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 add_slots = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_add_slots());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSQLGCToGCGrantBackpackSlots::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSQLGCToGCGrantBackpackSlots* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSQLGCToGCGrantBackpackSlots>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSQLGCToGCGrantBackpackSlots)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSQLGCToGCGrantBackpackSlots)
    MergeFrom(*source);
  }
}

void CMsgSQLGCToGCGrantBackpackSlots::MergeFrom(const CMsgSQLGCToGCGrantBackpackSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      add_slots_ = from.add_slots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSQLGCToGCGrantBackpackSlots::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSQLGCToGCGrantBackpackSlots::CopyFrom(const CMsgSQLGCToGCGrantBackpackSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSQLGCToGCGrantBackpackSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSQLGCToGCGrantBackpackSlots::IsInitialized() const {
  return true;
}

void CMsgSQLGCToGCGrantBackpackSlots::InternalSwap(CMsgSQLGCToGCGrantBackpackSlots* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSQLGCToGCGrantBackpackSlots, add_slots_)
      + sizeof(CMsgSQLGCToGCGrantBackpackSlots::add_slots_)
      - PROTOBUF_FIELD_OFFSET(CMsgSQLGCToGCGrantBackpackSlots, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSQLGCToGCGrantBackpackSlots::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCLookupAccountName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCLookupAccountName>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCLookupAccountName)
}
CMsgClientToGCLookupAccountName::CMsgClientToGCLookupAccountName(const CMsgClientToGCLookupAccountName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCLookupAccountName)
}

void CMsgClientToGCLookupAccountName::SharedCtor() {
account_id_ = 0u;
}

CMsgClientToGCLookupAccountName::~CMsgClientToGCLookupAccountName() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCLookupAccountName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCLookupAccountName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCLookupAccountName::ArenaDtor(void* object) {
  CMsgClientToGCLookupAccountName* _this = reinterpret_cast< CMsgClientToGCLookupAccountName* >(object);
  (void)_this;
}
void CMsgClientToGCLookupAccountName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCLookupAccountName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCLookupAccountName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCLookupAccountName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCLookupAccountName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCLookupAccountName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCLookupAccountName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCLookupAccountName)
  return target;
}

size_t CMsgClientToGCLookupAccountName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCLookupAccountName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCLookupAccountName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCLookupAccountName)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCLookupAccountName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCLookupAccountName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCLookupAccountName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCLookupAccountName)
    MergeFrom(*source);
  }
}

void CMsgClientToGCLookupAccountName::MergeFrom(const CMsgClientToGCLookupAccountName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCLookupAccountName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgClientToGCLookupAccountName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCLookupAccountName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCLookupAccountName::CopyFrom(const CMsgClientToGCLookupAccountName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCLookupAccountName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCLookupAccountName::IsInitialized() const {
  return true;
}

void CMsgClientToGCLookupAccountName::InternalSwap(CMsgClientToGCLookupAccountName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCLookupAccountName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCLookupAccountNameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCLookupAccountNameResponse>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCLookupAccountNameResponse)
}
CMsgClientToGCLookupAccountNameResponse::CMsgClientToGCLookupAccountNameResponse(const CMsgClientToGCLookupAccountNameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArena());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCLookupAccountNameResponse)
}

void CMsgClientToGCLookupAccountNameResponse::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_ = 0u;
}

CMsgClientToGCLookupAccountNameResponse::~CMsgClientToGCLookupAccountNameResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCLookupAccountNameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCLookupAccountNameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCLookupAccountNameResponse::ArenaDtor(void* object) {
  CMsgClientToGCLookupAccountNameResponse* _this = reinterpret_cast< CMsgClientToGCLookupAccountNameResponse* >(object);
  (void)_this;
}
void CMsgClientToGCLookupAccountNameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCLookupAccountNameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCLookupAccountNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCLookupAccountNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_name_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCLookupAccountNameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCLookupAccountNameResponse.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCLookupAccountNameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCLookupAccountNameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCLookupAccountNameResponse.account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCLookupAccountNameResponse)
  return target;
}

size_t CMsgClientToGCLookupAccountNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCLookupAccountNameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCLookupAccountNameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCLookupAccountNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCLookupAccountNameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCLookupAccountNameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCLookupAccountNameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCLookupAccountNameResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCLookupAccountNameResponse::MergeFrom(const CMsgClientToGCLookupAccountNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCLookupAccountNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCLookupAccountNameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCLookupAccountNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCLookupAccountNameResponse::CopyFrom(const CMsgClientToGCLookupAccountNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCLookupAccountNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCLookupAccountNameResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCLookupAccountNameResponse::InternalSwap(CMsgClientToGCLookupAccountNameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCLookupAccountNameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipe_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipe_Item>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipe.Item)
}
CMsgClientToGCCreateStaticRecipe_Item::CMsgClientToGCCreateStaticRecipe_Item(const CMsgClientToGCCreateStaticRecipe_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipe.Item)
}

void CMsgClientToGCCreateStaticRecipe_Item::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
}

CMsgClientToGCCreateStaticRecipe_Item::~CMsgClientToGCCreateStaticRecipe_Item() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipe.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipe_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipe_Item::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipe_Item* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipe_Item* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipe_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipe_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipe_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipe.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipe_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipe_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipe.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipe.Item)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipe_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipe.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipe_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipe_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipe_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipe.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipe.Item)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipe_Item::MergeFrom(const CMsgClientToGCCreateStaticRecipe_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCCreateStaticRecipe_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipe_Item::CopyFrom(const CMsgClientToGCCreateStaticRecipe_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipe.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipe_Item::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipe_Item::InternalSwap(CMsgClientToGCCreateStaticRecipe_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipe_Item, slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipe_Item::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipe_Item, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipe_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipe::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipe>()._has_bits_);
  static void set_has_recipe_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipe)
}
CMsgClientToGCCreateStaticRecipe::CMsgClientToGCCreateStaticRecipe(const CMsgClientToGCCreateStaticRecipe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  recipe_def_index_ = from.recipe_def_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipe)
}

void CMsgClientToGCCreateStaticRecipe::SharedCtor() {
recipe_def_index_ = 0u;
}

CMsgClientToGCCreateStaticRecipe::~CMsgClientToGCCreateStaticRecipe() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipe::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipe* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipe* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  recipe_def_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 recipe_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recipe_def_index(&has_bits);
          recipe_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 recipe_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recipe_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipe)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipe.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 recipe_def_index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recipe_def_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipe)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipe::MergeFrom(const CMsgClientToGCCreateStaticRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_recipe_def_index()) {
    _internal_set_recipe_def_index(from._internal_recipe_def_index());
  }
}

void CMsgClientToGCCreateStaticRecipe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipe::CopyFrom(const CMsgClientToGCCreateStaticRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipe::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipe::InternalSwap(CMsgClientToGCCreateStaticRecipe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(recipe_def_index_, other->recipe_def_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>()._has_bits_);
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
}
CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CMsgClientToGCCreateStaticRecipeResponse_OutputItem(const CMsgClientToGCCreateStaticRecipeResponse_OutputItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
}

CMsgClientToGCCreateStaticRecipeResponse_OutputItem::~CMsgClientToGCCreateStaticRecipeResponse_OutputItem() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipeResponse_OutputItem* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipeResponse_OutputItem* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(slot_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipeResponse_OutputItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_def_index(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_OutputItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

    // optional uint32 slot_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipeResponse_OutputItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipeResponse_OutputItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::MergeFrom(const CMsgClientToGCCreateStaticRecipeResponse_OutputItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_OutputItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.OutputItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_OutputItem::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_OutputItem::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_OutputItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_OutputItem, slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_OutputItem::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_OutputItem, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_OutputItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_InputError::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_InputError>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
}
CMsgClientToGCCreateStaticRecipeResponse_InputError::CMsgClientToGCCreateStaticRecipeResponse_InputError(const CMsgClientToGCCreateStaticRecipeResponse_InputError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(error_));
}

CMsgClientToGCCreateStaticRecipeResponse_InputError::~CMsgClientToGCCreateStaticRecipeResponse_InputError() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipeResponse_InputError* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipeResponse_InputError* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipeResponse_InputError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipeResponse_InputError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_InputError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(val))) {
            _internal_set_error(static_cast<::CMsgClientToGCCreateStaticRecipeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipeResponse_InputError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_InputError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse error = 2 [default = eResponse_Success];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipeResponse_InputError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipeResponse_InputError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipeResponse.InputError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipeResponse.InputError)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::MergeFrom(const CMsgClientToGCCreateStaticRecipeResponse_InputError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_InputError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.InputError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_InputError::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_InputError::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_InputError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_InputError, error_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_InputError::error_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_InputError, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_InputError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
}
CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput(const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&value_)) + sizeof(slot_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&value_)) + sizeof(slot_id_));
}

CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::~CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_id_) -
        reinterpret_cast<char*>(&value_)) + sizeof(slot_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint64 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_value());
    }

    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::MergeFrom(const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, slot_id_)
      + sizeof(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCCreateStaticRecipeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCCreateStaticRecipeResponse>()._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  output_items_(arena),
  input_errors_(arena),
  additional_outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCCreateStaticRecipeResponse)
}
CMsgClientToGCCreateStaticRecipeResponse::CMsgClientToGCCreateStaticRecipeResponse(const CMsgClientToGCCreateStaticRecipeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      output_items_(from.output_items_),
      input_errors_(from.input_errors_),
      additional_outputs_(from.additional_outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCCreateStaticRecipeResponse)
}

void CMsgClientToGCCreateStaticRecipeResponse::SharedCtor() {
response_ = 0;
}

CMsgClientToGCCreateStaticRecipeResponse::~CMsgClientToGCCreateStaticRecipeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCCreateStaticRecipeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCCreateStaticRecipeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCCreateStaticRecipeResponse::ArenaDtor(void* object) {
  CMsgClientToGCCreateStaticRecipeResponse* _this = reinterpret_cast< CMsgClientToGCCreateStaticRecipeResponse* >(object);
  (void)_this;
}
void CMsgClientToGCCreateStaticRecipeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCCreateStaticRecipeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCCreateStaticRecipeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCCreateStaticRecipeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_items_.Clear();
  input_errors_.Clear();
  additional_outputs_.Clear();
  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCCreateStaticRecipeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCCreateStaticRecipeResponse_EResponse_IsValid(val))) {
            _internal_set_response(static_cast<::CMsgClientToGCCreateStaticRecipeResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCCreateStaticRecipeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCCreateStaticRecipeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_response(), target);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_output_items(i), target, stream);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_input_errors(i), target, stream);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_additional_outputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCCreateStaticRecipeResponse)
  return target;
}

size_t CMsgClientToGCCreateStaticRecipeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCCreateStaticRecipeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.OutputItem output_items = 2;
  total_size += 1UL * this->_internal_output_items_size();
  for (const auto& msg : this->output_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.InputError input_errors = 3;
  total_size += 1UL * this->_internal_input_errors_size();
  for (const auto& msg : this->input_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgClientToGCCreateStaticRecipeResponse.AdditionalOutput additional_outputs = 4;
  total_size += 1UL * this->_internal_additional_outputs_size();
  for (const auto& msg : this->additional_outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgClientToGCCreateStaticRecipeResponse.EResponse response = 1 [default = eResponse_Success];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCCreateStaticRecipeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCCreateStaticRecipeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCCreateStaticRecipeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCCreateStaticRecipeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCCreateStaticRecipeResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCCreateStaticRecipeResponse::MergeFrom(const CMsgClientToGCCreateStaticRecipeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_items_.MergeFrom(from.output_items_);
  input_errors_.MergeFrom(from.input_errors_);
  additional_outputs_.MergeFrom(from.additional_outputs_);
  if (from._internal_has_response()) {
    _internal_set_response(from._internal_response());
  }
}

void CMsgClientToGCCreateStaticRecipeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCCreateStaticRecipeResponse::CopyFrom(const CMsgClientToGCCreateStaticRecipeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCCreateStaticRecipeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCCreateStaticRecipeResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCCreateStaticRecipeResponse::InternalSwap(CMsgClientToGCCreateStaticRecipeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  output_items_.InternalSwap(&other->output_items_);
  input_errors_.InternalSwap(&other->input_errors_);
  additional_outputs_.InternalSwap(&other->additional_outputs_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCCreateStaticRecipeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgProcessTransactionOrder_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessTransactionOrder_Item>()._has_bits_);
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_category_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_store_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_source_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parent_stack_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_default_price(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_user_facing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessTransactionOrder.Item)
}
CMsgProcessTransactionOrder_Item::CMsgProcessTransactionOrder_Item(const CMsgProcessTransactionOrder_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  category_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_category_desc()) {
    category_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_category_desc(), 
      GetArena());
  }
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_user_facing_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(is_user_facing_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessTransactionOrder.Item)
}

void CMsgProcessTransactionOrder_Item::SharedCtor() {
category_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_user_facing_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(is_user_facing_));
}

CMsgProcessTransactionOrder_Item::~CMsgProcessTransactionOrder_Item() {
  // @@protoc_insertion_point(destructor:CMsgProcessTransactionOrder.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProcessTransactionOrder_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  category_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgProcessTransactionOrder_Item::ArenaDtor(void* object) {
  CMsgProcessTransactionOrder_Item* _this = reinterpret_cast< CMsgProcessTransactionOrder_Item* >(object);
  (void)_this;
}
void CMsgProcessTransactionOrder_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProcessTransactionOrder_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProcessTransactionOrder_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessTransactionOrder.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    category_desc_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_price_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(default_price_));
  }
  is_user_facing_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessTransactionOrder_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_price(&has_bits);
          item_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string category_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_category_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProcessTransactionOrder.Item.category_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 store_purchase_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_store_purchase_type(&has_bits);
          store_purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 source_reference_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_source_reference_id(&has_bits);
          source_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parent_stack_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_parent_stack_index(&has_bits);
          parent_stack_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_default_price(&has_bits);
          default_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_user_facing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_user_facing(&has_bits);
          is_user_facing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProcessTransactionOrder_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessTransactionOrder.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def_index(), target);
  }

  // optional uint32 item_price = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_price(), target);
  }

  // optional uint32 quantity = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quantity(), target);
  }

  // optional string category_desc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_category_desc().data(), static_cast<int>(this->_internal_category_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProcessTransactionOrder.Item.category_desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_category_desc(), target);
  }

  // optional uint32 store_purchase_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_store_purchase_type(), target);
  }

  // optional uint64 source_reference_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_source_reference_id(), target);
  }

  // optional int32 parent_stack_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_parent_stack_index(), target);
  }

  // optional bool default_price = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_default_price(), target);
  }

  // optional bool is_user_facing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_user_facing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessTransactionOrder.Item)
  return target;
}

size_t CMsgProcessTransactionOrder_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessTransactionOrder.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string category_desc = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_desc());
    }

    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional uint32 item_price = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_price());
    }

    // optional uint32 quantity = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 store_purchase_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_store_purchase_type());
    }

    // optional uint64 source_reference_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_source_reference_id());
    }

    // optional int32 parent_stack_index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_parent_stack_index());
    }

    // optional bool default_price = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_user_facing = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProcessTransactionOrder_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProcessTransactionOrder.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProcessTransactionOrder_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProcessTransactionOrder_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProcessTransactionOrder.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProcessTransactionOrder.Item)
    MergeFrom(*source);
  }
}

void CMsgProcessTransactionOrder_Item::MergeFrom(const CMsgProcessTransactionOrder_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessTransactionOrder.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category_desc(from._internal_category_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_price_ = from.item_price_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      store_purchase_type_ = from.store_purchase_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      source_reference_id_ = from.source_reference_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      parent_stack_index_ = from.parent_stack_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_price_ = from.default_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_is_user_facing(from._internal_is_user_facing());
  }
}

void CMsgProcessTransactionOrder_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProcessTransactionOrder.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProcessTransactionOrder_Item::CopyFrom(const CMsgProcessTransactionOrder_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessTransactionOrder.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessTransactionOrder_Item::IsInitialized() const {
  return true;
}

void CMsgProcessTransactionOrder_Item::InternalSwap(CMsgProcessTransactionOrder_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  category_desc_.Swap(&other->category_desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder_Item, is_user_facing_)
      + sizeof(CMsgProcessTransactionOrder_Item::is_user_facing_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder_Item, item_def_index_)>(
          reinterpret_cast<char*>(&item_def_index_),
          reinterpret_cast<char*>(&other->item_def_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessTransactionOrder_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgProcessTransactionOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProcessTransactionOrder>()._has_bits_);
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partner_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time_stamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watermark(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_purchase_report_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgProcessTransactionOrder)
}
CMsgProcessTransactionOrder::CMsgProcessTransactionOrder(const CMsgProcessTransactionOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:CMsgProcessTransactionOrder)
}

void CMsgProcessTransactionOrder::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&txn_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(currency_));
}

CMsgProcessTransactionOrder::~CMsgProcessTransactionOrder() {
  // @@protoc_insertion_point(destructor:CMsgProcessTransactionOrder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgProcessTransactionOrder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgProcessTransactionOrder::ArenaDtor(void* object) {
  CMsgProcessTransactionOrder* _this = reinterpret_cast< CMsgProcessTransactionOrder* >(object);
  (void)_this;
}
void CMsgProcessTransactionOrder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProcessTransactionOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProcessTransactionOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProcessTransactionOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&txn_id_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProcessTransactionOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 steam_txn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_steam_txn_id(&has_bits);
          steam_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 partner_txn_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_partner_txn_id(&has_bits);
          partner_txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_stamp(&has_bits);
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 watermark = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_watermark(&has_bits);
          watermark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 purchase_report_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_purchase_report_status(&has_bits);
          purchase_report_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_currency(&has_bits);
          currency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgProcessTransactionOrder.Item items = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgProcessTransactionOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProcessTransactionOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_txn_id(), target);
  }

  // optional uint64 steam_txn_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_steam_txn_id(), target);
  }

  // optional uint64 partner_txn_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_partner_txn_id(), target);
  }

  // optional fixed64 steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_steam_id(), target);
  }

  // optional uint32 time_stamp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_stamp(), target);
  }

  // optional uint64 watermark = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_watermark(), target);
  }

  // optional int32 purchase_report_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_purchase_report_status(), target);
  }

  // optional uint32 currency = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_currency(), target);
  }

  // repeated .CMsgProcessTransactionOrder.Item items = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProcessTransactionOrder)
  return target;
}

size_t CMsgProcessTransactionOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProcessTransactionOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgProcessTransactionOrder.Item items = 9;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 txn_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_txn_id());
    }

    // optional uint64 steam_txn_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steam_txn_id());
    }

    // optional uint64 partner_txn_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_partner_txn_id());
    }

    // optional fixed64 steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 watermark = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_watermark());
    }

    // optional uint32 time_stamp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_stamp());
    }

    // optional int32 purchase_report_status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_purchase_report_status());
    }

    // optional uint32 currency = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_currency());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgProcessTransactionOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgProcessTransactionOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProcessTransactionOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgProcessTransactionOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgProcessTransactionOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgProcessTransactionOrder)
    MergeFrom(*source);
  }
}

void CMsgProcessTransactionOrder::MergeFrom(const CMsgProcessTransactionOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProcessTransactionOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_txn_id_ = from.steam_txn_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      partner_txn_id_ = from.partner_txn_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      watermark_ = from.watermark_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      purchase_report_status_ = from.purchase_report_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProcessTransactionOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgProcessTransactionOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProcessTransactionOrder::CopyFrom(const CMsgProcessTransactionOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProcessTransactionOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProcessTransactionOrder::IsInitialized() const {
  return true;
}

void CMsgProcessTransactionOrder::InternalSwap(CMsgProcessTransactionOrder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder, currency_)
      + sizeof(CMsgProcessTransactionOrder::currency_)
      - PROTOBUF_FIELD_OFFSET(CMsgProcessTransactionOrder, txn_id_)>(
          reinterpret_cast<char*>(&txn_id_),
          reinterpret_cast<char*>(&other->txn_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProcessTransactionOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCStoreProcessCDKeyTransaction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessCDKeyTransaction>()._has_bits_);
  static const ::CMsgProcessTransactionOrder& order(const CMsgGCToGCStoreProcessCDKeyTransaction* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgProcessTransactionOrder&
CMsgGCToGCStoreProcessCDKeyTransaction::_Internal::order(const CMsgGCToGCStoreProcessCDKeyTransaction* msg) {
  return *msg->order_;
}
CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessCDKeyTransaction)
}
CMsgGCToGCStoreProcessCDKeyTransaction::CMsgGCToGCStoreProcessCDKeyTransaction(const CMsgGCToGCStoreProcessCDKeyTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::CMsgProcessTransactionOrder(*from.order_);
  } else {
    order_ = nullptr;
  }
  ::memcpy(&reason_code_, &from.reason_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&partner_) -
    reinterpret_cast<char*>(&reason_code_)) + sizeof(partner_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessCDKeyTransaction)
}

void CMsgGCToGCStoreProcessCDKeyTransaction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&partner_) -
    reinterpret_cast<char*>(&order_)) + sizeof(partner_));
}

CMsgGCToGCStoreProcessCDKeyTransaction::~CMsgGCToGCStoreProcessCDKeyTransaction() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessCDKeyTransaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCStoreProcessCDKeyTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void CMsgGCToGCStoreProcessCDKeyTransaction::ArenaDtor(void* object) {
  CMsgGCToGCStoreProcessCDKeyTransaction* _this = reinterpret_cast< CMsgGCToGCStoreProcessCDKeyTransaction* >(object);
  (void)_this;
}
void CMsgGCToGCStoreProcessCDKeyTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCStoreProcessCDKeyTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessCDKeyTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(order_ != nullptr);
    order_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&reason_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partner_) -
        reinterpret_cast<char*>(&reason_code_)) + sizeof(partner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessCDKeyTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgProcessTransactionOrder order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reason_code(&has_bits);
          reason_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 partner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_partner(&has_bits);
          partner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCStoreProcessCDKeyTransaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgProcessTransactionOrder order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // optional uint32 reason_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason_code(), target);
  }

  // optional uint32 partner = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_partner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessCDKeyTransaction)
  return target;
}

size_t CMsgGCToGCStoreProcessCDKeyTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgProcessTransactionOrder order = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *order_);
    }

    // optional uint32 reason_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason_code());
    }

    // optional uint32 partner = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_partner());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCStoreProcessCDKeyTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCStoreProcessCDKeyTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCStoreProcessCDKeyTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCStoreProcessCDKeyTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCStoreProcessCDKeyTransaction)
    MergeFrom(*source);
  }
}

void CMsgGCToGCStoreProcessCDKeyTransaction::MergeFrom(const CMsgGCToGCStoreProcessCDKeyTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_order()->::CMsgProcessTransactionOrder::MergeFrom(from._internal_order());
    }
    if (cached_has_bits & 0x00000002u) {
      reason_code_ = from.reason_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      partner_ = from.partner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCStoreProcessCDKeyTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCStoreProcessCDKeyTransaction::CopyFrom(const CMsgGCToGCStoreProcessCDKeyTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessCDKeyTransaction::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessCDKeyTransaction::InternalSwap(CMsgGCToGCStoreProcessCDKeyTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCStoreProcessCDKeyTransaction, partner_)
      + sizeof(CMsgGCToGCStoreProcessCDKeyTransaction::partner_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCStoreProcessCDKeyTransaction, order_)>(
          reinterpret_cast<char*>(&order_),
          reinterpret_cast<char*>(&other->order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessCDKeyTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCStoreProcessCDKeyTransactionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessCDKeyTransactionResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
}
CMsgGCToGCStoreProcessCDKeyTransactionResponse::CMsgGCToGCStoreProcessCDKeyTransactionResponse(const CMsgGCToGCStoreProcessCDKeyTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SharedCtor() {
success_ = false;
}

CMsgGCToGCStoreProcessCDKeyTransactionResponse::~CMsgGCToGCStoreProcessCDKeyTransactionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::ArenaDtor(void* object) {
  CMsgGCToGCStoreProcessCDKeyTransactionResponse* _this = reinterpret_cast< CMsgGCToGCStoreProcessCDKeyTransactionResponse* >(object);
  (void)_this;
}
void CMsgGCToGCStoreProcessCDKeyTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCStoreProcessCDKeyTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessCDKeyTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCStoreProcessCDKeyTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  return target;
}

size_t CMsgGCToGCStoreProcessCDKeyTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCStoreProcessCDKeyTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCStoreProcessCDKeyTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::MergeFrom(const CMsgGCToGCStoreProcessCDKeyTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::CopyFrom(const CMsgGCToGCStoreProcessCDKeyTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessCDKeyTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessCDKeyTransactionResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessCDKeyTransactionResponse::InternalSwap(CMsgGCToGCStoreProcessCDKeyTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessCDKeyTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCStoreProcessSettlement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessSettlement>()._has_bits_);
  static const ::CMsgProcessTransactionOrder& order(const CMsgGCToGCStoreProcessSettlement* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgProcessTransactionOrder&
CMsgGCToGCStoreProcessSettlement::_Internal::order(const CMsgGCToGCStoreProcessSettlement* msg) {
  return *msg->order_;
}
CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessSettlement)
}
CMsgGCToGCStoreProcessSettlement::CMsgGCToGCStoreProcessSettlement(const CMsgGCToGCStoreProcessSettlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::CMsgProcessTransactionOrder(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessSettlement)
}

void CMsgGCToGCStoreProcessSettlement::SharedCtor() {
order_ = nullptr;
}

CMsgGCToGCStoreProcessSettlement::~CMsgGCToGCStoreProcessSettlement() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessSettlement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCStoreProcessSettlement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete order_;
}

void CMsgGCToGCStoreProcessSettlement::ArenaDtor(void* object) {
  CMsgGCToGCStoreProcessSettlement* _this = reinterpret_cast< CMsgGCToGCStoreProcessSettlement* >(object);
  (void)_this;
}
void CMsgGCToGCStoreProcessSettlement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCStoreProcessSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(order_ != nullptr);
    order_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessSettlement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgProcessTransactionOrder order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCStoreProcessSettlement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgProcessTransactionOrder order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessSettlement)
  return target;
}

size_t CMsgGCToGCStoreProcessSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessSettlement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgProcessTransactionOrder order = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCStoreProcessSettlement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCStoreProcessSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCStoreProcessSettlement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCStoreProcessSettlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCStoreProcessSettlement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCStoreProcessSettlement)
    MergeFrom(*source);
  }
}

void CMsgGCToGCStoreProcessSettlement::MergeFrom(const CMsgGCToGCStoreProcessSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_order()) {
    _internal_mutable_order()->::CMsgProcessTransactionOrder::MergeFrom(from._internal_order());
  }
}

void CMsgGCToGCStoreProcessSettlement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCStoreProcessSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCStoreProcessSettlement::CopyFrom(const CMsgGCToGCStoreProcessSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessSettlement::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessSettlement::InternalSwap(CMsgGCToGCStoreProcessSettlement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessSettlement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCStoreProcessSettlementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCStoreProcessSettlementResponse>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCStoreProcessSettlementResponse)
}
CMsgGCToGCStoreProcessSettlementResponse::CMsgGCToGCStoreProcessSettlementResponse(const CMsgGCToGCStoreProcessSettlementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCStoreProcessSettlementResponse)
}

void CMsgGCToGCStoreProcessSettlementResponse::SharedCtor() {
success_ = false;
}

CMsgGCToGCStoreProcessSettlementResponse::~CMsgGCToGCStoreProcessSettlementResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCStoreProcessSettlementResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCStoreProcessSettlementResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCStoreProcessSettlementResponse::ArenaDtor(void* object) {
  CMsgGCToGCStoreProcessSettlementResponse* _this = reinterpret_cast< CMsgGCToGCStoreProcessSettlementResponse* >(object);
  (void)_this;
}
void CMsgGCToGCStoreProcessSettlementResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCStoreProcessSettlementResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCStoreProcessSettlementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCStoreProcessSettlementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCStoreProcessSettlementResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCStoreProcessSettlementResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCStoreProcessSettlementResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCStoreProcessSettlementResponse)
  return target;
}

size_t CMsgGCToGCStoreProcessSettlementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCStoreProcessSettlementResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCStoreProcessSettlementResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCStoreProcessSettlementResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCStoreProcessSettlementResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCStoreProcessSettlementResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCStoreProcessSettlementResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCStoreProcessSettlementResponse::MergeFrom(const CMsgGCToGCStoreProcessSettlementResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_success()) {
    _internal_set_success(from._internal_success());
  }
}

void CMsgGCToGCStoreProcessSettlementResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCStoreProcessSettlementResponse::CopyFrom(const CMsgGCToGCStoreProcessSettlementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCStoreProcessSettlementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCStoreProcessSettlementResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCStoreProcessSettlementResponse::InternalSwap(CMsgGCToGCStoreProcessSettlementResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCStoreProcessSettlementResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCBroadcastConsoleCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBroadcastConsoleCommand>()._has_bits_);
  static void set_has_con_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_output(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_output_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBroadcastConsoleCommand)
}
CMsgGCToGCBroadcastConsoleCommand::CMsgGCToGCBroadcastConsoleCommand(const CMsgGCToGCBroadcastConsoleCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  con_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_con_command()) {
    con_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_con_command(), 
      GetArena());
  }
  output_initiator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_output_initiator()) {
    output_initiator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_output_initiator(), 
      GetArena());
  }
  ::memcpy(&report_output_, &from.report_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&sending_gc_) -
    reinterpret_cast<char*>(&report_output_)) + sizeof(sending_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBroadcastConsoleCommand)
}

void CMsgGCToGCBroadcastConsoleCommand::SharedCtor() {
con_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
output_initiator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&report_output_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sending_gc_) -
    reinterpret_cast<char*>(&report_output_)) + sizeof(sending_gc_));
}

CMsgGCToGCBroadcastConsoleCommand::~CMsgGCToGCBroadcastConsoleCommand() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBroadcastConsoleCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCBroadcastConsoleCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  con_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_initiator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCBroadcastConsoleCommand::ArenaDtor(void* object) {
  CMsgGCToGCBroadcastConsoleCommand* _this = reinterpret_cast< CMsgGCToGCBroadcastConsoleCommand* >(object);
  (void)_this;
}
void CMsgGCToGCBroadcastConsoleCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBroadcastConsoleCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBroadcastConsoleCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBroadcastConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      con_command_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      output_initiator_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&report_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sending_gc_) -
        reinterpret_cast<char*>(&report_output_)) + sizeof(sending_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBroadcastConsoleCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string con_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_con_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCBroadcastConsoleCommand.con_command");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool report_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_report_output(&has_bits);
          report_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sending_gc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sending_gc(&has_bits);
          sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string output_initiator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_output_initiator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCBroadcastConsoleCommand.output_initiator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBroadcastConsoleCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBroadcastConsoleCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string con_command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_con_command().data(), static_cast<int>(this->_internal_con_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCBroadcastConsoleCommand.con_command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_con_command(), target);
  }

  // optional bool report_output = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_report_output(), target);
  }

  // optional uint32 sending_gc = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sending_gc(), target);
  }

  // optional string output_initiator = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_output_initiator().data(), static_cast<int>(this->_internal_output_initiator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCBroadcastConsoleCommand.output_initiator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_initiator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBroadcastConsoleCommand)
  return target;
}

size_t CMsgGCToGCBroadcastConsoleCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBroadcastConsoleCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string con_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_con_command());
    }

    // optional string output_initiator = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_output_initiator());
    }

    // optional bool report_output = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 sending_gc = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sending_gc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCBroadcastConsoleCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCBroadcastConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBroadcastConsoleCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCBroadcastConsoleCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCBroadcastConsoleCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCBroadcastConsoleCommand)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBroadcastConsoleCommand::MergeFrom(const CMsgGCToGCBroadcastConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBroadcastConsoleCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_con_command(from._internal_con_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_output_initiator(from._internal_output_initiator());
    }
    if (cached_has_bits & 0x00000004u) {
      report_output_ = from.report_output_;
    }
    if (cached_has_bits & 0x00000008u) {
      sending_gc_ = from.sending_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCBroadcastConsoleCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCBroadcastConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBroadcastConsoleCommand::CopyFrom(const CMsgGCToGCBroadcastConsoleCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBroadcastConsoleCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBroadcastConsoleCommand::IsInitialized() const {
  return true;
}

void CMsgGCToGCBroadcastConsoleCommand::InternalSwap(CMsgGCToGCBroadcastConsoleCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  con_command_.Swap(&other->con_command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_initiator_.Swap(&other->output_initiator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCBroadcastConsoleCommand, sending_gc_)
      + sizeof(CMsgGCToGCBroadcastConsoleCommand::sending_gc_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCBroadcastConsoleCommand, report_output_)>(
          reinterpret_cast<char*>(&report_output_),
          reinterpret_cast<char*>(&other->report_output_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBroadcastConsoleCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCConsoleOutput_OutputLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCConsoleOutput_OutputLine>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spew_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCConsoleOutput.OutputLine)
}
CMsgGCToGCConsoleOutput_OutputLine::CMsgGCToGCConsoleOutput_OutputLine(const CMsgGCToGCConsoleOutput_OutputLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  spew_level_ = from.spew_level_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCConsoleOutput.OutputLine)
}

void CMsgGCToGCConsoleOutput_OutputLine::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
spew_level_ = 0u;
}

CMsgGCToGCConsoleOutput_OutputLine::~CMsgGCToGCConsoleOutput_OutputLine() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCConsoleOutput.OutputLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCConsoleOutput_OutputLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCConsoleOutput_OutputLine::ArenaDtor(void* object) {
  CMsgGCToGCConsoleOutput_OutputLine* _this = reinterpret_cast< CMsgGCToGCConsoleOutput_OutputLine* >(object);
  (void)_this;
}
void CMsgGCToGCConsoleOutput_OutputLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCConsoleOutput_OutputLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCConsoleOutput_OutputLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCConsoleOutput.OutputLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  spew_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCConsoleOutput_OutputLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCConsoleOutput.OutputLine.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spew_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_spew_level(&has_bits);
          spew_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCConsoleOutput_OutputLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCConsoleOutput.OutputLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCConsoleOutput.OutputLine.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // optional uint32 spew_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spew_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCConsoleOutput.OutputLine)
  return target;
}

size_t CMsgGCToGCConsoleOutput_OutputLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCConsoleOutput.OutputLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string text = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 spew_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spew_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCConsoleOutput_OutputLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCConsoleOutput_OutputLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCConsoleOutput_OutputLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCConsoleOutput.OutputLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCConsoleOutput.OutputLine)
    MergeFrom(*source);
  }
}

void CMsgGCToGCConsoleOutput_OutputLine::MergeFrom(const CMsgGCToGCConsoleOutput_OutputLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      spew_level_ = from.spew_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCConsoleOutput_OutputLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCConsoleOutput_OutputLine::CopyFrom(const CMsgGCToGCConsoleOutput_OutputLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCConsoleOutput.OutputLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCConsoleOutput_OutputLine::IsInitialized() const {
  return true;
}

void CMsgGCToGCConsoleOutput_OutputLine::InternalSwap(CMsgGCToGCConsoleOutput_OutputLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(spew_level_, other->spew_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCConsoleOutput_OutputLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCConsoleOutput::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCConsoleOutput>()._has_bits_);
  static void set_has_initiator(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_last_for_source_job(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  msgs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCConsoleOutput)
}
CMsgGCToGCConsoleOutput::CMsgGCToGCConsoleOutput(const CMsgGCToGCConsoleOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  initiator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_initiator()) {
    initiator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initiator(), 
      GetArena());
  }
  ::memcpy(&sending_gc_, &from.sending_gc_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_last_for_source_job_) -
    reinterpret_cast<char*>(&sending_gc_)) + sizeof(is_last_for_source_job_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCConsoleOutput)
}

void CMsgGCToGCConsoleOutput::SharedCtor() {
initiator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sending_gc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_last_for_source_job_) -
    reinterpret_cast<char*>(&sending_gc_)) + sizeof(is_last_for_source_job_));
}

CMsgGCToGCConsoleOutput::~CMsgGCToGCConsoleOutput() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCConsoleOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCConsoleOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  initiator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCConsoleOutput::ArenaDtor(void* object) {
  CMsgGCToGCConsoleOutput* _this = reinterpret_cast< CMsgGCToGCConsoleOutput* >(object);
  (void)_this;
}
void CMsgGCToGCConsoleOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCConsoleOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCConsoleOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCConsoleOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    initiator_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sending_gc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_last_for_source_job_) -
        reinterpret_cast<char*>(&sending_gc_)) + sizeof(is_last_for_source_job_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCConsoleOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string initiator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_initiator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToGCConsoleOutput.initiator");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sending_gc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sending_gc(&has_bits);
          sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_last_for_source_job = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_last_for_source_job(&has_bits);
          is_last_for_source_job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCConsoleOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCConsoleOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string initiator = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_initiator().data(), static_cast<int>(this->_internal_initiator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToGCConsoleOutput.initiator");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_initiator(), target);
  }

  // optional uint32 sending_gc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sending_gc(), target);
  }

  // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_msgs(i), target, stream);
  }

  // optional bool is_last_for_source_job = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_last_for_source_job(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCConsoleOutput)
  return target;
}

size_t CMsgGCToGCConsoleOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCConsoleOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCConsoleOutput.OutputLine msgs = 3;
  total_size += 1UL * this->_internal_msgs_size();
  for (const auto& msg : this->msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string initiator = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_initiator());
    }

    // optional uint32 sending_gc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sending_gc());
    }

    // optional bool is_last_for_source_job = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCConsoleOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCConsoleOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCConsoleOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCConsoleOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCConsoleOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCConsoleOutput)
    MergeFrom(*source);
  }
}

void CMsgGCToGCConsoleOutput::MergeFrom(const CMsgGCToGCConsoleOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCConsoleOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_initiator(from._internal_initiator());
    }
    if (cached_has_bits & 0x00000002u) {
      sending_gc_ = from.sending_gc_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_last_for_source_job_ = from.is_last_for_source_job_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCConsoleOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCConsoleOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCConsoleOutput::CopyFrom(const CMsgGCToGCConsoleOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCConsoleOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCConsoleOutput::IsInitialized() const {
  return true;
}

void CMsgGCToGCConsoleOutput::InternalSwap(CMsgGCToGCConsoleOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msgs_.InternalSwap(&other->msgs_);
  initiator_.Swap(&other->initiator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCConsoleOutput, is_last_for_source_job_)
      + sizeof(CMsgGCToGCConsoleOutput::is_last_for_source_job_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCConsoleOutput, sending_gc_)>(
          reinterpret_cast<char*>(&sending_gc_),
          reinterpret_cast<char*>(&other->sending_gc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCConsoleOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemAges_MaxItemIDTimestamp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemAges_MaxItemIDTimestamp>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAges.MaxItemIDTimestamp)
}
CMsgItemAges_MaxItemIDTimestamp::CMsgItemAges_MaxItemIDTimestamp(const CMsgItemAges_MaxItemIDTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_item_id_, &from.max_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&max_item_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemAges.MaxItemIDTimestamp)
}

void CMsgItemAges_MaxItemIDTimestamp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&max_item_id_)) + sizeof(timestamp_));
}

CMsgItemAges_MaxItemIDTimestamp::~CMsgItemAges_MaxItemIDTimestamp() {
  // @@protoc_insertion_point(destructor:CMsgItemAges.MaxItemIDTimestamp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemAges_MaxItemIDTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemAges_MaxItemIDTimestamp::ArenaDtor(void* object) {
  CMsgItemAges_MaxItemIDTimestamp* _this = reinterpret_cast< CMsgItemAges_MaxItemIDTimestamp* >(object);
  (void)_this;
}
void CMsgItemAges_MaxItemIDTimestamp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemAges_MaxItemIDTimestamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemAges_MaxItemIDTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAges.MaxItemIDTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&max_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&max_item_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAges_MaxItemIDTimestamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_item_id(&has_bits);
          max_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemAges_MaxItemIDTimestamp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAges.MaxItemIDTimestamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint64 max_item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAges.MaxItemIDTimestamp)
  return target;
}

size_t CMsgItemAges_MaxItemIDTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAges.MaxItemIDTimestamp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 max_item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_max_item_id());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAges_MaxItemIDTimestamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemAges.MaxItemIDTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAges_MaxItemIDTimestamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemAges_MaxItemIDTimestamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemAges.MaxItemIDTimestamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemAges.MaxItemIDTimestamp)
    MergeFrom(*source);
  }
}

void CMsgItemAges_MaxItemIDTimestamp::MergeFrom(const CMsgItemAges_MaxItemIDTimestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAges.MaxItemIDTimestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      max_item_id_ = from.max_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemAges_MaxItemIDTimestamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemAges.MaxItemIDTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAges_MaxItemIDTimestamp::CopyFrom(const CMsgItemAges_MaxItemIDTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAges.MaxItemIDTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAges_MaxItemIDTimestamp::IsInitialized() const {
  return true;
}

void CMsgItemAges_MaxItemIDTimestamp::InternalSwap(CMsgItemAges_MaxItemIDTimestamp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemAges_MaxItemIDTimestamp, timestamp_)
      + sizeof(CMsgItemAges_MaxItemIDTimestamp::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemAges_MaxItemIDTimestamp, max_item_id_)>(
          reinterpret_cast<char*>(&max_item_id_),
          reinterpret_cast<char*>(&other->max_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAges_MaxItemIDTimestamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgItemAges::_Internal {
 public:
};

CMsgItemAges::CMsgItemAges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  max_item_id_timestamps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgItemAges)
}
CMsgItemAges::CMsgItemAges(const CMsgItemAges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      max_item_id_timestamps_(from.max_item_id_timestamps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgItemAges)
}

void CMsgItemAges::SharedCtor() {
}

CMsgItemAges::~CMsgItemAges() {
  // @@protoc_insertion_point(destructor:CMsgItemAges)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgItemAges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgItemAges::ArenaDtor(void* object) {
  CMsgItemAges* _this = reinterpret_cast< CMsgItemAges* >(object);
  (void)_this;
}
void CMsgItemAges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgItemAges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgItemAges::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemAges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_item_id_timestamps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemAges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_max_item_id_timestamps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgItemAges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemAges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_max_item_id_timestamps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_max_item_id_timestamps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemAges)
  return target;
}

size_t CMsgItemAges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemAges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgItemAges.MaxItemIDTimestamp max_item_id_timestamps = 1;
  total_size += 1UL * this->_internal_max_item_id_timestamps_size();
  for (const auto& msg : this->max_item_id_timestamps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgItemAges)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgItemAges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgItemAges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgItemAges)
    MergeFrom(*source);
  }
}

void CMsgItemAges::MergeFrom(const CMsgItemAges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemAges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  max_item_id_timestamps_.MergeFrom(from.max_item_id_timestamps_);
}

void CMsgItemAges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgItemAges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAges::CopyFrom(const CMsgItemAges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemAges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAges::IsInitialized() const {
  return true;
}

void CMsgItemAges::InternalSwap(CMsgItemAges* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  max_item_id_timestamps_.InternalSwap(&other->max_item_id_timestamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemAges::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCInternalTestMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCInternalTestMsg>()._has_bits_);
  static void set_has_sending_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sender_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_message_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_job_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_job_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCInternalTestMsg)
}
CMsgGCToGCInternalTestMsg::CMsgGCToGCInternalTestMsg(const CMsgGCToGCInternalTestMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_body()) {
    message_body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_body(), 
      GetArena());
  }
  ::memcpy(&sender_id_, &from.sender_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCInternalTestMsg)
}

void CMsgGCToGCInternalTestMsg::SharedCtor() {
message_body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&sender_id_)) + sizeof(message_id_));
}

CMsgGCToGCInternalTestMsg::~CMsgGCToGCInternalTestMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCInternalTestMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCInternalTestMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCInternalTestMsg::ArenaDtor(void* object) {
  CMsgGCToGCInternalTestMsg* _this = reinterpret_cast< CMsgGCToGCInternalTestMsg* >(object);
  (void)_this;
}
void CMsgGCToGCInternalTestMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCInternalTestMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCInternalTestMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCInternalTestMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_body_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&sender_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_) -
        reinterpret_cast<char*>(&sender_id_)) + sizeof(message_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCInternalTestMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sending_gc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sending_gc(&has_bits);
          sending_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_sender_id(&has_bits);
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes message_body = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 job_id_source = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_job_id_source(&has_bits);
          job_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 job_id_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_job_id_target(&has_bits);
          job_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCInternalTestMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCInternalTestMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sending_gc = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sending_gc(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_sender_id(), target);
  }

  // optional uint32 context = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // optional uint32 message_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_message_id(), target);
  }

  // optional bytes message_body = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_message_body(), target);
  }

  // optional fixed64 job_id_source = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_job_id_source(), target);
  }

  // optional fixed64 job_id_target = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_job_id_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCInternalTestMsg)
  return target;
}

size_t CMsgGCToGCInternalTestMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCInternalTestMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes message_body = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_message_body());
    }

    // optional fixed64 sender_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 sending_gc = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sending_gc());
    }

    // optional uint32 context = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_context());
    }

    // optional fixed64 job_id_source = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 message_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCInternalTestMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCInternalTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCInternalTestMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCInternalTestMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCInternalTestMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCInternalTestMsg)
    MergeFrom(*source);
  }
}

void CMsgGCToGCInternalTestMsg::MergeFrom(const CMsgGCToGCInternalTestMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCInternalTestMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_body(from._internal_message_body());
    }
    if (cached_has_bits & 0x00000002u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sending_gc_ = from.sending_gc_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000010u) {
      job_id_source_ = from.job_id_source_;
    }
    if (cached_has_bits & 0x00000020u) {
      job_id_target_ = from.job_id_target_;
    }
    if (cached_has_bits & 0x00000040u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCInternalTestMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCInternalTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCInternalTestMsg::CopyFrom(const CMsgGCToGCInternalTestMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCInternalTestMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCInternalTestMsg::IsInitialized() const {
  return true;
}

void CMsgGCToGCInternalTestMsg::InternalSwap(CMsgGCToGCInternalTestMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_body_.Swap(&other->message_body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCInternalTestMsg, message_id_)
      + sizeof(CMsgGCToGCInternalTestMsg::message_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCInternalTestMsg, sender_id_)>(
          reinterpret_cast<char*>(&sender_id_),
          reinterpret_cast<char*>(&other->sender_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCInternalTestMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCClientServerVersionsUpdated::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCClientServerVersionsUpdated>()._has_bits_);
  static void set_has_client_min_allowed_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_active_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_active_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_deployed_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_what_changed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCClientServerVersionsUpdated)
}
CMsgGCToGCClientServerVersionsUpdated::CMsgGCToGCClientServerVersionsUpdated(const CMsgGCToGCClientServerVersionsUpdated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_min_allowed_version_, &from.client_min_allowed_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&what_changed_) -
    reinterpret_cast<char*>(&client_min_allowed_version_)) + sizeof(what_changed_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCClientServerVersionsUpdated)
}

void CMsgGCToGCClientServerVersionsUpdated::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_min_allowed_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&what_changed_) -
    reinterpret_cast<char*>(&client_min_allowed_version_)) + sizeof(what_changed_));
}

CMsgGCToGCClientServerVersionsUpdated::~CMsgGCToGCClientServerVersionsUpdated() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCClientServerVersionsUpdated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCClientServerVersionsUpdated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCClientServerVersionsUpdated::ArenaDtor(void* object) {
  CMsgGCToGCClientServerVersionsUpdated* _this = reinterpret_cast< CMsgGCToGCClientServerVersionsUpdated* >(object);
  (void)_this;
}
void CMsgGCToGCClientServerVersionsUpdated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCClientServerVersionsUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCClientServerVersionsUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCClientServerVersionsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&client_min_allowed_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&what_changed_) -
        reinterpret_cast<char*>(&client_min_allowed_version_)) + sizeof(what_changed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCClientServerVersionsUpdated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 client_min_allowed_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_min_allowed_version(&has_bits);
          client_min_allowed_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_active_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_active_version(&has_bits);
          client_active_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_active_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_active_version(&has_bits);
          server_active_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_deployed_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_server_deployed_version(&has_bits);
          server_deployed_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 what_changed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_what_changed(&has_bits);
          what_changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCClientServerVersionsUpdated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCClientServerVersionsUpdated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_min_allowed_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_min_allowed_version(), target);
  }

  // optional uint32 client_active_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_active_version(), target);
  }

  // optional uint32 server_active_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_active_version(), target);
  }

  // optional uint32 server_deployed_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_deployed_version(), target);
  }

  // optional uint32 what_changed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_what_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCClientServerVersionsUpdated)
  return target;
}

size_t CMsgGCToGCClientServerVersionsUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCClientServerVersionsUpdated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 client_min_allowed_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_min_allowed_version());
    }

    // optional uint32 client_active_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_active_version());
    }

    // optional uint32 server_active_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_active_version());
    }

    // optional uint32 server_deployed_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_deployed_version());
    }

    // optional uint32 what_changed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_what_changed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCClientServerVersionsUpdated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCClientServerVersionsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCClientServerVersionsUpdated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCClientServerVersionsUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCClientServerVersionsUpdated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCClientServerVersionsUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToGCClientServerVersionsUpdated::MergeFrom(const CMsgGCToGCClientServerVersionsUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCClientServerVersionsUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      client_min_allowed_version_ = from.client_min_allowed_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_active_version_ = from.client_active_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_active_version_ = from.server_active_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_deployed_version_ = from.server_deployed_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      what_changed_ = from.what_changed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCClientServerVersionsUpdated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCClientServerVersionsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCClientServerVersionsUpdated::CopyFrom(const CMsgGCToGCClientServerVersionsUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCClientServerVersionsUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCClientServerVersionsUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCClientServerVersionsUpdated::InternalSwap(CMsgGCToGCClientServerVersionsUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCClientServerVersionsUpdated, what_changed_)
      + sizeof(CMsgGCToGCClientServerVersionsUpdated::what_changed_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCClientServerVersionsUpdated, client_min_allowed_version_)>(
          reinterpret_cast<char*>(&client_min_allowed_version_),
          reinterpret_cast<char*>(&other->client_min_allowed_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCClientServerVersionsUpdated::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCBroadcastMessageFromSub::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCBroadcastMessageFromSub>()._has_bits_);
  static void set_has_msg_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serialized_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_id_list_(arena),
  steam_id_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCBroadcastMessageFromSub)
}
CMsgGCToGCBroadcastMessageFromSub::CMsgGCToGCBroadcastMessageFromSub(const CMsgGCToGCBroadcastMessageFromSub& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_id_list_(from.account_id_list_),
      steam_id_list_(from.steam_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_msg()) {
    serialized_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_msg(), 
      GetArena());
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCBroadcastMessageFromSub)
}

void CMsgGCToGCBroadcastMessageFromSub::SharedCtor() {
serialized_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_id_ = 0u;
}

CMsgGCToGCBroadcastMessageFromSub::~CMsgGCToGCBroadcastMessageFromSub() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCBroadcastMessageFromSub)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCBroadcastMessageFromSub::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCBroadcastMessageFromSub::ArenaDtor(void* object) {
  CMsgGCToGCBroadcastMessageFromSub* _this = reinterpret_cast< CMsgGCToGCBroadcastMessageFromSub* >(object);
  (void)_this;
}
void CMsgGCToGCBroadcastMessageFromSub::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCBroadcastMessageFromSub::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCBroadcastMessageFromSub::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCBroadcastMessageFromSub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_list_.Clear();
  steam_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_msg_.ClearNonDefaultToEmpty();
  }
  msg_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCBroadcastMessageFromSub::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msg_id(&has_bits);
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes serialized_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serialized_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_id_list = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_account_id_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 steam_id_list = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_id_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_steam_id_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCBroadcastMessageFromSub::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCBroadcastMessageFromSub)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_id(), target);
  }

  // optional bytes serialized_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_serialized_msg(), target);
  }

  // repeated uint32 account_id_list = 3 [packed = true];
  {
    int byte_size = _account_id_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_account_id_list(), byte_size, target);
    }
  }

  // repeated fixed64 steam_id_list = 4 [packed = true];
  if (this->_internal_steam_id_list_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_steam_id_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCBroadcastMessageFromSub)
  return target;
}

size_t CMsgGCToGCBroadcastMessageFromSub::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCBroadcastMessageFromSub)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id_list = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _account_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated fixed64 steam_id_list = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_id_list_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _steam_id_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_msg());
    }

    // optional uint32 msg_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msg_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCBroadcastMessageFromSub::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCBroadcastMessageFromSub)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBroadcastMessageFromSub* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCBroadcastMessageFromSub>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCBroadcastMessageFromSub)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCBroadcastMessageFromSub)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBroadcastMessageFromSub::MergeFrom(const CMsgGCToGCBroadcastMessageFromSub& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCBroadcastMessageFromSub)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_list_.MergeFrom(from.account_id_list_);
  steam_id_list_.MergeFrom(from.steam_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_msg(from._internal_serialized_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCBroadcastMessageFromSub::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCBroadcastMessageFromSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBroadcastMessageFromSub::CopyFrom(const CMsgGCToGCBroadcastMessageFromSub& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCBroadcastMessageFromSub)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBroadcastMessageFromSub::IsInitialized() const {
  return true;
}

void CMsgGCToGCBroadcastMessageFromSub::InternalSwap(CMsgGCToGCBroadcastMessageFromSub* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_list_.InternalSwap(&other->account_id_list_);
  steam_id_list_.InternalSwap(&other->steam_id_list_);
  serialized_msg_.Swap(&other->serialized_msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCBroadcastMessageFromSub::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientCurrencyPricePoints_Currency::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientCurrencyPricePoints_Currency>()._has_bits_);
  static void set_has_currency_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  currency_price_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientCurrencyPricePoints.Currency)
}
CMsgGCToClientCurrencyPricePoints_Currency::CMsgGCToClientCurrencyPricePoints_Currency(const CMsgGCToClientCurrencyPricePoints_Currency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      currency_price_(from.currency_price_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_id_ = from.currency_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientCurrencyPricePoints.Currency)
}

void CMsgGCToClientCurrencyPricePoints_Currency::SharedCtor() {
currency_id_ = 0u;
}

CMsgGCToClientCurrencyPricePoints_Currency::~CMsgGCToClientCurrencyPricePoints_Currency() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientCurrencyPricePoints.Currency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientCurrencyPricePoints_Currency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientCurrencyPricePoints_Currency::ArenaDtor(void* object) {
  CMsgGCToClientCurrencyPricePoints_Currency* _this = reinterpret_cast< CMsgGCToClientCurrencyPricePoints_Currency* >(object);
  (void)_this;
}
void CMsgGCToClientCurrencyPricePoints_Currency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientCurrencyPricePoints_Currency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientCurrencyPricePoints_Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientCurrencyPricePoints.Currency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_price_.Clear();
  currency_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientCurrencyPricePoints_Currency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 currency_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_currency_id(&has_bits);
          currency_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 currency_price = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_currency_price(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_currency_price(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientCurrencyPricePoints_Currency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientCurrencyPricePoints.Currency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 currency_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_currency_id(), target);
  }

  // repeated uint64 currency_price = 2 [packed = true];
  {
    int byte_size = _currency_price_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_currency_price(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientCurrencyPricePoints.Currency)
  return target;
}

size_t CMsgGCToClientCurrencyPricePoints_Currency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientCurrencyPricePoints.Currency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 currency_price = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->currency_price_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _currency_price_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 currency_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currency_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientCurrencyPricePoints_Currency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientCurrencyPricePoints_Currency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientCurrencyPricePoints_Currency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientCurrencyPricePoints.Currency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientCurrencyPricePoints.Currency)
    MergeFrom(*source);
  }
}

void CMsgGCToClientCurrencyPricePoints_Currency::MergeFrom(const CMsgGCToClientCurrencyPricePoints_Currency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  currency_price_.MergeFrom(from.currency_price_);
  if (from._internal_has_currency_id()) {
    _internal_set_currency_id(from._internal_currency_id());
  }
}

void CMsgGCToClientCurrencyPricePoints_Currency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientCurrencyPricePoints_Currency::CopyFrom(const CMsgGCToClientCurrencyPricePoints_Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientCurrencyPricePoints.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientCurrencyPricePoints_Currency::IsInitialized() const {
  return true;
}

void CMsgGCToClientCurrencyPricePoints_Currency::InternalSwap(CMsgGCToClientCurrencyPricePoints_Currency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  currency_price_.InternalSwap(&other->currency_price_);
  swap(currency_id_, other->currency_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientCurrencyPricePoints_Currency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientCurrencyPricePoints::_Internal {
 public:
};

CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  price_key_(arena),
  currencies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientCurrencyPricePoints)
}
CMsgGCToClientCurrencyPricePoints::CMsgGCToClientCurrencyPricePoints(const CMsgGCToClientCurrencyPricePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      price_key_(from.price_key_),
      currencies_(from.currencies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientCurrencyPricePoints)
}

void CMsgGCToClientCurrencyPricePoints::SharedCtor() {
}

CMsgGCToClientCurrencyPricePoints::~CMsgGCToClientCurrencyPricePoints() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientCurrencyPricePoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientCurrencyPricePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientCurrencyPricePoints::ArenaDtor(void* object) {
  CMsgGCToClientCurrencyPricePoints* _this = reinterpret_cast< CMsgGCToClientCurrencyPricePoints* >(object);
  (void)_this;
}
void CMsgGCToClientCurrencyPricePoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientCurrencyPricePoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientCurrencyPricePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientCurrencyPricePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_key_.Clear();
  currencies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientCurrencyPricePoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 price_key = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_price_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_price_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_currencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientCurrencyPricePoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientCurrencyPricePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 price_key = 1 [packed = true];
  {
    int byte_size = _price_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_price_key(), byte_size, target);
    }
  }

  // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_currencies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_currencies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientCurrencyPricePoints)
  return target;
}

size_t CMsgGCToClientCurrencyPricePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientCurrencyPricePoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 price_key = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->price_key_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _price_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .CMsgGCToClientCurrencyPricePoints.Currency currencies = 2;
  total_size += 1UL * this->_internal_currencies_size();
  for (const auto& msg : this->currencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientCurrencyPricePoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientCurrencyPricePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientCurrencyPricePoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientCurrencyPricePoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientCurrencyPricePoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientCurrencyPricePoints)
    MergeFrom(*source);
  }
}

void CMsgGCToClientCurrencyPricePoints::MergeFrom(const CMsgGCToClientCurrencyPricePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientCurrencyPricePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  price_key_.MergeFrom(from.price_key_);
  currencies_.MergeFrom(from.currencies_);
}

void CMsgGCToClientCurrencyPricePoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientCurrencyPricePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientCurrencyPricePoints::CopyFrom(const CMsgGCToClientCurrencyPricePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientCurrencyPricePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientCurrencyPricePoints::IsInitialized() const {
  return true;
}

void CMsgGCToClientCurrencyPricePoints::InternalSwap(CMsgGCToClientCurrencyPricePoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  price_key_.InternalSwap(&other->price_key_);
  currencies_.InternalSwap(&other->currencies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientCurrencyPricePoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBannedWordList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBannedWordList>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBannedWordList::CMsgBannedWordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  banned_words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBannedWordList)
}
CMsgBannedWordList::CMsgBannedWordList(const CMsgBannedWordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      banned_words_(from.banned_words_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgBannedWordList)
}

void CMsgBannedWordList::SharedCtor() {
version_ = 0u;
}

CMsgBannedWordList::~CMsgBannedWordList() {
  // @@protoc_insertion_point(destructor:CMsgBannedWordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBannedWordList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBannedWordList::ArenaDtor(void* object) {
  CMsgBannedWordList* _this = reinterpret_cast< CMsgBannedWordList* >(object);
  (void)_this;
}
void CMsgBannedWordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBannedWordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBannedWordList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBannedWordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  banned_words_.Clear();
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBannedWordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string banned_words = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_banned_words();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBannedWordList.banned_words");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBannedWordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBannedWordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated string banned_words = 2;
  for (int i = 0, n = this->_internal_banned_words_size(); i < n; i++) {
    const auto& s = this->_internal_banned_words(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBannedWordList.banned_words");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBannedWordList)
  return target;
}

size_t CMsgBannedWordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBannedWordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string banned_words = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(banned_words_.size());
  for (int i = 0, n = banned_words_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      banned_words_.Get(i));
  }

  // optional uint32 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBannedWordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBannedWordList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBannedWordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBannedWordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBannedWordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBannedWordList)
    MergeFrom(*source);
  }
}

void CMsgBannedWordList::MergeFrom(const CMsgBannedWordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBannedWordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  banned_words_.MergeFrom(from.banned_words_);
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void CMsgBannedWordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBannedWordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBannedWordList::CopyFrom(const CMsgBannedWordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBannedWordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBannedWordList::IsInitialized() const {
  return true;
}

void CMsgBannedWordList::InternalSwap(CMsgBannedWordList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  banned_words_.InternalSwap(&other->banned_words_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBannedWordList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCFlushSteamInventoryCache_Key::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCFlushSteamInventoryCache_Key>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contextid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCFlushSteamInventoryCache.Key)
}
CMsgGCToGCFlushSteamInventoryCache_Key::CMsgGCToGCFlushSteamInventoryCache_Key(const CMsgGCToGCFlushSteamInventoryCache_Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&contextid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(contextid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFlushSteamInventoryCache.Key)
}

void CMsgGCToGCFlushSteamInventoryCache_Key::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contextid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(contextid_));
}

CMsgGCToGCFlushSteamInventoryCache_Key::~CMsgGCToGCFlushSteamInventoryCache_Key() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFlushSteamInventoryCache.Key)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCFlushSteamInventoryCache_Key::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::ArenaDtor(void* object) {
  CMsgGCToGCFlushSteamInventoryCache_Key* _this = reinterpret_cast< CMsgGCToGCFlushSteamInventoryCache_Key* >(object);
  (void)_this;
}
void CMsgGCToGCFlushSteamInventoryCache_Key::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCFlushSteamInventoryCache_Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contextid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(contextid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCFlushSteamInventoryCache_Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 contextid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_contextid(&has_bits);
          contextid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCFlushSteamInventoryCache_Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint64 contextid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_contextid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFlushSteamInventoryCache.Key)
  return target;
}

size_t CMsgGCToGCFlushSteamInventoryCache_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_steamid());
    }

    // optional uint64 contextid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_contextid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCFlushSteamInventoryCache_Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCFlushSteamInventoryCache_Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCFlushSteamInventoryCache_Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCFlushSteamInventoryCache.Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCFlushSteamInventoryCache.Key)
    MergeFrom(*source);
  }
}

void CMsgGCToGCFlushSteamInventoryCache_Key::MergeFrom(const CMsgGCToGCFlushSteamInventoryCache_Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      contextid_ = from.contextid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCFlushSteamInventoryCache_Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFlushSteamInventoryCache_Key::CopyFrom(const CMsgGCToGCFlushSteamInventoryCache_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCFlushSteamInventoryCache.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFlushSteamInventoryCache_Key::IsInitialized() const {
  return true;
}

void CMsgGCToGCFlushSteamInventoryCache_Key::InternalSwap(CMsgGCToGCFlushSteamInventoryCache_Key* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCFlushSteamInventoryCache_Key, contextid_)
      + sizeof(CMsgGCToGCFlushSteamInventoryCache_Key::contextid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCFlushSteamInventoryCache_Key, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCFlushSteamInventoryCache_Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCFlushSteamInventoryCache::_Internal {
 public:
};

CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCFlushSteamInventoryCache)
}
CMsgGCToGCFlushSteamInventoryCache::CMsgGCToGCFlushSteamInventoryCache(const CMsgGCToGCFlushSteamInventoryCache& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFlushSteamInventoryCache)
}

void CMsgGCToGCFlushSteamInventoryCache::SharedCtor() {
}

CMsgGCToGCFlushSteamInventoryCache::~CMsgGCToGCFlushSteamInventoryCache() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFlushSteamInventoryCache)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCFlushSteamInventoryCache::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCFlushSteamInventoryCache::ArenaDtor(void* object) {
  CMsgGCToGCFlushSteamInventoryCache* _this = reinterpret_cast< CMsgGCToGCFlushSteamInventoryCache* >(object);
  (void)_this;
}
void CMsgGCToGCFlushSteamInventoryCache::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCFlushSteamInventoryCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCFlushSteamInventoryCache::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCFlushSteamInventoryCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCFlushSteamInventoryCache::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCFlushSteamInventoryCache::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFlushSteamInventoryCache)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFlushSteamInventoryCache)
  return target;
}

size_t CMsgGCToGCFlushSteamInventoryCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCFlushSteamInventoryCache)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToGCFlushSteamInventoryCache.Key keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCFlushSteamInventoryCache::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCFlushSteamInventoryCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCFlushSteamInventoryCache* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCFlushSteamInventoryCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCFlushSteamInventoryCache)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCFlushSteamInventoryCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCFlushSteamInventoryCache::MergeFrom(const CMsgGCToGCFlushSteamInventoryCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCFlushSteamInventoryCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CMsgGCToGCFlushSteamInventoryCache::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCFlushSteamInventoryCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFlushSteamInventoryCache::CopyFrom(const CMsgGCToGCFlushSteamInventoryCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCFlushSteamInventoryCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFlushSteamInventoryCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCFlushSteamInventoryCache::InternalSwap(CMsgGCToGCFlushSteamInventoryCache* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCFlushSteamInventoryCache::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUpdateSubscriptionItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateSubscriptionItems>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_always_notify(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateSubscriptionItems)
}
CMsgGCToGCUpdateSubscriptionItems::CMsgGCToGCUpdateSubscriptionItems(const CMsgGCToGCUpdateSubscriptionItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&always_notify_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(always_notify_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateSubscriptionItems)
}

void CMsgGCToGCUpdateSubscriptionItems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&always_notify_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(always_notify_));
}

CMsgGCToGCUpdateSubscriptionItems::~CMsgGCToGCUpdateSubscriptionItems() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateSubscriptionItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUpdateSubscriptionItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCUpdateSubscriptionItems::ArenaDtor(void* object) {
  CMsgGCToGCUpdateSubscriptionItems* _this = reinterpret_cast< CMsgGCToGCUpdateSubscriptionItems* >(object);
  (void)_this;
}
void CMsgGCToGCUpdateSubscriptionItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUpdateSubscriptionItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUpdateSubscriptionItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateSubscriptionItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&always_notify_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(always_notify_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateSubscriptionItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool always_notify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_always_notify(&has_bits);
          always_notify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUpdateSubscriptionItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateSubscriptionItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional bool always_notify = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_always_notify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateSubscriptionItems)
  return target;
}

size_t CMsgGCToGCUpdateSubscriptionItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateSubscriptionItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool always_notify = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateSubscriptionItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUpdateSubscriptionItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSubscriptionItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUpdateSubscriptionItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUpdateSubscriptionItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUpdateSubscriptionItems)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSubscriptionItems::MergeFrom(const CMsgGCToGCUpdateSubscriptionItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateSubscriptionItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      always_notify_ = from.always_notify_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCUpdateSubscriptionItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUpdateSubscriptionItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSubscriptionItems::CopyFrom(const CMsgGCToGCUpdateSubscriptionItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateSubscriptionItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSubscriptionItems::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSubscriptionItems::InternalSwap(CMsgGCToGCUpdateSubscriptionItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSubscriptionItems, always_notify_)
      + sizeof(CMsgGCToGCUpdateSubscriptionItems::always_notify_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateSubscriptionItems, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateSubscriptionItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCSelfPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCSelfPing>()._has_bits_);
  static void set_has_sample_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCSelfPing)
}
CMsgGCToGCSelfPing::CMsgGCToGCSelfPing(const CMsgGCToGCSelfPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_id_ = from.sample_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCSelfPing)
}

void CMsgGCToGCSelfPing::SharedCtor() {
sample_id_ = 0u;
}

CMsgGCToGCSelfPing::~CMsgGCToGCSelfPing() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCSelfPing)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCSelfPing::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCSelfPing::ArenaDtor(void* object) {
  CMsgGCToGCSelfPing* _this = reinterpret_cast< CMsgGCToGCSelfPing* >(object);
  (void)_this;
}
void CMsgGCToGCSelfPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCSelfPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCSelfPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCSelfPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCSelfPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_id(&has_bits);
          sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCSelfPing::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCSelfPing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCSelfPing)
  return target;
}

size_t CMsgGCToGCSelfPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCSelfPing)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sample_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCSelfPing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCSelfPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCSelfPing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCSelfPing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCSelfPing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCSelfPing)
    MergeFrom(*source);
  }
}

void CMsgGCToGCSelfPing::MergeFrom(const CMsgGCToGCSelfPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCSelfPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sample_id()) {
    _internal_set_sample_id(from._internal_sample_id());
  }
}

void CMsgGCToGCSelfPing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCSelfPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCSelfPing::CopyFrom(const CMsgGCToGCSelfPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCSelfPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCSelfPing::IsInitialized() const {
  return true;
}

void CMsgGCToGCSelfPing::InternalSwap(CMsgGCToGCSelfPing* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sample_id_, other->sample_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCSelfPing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetInfuxIntervalStats::_Internal {
 public:
};

CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetInfuxIntervalStats)
}
CMsgGCToGCGetInfuxIntervalStats::CMsgGCToGCGetInfuxIntervalStats(const CMsgGCToGCGetInfuxIntervalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetInfuxIntervalStats)
}

void CMsgGCToGCGetInfuxIntervalStats::SharedCtor() {
}

CMsgGCToGCGetInfuxIntervalStats::~CMsgGCToGCGetInfuxIntervalStats() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetInfuxIntervalStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetInfuxIntervalStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetInfuxIntervalStats::ArenaDtor(void* object) {
  CMsgGCToGCGetInfuxIntervalStats* _this = reinterpret_cast< CMsgGCToGCGetInfuxIntervalStats* >(object);
  (void)_this;
}
void CMsgGCToGCGetInfuxIntervalStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetInfuxIntervalStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetInfuxIntervalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetInfuxIntervalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetInfuxIntervalStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetInfuxIntervalStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetInfuxIntervalStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetInfuxIntervalStats)
  return target;
}

size_t CMsgGCToGCGetInfuxIntervalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetInfuxIntervalStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetInfuxIntervalStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetInfuxIntervalStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetInfuxIntervalStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetInfuxIntervalStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetInfuxIntervalStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetInfuxIntervalStats)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetInfuxIntervalStats::MergeFrom(const CMsgGCToGCGetInfuxIntervalStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetInfuxIntervalStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCGetInfuxIntervalStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetInfuxIntervalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetInfuxIntervalStats::CopyFrom(const CMsgGCToGCGetInfuxIntervalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetInfuxIntervalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetInfuxIntervalStats::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetInfuxIntervalStats::InternalSwap(CMsgGCToGCGetInfuxIntervalStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetInfuxIntervalStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCGetInfuxIntervalStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCGetInfuxIntervalStatsResponse>()._has_bits_);
  static void set_has_sample_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stat_ids_(arena),
  stat_total_(arena),
  stat_samples_(arena),
  stat_max_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
}
CMsgGCToGCGetInfuxIntervalStatsResponse::CMsgGCToGCGetInfuxIntervalStatsResponse(const CMsgGCToGCGetInfuxIntervalStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stat_ids_(from.stat_ids_),
      stat_total_(from.stat_total_),
      stat_samples_(from.stat_samples_),
      stat_max_(from.stat_max_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sample_duration_ms_ = from.sample_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::SharedCtor() {
sample_duration_ms_ = 0u;
}

CMsgGCToGCGetInfuxIntervalStatsResponse::~CMsgGCToGCGetInfuxIntervalStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCGetInfuxIntervalStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::ArenaDtor(void* object) {
  CMsgGCToGCGetInfuxIntervalStatsResponse* _this = reinterpret_cast< CMsgGCToGCGetInfuxIntervalStatsResponse* >(object);
  (void)_this;
}
void CMsgGCToGCGetInfuxIntervalStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCGetInfuxIntervalStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_ids_.Clear();
  stat_total_.Clear();
  stat_samples_.Clear();
  stat_max_.Clear();
  sample_duration_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCGetInfuxIntervalStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed32 stat_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_stat_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_stat_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint64 stat_total = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_stat_total(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_stat_total(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stat_samples = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stat_samples(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_stat_samples(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stat_max = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stat_max(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_stat_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sample_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sample_duration_ms(&has_bits);
          sample_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCGetInfuxIntervalStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 stat_ids = 1 [packed = true];
  if (this->_internal_stat_ids_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_stat_ids(), target);
  }

  // repeated uint64 stat_total = 2 [packed = true];
  {
    int byte_size = _stat_total_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_stat_total(), byte_size, target);
    }
  }

  // repeated uint32 stat_samples = 3 [packed = true];
  {
    int byte_size = _stat_samples_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_stat_samples(), byte_size, target);
    }
  }

  // repeated uint32 stat_max = 4 [packed = true];
  {
    int byte_size = _stat_max_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_stat_max(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 sample_duration_ms = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sample_duration_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCGetInfuxIntervalStatsResponse)
  return target;
}

size_t CMsgGCToGCGetInfuxIntervalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 stat_ids = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_stat_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stat_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 stat_total = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->stat_total_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stat_total_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stat_samples = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stat_samples_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stat_samples_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stat_max = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stat_max_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stat_max_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 sample_duration_ms = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sample_duration_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCGetInfuxIntervalStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCGetInfuxIntervalStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCGetInfuxIntervalStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCGetInfuxIntervalStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::MergeFrom(const CMsgGCToGCGetInfuxIntervalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_ids_.MergeFrom(from.stat_ids_);
  stat_total_.MergeFrom(from.stat_total_);
  stat_samples_.MergeFrom(from.stat_samples_);
  stat_max_.MergeFrom(from.stat_max_);
  if (from._internal_has_sample_duration_ms()) {
    _internal_set_sample_duration_ms(from._internal_sample_duration_ms());
  }
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::CopyFrom(const CMsgGCToGCGetInfuxIntervalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCGetInfuxIntervalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCGetInfuxIntervalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCGetInfuxIntervalStatsResponse::InternalSwap(CMsgGCToGCGetInfuxIntervalStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stat_ids_.InternalSwap(&other->stat_ids_);
  stat_total_.InternalSwap(&other->stat_total_);
  stat_samples_.InternalSwap(&other->stat_samples_);
  stat_max_.InternalSwap(&other->stat_max_);
  swap(sample_duration_ms_, other->sample_duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCGetInfuxIntervalStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCPurchaseSucceeded::_Internal {
 public:
};

CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCPurchaseSucceeded)
}
CMsgGCToGCPurchaseSucceeded::CMsgGCToGCPurchaseSucceeded(const CMsgGCToGCPurchaseSucceeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCPurchaseSucceeded)
}

void CMsgGCToGCPurchaseSucceeded::SharedCtor() {
}

CMsgGCToGCPurchaseSucceeded::~CMsgGCToGCPurchaseSucceeded() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCPurchaseSucceeded)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCPurchaseSucceeded::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCPurchaseSucceeded::ArenaDtor(void* object) {
  CMsgGCToGCPurchaseSucceeded* _this = reinterpret_cast< CMsgGCToGCPurchaseSucceeded* >(object);
  (void)_this;
}
void CMsgGCToGCPurchaseSucceeded::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCPurchaseSucceeded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCPurchaseSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCPurchaseSucceeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCPurchaseSucceeded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCPurchaseSucceeded::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCPurchaseSucceeded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCPurchaseSucceeded)
  return target;
}

size_t CMsgGCToGCPurchaseSucceeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCPurchaseSucceeded)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPurchaseSucceeded::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCPurchaseSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPurchaseSucceeded* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCPurchaseSucceeded>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCPurchaseSucceeded)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCPurchaseSucceeded)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPurchaseSucceeded::MergeFrom(const CMsgGCToGCPurchaseSucceeded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCPurchaseSucceeded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCPurchaseSucceeded::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCPurchaseSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPurchaseSucceeded::CopyFrom(const CMsgGCToGCPurchaseSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCPurchaseSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPurchaseSucceeded::IsInitialized() const {
  return true;
}

void CMsgGCToGCPurchaseSucceeded::InternalSwap(CMsgGCToGCPurchaseSucceeded* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCPurchaseSucceeded::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetLimitedItemPurchaseQuantity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetLimitedItemPurchaseQuantity>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
}
CMsgClientToGCGetLimitedItemPurchaseQuantity::CMsgClientToGCGetLimitedItemPurchaseQuantity(const CMsgClientToGCGetLimitedItemPurchaseQuantity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_def_ = from.item_def_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::SharedCtor() {
item_def_ = 0u;
}

CMsgClientToGCGetLimitedItemPurchaseQuantity::~CMsgClientToGCGetLimitedItemPurchaseQuantity() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::ArenaDtor(void* object) {
  CMsgClientToGCGetLimitedItemPurchaseQuantity* _this = reinterpret_cast< CMsgClientToGCGetLimitedItemPurchaseQuantity* >(object);
  (void)_this;
}
void CMsgClientToGCGetLimitedItemPurchaseQuantity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetLimitedItemPurchaseQuantity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_def_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetLimitedItemPurchaseQuantity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetLimitedItemPurchaseQuantity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  return target;
}

size_t CMsgClientToGCGetLimitedItemPurchaseQuantity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 item_def = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_def());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetLimitedItemPurchaseQuantity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetLimitedItemPurchaseQuantity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetLimitedItemPurchaseQuantity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetLimitedItemPurchaseQuantity)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::MergeFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_def()) {
    _internal_set_item_def(from._internal_item_def());
  }
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::CopyFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetLimitedItemPurchaseQuantity::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantity::InternalSwap(CMsgClientToGCGetLimitedItemPurchaseQuantity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_, other->item_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetLimitedItemPurchaseQuantity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
}
CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse(const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_purchased_) -
    reinterpret_cast<char*>(&result_)) + sizeof(quantity_purchased_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_purchased_) -
    reinterpret_cast<char*>(&result_)) + sizeof(quantity_purchased_));
}

CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::~CMsgClientToGCGetLimitedItemPurchaseQuantityResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::ArenaDtor(void* object) {
  CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* _this = reinterpret_cast< CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* >(object);
  (void)_this;
}
void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_purchased_) -
        reinterpret_cast<char*>(&result_)) + sizeof(quantity_purchased_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity_purchased = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity_purchased(&has_bits);
          quantity_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 quantity_purchased = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  return target;
}

size_t CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCGetLimitedItemPurchaseQuantityResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 quantity_purchased = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity_purchased());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCGetLimitedItemPurchaseQuantityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::MergeFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_purchased_ = from.quantity_purchased_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::CopyFrom(const CMsgClientToGCGetLimitedItemPurchaseQuantityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCGetLimitedItemPurchaseQuantityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::InternalSwap(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, quantity_purchased_)
      + sizeof(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::quantity_purchased_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCGetLimitedItemPurchaseQuantityResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCGetLimitedItemPurchaseQuantityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCUpdateWelcomeMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCUpdateWelcomeMsg>()._has_bits_);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CExtraMsgBlock& new_msg(const CMsgGCToGCUpdateWelcomeMsg* msg);
  static void set_has_new_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CExtraMsgBlock&
CMsgGCToGCUpdateWelcomeMsg::_Internal::new_msg(const CMsgGCToGCUpdateWelcomeMsg* msg) {
  return *msg->new_msg_;
}
void CMsgGCToGCUpdateWelcomeMsg::clear_new_msg() {
  if (new_msg_ != nullptr) new_msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCUpdateWelcomeMsg)
}
CMsgGCToGCUpdateWelcomeMsg::CMsgGCToGCUpdateWelcomeMsg(const CMsgGCToGCUpdateWelcomeMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_msg()) {
    new_msg_ = new ::CExtraMsgBlock(*from.new_msg_);
  } else {
    new_msg_ = nullptr;
  }
  ::memcpy(&server_, &from.server_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&server_)) + sizeof(broadcast_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCUpdateWelcomeMsg)
}

void CMsgGCToGCUpdateWelcomeMsg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_) -
    reinterpret_cast<char*>(&new_msg_)) + sizeof(broadcast_));
}

CMsgGCToGCUpdateWelcomeMsg::~CMsgGCToGCUpdateWelcomeMsg() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCUpdateWelcomeMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCUpdateWelcomeMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete new_msg_;
}

void CMsgGCToGCUpdateWelcomeMsg::ArenaDtor(void* object) {
  CMsgGCToGCUpdateWelcomeMsg* _this = reinterpret_cast< CMsgGCToGCUpdateWelcomeMsg* >(object);
  (void)_this;
}
void CMsgGCToGCUpdateWelcomeMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCUpdateWelcomeMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCUpdateWelcomeMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCUpdateWelcomeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(new_msg_ != nullptr);
    new_msg_->Clear();
  }
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_) -
      reinterpret_cast<char*>(&server_)) + sizeof(broadcast_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCUpdateWelcomeMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_server(&has_bits);
          server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CExtraMsgBlock new_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool broadcast = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_broadcast(&has_bits);
          broadcast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCUpdateWelcomeMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCUpdateWelcomeMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_server(), target);
  }

  // optional .CExtraMsgBlock new_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_msg(this), target, stream);
  }

  // optional bool broadcast = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_broadcast(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCUpdateWelcomeMsg)
  return target;
}

size_t CMsgGCToGCUpdateWelcomeMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCUpdateWelcomeMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CExtraMsgBlock new_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_msg_);
    }

    // optional bool server = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool broadcast = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateWelcomeMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCUpdateWelcomeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateWelcomeMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCUpdateWelcomeMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCUpdateWelcomeMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCUpdateWelcomeMsg)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateWelcomeMsg::MergeFrom(const CMsgGCToGCUpdateWelcomeMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCUpdateWelcomeMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_new_msg()->::CExtraMsgBlock::MergeFrom(from._internal_new_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      server_ = from.server_;
    }
    if (cached_has_bits & 0x00000004u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCUpdateWelcomeMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCUpdateWelcomeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateWelcomeMsg::CopyFrom(const CMsgGCToGCUpdateWelcomeMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCUpdateWelcomeMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateWelcomeMsg::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateWelcomeMsg::InternalSwap(CMsgGCToGCUpdateWelcomeMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateWelcomeMsg, broadcast_)
      + sizeof(CMsgGCToGCUpdateWelcomeMsg::broadcast_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCUpdateWelcomeMsg, new_msg_)>(
          reinterpret_cast<char*>(&new_msg_),
          reinterpret_cast<char*>(&other->new_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCUpdateWelcomeMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgApplyAutograph* Arena::CreateMaybeMessage< ::CMsgApplyAutograph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyAutograph >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAdjustItemEquippedState* Arena::CreateMaybeMessage< ::CMsgAdjustItemEquippedState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAdjustItemEquippedState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment* Arena::CreateMaybeMessage< ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEconPlayerStrangeCountAdjustment_CStrangeCountAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgEconPlayerStrangeCountAdjustment* Arena::CreateMaybeMessage< ::CMsgEconPlayerStrangeCountAdjustment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgEconPlayerStrangeCountAdjustment >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestItemPurgatory_FinalizePurchase* Arena::CreateMaybeMessage< ::CMsgRequestItemPurgatory_FinalizePurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestItemPurgatory_FinalizePurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestItemPurgatory_FinalizePurchaseResponse* Arena::CreateMaybeMessage< ::CMsgRequestItemPurgatory_FinalizePurchaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestItemPurgatory_FinalizePurchaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestItemPurgatory_RefundPurchase* Arena::CreateMaybeMessage< ::CMsgRequestItemPurgatory_RefundPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestItemPurgatory_RefundPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestItemPurgatory_RefundPurchaseResponse* Arena::CreateMaybeMessage< ::CMsgRequestItemPurgatory_RefundPurchaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestItemPurgatory_RefundPurchaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCraftingResponse* Arena::CreateMaybeMessage< ::CMsgCraftingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCraftingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesData* Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataResponse_Price* Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataResponse_Price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataResponse_Price >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataResponse* Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRequestStoreSalesDataUpToDateResponse* Arena::CreateMaybeMessage< ::CMsgGCRequestStoreSalesDataUpToDateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRequestStoreSalesDataUpToDateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPingRequest* Arena::CreateMaybeMessage< ::CMsgGCToGCPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPingResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCPingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserSessionServer* Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserSessionServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserSessionServer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserSessionServerResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserSessionServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserSessionServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserServerMembers* Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserServerMembers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserServerMembers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetUserServerMembersResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCGetUserServerMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetUserServerMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNames* Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNamesResponse_Account* Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNamesResponse_Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNamesResponse_Account >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLookupMultipleAccountNamesResponse* Arena::CreateMaybeMessage< ::CMsgLookupMultipleAccountNamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLookupMultipleAccountNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateItems* Arena::CreateMaybeMessage< ::CMsgRequestCrateItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateItemsResponse* Arena::CreateMaybeMessage< ::CMsgRequestCrateItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateEscalationLevel* Arena::CreateMaybeMessage< ::CMsgRequestCrateEscalationLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateEscalationLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestCrateEscalationLevelResponse* Arena::CreateMaybeMessage< ::CMsgRequestCrateEscalationLevelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestCrateEscalationLevelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCanUseDropRateBonus* Arena::CreateMaybeMessage< ::CMsgGCToGCCanUseDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCanUseDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLAddDropRateBonus* Arena::CreateMaybeMessage< ::CMsgSQLAddDropRateBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLAddDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLUpgradeBattleBooster* Arena::CreateMaybeMessage< ::CMsgSQLUpgradeBattleBooster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLUpgradeBattleBooster >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCRefreshSOCache* Arena::CreateMaybeMessage< ::CMsgGCToGCRefreshSOCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCRefreshSOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCheckAccountTradeStatus* Arena::CreateMaybeMessage< ::CMsgGCToGCCheckAccountTradeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCheckAccountTradeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCheckAccountTradeStatusResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCCheckAccountTradeStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCheckAccountTradeStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCAddSubscriptionTime* Arena::CreateMaybeMessage< ::CMsgGCToGCAddSubscriptionTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCAddSubscriptionTime >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute* Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item_DynamicAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry* Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item_AdditionalAuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems_Item* Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantAccountRolledItems* Arena::CreateMaybeMessage< ::CMsgGCToGCGrantAccountRolledItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantAccountRolledItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBetaDeleteItems* Arena::CreateMaybeMessage< ::CMsgGCToGCBetaDeleteItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBetaDeleteItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGrantSelfMadeItemToAccount* Arena::CreateMaybeMessage< ::CMsgGCToGCGrantSelfMadeItemToAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGrantSelfMadeItemToAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUseItem* Arena::CreateMaybeMessage< ::CMsgUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerUseItem* Arena::CreateMaybeMessage< ::CMsgServerUseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUseMultipleItems* Arena::CreateMaybeMessage< ::CMsgUseMultipleItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUseMultipleItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCPartnerBalanceRequest* Arena::CreateMaybeMessage< ::CMsgGCPartnerBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCPartnerBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCPartnerBalanceResponse* Arena::CreateMaybeMessage< ::CMsgGCPartnerBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCPartnerBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCStoreRechargeRedirect_LineItem* Arena::CreateMaybeMessage< ::CGCStoreRechargeRedirect_LineItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCStoreRechargeRedirect_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCPartnerRechargeRedirectURLRequest* Arena::CreateMaybeMessage< ::CMsgGCPartnerRechargeRedirectURLRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCPartnerRechargeRedirectURLRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCPartnerRechargeRedirectURLResponse* Arena::CreateMaybeMessage< ::CMsgGCPartnerRechargeRedirectURLResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCPartnerRechargeRedirectURLResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCEconSQLWorkItemEmbeddedRollbackData* Arena::CreateMaybeMessage< ::CMsgGCEconSQLWorkItemEmbeddedRollbackData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCEconSQLWorkItemEmbeddedRollbackData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCraftStatue* Arena::CreateMaybeMessage< ::CMsgCraftStatue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCraftStatue >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRedeemCode* Arena::CreateMaybeMessage< ::CMsgRedeemCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRedeemCode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRedeemCodeResponse* Arena::CreateMaybeMessage< ::CMsgRedeemCodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRedeemCodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevNewItemRequest* Arena::CreateMaybeMessage< ::CMsgDevNewItemRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevNewItemRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevNewItemRequestResponse* Arena::CreateMaybeMessage< ::CMsgDevNewItemRequestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevNewItemRequestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevUnlockAllItemStyles* Arena::CreateMaybeMessage< ::CMsgDevUnlockAllItemStyles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevUnlockAllItemStyles >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDevUnlockAllItemStylesResponse* Arena::CreateMaybeMessage< ::CMsgDevUnlockAllItemStylesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDevUnlockAllItemStylesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAccountSubscriptionItem* Arena::CreateMaybeMessage< ::CMsgGCGetAccountSubscriptionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAccountSubscriptionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetAccountSubscriptionItemResponse* Arena::CreateMaybeMessage< ::CMsgGCGetAccountSubscriptionItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetAccountSubscriptionItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCAddGiftItem* Arena::CreateMaybeMessage< ::CMsgGCAddGiftItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCAddGiftItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCWrapAndDeliverGift* Arena::CreateMaybeMessage< ::CMsgClientToGCWrapAndDeliverGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCWrapAndDeliverGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCWrapAndDeliverGiftResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCWrapAndDeliverGiftResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCWrapAndDeliverGiftResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnwrapGift* Arena::CreateMaybeMessage< ::CMsgClientToGCUnwrapGift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnwrapGift >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissions* Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission* Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissionsResponse_FriendPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetGiftPermissionsResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCGetGiftPermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetGiftPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnpackBundle* Arena::CreateMaybeMessage< ::CMsgClientToGCUnpackBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnpackBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnpackBundleResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCUnpackBundleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnpackBundleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientStoreTransactionCompleted* Arena::CreateMaybeMessage< ::CMsgGCToClientStoreTransactionCompleted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientStoreTransactionCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCEquipItems* Arena::CreateMaybeMessage< ::CMsgClientToGCEquipItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCEquipItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCEquipItemsResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCEquipItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCEquipItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemStyle* Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemStyleResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemStyleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemStyleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockItemStyle* Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockItemStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockItemStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockItemStyleResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockItemStyleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockItemStyleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCSetItemInventoryCategory* Arena::CreateMaybeMessage< ::CMsgClientToGCSetItemInventoryCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCSetItemInventoryCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrate* Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrateResponse_Item* Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrateResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrateResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCUnlockCrateResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCUnlockCrateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCUnlockCrateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRemoveItemAttribute* Arena::CreateMaybeMessage< ::CMsgClientToGCRemoveItemAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRemoveItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRemoveItemAttributeResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCRemoveItemAttributeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRemoveItemAttributeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCNameItem* Arena::CreateMaybeMessage< ::CMsgClientToGCNameItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCNameItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCNameItemResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCNameItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCNameItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCSetItemPosition* Arena::CreateMaybeMessage< ::CMsgGCSetItemPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCSetItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_ItemDynamicRecipeComponent* Arena::CreateMaybeMessage< ::CAttribute_ItemDynamicRecipeComponent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_ItemDynamicRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket* Arena::CreateMaybeMessage< ::CProtoItemSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Empty* Arena::CreateMaybeMessage< ::CProtoItemSocket_Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Effect* Arena::CreateMaybeMessage< ::CProtoItemSocket_Effect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Effect >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Color* Arena::CreateMaybeMessage< ::CProtoItemSocket_Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Color >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Strange* Arena::CreateMaybeMessage< ::CProtoItemSocket_Strange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Strange >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY* Arena::CreateMaybeMessage< ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Strange_DESERIALIZE_FROM_STRING_ONLY >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Spectator* Arena::CreateMaybeMessage< ::CProtoItemSocket_Spectator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Spectator >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_AssetModifier* Arena::CreateMaybeMessage< ::CProtoItemSocket_AssetModifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_AssetModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY* Arena::CreateMaybeMessage< ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_AssetModifier_DESERIALIZE_FROM_STRING_ONLY >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_Autograph* Arena::CreateMaybeMessage< ::CProtoItemSocket_Autograph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_Autograph >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemSocket_StaticVisuals* Arena::CreateMaybeMessage< ::CProtoItemSocket_StaticVisuals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemSocket_StaticVisuals >(arena);
}
template<> PROTOBUF_NOINLINE ::CAttribute_String* Arena::CreateMaybeMessage< ::CAttribute_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAttribute_String >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Request* Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue* Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Response_CountryDailyRevenue >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetItemDailyRevenue_Response* Arena::CreateMaybeMessage< ::CWorkshop_GetItemDailyRevenue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetItemDailyRevenue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Request* Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue* Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Response_CountryDailyRevenue >(arena);
}
template<> PROTOBUF_NOINLINE ::CWorkshop_GetPackageDailyRevenue_Response* Arena::CreateMaybeMessage< ::CWorkshop_GetPackageDailyRevenue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CWorkshop_GetPackageDailyRevenue_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSQLGCToGCGrantBackpackSlots* Arena::CreateMaybeMessage< ::CMsgSQLGCToGCGrantBackpackSlots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSQLGCToGCGrantBackpackSlots >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCLookupAccountName* Arena::CreateMaybeMessage< ::CMsgClientToGCLookupAccountName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCLookupAccountName >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCLookupAccountNameResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCLookupAccountNameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCLookupAccountNameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipe_Item* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipe_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipe_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipe* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipe >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_OutputItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_InputError* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_InputError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_InputError >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse_AdditionalOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCCreateStaticRecipeResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCCreateStaticRecipeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCCreateStaticRecipeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessTransactionOrder_Item* Arena::CreateMaybeMessage< ::CMsgProcessTransactionOrder_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessTransactionOrder_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgProcessTransactionOrder* Arena::CreateMaybeMessage< ::CMsgProcessTransactionOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProcessTransactionOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessCDKeyTransaction* Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessCDKeyTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessCDKeyTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessCDKeyTransactionResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessCDKeyTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessCDKeyTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessSettlement* Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessSettlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCStoreProcessSettlementResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCStoreProcessSettlementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCStoreProcessSettlementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBroadcastConsoleCommand* Arena::CreateMaybeMessage< ::CMsgGCToGCBroadcastConsoleCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBroadcastConsoleCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCConsoleOutput_OutputLine* Arena::CreateMaybeMessage< ::CMsgGCToGCConsoleOutput_OutputLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCConsoleOutput_OutputLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCConsoleOutput* Arena::CreateMaybeMessage< ::CMsgGCToGCConsoleOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCConsoleOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAges_MaxItemIDTimestamp* Arena::CreateMaybeMessage< ::CMsgItemAges_MaxItemIDTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAges_MaxItemIDTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemAges* Arena::CreateMaybeMessage< ::CMsgItemAges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemAges >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCInternalTestMsg* Arena::CreateMaybeMessage< ::CMsgGCToGCInternalTestMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCInternalTestMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCClientServerVersionsUpdated* Arena::CreateMaybeMessage< ::CMsgGCToGCClientServerVersionsUpdated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCClientServerVersionsUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCBroadcastMessageFromSub* Arena::CreateMaybeMessage< ::CMsgGCToGCBroadcastMessageFromSub >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCBroadcastMessageFromSub >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientCurrencyPricePoints_Currency* Arena::CreateMaybeMessage< ::CMsgGCToClientCurrencyPricePoints_Currency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientCurrencyPricePoints_Currency >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientCurrencyPricePoints* Arena::CreateMaybeMessage< ::CMsgGCToClientCurrencyPricePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientCurrencyPricePoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBannedWordList* Arena::CreateMaybeMessage< ::CMsgBannedWordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBannedWordList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCFlushSteamInventoryCache_Key* Arena::CreateMaybeMessage< ::CMsgGCToGCFlushSteamInventoryCache_Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCFlushSteamInventoryCache_Key >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCFlushSteamInventoryCache* Arena::CreateMaybeMessage< ::CMsgGCToGCFlushSteamInventoryCache >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCFlushSteamInventoryCache >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateSubscriptionItems* Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateSubscriptionItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateSubscriptionItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCSelfPing* Arena::CreateMaybeMessage< ::CMsgGCToGCSelfPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCSelfPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetInfuxIntervalStats* Arena::CreateMaybeMessage< ::CMsgGCToGCGetInfuxIntervalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetInfuxIntervalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCGetInfuxIntervalStatsResponse* Arena::CreateMaybeMessage< ::CMsgGCToGCGetInfuxIntervalStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCGetInfuxIntervalStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCPurchaseSucceeded* Arena::CreateMaybeMessage< ::CMsgGCToGCPurchaseSucceeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCPurchaseSucceeded >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetLimitedItemPurchaseQuantity* Arena::CreateMaybeMessage< ::CMsgClientToGCGetLimitedItemPurchaseQuantity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetLimitedItemPurchaseQuantity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCGetLimitedItemPurchaseQuantityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCUpdateWelcomeMsg* Arena::CreateMaybeMessage< ::CMsgGCToGCUpdateWelcomeMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCUpdateWelcomeMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
