// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "networkbasetypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[68]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netmessages_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_netmessages_2eproto_metadata_getter(int index);
class CBidirMsg_RebroadcastGameEvent;
struct CBidirMsg_RebroadcastGameEventDefaultTypeInternal;
extern CBidirMsg_RebroadcastGameEventDefaultTypeInternal _CBidirMsg_RebroadcastGameEvent_default_instance_;
class CBidirMsg_RebroadcastSource;
struct CBidirMsg_RebroadcastSourceDefaultTypeInternal;
extern CBidirMsg_RebroadcastSourceDefaultTypeInternal _CBidirMsg_RebroadcastSource_default_instance_;
class CBidirMsg_RelayInfo;
struct CBidirMsg_RelayInfoDefaultTypeInternal;
extern CBidirMsg_RelayInfoDefaultTypeInternal _CBidirMsg_RelayInfo_default_instance_;
class CBidirMsg_RelayPacket;
struct CBidirMsg_RelayPacketDefaultTypeInternal;
extern CBidirMsg_RelayPacketDefaultTypeInternal _CBidirMsg_RelayPacket_default_instance_;
class CBidirMsg_RelayPacket_SignedDestinationAddress_t;
struct CBidirMsg_RelayPacket_SignedDestinationAddress_tDefaultTypeInternal;
extern CBidirMsg_RelayPacket_SignedDestinationAddress_tDefaultTypeInternal _CBidirMsg_RelayPacket_SignedDestinationAddress_t_default_instance_;
class CCLCMsg_BaselineAck;
struct CCLCMsg_BaselineAckDefaultTypeInternal;
extern CCLCMsg_BaselineAckDefaultTypeInternal _CCLCMsg_BaselineAck_default_instance_;
class CCLCMsg_ClientInfo;
struct CCLCMsg_ClientInfoDefaultTypeInternal;
extern CCLCMsg_ClientInfoDefaultTypeInternal _CCLCMsg_ClientInfo_default_instance_;
class CCLCMsg_ClientMessage;
struct CCLCMsg_ClientMessageDefaultTypeInternal;
extern CCLCMsg_ClientMessageDefaultTypeInternal _CCLCMsg_ClientMessage_default_instance_;
class CCLCMsg_CmdKeyValues;
struct CCLCMsg_CmdKeyValuesDefaultTypeInternal;
extern CCLCMsg_CmdKeyValuesDefaultTypeInternal _CCLCMsg_CmdKeyValues_default_instance_;
class CCLCMsg_FileCRCCheck;
struct CCLCMsg_FileCRCCheckDefaultTypeInternal;
extern CCLCMsg_FileCRCCheckDefaultTypeInternal _CCLCMsg_FileCRCCheck_default_instance_;
class CCLCMsg_ListenEvents;
struct CCLCMsg_ListenEventsDefaultTypeInternal;
extern CCLCMsg_ListenEventsDefaultTypeInternal _CCLCMsg_ListenEvents_default_instance_;
class CCLCMsg_LoadingProgress;
struct CCLCMsg_LoadingProgressDefaultTypeInternal;
extern CCLCMsg_LoadingProgressDefaultTypeInternal _CCLCMsg_LoadingProgress_default_instance_;
class CCLCMsg_Move;
struct CCLCMsg_MoveDefaultTypeInternal;
extern CCLCMsg_MoveDefaultTypeInternal _CCLCMsg_Move_default_instance_;
class CCLCMsg_RconServerDetails;
struct CCLCMsg_RconServerDetailsDefaultTypeInternal;
extern CCLCMsg_RconServerDetailsDefaultTypeInternal _CCLCMsg_RconServerDetails_default_instance_;
class CCLCMsg_RequestPause;
struct CCLCMsg_RequestPauseDefaultTypeInternal;
extern CCLCMsg_RequestPauseDefaultTypeInternal _CCLCMsg_RequestPause_default_instance_;
class CCLCMsg_RespondCvarValue;
struct CCLCMsg_RespondCvarValueDefaultTypeInternal;
extern CCLCMsg_RespondCvarValueDefaultTypeInternal _CCLCMsg_RespondCvarValue_default_instance_;
class CCLCMsg_ServerPing;
struct CCLCMsg_ServerPingDefaultTypeInternal;
extern CCLCMsg_ServerPingDefaultTypeInternal _CCLCMsg_ServerPing_default_instance_;
class CCLCMsg_ServerStatus;
struct CCLCMsg_ServerStatusDefaultTypeInternal;
extern CCLCMsg_ServerStatusDefaultTypeInternal _CCLCMsg_ServerStatus_default_instance_;
class CCLCMsg_SplitPlayerConnect;
struct CCLCMsg_SplitPlayerConnectDefaultTypeInternal;
extern CCLCMsg_SplitPlayerConnectDefaultTypeInternal _CCLCMsg_SplitPlayerConnect_default_instance_;
class CCLCMsg_SplitPlayerDisconnect;
struct CCLCMsg_SplitPlayerDisconnectDefaultTypeInternal;
extern CCLCMsg_SplitPlayerDisconnectDefaultTypeInternal _CCLCMsg_SplitPlayerDisconnect_default_instance_;
class CCLCMsg_VoiceData;
struct CCLCMsg_VoiceDataDefaultTypeInternal;
extern CCLCMsg_VoiceDataDefaultTypeInternal _CCLCMsg_VoiceData_default_instance_;
class CMsgIPCAddress;
struct CMsgIPCAddressDefaultTypeInternal;
extern CMsgIPCAddressDefaultTypeInternal _CMsgIPCAddress_default_instance_;
class CMsgServerNetworkStats;
struct CMsgServerNetworkStatsDefaultTypeInternal;
extern CMsgServerNetworkStatsDefaultTypeInternal _CMsgServerNetworkStats_default_instance_;
class CMsgServerNetworkStats_Player;
struct CMsgServerNetworkStats_PlayerDefaultTypeInternal;
extern CMsgServerNetworkStats_PlayerDefaultTypeInternal _CMsgServerNetworkStats_Player_default_instance_;
class CMsgServerNetworkStats_Port;
struct CMsgServerNetworkStats_PortDefaultTypeInternal;
extern CMsgServerNetworkStats_PortDefaultTypeInternal _CMsgServerNetworkStats_Port_default_instance_;
class CMsgServerPeer;
struct CMsgServerPeerDefaultTypeInternal;
extern CMsgServerPeerDefaultTypeInternal _CMsgServerPeer_default_instance_;
class CMsgVoiceAudio;
struct CMsgVoiceAudioDefaultTypeInternal;
extern CMsgVoiceAudioDefaultTypeInternal _CMsgVoiceAudio_default_instance_;
class CSVCMsg_BSPDecal;
struct CSVCMsg_BSPDecalDefaultTypeInternal;
extern CSVCMsg_BSPDecalDefaultTypeInternal _CSVCMsg_BSPDecal_default_instance_;
class CSVCMsg_ClassInfo;
struct CSVCMsg_ClassInfoDefaultTypeInternal;
extern CSVCMsg_ClassInfoDefaultTypeInternal _CSVCMsg_ClassInfo_default_instance_;
class CSVCMsg_ClassInfo_class_t;
struct CSVCMsg_ClassInfo_class_tDefaultTypeInternal;
extern CSVCMsg_ClassInfo_class_tDefaultTypeInternal _CSVCMsg_ClassInfo_class_t_default_instance_;
class CSVCMsg_ClearAllStringTables;
struct CSVCMsg_ClearAllStringTablesDefaultTypeInternal;
extern CSVCMsg_ClearAllStringTablesDefaultTypeInternal _CSVCMsg_ClearAllStringTables_default_instance_;
class CSVCMsg_CmdKeyValues;
struct CSVCMsg_CmdKeyValuesDefaultTypeInternal;
extern CSVCMsg_CmdKeyValuesDefaultTypeInternal _CSVCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_CreateStringTable;
struct CSVCMsg_CreateStringTableDefaultTypeInternal;
extern CSVCMsg_CreateStringTableDefaultTypeInternal _CSVCMsg_CreateStringTable_default_instance_;
class CSVCMsg_CrosshairAngle;
struct CSVCMsg_CrosshairAngleDefaultTypeInternal;
extern CSVCMsg_CrosshairAngleDefaultTypeInternal _CSVCMsg_CrosshairAngle_default_instance_;
class CSVCMsg_FixAngle;
struct CSVCMsg_FixAngleDefaultTypeInternal;
extern CSVCMsg_FixAngleDefaultTypeInternal _CSVCMsg_FixAngle_default_instance_;
class CSVCMsg_FlattenedSerializer;
struct CSVCMsg_FlattenedSerializerDefaultTypeInternal;
extern CSVCMsg_FlattenedSerializerDefaultTypeInternal _CSVCMsg_FlattenedSerializer_default_instance_;
class CSVCMsg_FullFrameSplit;
struct CSVCMsg_FullFrameSplitDefaultTypeInternal;
extern CSVCMsg_FullFrameSplitDefaultTypeInternal _CSVCMsg_FullFrameSplit_default_instance_;
class CSVCMsg_GameEventList;
struct CSVCMsg_GameEventListDefaultTypeInternal;
extern CSVCMsg_GameEventListDefaultTypeInternal _CSVCMsg_GameEventList_default_instance_;
class CSVCMsg_GameEventList_descriptor_t;
struct CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal;
extern CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal _CSVCMsg_GameEventList_descriptor_t_default_instance_;
class CSVCMsg_GameEventList_key_t;
struct CSVCMsg_GameEventList_key_tDefaultTypeInternal;
extern CSVCMsg_GameEventList_key_tDefaultTypeInternal _CSVCMsg_GameEventList_key_t_default_instance_;
class CSVCMsg_GetCvarValue;
struct CSVCMsg_GetCvarValueDefaultTypeInternal;
extern CSVCMsg_GetCvarValueDefaultTypeInternal _CSVCMsg_GetCvarValue_default_instance_;
class CSVCMsg_HLTVStatus;
struct CSVCMsg_HLTVStatusDefaultTypeInternal;
extern CSVCMsg_HLTVStatusDefaultTypeInternal _CSVCMsg_HLTVStatus_default_instance_;
class CSVCMsg_Menu;
struct CSVCMsg_MenuDefaultTypeInternal;
extern CSVCMsg_MenuDefaultTypeInternal _CSVCMsg_Menu_default_instance_;
class CSVCMsg_PacketEntities;
struct CSVCMsg_PacketEntitiesDefaultTypeInternal;
extern CSVCMsg_PacketEntitiesDefaultTypeInternal _CSVCMsg_PacketEntities_default_instance_;
class CSVCMsg_PacketEntities_command_queue_info_t;
struct CSVCMsg_PacketEntities_command_queue_info_tDefaultTypeInternal;
extern CSVCMsg_PacketEntities_command_queue_info_tDefaultTypeInternal _CSVCMsg_PacketEntities_command_queue_info_t_default_instance_;
class CSVCMsg_PacketReliable;
struct CSVCMsg_PacketReliableDefaultTypeInternal;
extern CSVCMsg_PacketReliableDefaultTypeInternal _CSVCMsg_PacketReliable_default_instance_;
class CSVCMsg_PeerList;
struct CSVCMsg_PeerListDefaultTypeInternal;
extern CSVCMsg_PeerListDefaultTypeInternal _CSVCMsg_PeerList_default_instance_;
class CSVCMsg_Prefetch;
struct CSVCMsg_PrefetchDefaultTypeInternal;
extern CSVCMsg_PrefetchDefaultTypeInternal _CSVCMsg_Prefetch_default_instance_;
class CSVCMsg_Print;
struct CSVCMsg_PrintDefaultTypeInternal;
extern CSVCMsg_PrintDefaultTypeInternal _CSVCMsg_Print_default_instance_;
class CSVCMsg_RconServerDetails;
struct CSVCMsg_RconServerDetailsDefaultTypeInternal;
extern CSVCMsg_RconServerDetailsDefaultTypeInternal _CSVCMsg_RconServerDetails_default_instance_;
class CSVCMsg_SendTable;
struct CSVCMsg_SendTableDefaultTypeInternal;
extern CSVCMsg_SendTableDefaultTypeInternal _CSVCMsg_SendTable_default_instance_;
class CSVCMsg_SendTable_sendprop_t;
struct CSVCMsg_SendTable_sendprop_tDefaultTypeInternal;
extern CSVCMsg_SendTable_sendprop_tDefaultTypeInternal _CSVCMsg_SendTable_sendprop_t_default_instance_;
class CSVCMsg_ServerInfo;
struct CSVCMsg_ServerInfoDefaultTypeInternal;
extern CSVCMsg_ServerInfoDefaultTypeInternal _CSVCMsg_ServerInfo_default_instance_;
class CSVCMsg_ServerSteamID;
struct CSVCMsg_ServerSteamIDDefaultTypeInternal;
extern CSVCMsg_ServerSteamIDDefaultTypeInternal _CSVCMsg_ServerSteamID_default_instance_;
class CSVCMsg_SetPause;
struct CSVCMsg_SetPauseDefaultTypeInternal;
extern CSVCMsg_SetPauseDefaultTypeInternal _CSVCMsg_SetPause_default_instance_;
class CSVCMsg_SetView;
struct CSVCMsg_SetViewDefaultTypeInternal;
extern CSVCMsg_SetViewDefaultTypeInternal _CSVCMsg_SetView_default_instance_;
class CSVCMsg_Sounds;
struct CSVCMsg_SoundsDefaultTypeInternal;
extern CSVCMsg_SoundsDefaultTypeInternal _CSVCMsg_Sounds_default_instance_;
class CSVCMsg_Sounds_sounddata_t;
struct CSVCMsg_Sounds_sounddata_tDefaultTypeInternal;
extern CSVCMsg_Sounds_sounddata_tDefaultTypeInternal _CSVCMsg_Sounds_sounddata_t_default_instance_;
class CSVCMsg_SplitScreen;
struct CSVCMsg_SplitScreenDefaultTypeInternal;
extern CSVCMsg_SplitScreenDefaultTypeInternal _CSVCMsg_SplitScreen_default_instance_;
class CSVCMsg_StopSound;
struct CSVCMsg_StopSoundDefaultTypeInternal;
extern CSVCMsg_StopSoundDefaultTypeInternal _CSVCMsg_StopSound_default_instance_;
class CSVCMsg_TempEntities;
struct CSVCMsg_TempEntitiesDefaultTypeInternal;
extern CSVCMsg_TempEntitiesDefaultTypeInternal _CSVCMsg_TempEntities_default_instance_;
class CSVCMsg_UpdateStringTable;
struct CSVCMsg_UpdateStringTableDefaultTypeInternal;
extern CSVCMsg_UpdateStringTableDefaultTypeInternal _CSVCMsg_UpdateStringTable_default_instance_;
class CSVCMsg_VoiceData;
struct CSVCMsg_VoiceDataDefaultTypeInternal;
extern CSVCMsg_VoiceDataDefaultTypeInternal _CSVCMsg_VoiceData_default_instance_;
class CSVCMsg_VoiceInit;
struct CSVCMsg_VoiceInitDefaultTypeInternal;
extern CSVCMsg_VoiceInitDefaultTypeInternal _CSVCMsg_VoiceInit_default_instance_;
class ProtoFlattenedSerializerField_t;
struct ProtoFlattenedSerializerField_tDefaultTypeInternal;
extern ProtoFlattenedSerializerField_tDefaultTypeInternal _ProtoFlattenedSerializerField_t_default_instance_;
class ProtoFlattenedSerializer_t;
struct ProtoFlattenedSerializer_tDefaultTypeInternal;
extern ProtoFlattenedSerializer_tDefaultTypeInternal _ProtoFlattenedSerializer_t_default_instance_;
class SerializedNetAddress_t;
struct SerializedNetAddress_tDefaultTypeInternal;
extern SerializedNetAddress_tDefaultTypeInternal _SerializedNetAddress_t_default_instance_;
class SignedPayload_t;
struct SignedPayload_tDefaultTypeInternal;
extern SignedPayload_tDefaultTypeInternal _SignedPayload_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CBidirMsg_RebroadcastGameEvent* Arena::CreateMaybeMessage<::CBidirMsg_RebroadcastGameEvent>(Arena*);
template<> ::CBidirMsg_RebroadcastSource* Arena::CreateMaybeMessage<::CBidirMsg_RebroadcastSource>(Arena*);
template<> ::CBidirMsg_RelayInfo* Arena::CreateMaybeMessage<::CBidirMsg_RelayInfo>(Arena*);
template<> ::CBidirMsg_RelayPacket* Arena::CreateMaybeMessage<::CBidirMsg_RelayPacket>(Arena*);
template<> ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* Arena::CreateMaybeMessage<::CBidirMsg_RelayPacket_SignedDestinationAddress_t>(Arena*);
template<> ::CCLCMsg_BaselineAck* Arena::CreateMaybeMessage<::CCLCMsg_BaselineAck>(Arena*);
template<> ::CCLCMsg_ClientInfo* Arena::CreateMaybeMessage<::CCLCMsg_ClientInfo>(Arena*);
template<> ::CCLCMsg_ClientMessage* Arena::CreateMaybeMessage<::CCLCMsg_ClientMessage>(Arena*);
template<> ::CCLCMsg_CmdKeyValues* Arena::CreateMaybeMessage<::CCLCMsg_CmdKeyValues>(Arena*);
template<> ::CCLCMsg_FileCRCCheck* Arena::CreateMaybeMessage<::CCLCMsg_FileCRCCheck>(Arena*);
template<> ::CCLCMsg_ListenEvents* Arena::CreateMaybeMessage<::CCLCMsg_ListenEvents>(Arena*);
template<> ::CCLCMsg_LoadingProgress* Arena::CreateMaybeMessage<::CCLCMsg_LoadingProgress>(Arena*);
template<> ::CCLCMsg_Move* Arena::CreateMaybeMessage<::CCLCMsg_Move>(Arena*);
template<> ::CCLCMsg_RconServerDetails* Arena::CreateMaybeMessage<::CCLCMsg_RconServerDetails>(Arena*);
template<> ::CCLCMsg_RequestPause* Arena::CreateMaybeMessage<::CCLCMsg_RequestPause>(Arena*);
template<> ::CCLCMsg_RespondCvarValue* Arena::CreateMaybeMessage<::CCLCMsg_RespondCvarValue>(Arena*);
template<> ::CCLCMsg_ServerPing* Arena::CreateMaybeMessage<::CCLCMsg_ServerPing>(Arena*);
template<> ::CCLCMsg_ServerStatus* Arena::CreateMaybeMessage<::CCLCMsg_ServerStatus>(Arena*);
template<> ::CCLCMsg_SplitPlayerConnect* Arena::CreateMaybeMessage<::CCLCMsg_SplitPlayerConnect>(Arena*);
template<> ::CCLCMsg_SplitPlayerDisconnect* Arena::CreateMaybeMessage<::CCLCMsg_SplitPlayerDisconnect>(Arena*);
template<> ::CCLCMsg_VoiceData* Arena::CreateMaybeMessage<::CCLCMsg_VoiceData>(Arena*);
template<> ::CMsgIPCAddress* Arena::CreateMaybeMessage<::CMsgIPCAddress>(Arena*);
template<> ::CMsgServerNetworkStats* Arena::CreateMaybeMessage<::CMsgServerNetworkStats>(Arena*);
template<> ::CMsgServerNetworkStats_Player* Arena::CreateMaybeMessage<::CMsgServerNetworkStats_Player>(Arena*);
template<> ::CMsgServerNetworkStats_Port* Arena::CreateMaybeMessage<::CMsgServerNetworkStats_Port>(Arena*);
template<> ::CMsgServerPeer* Arena::CreateMaybeMessage<::CMsgServerPeer>(Arena*);
template<> ::CMsgVoiceAudio* Arena::CreateMaybeMessage<::CMsgVoiceAudio>(Arena*);
template<> ::CSVCMsg_BSPDecal* Arena::CreateMaybeMessage<::CSVCMsg_BSPDecal>(Arena*);
template<> ::CSVCMsg_ClassInfo* Arena::CreateMaybeMessage<::CSVCMsg_ClassInfo>(Arena*);
template<> ::CSVCMsg_ClassInfo_class_t* Arena::CreateMaybeMessage<::CSVCMsg_ClassInfo_class_t>(Arena*);
template<> ::CSVCMsg_ClearAllStringTables* Arena::CreateMaybeMessage<::CSVCMsg_ClearAllStringTables>(Arena*);
template<> ::CSVCMsg_CmdKeyValues* Arena::CreateMaybeMessage<::CSVCMsg_CmdKeyValues>(Arena*);
template<> ::CSVCMsg_CreateStringTable* Arena::CreateMaybeMessage<::CSVCMsg_CreateStringTable>(Arena*);
template<> ::CSVCMsg_CrosshairAngle* Arena::CreateMaybeMessage<::CSVCMsg_CrosshairAngle>(Arena*);
template<> ::CSVCMsg_FixAngle* Arena::CreateMaybeMessage<::CSVCMsg_FixAngle>(Arena*);
template<> ::CSVCMsg_FlattenedSerializer* Arena::CreateMaybeMessage<::CSVCMsg_FlattenedSerializer>(Arena*);
template<> ::CSVCMsg_FullFrameSplit* Arena::CreateMaybeMessage<::CSVCMsg_FullFrameSplit>(Arena*);
template<> ::CSVCMsg_GameEventList* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList>(Arena*);
template<> ::CSVCMsg_GameEventList_descriptor_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList_descriptor_t>(Arena*);
template<> ::CSVCMsg_GameEventList_key_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEventList_key_t>(Arena*);
template<> ::CSVCMsg_GetCvarValue* Arena::CreateMaybeMessage<::CSVCMsg_GetCvarValue>(Arena*);
template<> ::CSVCMsg_HLTVStatus* Arena::CreateMaybeMessage<::CSVCMsg_HLTVStatus>(Arena*);
template<> ::CSVCMsg_Menu* Arena::CreateMaybeMessage<::CSVCMsg_Menu>(Arena*);
template<> ::CSVCMsg_PacketEntities* Arena::CreateMaybeMessage<::CSVCMsg_PacketEntities>(Arena*);
template<> ::CSVCMsg_PacketEntities_command_queue_info_t* Arena::CreateMaybeMessage<::CSVCMsg_PacketEntities_command_queue_info_t>(Arena*);
template<> ::CSVCMsg_PacketReliable* Arena::CreateMaybeMessage<::CSVCMsg_PacketReliable>(Arena*);
template<> ::CSVCMsg_PeerList* Arena::CreateMaybeMessage<::CSVCMsg_PeerList>(Arena*);
template<> ::CSVCMsg_Prefetch* Arena::CreateMaybeMessage<::CSVCMsg_Prefetch>(Arena*);
template<> ::CSVCMsg_Print* Arena::CreateMaybeMessage<::CSVCMsg_Print>(Arena*);
template<> ::CSVCMsg_RconServerDetails* Arena::CreateMaybeMessage<::CSVCMsg_RconServerDetails>(Arena*);
template<> ::CSVCMsg_SendTable* Arena::CreateMaybeMessage<::CSVCMsg_SendTable>(Arena*);
template<> ::CSVCMsg_SendTable_sendprop_t* Arena::CreateMaybeMessage<::CSVCMsg_SendTable_sendprop_t>(Arena*);
template<> ::CSVCMsg_ServerInfo* Arena::CreateMaybeMessage<::CSVCMsg_ServerInfo>(Arena*);
template<> ::CSVCMsg_ServerSteamID* Arena::CreateMaybeMessage<::CSVCMsg_ServerSteamID>(Arena*);
template<> ::CSVCMsg_SetPause* Arena::CreateMaybeMessage<::CSVCMsg_SetPause>(Arena*);
template<> ::CSVCMsg_SetView* Arena::CreateMaybeMessage<::CSVCMsg_SetView>(Arena*);
template<> ::CSVCMsg_Sounds* Arena::CreateMaybeMessage<::CSVCMsg_Sounds>(Arena*);
template<> ::CSVCMsg_Sounds_sounddata_t* Arena::CreateMaybeMessage<::CSVCMsg_Sounds_sounddata_t>(Arena*);
template<> ::CSVCMsg_SplitScreen* Arena::CreateMaybeMessage<::CSVCMsg_SplitScreen>(Arena*);
template<> ::CSVCMsg_StopSound* Arena::CreateMaybeMessage<::CSVCMsg_StopSound>(Arena*);
template<> ::CSVCMsg_TempEntities* Arena::CreateMaybeMessage<::CSVCMsg_TempEntities>(Arena*);
template<> ::CSVCMsg_UpdateStringTable* Arena::CreateMaybeMessage<::CSVCMsg_UpdateStringTable>(Arena*);
template<> ::CSVCMsg_VoiceData* Arena::CreateMaybeMessage<::CSVCMsg_VoiceData>(Arena*);
template<> ::CSVCMsg_VoiceInit* Arena::CreateMaybeMessage<::CSVCMsg_VoiceInit>(Arena*);
template<> ::ProtoFlattenedSerializerField_t* Arena::CreateMaybeMessage<::ProtoFlattenedSerializerField_t>(Arena*);
template<> ::ProtoFlattenedSerializer_t* Arena::CreateMaybeMessage<::ProtoFlattenedSerializer_t>(Arena*);
template<> ::SerializedNetAddress_t* Arena::CreateMaybeMessage<::SerializedNetAddress_t>(Arena*);
template<> ::SignedPayload_t* Arena::CreateMaybeMessage<::SignedPayload_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CBidirMsg_RelayInfo_Operation_t : int {
  CBidirMsg_RelayInfo_Operation_t_RIO_REQUEST_RELAY = 0,
  CBidirMsg_RelayInfo_Operation_t_RIO_WILL_RELAY = 1,
  CBidirMsg_RelayInfo_Operation_t_RIO_NO_ROUTE = 2,
  CBidirMsg_RelayInfo_Operation_t_RIO_REJECT_RELAY = 3,
  CBidirMsg_RelayInfo_Operation_t_RIO_ESTABLISH_CONNECTION = 4
};
bool CBidirMsg_RelayInfo_Operation_t_IsValid(int value);
constexpr CBidirMsg_RelayInfo_Operation_t CBidirMsg_RelayInfo_Operation_t_Operation_t_MIN = CBidirMsg_RelayInfo_Operation_t_RIO_REQUEST_RELAY;
constexpr CBidirMsg_RelayInfo_Operation_t CBidirMsg_RelayInfo_Operation_t_Operation_t_MAX = CBidirMsg_RelayInfo_Operation_t_RIO_ESTABLISH_CONNECTION;
constexpr int CBidirMsg_RelayInfo_Operation_t_Operation_t_ARRAYSIZE = CBidirMsg_RelayInfo_Operation_t_Operation_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CBidirMsg_RelayInfo_Operation_t_descriptor();
template<typename T>
inline const std::string& CBidirMsg_RelayInfo_Operation_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CBidirMsg_RelayInfo_Operation_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CBidirMsg_RelayInfo_Operation_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CBidirMsg_RelayInfo_Operation_t_descriptor(), enum_t_value);
}
inline bool CBidirMsg_RelayInfo_Operation_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CBidirMsg_RelayInfo_Operation_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CBidirMsg_RelayInfo_Operation_t>(
    CBidirMsg_RelayInfo_Operation_t_descriptor(), name, value);
}
enum CLC_Messages : int {
  clc_ClientInfo = 20,
  clc_Move = 21,
  clc_VoiceData = 22,
  clc_BaselineAck = 23,
  clc_ListenEvents = 24,
  clc_RespondCvarValue = 25,
  clc_FileCRCCheck = 26,
  clc_LoadingProgress = 27,
  clc_SplitPlayerConnect = 28,
  clc_ClientMessage = 29,
  clc_SplitPlayerDisconnect = 30,
  clc_ServerStatus = 31,
  clc_ServerPing = 32,
  clc_RequestPause = 33,
  clc_CmdKeyValues = 34,
  clc_RconServerDetails = 35
};
bool CLC_Messages_IsValid(int value);
constexpr CLC_Messages CLC_Messages_MIN = clc_ClientInfo;
constexpr CLC_Messages CLC_Messages_MAX = clc_RconServerDetails;
constexpr int CLC_Messages_ARRAYSIZE = CLC_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CLC_Messages_descriptor();
template<typename T>
inline const std::string& CLC_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CLC_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CLC_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CLC_Messages_descriptor(), enum_t_value);
}
inline bool CLC_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CLC_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CLC_Messages>(
    CLC_Messages_descriptor(), name, value);
}
enum SVC_Messages : int {
  svc_ServerInfo = 40,
  svc_FlattenedSerializer = 41,
  svc_ClassInfo = 42,
  svc_SetPause = 43,
  svc_CreateStringTable = 44,
  svc_UpdateStringTable = 45,
  svc_VoiceInit = 46,
  svc_VoiceData = 47,
  svc_Print = 48,
  svc_Sounds = 49,
  svc_SetView = 50,
  svc_ClearAllStringTables = 51,
  svc_CmdKeyValues = 52,
  svc_BSPDecal = 53,
  svc_SplitScreen = 54,
  svc_PacketEntities = 55,
  svc_Prefetch = 56,
  svc_Menu = 57,
  svc_GetCvarValue = 58,
  svc_StopSound = 59,
  svc_PeerList = 60,
  svc_PacketReliable = 61,
  svc_HLTVStatus = 62,
  svc_ServerSteamID = 63,
  svc_FullFrameSplit = 70,
  svc_RconServerDetails = 71
};
bool SVC_Messages_IsValid(int value);
constexpr SVC_Messages SVC_Messages_MIN = svc_ServerInfo;
constexpr SVC_Messages SVC_Messages_MAX = svc_RconServerDetails;
constexpr int SVC_Messages_ARRAYSIZE = SVC_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SVC_Messages_descriptor();
template<typename T>
inline const std::string& SVC_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SVC_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SVC_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SVC_Messages_descriptor(), enum_t_value);
}
inline bool SVC_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SVC_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SVC_Messages>(
    SVC_Messages_descriptor(), name, value);
}
enum VoiceDataFormat_t : int {
  VOICEDATA_FORMAT_STEAM = 0,
  VOICEDATA_FORMAT_ENGINE = 1
};
bool VoiceDataFormat_t_IsValid(int value);
constexpr VoiceDataFormat_t VoiceDataFormat_t_MIN = VOICEDATA_FORMAT_STEAM;
constexpr VoiceDataFormat_t VoiceDataFormat_t_MAX = VOICEDATA_FORMAT_ENGINE;
constexpr int VoiceDataFormat_t_ARRAYSIZE = VoiceDataFormat_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceDataFormat_t_descriptor();
template<typename T>
inline const std::string& VoiceDataFormat_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceDataFormat_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceDataFormat_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceDataFormat_t_descriptor(), enum_t_value);
}
inline bool VoiceDataFormat_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoiceDataFormat_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceDataFormat_t>(
    VoiceDataFormat_t_descriptor(), name, value);
}
enum RequestPause_t : int {
  RP_PAUSE = 0,
  RP_UNPAUSE = 1,
  RP_TOGGLEPAUSE = 2
};
bool RequestPause_t_IsValid(int value);
constexpr RequestPause_t RequestPause_t_MIN = RP_PAUSE;
constexpr RequestPause_t RequestPause_t_MAX = RP_TOGGLEPAUSE;
constexpr int RequestPause_t_ARRAYSIZE = RequestPause_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestPause_t_descriptor();
template<typename T>
inline const std::string& RequestPause_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestPause_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestPause_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestPause_t_descriptor(), enum_t_value);
}
inline bool RequestPause_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RequestPause_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestPause_t>(
    RequestPause_t_descriptor(), name, value);
}
enum PrefetchType : int {
  PFT_SOUND = 0
};
bool PrefetchType_IsValid(int value);
constexpr PrefetchType PrefetchType_MIN = PFT_SOUND;
constexpr PrefetchType PrefetchType_MAX = PFT_SOUND;
constexpr int PrefetchType_ARRAYSIZE = PrefetchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrefetchType_descriptor();
template<typename T>
inline const std::string& PrefetchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrefetchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrefetchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PrefetchType_descriptor(), enum_t_value);
}
inline bool PrefetchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PrefetchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PrefetchType>(
    PrefetchType_descriptor(), name, value);
}
enum ESplitScreenMessageType : int {
  MSG_SPLITSCREEN_ADDUSER = 0,
  MSG_SPLITSCREEN_REMOVEUSER = 1
};
bool ESplitScreenMessageType_IsValid(int value);
constexpr ESplitScreenMessageType ESplitScreenMessageType_MIN = MSG_SPLITSCREEN_ADDUSER;
constexpr ESplitScreenMessageType ESplitScreenMessageType_MAX = MSG_SPLITSCREEN_REMOVEUSER;
constexpr int ESplitScreenMessageType_ARRAYSIZE = ESplitScreenMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESplitScreenMessageType_descriptor();
template<typename T>
inline const std::string& ESplitScreenMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESplitScreenMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESplitScreenMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESplitScreenMessageType_descriptor(), enum_t_value);
}
inline bool ESplitScreenMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESplitScreenMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESplitScreenMessageType>(
    ESplitScreenMessageType_descriptor(), name, value);
}
enum EQueryCvarValueStatus : int {
  eQueryCvarValueStatus_ValueIntact = 0,
  eQueryCvarValueStatus_CvarNotFound = 1,
  eQueryCvarValueStatus_NotACvar = 2,
  eQueryCvarValueStatus_CvarProtected = 3
};
bool EQueryCvarValueStatus_IsValid(int value);
constexpr EQueryCvarValueStatus EQueryCvarValueStatus_MIN = eQueryCvarValueStatus_ValueIntact;
constexpr EQueryCvarValueStatus EQueryCvarValueStatus_MAX = eQueryCvarValueStatus_CvarProtected;
constexpr int EQueryCvarValueStatus_ARRAYSIZE = EQueryCvarValueStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EQueryCvarValueStatus_descriptor();
template<typename T>
inline const std::string& EQueryCvarValueStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EQueryCvarValueStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EQueryCvarValueStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EQueryCvarValueStatus_descriptor(), enum_t_value);
}
inline bool EQueryCvarValueStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EQueryCvarValueStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EQueryCvarValueStatus>(
    EQueryCvarValueStatus_descriptor(), name, value);
}
enum DIALOG_TYPE : int {
  DIALOG_MSG = 0,
  DIALOG_MENU = 1,
  DIALOG_TEXT = 2,
  DIALOG_ENTRY = 3,
  DIALOG_ASKCONNECT = 4
};
bool DIALOG_TYPE_IsValid(int value);
constexpr DIALOG_TYPE DIALOG_TYPE_MIN = DIALOG_MSG;
constexpr DIALOG_TYPE DIALOG_TYPE_MAX = DIALOG_ASKCONNECT;
constexpr int DIALOG_TYPE_ARRAYSIZE = DIALOG_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIALOG_TYPE_descriptor();
template<typename T>
inline const std::string& DIALOG_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DIALOG_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DIALOG_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DIALOG_TYPE_descriptor(), enum_t_value);
}
inline bool DIALOG_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DIALOG_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DIALOG_TYPE>(
    DIALOG_TYPE_descriptor(), name, value);
}
enum SVC_Messages_LowFrequency : int {
  svc_dummy = 600
};
bool SVC_Messages_LowFrequency_IsValid(int value);
constexpr SVC_Messages_LowFrequency SVC_Messages_LowFrequency_MIN = svc_dummy;
constexpr SVC_Messages_LowFrequency SVC_Messages_LowFrequency_MAX = svc_dummy;
constexpr int SVC_Messages_LowFrequency_ARRAYSIZE = SVC_Messages_LowFrequency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SVC_Messages_LowFrequency_descriptor();
template<typename T>
inline const std::string& SVC_Messages_LowFrequency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SVC_Messages_LowFrequency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SVC_Messages_LowFrequency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SVC_Messages_LowFrequency_descriptor(), enum_t_value);
}
inline bool SVC_Messages_LowFrequency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SVC_Messages_LowFrequency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SVC_Messages_LowFrequency>(
    SVC_Messages_LowFrequency_descriptor(), name, value);
}
enum Bidirectional_Messages : int {
  bi_RebroadcastGameEvent = 16,
  bi_RebroadcastSource = 17,
  bi_GameEvent = 18
};
bool Bidirectional_Messages_IsValid(int value);
constexpr Bidirectional_Messages Bidirectional_Messages_MIN = bi_RebroadcastGameEvent;
constexpr Bidirectional_Messages Bidirectional_Messages_MAX = bi_GameEvent;
constexpr int Bidirectional_Messages_ARRAYSIZE = Bidirectional_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bidirectional_Messages_descriptor();
template<typename T>
inline const std::string& Bidirectional_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bidirectional_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bidirectional_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bidirectional_Messages_descriptor(), enum_t_value);
}
inline bool Bidirectional_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bidirectional_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bidirectional_Messages>(
    Bidirectional_Messages_descriptor(), name, value);
}
enum Bidirectional_Messages_LowFrequency : int {
  bi_RelayInfo = 700,
  bi_RelayPacket = 701
};
bool Bidirectional_Messages_LowFrequency_IsValid(int value);
constexpr Bidirectional_Messages_LowFrequency Bidirectional_Messages_LowFrequency_MIN = bi_RelayInfo;
constexpr Bidirectional_Messages_LowFrequency Bidirectional_Messages_LowFrequency_MAX = bi_RelayPacket;
constexpr int Bidirectional_Messages_LowFrequency_ARRAYSIZE = Bidirectional_Messages_LowFrequency_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Bidirectional_Messages_LowFrequency_descriptor();
template<typename T>
inline const std::string& Bidirectional_Messages_LowFrequency_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Bidirectional_Messages_LowFrequency>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Bidirectional_Messages_LowFrequency_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Bidirectional_Messages_LowFrequency_descriptor(), enum_t_value);
}
inline bool Bidirectional_Messages_LowFrequency_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Bidirectional_Messages_LowFrequency* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Bidirectional_Messages_LowFrequency>(
    Bidirectional_Messages_LowFrequency_descriptor(), name, value);
}
// ===================================================================

class CCLCMsg_ClientInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ClientInfo) */ {
 public:
  inline CCLCMsg_ClientInfo() : CCLCMsg_ClientInfo(nullptr) {}
  virtual ~CCLCMsg_ClientInfo();
  explicit constexpr CCLCMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ClientInfo(const CCLCMsg_ClientInfo& from);
  CCLCMsg_ClientInfo(CCLCMsg_ClientInfo&& from) noexcept
    : CCLCMsg_ClientInfo() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ClientInfo& operator=(const CCLCMsg_ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ClientInfo& operator=(CCLCMsg_ClientInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ClientInfo* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ClientInfo*>(
               &_CCLCMsg_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCLCMsg_ClientInfo& a, CCLCMsg_ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ClientInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ClientInfo* New() const final {
    return CreateMaybeMessage<CCLCMsg_ClientInfo>(nullptr);
  }

  CCLCMsg_ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ClientInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_ClientInfo& from);
  void MergeFrom(const CCLCMsg_ClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ClientInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ClientInfo";
  }
  protected:
  explicit CCLCMsg_ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsNameFieldNumber = 6,
    kSendTableCrcFieldNumber = 1,
    kServerCountFieldNumber = 2,
    kIsHltvFieldNumber = 3,
    kFriendsIdFieldNumber = 5,
  };
  // optional string friends_name = 6;
  bool has_friends_name() const;
  private:
  bool _internal_has_friends_name() const;
  public:
  void clear_friends_name();
  const std::string& friends_name() const;
  void set_friends_name(const std::string& value);
  void set_friends_name(std::string&& value);
  void set_friends_name(const char* value);
  void set_friends_name(const char* value, size_t size);
  std::string* mutable_friends_name();
  std::string* release_friends_name();
  void set_allocated_friends_name(std::string* friends_name);
  private:
  const std::string& _internal_friends_name() const;
  void _internal_set_friends_name(const std::string& value);
  std::string* _internal_mutable_friends_name();
  public:

  // optional fixed32 send_table_crc = 1;
  bool has_send_table_crc() const;
  private:
  bool _internal_has_send_table_crc() const;
  public:
  void clear_send_table_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 send_table_crc() const;
  void set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_send_table_crc() const;
  void _internal_set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_count = 2;
  bool has_server_count() const;
  private:
  bool _internal_has_server_count() const;
  public:
  void clear_server_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_count() const;
  void set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_count() const;
  void _internal_set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_hltv = 3;
  bool has_is_hltv() const;
  private:
  bool _internal_has_is_hltv() const;
  public:
  void clear_is_hltv();
  bool is_hltv() const;
  void set_is_hltv(bool value);
  private:
  bool _internal_is_hltv() const;
  void _internal_set_is_hltv(bool value);
  public:

  // optional uint32 friends_id = 5;
  bool has_friends_id() const;
  private:
  bool _internal_has_friends_id() const;
  public:
  void clear_friends_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 friends_id() const;
  void set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friends_id() const;
  void _internal_set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friends_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 send_table_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_count_;
  bool is_hltv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 friends_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_Move PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_Move) */ {
 public:
  inline CCLCMsg_Move() : CCLCMsg_Move(nullptr) {}
  virtual ~CCLCMsg_Move();
  explicit constexpr CCLCMsg_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_Move(const CCLCMsg_Move& from);
  CCLCMsg_Move(CCLCMsg_Move&& from) noexcept
    : CCLCMsg_Move() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_Move& operator=(const CCLCMsg_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_Move& operator=(CCLCMsg_Move&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_Move* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_Move*>(
               &_CCLCMsg_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCLCMsg_Move& a, CCLCMsg_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_Move* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_Move* New() const final {
    return CreateMaybeMessage<CCLCMsg_Move>(nullptr);
  }

  CCLCMsg_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_Move>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_Move& from);
  void MergeFrom(const CCLCMsg_Move& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_Move* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_Move";
  }
  protected:
  explicit CCLCMsg_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCommandNumberFieldNumber = 4,
    kNumCommandsFieldNumber = 5,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 command_number = 4;
  bool has_command_number() const;
  private:
  bool _internal_has_command_number() const;
  public:
  void clear_command_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_number() const;
  void set_command_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_number() const;
  void _internal_set_command_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_commands = 5;
  bool has_num_commands() const;
  private:
  bool _internal_has_num_commands() const;
  public:
  void clear_num_commands();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_commands() const;
  void set_num_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_commands() const;
  void _internal_set_num_commands(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_commands_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgVoiceAudio PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVoiceAudio) */ {
 public:
  inline CMsgVoiceAudio() : CMsgVoiceAudio(nullptr) {}
  virtual ~CMsgVoiceAudio();
  explicit constexpr CMsgVoiceAudio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVoiceAudio(const CMsgVoiceAudio& from);
  CMsgVoiceAudio(CMsgVoiceAudio&& from) noexcept
    : CMsgVoiceAudio() {
    *this = ::std::move(from);
  }

  inline CMsgVoiceAudio& operator=(const CMsgVoiceAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVoiceAudio& operator=(CMsgVoiceAudio&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVoiceAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVoiceAudio* internal_default_instance() {
    return reinterpret_cast<const CMsgVoiceAudio*>(
               &_CMsgVoiceAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgVoiceAudio& a, CMsgVoiceAudio& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVoiceAudio* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVoiceAudio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVoiceAudio* New() const final {
    return CreateMaybeMessage<CMsgVoiceAudio>(nullptr);
  }

  CMsgVoiceAudio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVoiceAudio>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVoiceAudio& from);
  void MergeFrom(const CMsgVoiceAudio& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVoiceAudio* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVoiceAudio";
  }
  protected:
  explicit CMsgVoiceAudio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoiceDataFieldNumber = 2,
    kFormatFieldNumber = 1,
    kSequenceBytesFieldNumber = 3,
    kSectionNumberFieldNumber = 4,
    kSampleRateFieldNumber = 5,
    kUncompressedSampleOffsetFieldNumber = 6,
  };
  // optional bytes voice_data = 2;
  bool has_voice_data() const;
  private:
  bool _internal_has_voice_data() const;
  public:
  void clear_voice_data();
  const std::string& voice_data() const;
  void set_voice_data(const std::string& value);
  void set_voice_data(std::string&& value);
  void set_voice_data(const char* value);
  void set_voice_data(const void* value, size_t size);
  std::string* mutable_voice_data();
  std::string* release_voice_data();
  void set_allocated_voice_data(std::string* voice_data);
  private:
  const std::string& _internal_voice_data() const;
  void _internal_set_voice_data(const std::string& value);
  std::string* _internal_mutable_voice_data();
  public:

  // optional .VoiceDataFormat_t format = 1 [default = VOICEDATA_FORMAT_STEAM];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::VoiceDataFormat_t format() const;
  void set_format(::VoiceDataFormat_t value);
  private:
  ::VoiceDataFormat_t _internal_format() const;
  void _internal_set_format(::VoiceDataFormat_t value);
  public:

  // optional int32 sequence_bytes = 3;
  bool has_sequence_bytes() const;
  private:
  bool _internal_has_sequence_bytes() const;
  public:
  void clear_sequence_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes() const;
  void set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_bytes() const;
  void _internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 section_number = 4;
  bool has_section_number() const;
  private:
  bool _internal_has_section_number() const;
  public:
  void clear_section_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number() const;
  void set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section_number() const;
  void _internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sample_rate = 5;
  bool has_sample_rate() const;
  private:
  bool _internal_has_sample_rate() const;
  public:
  void clear_sample_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate() const;
  void set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sample_rate() const;
  void _internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uncompressed_sample_offset = 6;
  bool has_uncompressed_sample_offset() const;
  private:
  bool _internal_has_uncompressed_sample_offset() const;
  public:
  void clear_uncompressed_sample_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset() const;
  void set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uncompressed_sample_offset() const;
  void _internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVoiceAudio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voice_data_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sample_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uncompressed_sample_offset_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_VoiceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_VoiceData) */ {
 public:
  inline CCLCMsg_VoiceData() : CCLCMsg_VoiceData(nullptr) {}
  virtual ~CCLCMsg_VoiceData();
  explicit constexpr CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from);
  CCLCMsg_VoiceData(CCLCMsg_VoiceData&& from) noexcept
    : CCLCMsg_VoiceData() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_VoiceData& operator=(const CCLCMsg_VoiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_VoiceData& operator=(CCLCMsg_VoiceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_VoiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_VoiceData* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_VoiceData*>(
               &_CCLCMsg_VoiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCLCMsg_VoiceData& a, CCLCMsg_VoiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_VoiceData* New() const final {
    return CreateMaybeMessage<CCLCMsg_VoiceData>(nullptr);
  }

  CCLCMsg_VoiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_VoiceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_VoiceData& from);
  void MergeFrom(const CCLCMsg_VoiceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_VoiceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_VoiceData";
  }
  protected:
  explicit CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kXuidFieldNumber = 2,
    kTickFieldNumber = 3,
  };
  // optional .CMsgVoiceAudio audio = 1;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::CMsgVoiceAudio& audio() const;
  ::CMsgVoiceAudio* release_audio();
  ::CMsgVoiceAudio* mutable_audio();
  void set_allocated_audio(::CMsgVoiceAudio* audio);
  private:
  const ::CMsgVoiceAudio& _internal_audio() const;
  ::CMsgVoiceAudio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::CMsgVoiceAudio* audio);
  ::CMsgVoiceAudio* unsafe_arena_release_audio();

  // optional fixed64 xuid = 2;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid() const;
  void set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xuid() const;
  void _internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tick = 3;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_VoiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVoiceAudio* audio_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_BaselineAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_BaselineAck) */ {
 public:
  inline CCLCMsg_BaselineAck() : CCLCMsg_BaselineAck(nullptr) {}
  virtual ~CCLCMsg_BaselineAck();
  explicit constexpr CCLCMsg_BaselineAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_BaselineAck(const CCLCMsg_BaselineAck& from);
  CCLCMsg_BaselineAck(CCLCMsg_BaselineAck&& from) noexcept
    : CCLCMsg_BaselineAck() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_BaselineAck& operator=(const CCLCMsg_BaselineAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_BaselineAck& operator=(CCLCMsg_BaselineAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_BaselineAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_BaselineAck* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_BaselineAck*>(
               &_CCLCMsg_BaselineAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCLCMsg_BaselineAck& a, CCLCMsg_BaselineAck& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_BaselineAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_BaselineAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_BaselineAck* New() const final {
    return CreateMaybeMessage<CCLCMsg_BaselineAck>(nullptr);
  }

  CCLCMsg_BaselineAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_BaselineAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_BaselineAck& from);
  void MergeFrom(const CCLCMsg_BaselineAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_BaselineAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_BaselineAck";
  }
  protected:
  explicit CCLCMsg_BaselineAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaselineTickFieldNumber = 1,
    kBaselineNrFieldNumber = 2,
  };
  // optional int32 baseline_tick = 1;
  bool has_baseline_tick() const;
  private:
  bool _internal_has_baseline_tick() const;
  public:
  void clear_baseline_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_tick() const;
  void set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline_tick() const;
  void _internal_set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 baseline_nr = 2;
  bool has_baseline_nr() const;
  private:
  bool _internal_has_baseline_nr() const;
  public:
  void clear_baseline_nr();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_nr() const;
  void set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline_nr() const;
  void _internal_set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_BaselineAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_nr_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ListenEvents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ListenEvents) */ {
 public:
  inline CCLCMsg_ListenEvents() : CCLCMsg_ListenEvents(nullptr) {}
  virtual ~CCLCMsg_ListenEvents();
  explicit constexpr CCLCMsg_ListenEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ListenEvents(const CCLCMsg_ListenEvents& from);
  CCLCMsg_ListenEvents(CCLCMsg_ListenEvents&& from) noexcept
    : CCLCMsg_ListenEvents() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ListenEvents& operator=(const CCLCMsg_ListenEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ListenEvents& operator=(CCLCMsg_ListenEvents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_ListenEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ListenEvents* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ListenEvents*>(
               &_CCLCMsg_ListenEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCLCMsg_ListenEvents& a, CCLCMsg_ListenEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ListenEvents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ListenEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ListenEvents* New() const final {
    return CreateMaybeMessage<CCLCMsg_ListenEvents>(nullptr);
  }

  CCLCMsg_ListenEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ListenEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_ListenEvents& from);
  void MergeFrom(const CCLCMsg_ListenEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ListenEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ListenEvents";
  }
  protected:
  explicit CCLCMsg_ListenEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventMaskFieldNumber = 1,
  };
  // repeated fixed32 event_mask = 1;
  int event_mask_size() const;
  private:
  int _internal_event_mask_size() const;
  public:
  void clear_event_mask();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_mask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_event_mask() const;
  void _internal_add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_event_mask();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 event_mask(int index) const;
  void set_event_mask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      event_mask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_event_mask();

  // @@protoc_insertion_point(class_scope:CCLCMsg_ListenEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > event_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_RespondCvarValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_RespondCvarValue) */ {
 public:
  inline CCLCMsg_RespondCvarValue() : CCLCMsg_RespondCvarValue(nullptr) {}
  virtual ~CCLCMsg_RespondCvarValue();
  explicit constexpr CCLCMsg_RespondCvarValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_RespondCvarValue(const CCLCMsg_RespondCvarValue& from);
  CCLCMsg_RespondCvarValue(CCLCMsg_RespondCvarValue&& from) noexcept
    : CCLCMsg_RespondCvarValue() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_RespondCvarValue& operator=(const CCLCMsg_RespondCvarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_RespondCvarValue& operator=(CCLCMsg_RespondCvarValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_RespondCvarValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_RespondCvarValue* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_RespondCvarValue*>(
               &_CCLCMsg_RespondCvarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCLCMsg_RespondCvarValue& a, CCLCMsg_RespondCvarValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_RespondCvarValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_RespondCvarValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_RespondCvarValue* New() const final {
    return CreateMaybeMessage<CCLCMsg_RespondCvarValue>(nullptr);
  }

  CCLCMsg_RespondCvarValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_RespondCvarValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_RespondCvarValue& from);
  void MergeFrom(const CCLCMsg_RespondCvarValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_RespondCvarValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_RespondCvarValue";
  }
  protected:
  explicit CCLCMsg_RespondCvarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kValueFieldNumber = 4,
    kCookieFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional int32 cookie = 1;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int32 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cookie() const;
  void _internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status_code = 2;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_RespondCvarValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 cookie_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_FileCRCCheck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_FileCRCCheck) */ {
 public:
  inline CCLCMsg_FileCRCCheck() : CCLCMsg_FileCRCCheck(nullptr) {}
  virtual ~CCLCMsg_FileCRCCheck();
  explicit constexpr CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from);
  CCLCMsg_FileCRCCheck(CCLCMsg_FileCRCCheck&& from) noexcept
    : CCLCMsg_FileCRCCheck() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_FileCRCCheck& operator=(const CCLCMsg_FileCRCCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_FileCRCCheck& operator=(CCLCMsg_FileCRCCheck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_FileCRCCheck& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_FileCRCCheck* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_FileCRCCheck*>(
               &_CCLCMsg_FileCRCCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCLCMsg_FileCRCCheck& a, CCLCMsg_FileCRCCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_FileCRCCheck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_FileCRCCheck* New() const final {
    return CreateMaybeMessage<CCLCMsg_FileCRCCheck>(nullptr);
  }

  CCLCMsg_FileCRCCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_FileCRCCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_FileCRCCheck& from);
  void MergeFrom(const CCLCMsg_FileCRCCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_FileCRCCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_FileCRCCheck";
  }
  protected:
  explicit CCLCMsg_FileCRCCheck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kFilenameFieldNumber = 4,
    kCodePathFieldNumber = 1,
    kCodeFilenameFieldNumber = 3,
    kCrcFieldNumber = 5,
  };
  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string filename = 4;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional int32 code_path = 1;
  bool has_code_path() const;
  private:
  bool _internal_has_code_path() const;
  public:
  void clear_code_path();
  ::PROTOBUF_NAMESPACE_ID::int32 code_path() const;
  void set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code_path() const;
  void _internal_set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 code_filename = 3;
  bool has_code_filename() const;
  private:
  bool _internal_has_code_filename() const;
  public:
  void clear_code_filename();
  ::PROTOBUF_NAMESPACE_ID::int32 code_filename() const;
  void set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code_filename() const;
  void _internal_set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 crc = 5;
  bool has_crc() const;
  private:
  bool _internal_has_crc() const;
  public:
  void clear_crc();
  ::PROTOBUF_NAMESPACE_ID::uint32 crc() const;
  void set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_crc() const;
  void _internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_FileCRCCheck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 crc_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_LoadingProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_LoadingProgress) */ {
 public:
  inline CCLCMsg_LoadingProgress() : CCLCMsg_LoadingProgress(nullptr) {}
  virtual ~CCLCMsg_LoadingProgress();
  explicit constexpr CCLCMsg_LoadingProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_LoadingProgress(const CCLCMsg_LoadingProgress& from);
  CCLCMsg_LoadingProgress(CCLCMsg_LoadingProgress&& from) noexcept
    : CCLCMsg_LoadingProgress() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_LoadingProgress& operator=(const CCLCMsg_LoadingProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_LoadingProgress& operator=(CCLCMsg_LoadingProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_LoadingProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_LoadingProgress* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_LoadingProgress*>(
               &_CCLCMsg_LoadingProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCLCMsg_LoadingProgress& a, CCLCMsg_LoadingProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_LoadingProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_LoadingProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_LoadingProgress* New() const final {
    return CreateMaybeMessage<CCLCMsg_LoadingProgress>(nullptr);
  }

  CCLCMsg_LoadingProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_LoadingProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_LoadingProgress& from);
  void MergeFrom(const CCLCMsg_LoadingProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_LoadingProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_LoadingProgress";
  }
  protected:
  explicit CCLCMsg_LoadingProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 1,
  };
  // optional int32 progress = 1;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_LoadingProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_SplitPlayerConnect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_SplitPlayerConnect) */ {
 public:
  inline CCLCMsg_SplitPlayerConnect() : CCLCMsg_SplitPlayerConnect(nullptr) {}
  virtual ~CCLCMsg_SplitPlayerConnect();
  explicit constexpr CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from);
  CCLCMsg_SplitPlayerConnect(CCLCMsg_SplitPlayerConnect&& from) noexcept
    : CCLCMsg_SplitPlayerConnect() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_SplitPlayerConnect& operator=(const CCLCMsg_SplitPlayerConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_SplitPlayerConnect& operator=(CCLCMsg_SplitPlayerConnect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_SplitPlayerConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_SplitPlayerConnect* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_SplitPlayerConnect*>(
               &_CCLCMsg_SplitPlayerConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CCLCMsg_SplitPlayerConnect& a, CCLCMsg_SplitPlayerConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_SplitPlayerConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_SplitPlayerConnect* New() const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerConnect>(nullptr);
  }

  CCLCMsg_SplitPlayerConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_SplitPlayerConnect& from);
  void MergeFrom(const CCLCMsg_SplitPlayerConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_SplitPlayerConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_SplitPlayerConnect";
  }
  protected:
  explicit CCLCMsg_SplitPlayerConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayernameFieldNumber = 1,
  };
  // optional string playername = 1;
  bool has_playername() const;
  private:
  bool _internal_has_playername() const;
  public:
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_SplitPlayerConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ClientMessage) */ {
 public:
  inline CCLCMsg_ClientMessage() : CCLCMsg_ClientMessage(nullptr) {}
  virtual ~CCLCMsg_ClientMessage();
  explicit constexpr CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ClientMessage(const CCLCMsg_ClientMessage& from);
  CCLCMsg_ClientMessage(CCLCMsg_ClientMessage&& from) noexcept
    : CCLCMsg_ClientMessage() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ClientMessage& operator=(const CCLCMsg_ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ClientMessage& operator=(CCLCMsg_ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_ClientMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ClientMessage* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ClientMessage*>(
               &_CCLCMsg_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CCLCMsg_ClientMessage& a, CCLCMsg_ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ClientMessage* New() const final {
    return CreateMaybeMessage<CCLCMsg_ClientMessage>(nullptr);
  }

  CCLCMsg_ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_ClientMessage& from);
  void MergeFrom(const CCLCMsg_ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ClientMessage";
  }
  protected:
  explicit CCLCMsg_ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_ClientMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_SplitPlayerDisconnect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_SplitPlayerDisconnect) */ {
 public:
  inline CCLCMsg_SplitPlayerDisconnect() : CCLCMsg_SplitPlayerDisconnect(nullptr) {}
  virtual ~CCLCMsg_SplitPlayerDisconnect();
  explicit constexpr CCLCMsg_SplitPlayerDisconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_SplitPlayerDisconnect(const CCLCMsg_SplitPlayerDisconnect& from);
  CCLCMsg_SplitPlayerDisconnect(CCLCMsg_SplitPlayerDisconnect&& from) noexcept
    : CCLCMsg_SplitPlayerDisconnect() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_SplitPlayerDisconnect& operator=(const CCLCMsg_SplitPlayerDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_SplitPlayerDisconnect& operator=(CCLCMsg_SplitPlayerDisconnect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_SplitPlayerDisconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_SplitPlayerDisconnect* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_SplitPlayerDisconnect*>(
               &_CCLCMsg_SplitPlayerDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CCLCMsg_SplitPlayerDisconnect& a, CCLCMsg_SplitPlayerDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_SplitPlayerDisconnect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_SplitPlayerDisconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_SplitPlayerDisconnect* New() const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerDisconnect>(nullptr);
  }

  CCLCMsg_SplitPlayerDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_SplitPlayerDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_SplitPlayerDisconnect& from);
  void MergeFrom(const CCLCMsg_SplitPlayerDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_SplitPlayerDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_SplitPlayerDisconnect";
  }
  protected:
  explicit CCLCMsg_SplitPlayerDisconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // optional int32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_SplitPlayerDisconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ServerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ServerStatus) */ {
 public:
  inline CCLCMsg_ServerStatus() : CCLCMsg_ServerStatus(nullptr) {}
  virtual ~CCLCMsg_ServerStatus();
  explicit constexpr CCLCMsg_ServerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ServerStatus(const CCLCMsg_ServerStatus& from);
  CCLCMsg_ServerStatus(CCLCMsg_ServerStatus&& from) noexcept
    : CCLCMsg_ServerStatus() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ServerStatus& operator=(const CCLCMsg_ServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ServerStatus& operator=(CCLCMsg_ServerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_ServerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ServerStatus* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ServerStatus*>(
               &_CCLCMsg_ServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CCLCMsg_ServerStatus& a, CCLCMsg_ServerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ServerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ServerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ServerStatus* New() const final {
    return CreateMaybeMessage<CCLCMsg_ServerStatus>(nullptr);
  }

  CCLCMsg_ServerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ServerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_ServerStatus& from);
  void MergeFrom(const CCLCMsg_ServerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ServerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ServerStatus";
  }
  protected:
  explicit CCLCMsg_ServerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimplifiedFieldNumber = 1,
  };
  // optional bool simplified = 1;
  bool has_simplified() const;
  private:
  bool _internal_has_simplified() const;
  public:
  void clear_simplified();
  bool simplified() const;
  void set_simplified(bool value);
  private:
  bool _internal_simplified() const;
  void _internal_set_simplified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_ServerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool simplified_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_ServerPing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_ServerPing) */ {
 public:
  inline CCLCMsg_ServerPing() : CCLCMsg_ServerPing(nullptr) {}
  virtual ~CCLCMsg_ServerPing();
  explicit constexpr CCLCMsg_ServerPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_ServerPing(const CCLCMsg_ServerPing& from);
  CCLCMsg_ServerPing(CCLCMsg_ServerPing&& from) noexcept
    : CCLCMsg_ServerPing() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_ServerPing& operator=(const CCLCMsg_ServerPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_ServerPing& operator=(CCLCMsg_ServerPing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_ServerPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_ServerPing* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_ServerPing*>(
               &_CCLCMsg_ServerPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CCLCMsg_ServerPing& a, CCLCMsg_ServerPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_ServerPing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_ServerPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_ServerPing* New() const final {
    return CreateMaybeMessage<CCLCMsg_ServerPing>(nullptr);
  }

  CCLCMsg_ServerPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_ServerPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_ServerPing& from);
  void MergeFrom(const CCLCMsg_ServerPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_ServerPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_ServerPing";
  }
  protected:
  explicit CCLCMsg_ServerPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCLCMsg_ServerPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_RequestPause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_RequestPause) */ {
 public:
  inline CCLCMsg_RequestPause() : CCLCMsg_RequestPause(nullptr) {}
  virtual ~CCLCMsg_RequestPause();
  explicit constexpr CCLCMsg_RequestPause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_RequestPause(const CCLCMsg_RequestPause& from);
  CCLCMsg_RequestPause(CCLCMsg_RequestPause&& from) noexcept
    : CCLCMsg_RequestPause() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_RequestPause& operator=(const CCLCMsg_RequestPause& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_RequestPause& operator=(CCLCMsg_RequestPause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_RequestPause& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_RequestPause* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_RequestPause*>(
               &_CCLCMsg_RequestPause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CCLCMsg_RequestPause& a, CCLCMsg_RequestPause& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_RequestPause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_RequestPause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_RequestPause* New() const final {
    return CreateMaybeMessage<CCLCMsg_RequestPause>(nullptr);
  }

  CCLCMsg_RequestPause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_RequestPause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_RequestPause& from);
  void MergeFrom(const CCLCMsg_RequestPause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_RequestPause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_RequestPause";
  }
  protected:
  explicit CCLCMsg_RequestPause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPauseTypeFieldNumber = 1,
    kPauseGroupFieldNumber = 2,
  };
  // optional .RequestPause_t pause_type = 1 [default = RP_PAUSE];
  bool has_pause_type() const;
  private:
  bool _internal_has_pause_type() const;
  public:
  void clear_pause_type();
  ::RequestPause_t pause_type() const;
  void set_pause_type(::RequestPause_t value);
  private:
  ::RequestPause_t _internal_pause_type() const;
  void _internal_set_pause_type(::RequestPause_t value);
  public:

  // optional int32 pause_group = 2;
  bool has_pause_group() const;
  private:
  bool _internal_has_pause_group() const;
  public:
  void clear_pause_group();
  ::PROTOBUF_NAMESPACE_ID::int32 pause_group() const;
  void set_pause_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pause_group() const;
  void _internal_set_pause_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_RequestPause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int pause_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 pause_group_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_CmdKeyValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_CmdKeyValues) */ {
 public:
  inline CCLCMsg_CmdKeyValues() : CCLCMsg_CmdKeyValues(nullptr) {}
  virtual ~CCLCMsg_CmdKeyValues();
  explicit constexpr CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from);
  CCLCMsg_CmdKeyValues(CCLCMsg_CmdKeyValues&& from) noexcept
    : CCLCMsg_CmdKeyValues() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_CmdKeyValues& operator=(const CCLCMsg_CmdKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_CmdKeyValues& operator=(CCLCMsg_CmdKeyValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_CmdKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_CmdKeyValues* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_CmdKeyValues*>(
               &_CCLCMsg_CmdKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CCLCMsg_CmdKeyValues& a, CCLCMsg_CmdKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_CmdKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_CmdKeyValues* New() const final {
    return CreateMaybeMessage<CCLCMsg_CmdKeyValues>(nullptr);
  }

  CCLCMsg_CmdKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_CmdKeyValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_CmdKeyValues& from);
  void MergeFrom(const CCLCMsg_CmdKeyValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_CmdKeyValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_CmdKeyValues";
  }
  protected:
  explicit CCLCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_CmdKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CCLCMsg_RconServerDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_RconServerDetails) */ {
 public:
  inline CCLCMsg_RconServerDetails() : CCLCMsg_RconServerDetails(nullptr) {}
  virtual ~CCLCMsg_RconServerDetails();
  explicit constexpr CCLCMsg_RconServerDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_RconServerDetails(const CCLCMsg_RconServerDetails& from);
  CCLCMsg_RconServerDetails(CCLCMsg_RconServerDetails&& from) noexcept
    : CCLCMsg_RconServerDetails() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_RconServerDetails& operator=(const CCLCMsg_RconServerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_RconServerDetails& operator=(CCLCMsg_RconServerDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCLCMsg_RconServerDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_RconServerDetails* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_RconServerDetails*>(
               &_CCLCMsg_RconServerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CCLCMsg_RconServerDetails& a, CCLCMsg_RconServerDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_RconServerDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_RconServerDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCLCMsg_RconServerDetails* New() const final {
    return CreateMaybeMessage<CCLCMsg_RconServerDetails>(nullptr);
  }

  CCLCMsg_RconServerDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCLCMsg_RconServerDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCLCMsg_RconServerDetails& from);
  void MergeFrom(const CCLCMsg_RconServerDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_RconServerDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_RconServerDetails";
  }
  protected:
  explicit CCLCMsg_RconServerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // optional bytes token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_RconServerDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ServerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ServerInfo) */ {
 public:
  inline CSVCMsg_ServerInfo() : CSVCMsg_ServerInfo(nullptr) {}
  virtual ~CSVCMsg_ServerInfo();
  explicit constexpr CSVCMsg_ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ServerInfo(const CSVCMsg_ServerInfo& from);
  CSVCMsg_ServerInfo(CSVCMsg_ServerInfo&& from) noexcept
    : CSVCMsg_ServerInfo() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ServerInfo& operator=(const CSVCMsg_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ServerInfo& operator=(CSVCMsg_ServerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ServerInfo*>(
               &_CSVCMsg_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSVCMsg_ServerInfo& a, CSVCMsg_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ServerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ServerInfo* New() const final {
    return CreateMaybeMessage<CSVCMsg_ServerInfo>(nullptr);
  }

  CSVCMsg_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_ServerInfo& from);
  void MergeFrom(const CSVCMsg_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ServerInfo";
  }
  protected:
  explicit CSVCMsg_ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameDirFieldNumber = 14,
    kMapNameFieldNumber = 15,
    kSkyNameFieldNumber = 16,
    kHostNameFieldNumber = 17,
    kAddonNameFieldNumber = 18,
    kGameSessionManifestFieldNumber = 20,
    kGameSessionConfigFieldNumber = 19,
    kProtocolFieldNumber = 1,
    kServerCountFieldNumber = 2,
    kIsDedicatedFieldNumber = 3,
    kIsHltvFieldNumber = 4,
    kCOsFieldNumber = 6,
    kMaxClientsFieldNumber = 10,
    kMaxClassesFieldNumber = 11,
    kPlayerSlotFieldNumber = 12,
    kTickIntervalFieldNumber = 13,
  };
  // optional string game_dir = 14;
  bool has_game_dir() const;
  private:
  bool _internal_has_game_dir() const;
  public:
  void clear_game_dir();
  const std::string& game_dir() const;
  void set_game_dir(const std::string& value);
  void set_game_dir(std::string&& value);
  void set_game_dir(const char* value);
  void set_game_dir(const char* value, size_t size);
  std::string* mutable_game_dir();
  std::string* release_game_dir();
  void set_allocated_game_dir(std::string* game_dir);
  private:
  const std::string& _internal_game_dir() const;
  void _internal_set_game_dir(const std::string& value);
  std::string* _internal_mutable_game_dir();
  public:

  // optional string map_name = 15;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional string sky_name = 16;
  bool has_sky_name() const;
  private:
  bool _internal_has_sky_name() const;
  public:
  void clear_sky_name();
  const std::string& sky_name() const;
  void set_sky_name(const std::string& value);
  void set_sky_name(std::string&& value);
  void set_sky_name(const char* value);
  void set_sky_name(const char* value, size_t size);
  std::string* mutable_sky_name();
  std::string* release_sky_name();
  void set_allocated_sky_name(std::string* sky_name);
  private:
  const std::string& _internal_sky_name() const;
  void _internal_set_sky_name(const std::string& value);
  std::string* _internal_mutable_sky_name();
  public:

  // optional string host_name = 17;
  bool has_host_name() const;
  private:
  bool _internal_has_host_name() const;
  public:
  void clear_host_name();
  const std::string& host_name() const;
  void set_host_name(const std::string& value);
  void set_host_name(std::string&& value);
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  std::string* mutable_host_name();
  std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // optional string addon_name = 18;
  bool has_addon_name() const;
  private:
  bool _internal_has_addon_name() const;
  public:
  void clear_addon_name();
  const std::string& addon_name() const;
  void set_addon_name(const std::string& value);
  void set_addon_name(std::string&& value);
  void set_addon_name(const char* value);
  void set_addon_name(const char* value, size_t size);
  std::string* mutable_addon_name();
  std::string* release_addon_name();
  void set_allocated_addon_name(std::string* addon_name);
  private:
  const std::string& _internal_addon_name() const;
  void _internal_set_addon_name(const std::string& value);
  std::string* _internal_mutable_addon_name();
  public:

  // optional bytes game_session_manifest = 20;
  bool has_game_session_manifest() const;
  private:
  bool _internal_has_game_session_manifest() const;
  public:
  void clear_game_session_manifest();
  const std::string& game_session_manifest() const;
  void set_game_session_manifest(const std::string& value);
  void set_game_session_manifest(std::string&& value);
  void set_game_session_manifest(const char* value);
  void set_game_session_manifest(const void* value, size_t size);
  std::string* mutable_game_session_manifest();
  std::string* release_game_session_manifest();
  void set_allocated_game_session_manifest(std::string* game_session_manifest);
  private:
  const std::string& _internal_game_session_manifest() const;
  void _internal_set_game_session_manifest(const std::string& value);
  std::string* _internal_mutable_game_session_manifest();
  public:

  // optional .CSVCMsg_GameSessionConfiguration game_session_config = 19;
  bool has_game_session_config() const;
  private:
  bool _internal_has_game_session_config() const;
  public:
  void clear_game_session_config();
  const ::CSVCMsg_GameSessionConfiguration& game_session_config() const;
  ::CSVCMsg_GameSessionConfiguration* release_game_session_config();
  ::CSVCMsg_GameSessionConfiguration* mutable_game_session_config();
  void set_allocated_game_session_config(::CSVCMsg_GameSessionConfiguration* game_session_config);
  private:
  const ::CSVCMsg_GameSessionConfiguration& _internal_game_session_config() const;
  ::CSVCMsg_GameSessionConfiguration* _internal_mutable_game_session_config();
  public:
  void unsafe_arena_set_allocated_game_session_config(
      ::CSVCMsg_GameSessionConfiguration* game_session_config);
  ::CSVCMsg_GameSessionConfiguration* unsafe_arena_release_game_session_config();

  // optional int32 protocol = 1;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol() const;
  void set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol() const;
  void _internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 server_count = 2;
  bool has_server_count() const;
  private:
  bool _internal_has_server_count() const;
  public:
  void clear_server_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_count() const;
  void set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_count() const;
  void _internal_set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_dedicated = 3;
  bool has_is_dedicated() const;
  private:
  bool _internal_has_is_dedicated() const;
  public:
  void clear_is_dedicated();
  bool is_dedicated() const;
  void set_is_dedicated(bool value);
  private:
  bool _internal_is_dedicated() const;
  void _internal_set_is_dedicated(bool value);
  public:

  // optional bool is_hltv = 4;
  bool has_is_hltv() const;
  private:
  bool _internal_has_is_hltv() const;
  public:
  void clear_is_hltv();
  bool is_hltv() const;
  void set_is_hltv(bool value);
  private:
  bool _internal_is_hltv() const;
  void _internal_set_is_hltv(bool value);
  public:

  // optional int32 c_os = 6;
  bool has_c_os() const;
  private:
  bool _internal_has_c_os() const;
  public:
  void clear_c_os();
  ::PROTOBUF_NAMESPACE_ID::int32 c_os() const;
  void set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_c_os() const;
  void _internal_set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_clients = 10;
  bool has_max_clients() const;
  private:
  bool _internal_has_max_clients() const;
  public:
  void clear_max_clients();
  ::PROTOBUF_NAMESPACE_ID::int32 max_clients() const;
  void set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_clients() const;
  void _internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_classes = 11;
  bool has_max_classes() const;
  private:
  bool _internal_has_max_classes() const;
  public:
  void clear_max_classes();
  ::PROTOBUF_NAMESPACE_ID::int32 max_classes() const;
  void set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_classes() const;
  void _internal_set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_slot = 12;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot() const;
  void set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_slot() const;
  void _internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float tick_interval = 13;
  bool has_tick_interval() const;
  private:
  bool _internal_has_tick_interval() const;
  public:
  void clear_tick_interval();
  float tick_interval() const;
  void set_tick_interval(float value);
  private:
  float _internal_tick_interval() const;
  void _internal_set_tick_interval(float value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sky_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addon_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_session_manifest_;
  ::CSVCMsg_GameSessionConfiguration* game_session_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_count_;
  bool is_dedicated_;
  bool is_hltv_;
  ::PROTOBUF_NAMESPACE_ID::int32 c_os_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_clients_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_classes_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot_;
  float tick_interval_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ClassInfo_class_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ClassInfo.class_t) */ {
 public:
  inline CSVCMsg_ClassInfo_class_t() : CSVCMsg_ClassInfo_class_t(nullptr) {}
  virtual ~CSVCMsg_ClassInfo_class_t();
  explicit constexpr CSVCMsg_ClassInfo_class_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ClassInfo_class_t(const CSVCMsg_ClassInfo_class_t& from);
  CSVCMsg_ClassInfo_class_t(CSVCMsg_ClassInfo_class_t&& from) noexcept
    : CSVCMsg_ClassInfo_class_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ClassInfo_class_t& operator=(const CSVCMsg_ClassInfo_class_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ClassInfo_class_t& operator=(CSVCMsg_ClassInfo_class_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_ClassInfo_class_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ClassInfo_class_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ClassInfo_class_t*>(
               &_CSVCMsg_ClassInfo_class_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CSVCMsg_ClassInfo_class_t& a, CSVCMsg_ClassInfo_class_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ClassInfo_class_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ClassInfo_class_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ClassInfo_class_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo_class_t>(nullptr);
  }

  CSVCMsg_ClassInfo_class_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo_class_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_ClassInfo_class_t& from);
  void MergeFrom(const CSVCMsg_ClassInfo_class_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ClassInfo_class_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ClassInfo.class_t";
  }
  protected:
  explicit CSVCMsg_ClassInfo_class_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTableNameFieldNumber = 2,
    kClassNameFieldNumber = 3,
    kClassIdFieldNumber = 1,
  };
  // optional string data_table_name = 2;
  bool has_data_table_name() const;
  private:
  bool _internal_has_data_table_name() const;
  public:
  void clear_data_table_name();
  const std::string& data_table_name() const;
  void set_data_table_name(const std::string& value);
  void set_data_table_name(std::string&& value);
  void set_data_table_name(const char* value);
  void set_data_table_name(const char* value, size_t size);
  std::string* mutable_data_table_name();
  std::string* release_data_table_name();
  void set_allocated_data_table_name(std::string* data_table_name);
  private:
  const std::string& _internal_data_table_name() const;
  void _internal_set_data_table_name(const std::string& value);
  std::string* _internal_mutable_data_table_name();
  public:

  // optional string class_name = 3;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional int32 class_id = 1;
  bool has_class_id() const;
  private:
  bool _internal_has_class_id() const;
  public:
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::int32 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ClassInfo.class_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 class_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ClassInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ClassInfo) */ {
 public:
  inline CSVCMsg_ClassInfo() : CSVCMsg_ClassInfo(nullptr) {}
  virtual ~CSVCMsg_ClassInfo();
  explicit constexpr CSVCMsg_ClassInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ClassInfo(const CSVCMsg_ClassInfo& from);
  CSVCMsg_ClassInfo(CSVCMsg_ClassInfo&& from) noexcept
    : CSVCMsg_ClassInfo() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ClassInfo& operator=(const CSVCMsg_ClassInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ClassInfo& operator=(CSVCMsg_ClassInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_ClassInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ClassInfo* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ClassInfo*>(
               &_CSVCMsg_ClassInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CSVCMsg_ClassInfo& a, CSVCMsg_ClassInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ClassInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ClassInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ClassInfo* New() const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo>(nullptr);
  }

  CSVCMsg_ClassInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ClassInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_ClassInfo& from);
  void MergeFrom(const CSVCMsg_ClassInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ClassInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ClassInfo";
  }
  protected:
  explicit CSVCMsg_ClassInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_ClassInfo_class_t class_t;

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 2,
    kCreateOnClientFieldNumber = 1,
  };
  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::CSVCMsg_ClassInfo_class_t* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >*
      mutable_classes();
  private:
  const ::CSVCMsg_ClassInfo_class_t& _internal_classes(int index) const;
  ::CSVCMsg_ClassInfo_class_t* _internal_add_classes();
  public:
  const ::CSVCMsg_ClassInfo_class_t& classes(int index) const;
  ::CSVCMsg_ClassInfo_class_t* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >&
      classes() const;

  // optional bool create_on_client = 1;
  bool has_create_on_client() const;
  private:
  bool _internal_has_create_on_client() const;
  public:
  void clear_create_on_client();
  bool create_on_client() const;
  void set_create_on_client(bool value);
  private:
  bool _internal_create_on_client() const;
  void _internal_set_create_on_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ClassInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t > classes_;
  bool create_on_client_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SetPause PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SetPause) */ {
 public:
  inline CSVCMsg_SetPause() : CSVCMsg_SetPause(nullptr) {}
  virtual ~CSVCMsg_SetPause();
  explicit constexpr CSVCMsg_SetPause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SetPause(const CSVCMsg_SetPause& from);
  CSVCMsg_SetPause(CSVCMsg_SetPause&& from) noexcept
    : CSVCMsg_SetPause() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SetPause& operator=(const CSVCMsg_SetPause& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SetPause& operator=(CSVCMsg_SetPause&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_SetPause& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SetPause* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SetPause*>(
               &_CSVCMsg_SetPause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSVCMsg_SetPause& a, CSVCMsg_SetPause& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SetPause* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SetPause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SetPause* New() const final {
    return CreateMaybeMessage<CSVCMsg_SetPause>(nullptr);
  }

  CSVCMsg_SetPause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SetPause>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_SetPause& from);
  void MergeFrom(const CSVCMsg_SetPause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SetPause* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SetPause";
  }
  protected:
  explicit CSVCMsg_SetPause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPausedFieldNumber = 1,
  };
  // optional bool paused = 1;
  bool has_paused() const;
  private:
  bool _internal_has_paused() const;
  public:
  void clear_paused();
  bool paused() const;
  void set_paused(bool value);
  private:
  bool _internal_paused() const;
  void _internal_set_paused(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SetPause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool paused_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_VoiceInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_VoiceInit) */ {
 public:
  inline CSVCMsg_VoiceInit() : CSVCMsg_VoiceInit(nullptr) {}
  virtual ~CSVCMsg_VoiceInit();
  explicit constexpr CSVCMsg_VoiceInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_VoiceInit(const CSVCMsg_VoiceInit& from);
  CSVCMsg_VoiceInit(CSVCMsg_VoiceInit&& from) noexcept
    : CSVCMsg_VoiceInit() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_VoiceInit& operator=(const CSVCMsg_VoiceInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_VoiceInit& operator=(CSVCMsg_VoiceInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_VoiceInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_VoiceInit* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_VoiceInit*>(
               &_CSVCMsg_VoiceInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CSVCMsg_VoiceInit& a, CSVCMsg_VoiceInit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_VoiceInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_VoiceInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_VoiceInit* New() const final {
    return CreateMaybeMessage<CSVCMsg_VoiceInit>(nullptr);
  }

  CSVCMsg_VoiceInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_VoiceInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_VoiceInit& from);
  void MergeFrom(const CSVCMsg_VoiceInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_VoiceInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_VoiceInit";
  }
  protected:
  explicit CSVCMsg_VoiceInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 2,
    kQualityFieldNumber = 1,
    kVersionFieldNumber = 3,
  };
  // optional string codec = 2;
  bool has_codec() const;
  private:
  bool _internal_has_codec() const;
  public:
  void clear_codec();
  const std::string& codec() const;
  void set_codec(const std::string& value);
  void set_codec(std::string&& value);
  void set_codec(const char* value);
  void set_codec(const char* value, size_t size);
  std::string* mutable_codec();
  std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // optional int32 quality = 1;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 version = 3 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_VoiceInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::int32 quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Print PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Print) */ {
 public:
  inline CSVCMsg_Print() : CSVCMsg_Print(nullptr) {}
  virtual ~CSVCMsg_Print();
  explicit constexpr CSVCMsg_Print(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Print(const CSVCMsg_Print& from);
  CSVCMsg_Print(CSVCMsg_Print&& from) noexcept
    : CSVCMsg_Print() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Print& operator=(const CSVCMsg_Print& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Print& operator=(CSVCMsg_Print&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_Print& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Print* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Print*>(
               &_CSVCMsg_Print_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSVCMsg_Print& a, CSVCMsg_Print& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Print* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Print* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Print* New() const final {
    return CreateMaybeMessage<CSVCMsg_Print>(nullptr);
  }

  CSVCMsg_Print* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Print>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_Print& from);
  void MergeFrom(const CSVCMsg_Print& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Print* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Print";
  }
  protected:
  explicit CSVCMsg_Print(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Print)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Sounds_sounddata_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Sounds.sounddata_t) */ {
 public:
  inline CSVCMsg_Sounds_sounddata_t() : CSVCMsg_Sounds_sounddata_t(nullptr) {}
  virtual ~CSVCMsg_Sounds_sounddata_t();
  explicit constexpr CSVCMsg_Sounds_sounddata_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Sounds_sounddata_t(const CSVCMsg_Sounds_sounddata_t& from);
  CSVCMsg_Sounds_sounddata_t(CSVCMsg_Sounds_sounddata_t&& from) noexcept
    : CSVCMsg_Sounds_sounddata_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Sounds_sounddata_t& operator=(const CSVCMsg_Sounds_sounddata_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Sounds_sounddata_t& operator=(CSVCMsg_Sounds_sounddata_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_Sounds_sounddata_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Sounds_sounddata_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Sounds_sounddata_t*>(
               &_CSVCMsg_Sounds_sounddata_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CSVCMsg_Sounds_sounddata_t& a, CSVCMsg_Sounds_sounddata_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Sounds_sounddata_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Sounds_sounddata_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Sounds_sounddata_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_Sounds_sounddata_t>(nullptr);
  }

  CSVCMsg_Sounds_sounddata_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Sounds_sounddata_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_Sounds_sounddata_t& from);
  void MergeFrom(const CSVCMsg_Sounds_sounddata_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Sounds_sounddata_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Sounds.sounddata_t";
  }
  protected:
  explicit CSVCMsg_Sounds_sounddata_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginXFieldNumber = 1,
    kOriginYFieldNumber = 2,
    kOriginZFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kDelayValueFieldNumber = 5,
    kSequenceNumberFieldNumber = 6,
    kEntityIndexFieldNumber = 7,
    kChannelFieldNumber = 8,
    kPitchFieldNumber = 9,
    kFlagsFieldNumber = 10,
    kSoundNumFieldNumber = 11,
    kSoundNumHandleFieldNumber = 12,
    kSpeakerEntityFieldNumber = 13,
    kRandomSeedFieldNumber = 14,
    kSoundLevelFieldNumber = 15,
    kIsSentenceFieldNumber = 16,
    kIsAmbientFieldNumber = 17,
    kSoundResourceIdFieldNumber = 19,
    kGuidFieldNumber = 18,
  };
  // optional sint32 origin_x = 1;
  bool has_origin_x() const;
  private:
  bool _internal_has_origin_x() const;
  public:
  void clear_origin_x();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_x() const;
  void set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_x() const;
  void _internal_set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 origin_y = 2;
  bool has_origin_y() const;
  private:
  bool _internal_has_origin_y() const;
  public:
  void clear_origin_y();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_y() const;
  void set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_y() const;
  void _internal_set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 origin_z = 3;
  bool has_origin_z() const;
  private:
  bool _internal_has_origin_z() const;
  public:
  void clear_origin_z();
  ::PROTOBUF_NAMESPACE_ID::int32 origin_z() const;
  void set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_origin_z() const;
  void _internal_set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 volume = 4;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float delay_value = 5;
  bool has_delay_value() const;
  private:
  bool _internal_has_delay_value() const;
  public:
  void clear_delay_value();
  float delay_value() const;
  void set_delay_value(float value);
  private:
  float _internal_delay_value() const;
  void _internal_set_delay_value(float value);
  public:

  // optional int32 sequence_number = 6;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 entity_index = 7;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 channel = 8;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pitch = 9;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  ::PROTOBUF_NAMESPACE_ID::int32 pitch() const;
  void set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pitch() const;
  void _internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 10;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 sound_num = 11;
  bool has_sound_num() const;
  private:
  bool _internal_has_sound_num() const;
  public:
  void clear_sound_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num() const;
  void set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sound_num() const;
  void _internal_set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 sound_num_handle = 12;
  bool has_sound_num_handle() const;
  private:
  bool _internal_has_sound_num_handle() const;
  public:
  void clear_sound_num_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_handle() const;
  void set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sound_num_handle() const;
  void _internal_set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 speaker_entity = 13;
  bool has_speaker_entity() const;
  private:
  bool _internal_has_speaker_entity() const;
  public:
  void clear_speaker_entity();
  ::PROTOBUF_NAMESPACE_ID::int32 speaker_entity() const;
  void set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speaker_entity() const;
  void _internal_set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 random_seed = 14;
  bool has_random_seed() const;
  private:
  bool _internal_has_random_seed() const;
  public:
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random_seed() const;
  void _internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sound_level = 15;
  bool has_sound_level() const;
  private:
  bool _internal_has_sound_level() const;
  public:
  void clear_sound_level();
  ::PROTOBUF_NAMESPACE_ID::int32 sound_level() const;
  void set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sound_level() const;
  void _internal_set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_sentence = 16;
  bool has_is_sentence() const;
  private:
  bool _internal_has_is_sentence() const;
  public:
  void clear_is_sentence();
  bool is_sentence() const;
  void set_is_sentence(bool value);
  private:
  bool _internal_is_sentence() const;
  void _internal_set_is_sentence(bool value);
  public:

  // optional bool is_ambient = 17;
  bool has_is_ambient() const;
  private:
  bool _internal_has_is_ambient() const;
  public:
  void clear_is_ambient();
  bool is_ambient() const;
  void set_is_ambient(bool value);
  private:
  bool _internal_is_ambient() const;
  void _internal_set_is_ambient(bool value);
  public:

  // optional fixed64 sound_resource_id = 19;
  bool has_sound_resource_id() const;
  private:
  bool _internal_has_sound_resource_id() const;
  public:
  void clear_sound_resource_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sound_resource_id() const;
  void set_sound_resource_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sound_resource_id() const;
  void _internal_set_sound_resource_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 guid = 18;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint32 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Sounds.sounddata_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 origin_z_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_;
  float delay_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 pitch_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sound_num_handle_;
  ::PROTOBUF_NAMESPACE_ID::int32 speaker_entity_;
  ::PROTOBUF_NAMESPACE_ID::int32 random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 sound_level_;
  bool is_sentence_;
  bool is_ambient_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sound_resource_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guid_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Sounds PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Sounds) */ {
 public:
  inline CSVCMsg_Sounds() : CSVCMsg_Sounds(nullptr) {}
  virtual ~CSVCMsg_Sounds();
  explicit constexpr CSVCMsg_Sounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Sounds(const CSVCMsg_Sounds& from);
  CSVCMsg_Sounds(CSVCMsg_Sounds&& from) noexcept
    : CSVCMsg_Sounds() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Sounds& operator=(const CSVCMsg_Sounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Sounds& operator=(CSVCMsg_Sounds&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_Sounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Sounds* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Sounds*>(
               &_CSVCMsg_Sounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSVCMsg_Sounds& a, CSVCMsg_Sounds& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Sounds* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Sounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Sounds* New() const final {
    return CreateMaybeMessage<CSVCMsg_Sounds>(nullptr);
  }

  CSVCMsg_Sounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Sounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_Sounds& from);
  void MergeFrom(const CSVCMsg_Sounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Sounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Sounds";
  }
  protected:
  explicit CSVCMsg_Sounds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_Sounds_sounddata_t sounddata_t;

  // accessors -------------------------------------------------------

  enum : int {
    kSoundsFieldNumber = 2,
    kReliableSoundFieldNumber = 1,
  };
  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  int sounds_size() const;
  private:
  int _internal_sounds_size() const;
  public:
  void clear_sounds();
  ::CSVCMsg_Sounds_sounddata_t* mutable_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >*
      mutable_sounds();
  private:
  const ::CSVCMsg_Sounds_sounddata_t& _internal_sounds(int index) const;
  ::CSVCMsg_Sounds_sounddata_t* _internal_add_sounds();
  public:
  const ::CSVCMsg_Sounds_sounddata_t& sounds(int index) const;
  ::CSVCMsg_Sounds_sounddata_t* add_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >&
      sounds() const;

  // optional bool reliable_sound = 1;
  bool has_reliable_sound() const;
  private:
  bool _internal_has_reliable_sound() const;
  public:
  void clear_reliable_sound();
  bool reliable_sound() const;
  void set_reliable_sound(bool value);
  private:
  bool _internal_reliable_sound() const;
  void _internal_set_reliable_sound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Sounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t > sounds_;
  bool reliable_sound_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Prefetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Prefetch) */ {
 public:
  inline CSVCMsg_Prefetch() : CSVCMsg_Prefetch(nullptr) {}
  virtual ~CSVCMsg_Prefetch();
  explicit constexpr CSVCMsg_Prefetch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Prefetch(const CSVCMsg_Prefetch& from);
  CSVCMsg_Prefetch(CSVCMsg_Prefetch&& from) noexcept
    : CSVCMsg_Prefetch() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Prefetch& operator=(const CSVCMsg_Prefetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Prefetch& operator=(CSVCMsg_Prefetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_Prefetch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Prefetch* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Prefetch*>(
               &_CSVCMsg_Prefetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CSVCMsg_Prefetch& a, CSVCMsg_Prefetch& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Prefetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Prefetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Prefetch* New() const final {
    return CreateMaybeMessage<CSVCMsg_Prefetch>(nullptr);
  }

  CSVCMsg_Prefetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Prefetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_Prefetch& from);
  void MergeFrom(const CSVCMsg_Prefetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Prefetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Prefetch";
  }
  protected:
  explicit CSVCMsg_Prefetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoundIndexFieldNumber = 1,
    kResourceTypeFieldNumber = 2,
  };
  // optional int32 sound_index = 1;
  bool has_sound_index() const;
  private:
  bool _internal_has_sound_index() const;
  public:
  void clear_sound_index();
  ::PROTOBUF_NAMESPACE_ID::int32 sound_index() const;
  void set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sound_index() const;
  void _internal_set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PrefetchType resource_type = 2 [default = PFT_SOUND];
  bool has_resource_type() const;
  private:
  bool _internal_has_resource_type() const;
  public:
  void clear_resource_type();
  ::PrefetchType resource_type() const;
  void set_resource_type(::PrefetchType value);
  private:
  ::PrefetchType _internal_resource_type() const;
  void _internal_set_resource_type(::PrefetchType value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Prefetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sound_index_;
  int resource_type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SetView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SetView) */ {
 public:
  inline CSVCMsg_SetView() : CSVCMsg_SetView(nullptr) {}
  virtual ~CSVCMsg_SetView();
  explicit constexpr CSVCMsg_SetView(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SetView(const CSVCMsg_SetView& from);
  CSVCMsg_SetView(CSVCMsg_SetView&& from) noexcept
    : CSVCMsg_SetView() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SetView& operator=(const CSVCMsg_SetView& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SetView& operator=(CSVCMsg_SetView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_SetView& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SetView* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SetView*>(
               &_CSVCMsg_SetView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CSVCMsg_SetView& a, CSVCMsg_SetView& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SetView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SetView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SetView* New() const final {
    return CreateMaybeMessage<CSVCMsg_SetView>(nullptr);
  }

  CSVCMsg_SetView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SetView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_SetView& from);
  void MergeFrom(const CSVCMsg_SetView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SetView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SetView";
  }
  protected:
  explicit CSVCMsg_SetView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIndexFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // optional int32 entity_index = 1;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SetView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_FixAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_FixAngle) */ {
 public:
  inline CSVCMsg_FixAngle() : CSVCMsg_FixAngle(nullptr) {}
  virtual ~CSVCMsg_FixAngle();
  explicit constexpr CSVCMsg_FixAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_FixAngle(const CSVCMsg_FixAngle& from);
  CSVCMsg_FixAngle(CSVCMsg_FixAngle&& from) noexcept
    : CSVCMsg_FixAngle() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_FixAngle& operator=(const CSVCMsg_FixAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_FixAngle& operator=(CSVCMsg_FixAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_FixAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_FixAngle* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_FixAngle*>(
               &_CSVCMsg_FixAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSVCMsg_FixAngle& a, CSVCMsg_FixAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_FixAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_FixAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_FixAngle* New() const final {
    return CreateMaybeMessage<CSVCMsg_FixAngle>(nullptr);
  }

  CSVCMsg_FixAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_FixAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_FixAngle& from);
  void MergeFrom(const CSVCMsg_FixAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_FixAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_FixAngle";
  }
  protected:
  explicit CSVCMsg_FixAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kRelativeFieldNumber = 1,
  };
  // optional .CMsgQAngle angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::CMsgQAngle& angle() const;
  ::CMsgQAngle* release_angle();
  ::CMsgQAngle* mutable_angle();
  void set_allocated_angle(::CMsgQAngle* angle);
  private:
  const ::CMsgQAngle& _internal_angle() const;
  ::CMsgQAngle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::CMsgQAngle* angle);
  ::CMsgQAngle* unsafe_arena_release_angle();

  // optional bool relative = 1;
  bool has_relative() const;
  private:
  bool _internal_has_relative() const;
  public:
  void clear_relative();
  bool relative() const;
  void set_relative(bool value);
  private:
  bool _internal_relative() const;
  void _internal_set_relative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_FixAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgQAngle* angle_;
  bool relative_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CrosshairAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CrosshairAngle) */ {
 public:
  inline CSVCMsg_CrosshairAngle() : CSVCMsg_CrosshairAngle(nullptr) {}
  virtual ~CSVCMsg_CrosshairAngle();
  explicit constexpr CSVCMsg_CrosshairAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CrosshairAngle(const CSVCMsg_CrosshairAngle& from);
  CSVCMsg_CrosshairAngle(CSVCMsg_CrosshairAngle&& from) noexcept
    : CSVCMsg_CrosshairAngle() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CrosshairAngle& operator=(const CSVCMsg_CrosshairAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CrosshairAngle& operator=(CSVCMsg_CrosshairAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_CrosshairAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CrosshairAngle* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CrosshairAngle*>(
               &_CSVCMsg_CrosshairAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CSVCMsg_CrosshairAngle& a, CSVCMsg_CrosshairAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CrosshairAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CrosshairAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CrosshairAngle* New() const final {
    return CreateMaybeMessage<CSVCMsg_CrosshairAngle>(nullptr);
  }

  CSVCMsg_CrosshairAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CrosshairAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_CrosshairAngle& from);
  void MergeFrom(const CSVCMsg_CrosshairAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CrosshairAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CrosshairAngle";
  }
  protected:
  explicit CSVCMsg_CrosshairAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // optional .CMsgQAngle angle = 1;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  const ::CMsgQAngle& angle() const;
  ::CMsgQAngle* release_angle();
  ::CMsgQAngle* mutable_angle();
  void set_allocated_angle(::CMsgQAngle* angle);
  private:
  const ::CMsgQAngle& _internal_angle() const;
  ::CMsgQAngle* _internal_mutable_angle();
  public:
  void unsafe_arena_set_allocated_angle(
      ::CMsgQAngle* angle);
  ::CMsgQAngle* unsafe_arena_release_angle();

  // @@protoc_insertion_point(class_scope:CSVCMsg_CrosshairAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgQAngle* angle_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_BSPDecal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_BSPDecal) */ {
 public:
  inline CSVCMsg_BSPDecal() : CSVCMsg_BSPDecal(nullptr) {}
  virtual ~CSVCMsg_BSPDecal();
  explicit constexpr CSVCMsg_BSPDecal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_BSPDecal(const CSVCMsg_BSPDecal& from);
  CSVCMsg_BSPDecal(CSVCMsg_BSPDecal&& from) noexcept
    : CSVCMsg_BSPDecal() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_BSPDecal& operator=(const CSVCMsg_BSPDecal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_BSPDecal& operator=(CSVCMsg_BSPDecal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_BSPDecal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_BSPDecal* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_BSPDecal*>(
               &_CSVCMsg_BSPDecal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CSVCMsg_BSPDecal& a, CSVCMsg_BSPDecal& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_BSPDecal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_BSPDecal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_BSPDecal* New() const final {
    return CreateMaybeMessage<CSVCMsg_BSPDecal>(nullptr);
  }

  CSVCMsg_BSPDecal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_BSPDecal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_BSPDecal& from);
  void MergeFrom(const CSVCMsg_BSPDecal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_BSPDecal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_BSPDecal";
  }
  protected:
  explicit CSVCMsg_BSPDecal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kDecalTextureIndexFieldNumber = 2,
    kEntityIndexFieldNumber = 3,
    kModelIndexFieldNumber = 4,
    kLowPriorityFieldNumber = 5,
  };
  // optional .CMsgVector pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::CMsgVector& pos() const;
  ::CMsgVector* release_pos();
  ::CMsgVector* mutable_pos();
  void set_allocated_pos(::CMsgVector* pos);
  private:
  const ::CMsgVector& _internal_pos() const;
  ::CMsgVector* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::CMsgVector* pos);
  ::CMsgVector* unsafe_arena_release_pos();

  // optional int32 decal_texture_index = 2;
  bool has_decal_texture_index() const;
  private:
  bool _internal_has_decal_texture_index() const;
  public:
  void clear_decal_texture_index();
  ::PROTOBUF_NAMESPACE_ID::int32 decal_texture_index() const;
  void set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_decal_texture_index() const;
  void _internal_set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 entity_index = 3;
  bool has_entity_index() const;
  private:
  bool _internal_has_entity_index() const;
  public:
  void clear_entity_index();
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index() const;
  void set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entity_index() const;
  void _internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 model_index = 4;
  bool has_model_index() const;
  private:
  bool _internal_has_model_index() const;
  public:
  void clear_model_index();
  ::PROTOBUF_NAMESPACE_ID::int32 model_index() const;
  void set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_model_index() const;
  void _internal_set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool low_priority = 5;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_BSPDecal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVector* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 decal_texture_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 entity_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 model_index_;
  bool low_priority_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SplitScreen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SplitScreen) */ {
 public:
  inline CSVCMsg_SplitScreen() : CSVCMsg_SplitScreen(nullptr) {}
  virtual ~CSVCMsg_SplitScreen();
  explicit constexpr CSVCMsg_SplitScreen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SplitScreen(const CSVCMsg_SplitScreen& from);
  CSVCMsg_SplitScreen(CSVCMsg_SplitScreen&& from) noexcept
    : CSVCMsg_SplitScreen() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SplitScreen& operator=(const CSVCMsg_SplitScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SplitScreen& operator=(CSVCMsg_SplitScreen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_SplitScreen& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SplitScreen* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SplitScreen*>(
               &_CSVCMsg_SplitScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSVCMsg_SplitScreen& a, CSVCMsg_SplitScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SplitScreen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SplitScreen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SplitScreen* New() const final {
    return CreateMaybeMessage<CSVCMsg_SplitScreen>(nullptr);
  }

  CSVCMsg_SplitScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SplitScreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_SplitScreen& from);
  void MergeFrom(const CSVCMsg_SplitScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SplitScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SplitScreen";
  }
  protected:
  explicit CSVCMsg_SplitScreen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSlotFieldNumber = 2,
    kPlayerIndexFieldNumber = 3,
  };
  // optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::ESplitScreenMessageType type() const;
  void set_type(::ESplitScreenMessageType value);
  private:
  ::ESplitScreenMessageType _internal_type() const;
  void _internal_set_type(::ESplitScreenMessageType value);
  public:

  // optional int32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 player_index = 3;
  bool has_player_index() const;
  private:
  bool _internal_has_player_index() const;
  public:
  void clear_player_index();
  ::PROTOBUF_NAMESPACE_ID::int32 player_index() const;
  void set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_index() const;
  void _internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SplitScreen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_index_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GetCvarValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GetCvarValue) */ {
 public:
  inline CSVCMsg_GetCvarValue() : CSVCMsg_GetCvarValue(nullptr) {}
  virtual ~CSVCMsg_GetCvarValue();
  explicit constexpr CSVCMsg_GetCvarValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GetCvarValue(const CSVCMsg_GetCvarValue& from);
  CSVCMsg_GetCvarValue(CSVCMsg_GetCvarValue&& from) noexcept
    : CSVCMsg_GetCvarValue() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GetCvarValue& operator=(const CSVCMsg_GetCvarValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GetCvarValue& operator=(CSVCMsg_GetCvarValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GetCvarValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GetCvarValue* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GetCvarValue*>(
               &_CSVCMsg_GetCvarValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CSVCMsg_GetCvarValue& a, CSVCMsg_GetCvarValue& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GetCvarValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GetCvarValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GetCvarValue* New() const final {
    return CreateMaybeMessage<CSVCMsg_GetCvarValue>(nullptr);
  }

  CSVCMsg_GetCvarValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GetCvarValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GetCvarValue& from);
  void MergeFrom(const CSVCMsg_GetCvarValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GetCvarValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GetCvarValue";
  }
  protected:
  explicit CSVCMsg_GetCvarValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCvarNameFieldNumber = 2,
    kCookieFieldNumber = 1,
  };
  // optional string cvar_name = 2;
  bool has_cvar_name() const;
  private:
  bool _internal_has_cvar_name() const;
  public:
  void clear_cvar_name();
  const std::string& cvar_name() const;
  void set_cvar_name(const std::string& value);
  void set_cvar_name(std::string&& value);
  void set_cvar_name(const char* value);
  void set_cvar_name(const char* value, size_t size);
  std::string* mutable_cvar_name();
  std::string* release_cvar_name();
  void set_allocated_cvar_name(std::string* cvar_name);
  private:
  const std::string& _internal_cvar_name() const;
  void _internal_set_cvar_name(const std::string& value);
  std::string* _internal_mutable_cvar_name();
  public:

  // optional int32 cookie = 1;
  bool has_cookie() const;
  private:
  bool _internal_has_cookie() const;
  public:
  void clear_cookie();
  ::PROTOBUF_NAMESPACE_ID::int32 cookie() const;
  void set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cookie() const;
  void _internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GetCvarValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cvar_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 cookie_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_Menu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_Menu) */ {
 public:
  inline CSVCMsg_Menu() : CSVCMsg_Menu(nullptr) {}
  virtual ~CSVCMsg_Menu();
  explicit constexpr CSVCMsg_Menu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_Menu(const CSVCMsg_Menu& from);
  CSVCMsg_Menu(CSVCMsg_Menu&& from) noexcept
    : CSVCMsg_Menu() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_Menu& operator=(const CSVCMsg_Menu& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_Menu& operator=(CSVCMsg_Menu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_Menu& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_Menu* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_Menu*>(
               &_CSVCMsg_Menu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSVCMsg_Menu& a, CSVCMsg_Menu& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_Menu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_Menu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_Menu* New() const final {
    return CreateMaybeMessage<CSVCMsg_Menu>(nullptr);
  }

  CSVCMsg_Menu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_Menu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_Menu& from);
  void MergeFrom(const CSVCMsg_Menu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_Menu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_Menu";
  }
  protected:
  explicit CSVCMsg_Menu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMenuKeyValuesFieldNumber = 2,
    kDialogTypeFieldNumber = 1,
  };
  // optional bytes menu_key_values = 2;
  bool has_menu_key_values() const;
  private:
  bool _internal_has_menu_key_values() const;
  public:
  void clear_menu_key_values();
  const std::string& menu_key_values() const;
  void set_menu_key_values(const std::string& value);
  void set_menu_key_values(std::string&& value);
  void set_menu_key_values(const char* value);
  void set_menu_key_values(const void* value, size_t size);
  std::string* mutable_menu_key_values();
  std::string* release_menu_key_values();
  void set_allocated_menu_key_values(std::string* menu_key_values);
  private:
  const std::string& _internal_menu_key_values() const;
  void _internal_set_menu_key_values(const std::string& value);
  std::string* _internal_mutable_menu_key_values();
  public:

  // optional int32 dialog_type = 1;
  bool has_dialog_type() const;
  private:
  bool _internal_has_dialog_type() const;
  public:
  void clear_dialog_type();
  ::PROTOBUF_NAMESPACE_ID::int32 dialog_type() const;
  void set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dialog_type() const;
  void _internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_Menu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr menu_key_values_;
  ::PROTOBUF_NAMESPACE_ID::int32 dialog_type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SendTable_sendprop_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SendTable.sendprop_t) */ {
 public:
  inline CSVCMsg_SendTable_sendprop_t() : CSVCMsg_SendTable_sendprop_t(nullptr) {}
  virtual ~CSVCMsg_SendTable_sendprop_t();
  explicit constexpr CSVCMsg_SendTable_sendprop_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SendTable_sendprop_t(const CSVCMsg_SendTable_sendprop_t& from);
  CSVCMsg_SendTable_sendprop_t(CSVCMsg_SendTable_sendprop_t&& from) noexcept
    : CSVCMsg_SendTable_sendprop_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SendTable_sendprop_t& operator=(const CSVCMsg_SendTable_sendprop_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SendTable_sendprop_t& operator=(CSVCMsg_SendTable_sendprop_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_SendTable_sendprop_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SendTable_sendprop_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SendTable_sendprop_t*>(
               &_CSVCMsg_SendTable_sendprop_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CSVCMsg_SendTable_sendprop_t& a, CSVCMsg_SendTable_sendprop_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SendTable_sendprop_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SendTable_sendprop_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SendTable_sendprop_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_SendTable_sendprop_t>(nullptr);
  }

  CSVCMsg_SendTable_sendprop_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SendTable_sendprop_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_SendTable_sendprop_t& from);
  void MergeFrom(const CSVCMsg_SendTable_sendprop_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SendTable_sendprop_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SendTable.sendprop_t";
  }
  protected:
  explicit CSVCMsg_SendTable_sendprop_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kDtNameFieldNumber = 5,
    kTypeFieldNumber = 1,
    kFlagsFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kNumElementsFieldNumber = 6,
    kLowValueFieldNumber = 7,
    kHighValueFieldNumber = 8,
    kNumBitsFieldNumber = 9,
  };
  // optional string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional string dt_name = 5;
  bool has_dt_name() const;
  private:
  bool _internal_has_dt_name() const;
  public:
  void clear_dt_name();
  const std::string& dt_name() const;
  void set_dt_name(const std::string& value);
  void set_dt_name(std::string&& value);
  void set_dt_name(const char* value);
  void set_dt_name(const char* value, size_t size);
  std::string* mutable_dt_name();
  std::string* release_dt_name();
  void set_allocated_dt_name(std::string* dt_name);
  private:
  const std::string& _internal_dt_name() const;
  void _internal_set_dt_name(const std::string& value);
  std::string* _internal_mutable_dt_name();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 3;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 priority = 4;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_elements = 6;
  bool has_num_elements() const;
  private:
  bool _internal_has_num_elements() const;
  public:
  void clear_num_elements();
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements() const;
  void set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_elements() const;
  void _internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float low_value = 7;
  bool has_low_value() const;
  private:
  bool _internal_has_low_value() const;
  public:
  void clear_low_value();
  float low_value() const;
  void set_low_value(float value);
  private:
  float _internal_low_value() const;
  void _internal_set_low_value(float value);
  public:

  // optional float high_value = 8;
  bool has_high_value() const;
  private:
  bool _internal_has_high_value() const;
  public:
  void clear_high_value();
  float high_value() const;
  void set_high_value(float value);
  private:
  float _internal_high_value() const;
  void _internal_set_high_value(float value);
  public:

  // optional int32 num_bits = 9;
  bool has_num_bits() const;
  private:
  bool _internal_has_num_bits() const;
  public:
  void clear_num_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 num_bits() const;
  void set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_bits() const;
  void _internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SendTable.sendprop_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dt_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_elements_;
  float low_value_;
  float high_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_bits_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_SendTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_SendTable) */ {
 public:
  inline CSVCMsg_SendTable() : CSVCMsg_SendTable(nullptr) {}
  virtual ~CSVCMsg_SendTable();
  explicit constexpr CSVCMsg_SendTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_SendTable(const CSVCMsg_SendTable& from);
  CSVCMsg_SendTable(CSVCMsg_SendTable&& from) noexcept
    : CSVCMsg_SendTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_SendTable& operator=(const CSVCMsg_SendTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_SendTable& operator=(CSVCMsg_SendTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_SendTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_SendTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_SendTable*>(
               &_CSVCMsg_SendTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CSVCMsg_SendTable& a, CSVCMsg_SendTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_SendTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_SendTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_SendTable* New() const final {
    return CreateMaybeMessage<CSVCMsg_SendTable>(nullptr);
  }

  CSVCMsg_SendTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_SendTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_SendTable& from);
  void MergeFrom(const CSVCMsg_SendTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_SendTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_SendTable";
  }
  protected:
  explicit CSVCMsg_SendTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_SendTable_sendprop_t sendprop_t;

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 4,
    kNetTableNameFieldNumber = 2,
    kIsEndFieldNumber = 1,
    kNeedsDecoderFieldNumber = 3,
  };
  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::CSVCMsg_SendTable_sendprop_t* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >*
      mutable_props();
  private:
  const ::CSVCMsg_SendTable_sendprop_t& _internal_props(int index) const;
  ::CSVCMsg_SendTable_sendprop_t* _internal_add_props();
  public:
  const ::CSVCMsg_SendTable_sendprop_t& props(int index) const;
  ::CSVCMsg_SendTable_sendprop_t* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >&
      props() const;

  // optional string net_table_name = 2;
  bool has_net_table_name() const;
  private:
  bool _internal_has_net_table_name() const;
  public:
  void clear_net_table_name();
  const std::string& net_table_name() const;
  void set_net_table_name(const std::string& value);
  void set_net_table_name(std::string&& value);
  void set_net_table_name(const char* value);
  void set_net_table_name(const char* value, size_t size);
  std::string* mutable_net_table_name();
  std::string* release_net_table_name();
  void set_allocated_net_table_name(std::string* net_table_name);
  private:
  const std::string& _internal_net_table_name() const;
  void _internal_set_net_table_name(const std::string& value);
  std::string* _internal_mutable_net_table_name();
  public:

  // optional bool is_end = 1;
  bool has_is_end() const;
  private:
  bool _internal_has_is_end() const;
  public:
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // optional bool needs_decoder = 3;
  bool has_needs_decoder() const;
  private:
  bool _internal_has_needs_decoder() const;
  public:
  void clear_needs_decoder();
  bool needs_decoder() const;
  void set_needs_decoder(bool value);
  private:
  bool _internal_needs_decoder() const;
  void _internal_set_needs_decoder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_SendTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t > props_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_table_name_;
  bool is_end_;
  bool needs_decoder_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList_key_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList.key_t) */ {
 public:
  inline CSVCMsg_GameEventList_key_t() : CSVCMsg_GameEventList_key_t(nullptr) {}
  virtual ~CSVCMsg_GameEventList_key_t();
  explicit constexpr CSVCMsg_GameEventList_key_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList_key_t(const CSVCMsg_GameEventList_key_t& from);
  CSVCMsg_GameEventList_key_t(CSVCMsg_GameEventList_key_t&& from) noexcept
    : CSVCMsg_GameEventList_key_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList_key_t& operator=(const CSVCMsg_GameEventList_key_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList_key_t& operator=(CSVCMsg_GameEventList_key_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameEventList_key_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList_key_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList_key_t*>(
               &_CSVCMsg_GameEventList_key_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CSVCMsg_GameEventList_key_t& a, CSVCMsg_GameEventList_key_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList_key_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList_key_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList_key_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_key_t>(nullptr);
  }

  CSVCMsg_GameEventList_key_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_key_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameEventList_key_t& from);
  void MergeFrom(const CSVCMsg_GameEventList_key_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList_key_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList.key_t";
  }
  protected:
  explicit CSVCMsg_GameEventList_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList.key_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList_descriptor_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList.descriptor_t) */ {
 public:
  inline CSVCMsg_GameEventList_descriptor_t() : CSVCMsg_GameEventList_descriptor_t(nullptr) {}
  virtual ~CSVCMsg_GameEventList_descriptor_t();
  explicit constexpr CSVCMsg_GameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList_descriptor_t(const CSVCMsg_GameEventList_descriptor_t& from);
  CSVCMsg_GameEventList_descriptor_t(CSVCMsg_GameEventList_descriptor_t&& from) noexcept
    : CSVCMsg_GameEventList_descriptor_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList_descriptor_t& operator=(const CSVCMsg_GameEventList_descriptor_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList_descriptor_t& operator=(CSVCMsg_GameEventList_descriptor_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameEventList_descriptor_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList_descriptor_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList_descriptor_t*>(
               &_CSVCMsg_GameEventList_descriptor_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSVCMsg_GameEventList_descriptor_t& a, CSVCMsg_GameEventList_descriptor_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList_descriptor_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList_descriptor_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList_descriptor_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_descriptor_t>(nullptr);
  }

  CSVCMsg_GameEventList_descriptor_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList_descriptor_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameEventList_descriptor_t& from);
  void MergeFrom(const CSVCMsg_GameEventList_descriptor_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList_descriptor_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList.descriptor_t";
  }
  protected:
  explicit CSVCMsg_GameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kNameFieldNumber = 2,
    kEventidFieldNumber = 1,
  };
  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::CSVCMsg_GameEventList_key_t* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >*
      mutable_keys();
  private:
  const ::CSVCMsg_GameEventList_key_t& _internal_keys(int index) const;
  ::CSVCMsg_GameEventList_key_t* _internal_add_keys();
  public:
  const ::CSVCMsg_GameEventList_key_t& keys(int index) const;
  ::CSVCMsg_GameEventList_key_t* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >&
      keys() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 eventid = 1;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList.descriptor_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEventList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEventList) */ {
 public:
  inline CSVCMsg_GameEventList() : CSVCMsg_GameEventList(nullptr) {}
  virtual ~CSVCMsg_GameEventList();
  explicit constexpr CSVCMsg_GameEventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEventList(const CSVCMsg_GameEventList& from);
  CSVCMsg_GameEventList(CSVCMsg_GameEventList&& from) noexcept
    : CSVCMsg_GameEventList() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEventList& operator=(const CSVCMsg_GameEventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEventList& operator=(CSVCMsg_GameEventList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameEventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEventList* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEventList*>(
               &_CSVCMsg_GameEventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CSVCMsg_GameEventList& a, CSVCMsg_GameEventList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEventList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEventList* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList>(nullptr);
  }

  CSVCMsg_GameEventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEventList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameEventList& from);
  void MergeFrom(const CSVCMsg_GameEventList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEventList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEventList";
  }
  protected:
  explicit CSVCMsg_GameEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_GameEventList_key_t key_t;
  typedef CSVCMsg_GameEventList_descriptor_t descriptor_t;

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptorsFieldNumber = 1,
  };
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;
  public:
  void clear_descriptors();
  ::CSVCMsg_GameEventList_descriptor_t* mutable_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >*
      mutable_descriptors();
  private:
  const ::CSVCMsg_GameEventList_descriptor_t& _internal_descriptors(int index) const;
  ::CSVCMsg_GameEventList_descriptor_t* _internal_add_descriptors();
  public:
  const ::CSVCMsg_GameEventList_descriptor_t& descriptors(int index) const;
  ::CSVCMsg_GameEventList_descriptor_t* add_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >&
      descriptors() const;

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t > descriptors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PacketEntities_command_queue_info_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PacketEntities.command_queue_info_t) */ {
 public:
  inline CSVCMsg_PacketEntities_command_queue_info_t() : CSVCMsg_PacketEntities_command_queue_info_t(nullptr) {}
  virtual ~CSVCMsg_PacketEntities_command_queue_info_t();
  explicit constexpr CSVCMsg_PacketEntities_command_queue_info_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PacketEntities_command_queue_info_t(const CSVCMsg_PacketEntities_command_queue_info_t& from);
  CSVCMsg_PacketEntities_command_queue_info_t(CSVCMsg_PacketEntities_command_queue_info_t&& from) noexcept
    : CSVCMsg_PacketEntities_command_queue_info_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PacketEntities_command_queue_info_t& operator=(const CSVCMsg_PacketEntities_command_queue_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PacketEntities_command_queue_info_t& operator=(CSVCMsg_PacketEntities_command_queue_info_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_PacketEntities_command_queue_info_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PacketEntities_command_queue_info_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PacketEntities_command_queue_info_t*>(
               &_CSVCMsg_PacketEntities_command_queue_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSVCMsg_PacketEntities_command_queue_info_t& a, CSVCMsg_PacketEntities_command_queue_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PacketEntities_command_queue_info_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PacketEntities_command_queue_info_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PacketEntities_command_queue_info_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_PacketEntities_command_queue_info_t>(nullptr);
  }

  CSVCMsg_PacketEntities_command_queue_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PacketEntities_command_queue_info_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_PacketEntities_command_queue_info_t& from);
  void MergeFrom(const CSVCMsg_PacketEntities_command_queue_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PacketEntities_command_queue_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PacketEntities.command_queue_info_t";
  }
  protected:
  explicit CSVCMsg_PacketEntities_command_queue_info_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsQueuedFieldNumber = 1,
    kCommandQueueDesiredSizeFieldNumber = 2,
    kStarvedCommandTicksFieldNumber = 3,
    kTimeDilationPercentFieldNumber = 4,
    kDiscardedCommandTicksFieldNumber = 5,
  };
  // optional uint32 commands_queued = 1;
  bool has_commands_queued() const;
  private:
  bool _internal_has_commands_queued() const;
  public:
  void clear_commands_queued();
  ::PROTOBUF_NAMESPACE_ID::uint32 commands_queued() const;
  void set_commands_queued(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_commands_queued() const;
  void _internal_set_commands_queued(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 command_queue_desired_size = 2;
  bool has_command_queue_desired_size() const;
  private:
  bool _internal_has_command_queue_desired_size() const;
  public:
  void clear_command_queue_desired_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_queue_desired_size() const;
  void set_command_queue_desired_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_queue_desired_size() const;
  void _internal_set_command_queue_desired_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 starved_command_ticks = 3;
  bool has_starved_command_ticks() const;
  private:
  bool _internal_has_starved_command_ticks() const;
  public:
  void clear_starved_command_ticks();
  ::PROTOBUF_NAMESPACE_ID::uint32 starved_command_ticks() const;
  void set_starved_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starved_command_ticks() const;
  void _internal_set_starved_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float time_dilation_percent = 4;
  bool has_time_dilation_percent() const;
  private:
  bool _internal_has_time_dilation_percent() const;
  public:
  void clear_time_dilation_percent();
  float time_dilation_percent() const;
  void set_time_dilation_percent(float value);
  private:
  float _internal_time_dilation_percent() const;
  void _internal_set_time_dilation_percent(float value);
  public:

  // optional uint32 discarded_command_ticks = 5;
  bool has_discarded_command_ticks() const;
  private:
  bool _internal_has_discarded_command_ticks() const;
  public:
  void clear_discarded_command_ticks();
  ::PROTOBUF_NAMESPACE_ID::uint32 discarded_command_ticks() const;
  void set_discarded_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discarded_command_ticks() const;
  void _internal_set_discarded_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_PacketEntities.command_queue_info_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 commands_queued_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_queue_desired_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starved_command_ticks_;
  float time_dilation_percent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discarded_command_ticks_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PacketEntities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PacketEntities) */ {
 public:
  inline CSVCMsg_PacketEntities() : CSVCMsg_PacketEntities(nullptr) {}
  virtual ~CSVCMsg_PacketEntities();
  explicit constexpr CSVCMsg_PacketEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PacketEntities(const CSVCMsg_PacketEntities& from);
  CSVCMsg_PacketEntities(CSVCMsg_PacketEntities&& from) noexcept
    : CSVCMsg_PacketEntities() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PacketEntities& operator=(const CSVCMsg_PacketEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PacketEntities& operator=(CSVCMsg_PacketEntities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_PacketEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PacketEntities* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PacketEntities*>(
               &_CSVCMsg_PacketEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CSVCMsg_PacketEntities& a, CSVCMsg_PacketEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PacketEntities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PacketEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PacketEntities* New() const final {
    return CreateMaybeMessage<CSVCMsg_PacketEntities>(nullptr);
  }

  CSVCMsg_PacketEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PacketEntities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_PacketEntities& from);
  void MergeFrom(const CSVCMsg_PacketEntities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PacketEntities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PacketEntities";
  }
  protected:
  explicit CSVCMsg_PacketEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_PacketEntities_command_queue_info_t command_queue_info_t;

  // accessors -------------------------------------------------------

  enum : int {
    kEntityDataFieldNumber = 7,
    kSerializedEntitiesFieldNumber = 13,
    kCommandQueueInfoFieldNumber = 14,
    kMaxEntriesFieldNumber = 1,
    kUpdatedEntriesFieldNumber = 2,
    kBaselineFieldNumber = 5,
    kIsDeltaFieldNumber = 3,
    kUpdateBaselineFieldNumber = 4,
    kPendingFullFrameFieldNumber = 8,
    kDeltaFromFieldNumber = 6,
    kActiveSpawngroupHandleFieldNumber = 9,
    kMaxSpawngroupCreationsequenceFieldNumber = 10,
    kLastCmdNumberFieldNumber = 11,
    kServerTickFieldNumber = 12,
  };
  // optional bytes entity_data = 7;
  bool has_entity_data() const;
  private:
  bool _internal_has_entity_data() const;
  public:
  void clear_entity_data();
  const std::string& entity_data() const;
  void set_entity_data(const std::string& value);
  void set_entity_data(std::string&& value);
  void set_entity_data(const char* value);
  void set_entity_data(const void* value, size_t size);
  std::string* mutable_entity_data();
  std::string* release_entity_data();
  void set_allocated_entity_data(std::string* entity_data);
  private:
  const std::string& _internal_entity_data() const;
  void _internal_set_entity_data(const std::string& value);
  std::string* _internal_mutable_entity_data();
  public:

  // optional bytes serialized_entities = 13;
  bool has_serialized_entities() const;
  private:
  bool _internal_has_serialized_entities() const;
  public:
  void clear_serialized_entities();
  const std::string& serialized_entities() const;
  void set_serialized_entities(const std::string& value);
  void set_serialized_entities(std::string&& value);
  void set_serialized_entities(const char* value);
  void set_serialized_entities(const void* value, size_t size);
  std::string* mutable_serialized_entities();
  std::string* release_serialized_entities();
  void set_allocated_serialized_entities(std::string* serialized_entities);
  private:
  const std::string& _internal_serialized_entities() const;
  void _internal_set_serialized_entities(const std::string& value);
  std::string* _internal_mutable_serialized_entities();
  public:

  // optional .CSVCMsg_PacketEntities.command_queue_info_t command_queue_info = 14;
  bool has_command_queue_info() const;
  private:
  bool _internal_has_command_queue_info() const;
  public:
  void clear_command_queue_info();
  const ::CSVCMsg_PacketEntities_command_queue_info_t& command_queue_info() const;
  ::CSVCMsg_PacketEntities_command_queue_info_t* release_command_queue_info();
  ::CSVCMsg_PacketEntities_command_queue_info_t* mutable_command_queue_info();
  void set_allocated_command_queue_info(::CSVCMsg_PacketEntities_command_queue_info_t* command_queue_info);
  private:
  const ::CSVCMsg_PacketEntities_command_queue_info_t& _internal_command_queue_info() const;
  ::CSVCMsg_PacketEntities_command_queue_info_t* _internal_mutable_command_queue_info();
  public:
  void unsafe_arena_set_allocated_command_queue_info(
      ::CSVCMsg_PacketEntities_command_queue_info_t* command_queue_info);
  ::CSVCMsg_PacketEntities_command_queue_info_t* unsafe_arena_release_command_queue_info();

  // optional int32 max_entries = 1;
  bool has_max_entries() const;
  private:
  bool _internal_has_max_entries() const;
  public:
  void clear_max_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries() const;
  void set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_entries() const;
  void _internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 updated_entries = 2;
  bool has_updated_entries() const;
  private:
  bool _internal_has_updated_entries() const;
  public:
  void clear_updated_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 updated_entries() const;
  void set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_updated_entries() const;
  void _internal_set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 baseline = 5;
  bool has_baseline() const;
  private:
  bool _internal_has_baseline() const;
  public:
  void clear_baseline();
  ::PROTOBUF_NAMESPACE_ID::int32 baseline() const;
  void set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_baseline() const;
  void _internal_set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool is_delta = 3;
  bool has_is_delta() const;
  private:
  bool _internal_has_is_delta() const;
  public:
  void clear_is_delta();
  bool is_delta() const;
  void set_is_delta(bool value);
  private:
  bool _internal_is_delta() const;
  void _internal_set_is_delta(bool value);
  public:

  // optional bool update_baseline = 4;
  bool has_update_baseline() const;
  private:
  bool _internal_has_update_baseline() const;
  public:
  void clear_update_baseline();
  bool update_baseline() const;
  void set_update_baseline(bool value);
  private:
  bool _internal_update_baseline() const;
  void _internal_set_update_baseline(bool value);
  public:

  // optional bool pending_full_frame = 8;
  bool has_pending_full_frame() const;
  private:
  bool _internal_has_pending_full_frame() const;
  public:
  void clear_pending_full_frame();
  bool pending_full_frame() const;
  void set_pending_full_frame(bool value);
  private:
  bool _internal_pending_full_frame() const;
  void _internal_set_pending_full_frame(bool value);
  public:

  // optional int32 delta_from = 6;
  bool has_delta_from() const;
  private:
  bool _internal_has_delta_from() const;
  public:
  void clear_delta_from();
  ::PROTOBUF_NAMESPACE_ID::int32 delta_from() const;
  void set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta_from() const;
  void _internal_set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 active_spawngroup_handle = 9;
  bool has_active_spawngroup_handle() const;
  private:
  bool _internal_has_active_spawngroup_handle() const;
  public:
  void clear_active_spawngroup_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 active_spawngroup_handle() const;
  void set_active_spawngroup_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_active_spawngroup_handle() const;
  void _internal_set_active_spawngroup_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_spawngroup_creationsequence = 10;
  bool has_max_spawngroup_creationsequence() const;
  private:
  bool _internal_has_max_spawngroup_creationsequence() const;
  public:
  void clear_max_spawngroup_creationsequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_spawngroup_creationsequence() const;
  void set_max_spawngroup_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_spawngroup_creationsequence() const;
  void _internal_set_max_spawngroup_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 last_cmd_number = 11;
  bool has_last_cmd_number() const;
  private:
  bool _internal_has_last_cmd_number() const;
  public:
  void clear_last_cmd_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_cmd_number() const;
  void set_last_cmd_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_cmd_number() const;
  void _internal_set_last_cmd_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_tick = 12;
  bool has_server_tick() const;
  private:
  bool _internal_has_server_tick() const;
  public:
  void clear_server_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_tick() const;
  void set_server_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_tick() const;
  void _internal_set_server_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_PacketEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_entities_;
  ::CSVCMsg_PacketEntities_command_queue_info_t* command_queue_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 updated_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 baseline_;
  bool is_delta_;
  bool update_baseline_;
  bool pending_full_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_spawngroup_handle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_spawngroup_creationsequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_cmd_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_tick_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_TempEntities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_TempEntities) */ {
 public:
  inline CSVCMsg_TempEntities() : CSVCMsg_TempEntities(nullptr) {}
  virtual ~CSVCMsg_TempEntities();
  explicit constexpr CSVCMsg_TempEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_TempEntities(const CSVCMsg_TempEntities& from);
  CSVCMsg_TempEntities(CSVCMsg_TempEntities&& from) noexcept
    : CSVCMsg_TempEntities() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_TempEntities& operator=(const CSVCMsg_TempEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_TempEntities& operator=(CSVCMsg_TempEntities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_TempEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_TempEntities* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_TempEntities*>(
               &_CSVCMsg_TempEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CSVCMsg_TempEntities& a, CSVCMsg_TempEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_TempEntities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_TempEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_TempEntities* New() const final {
    return CreateMaybeMessage<CSVCMsg_TempEntities>(nullptr);
  }

  CSVCMsg_TempEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_TempEntities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_TempEntities& from);
  void MergeFrom(const CSVCMsg_TempEntities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_TempEntities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_TempEntities";
  }
  protected:
  explicit CSVCMsg_TempEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityDataFieldNumber = 3,
    kReliableFieldNumber = 1,
    kNumEntriesFieldNumber = 2,
  };
  // optional bytes entity_data = 3;
  bool has_entity_data() const;
  private:
  bool _internal_has_entity_data() const;
  public:
  void clear_entity_data();
  const std::string& entity_data() const;
  void set_entity_data(const std::string& value);
  void set_entity_data(std::string&& value);
  void set_entity_data(const char* value);
  void set_entity_data(const void* value, size_t size);
  std::string* mutable_entity_data();
  std::string* release_entity_data();
  void set_allocated_entity_data(std::string* entity_data);
  private:
  const std::string& _internal_entity_data() const;
  void _internal_set_entity_data(const std::string& value);
  std::string* _internal_mutable_entity_data();
  public:

  // optional bool reliable = 1;
  bool has_reliable() const;
  private:
  bool _internal_has_reliable() const;
  public:
  void clear_reliable();
  bool reliable() const;
  void set_reliable(bool value);
  private:
  bool _internal_reliable() const;
  void _internal_set_reliable(bool value);
  public:

  // optional int32 num_entries = 2;
  bool has_num_entries() const;
  private:
  bool _internal_has_num_entries() const;
  public:
  void clear_num_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries() const;
  void set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_entries() const;
  void _internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_TempEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_data_;
  bool reliable_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CreateStringTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CreateStringTable) */ {
 public:
  inline CSVCMsg_CreateStringTable() : CSVCMsg_CreateStringTable(nullptr) {}
  virtual ~CSVCMsg_CreateStringTable();
  explicit constexpr CSVCMsg_CreateStringTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CreateStringTable(const CSVCMsg_CreateStringTable& from);
  CSVCMsg_CreateStringTable(CSVCMsg_CreateStringTable&& from) noexcept
    : CSVCMsg_CreateStringTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CreateStringTable& operator=(const CSVCMsg_CreateStringTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CreateStringTable& operator=(CSVCMsg_CreateStringTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_CreateStringTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CreateStringTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CreateStringTable*>(
               &_CSVCMsg_CreateStringTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CSVCMsg_CreateStringTable& a, CSVCMsg_CreateStringTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CreateStringTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CreateStringTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CreateStringTable* New() const final {
    return CreateMaybeMessage<CSVCMsg_CreateStringTable>(nullptr);
  }

  CSVCMsg_CreateStringTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CreateStringTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_CreateStringTable& from);
  void MergeFrom(const CSVCMsg_CreateStringTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CreateStringTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CreateStringTable";
  }
  protected:
  explicit CSVCMsg_CreateStringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringDataFieldNumber = 7,
    kNumEntriesFieldNumber = 2,
    kUserDataSizeFieldNumber = 4,
    kUserDataSizeBitsFieldNumber = 5,
    kFlagsFieldNumber = 6,
    kUserDataFixedSizeFieldNumber = 3,
    kDataCompressedFieldNumber = 9,
    kUncompressedSizeFieldNumber = 8,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes string_data = 7;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  void set_string_data(const std::string& value);
  void set_string_data(std::string&& value);
  void set_string_data(const char* value);
  void set_string_data(const void* value, size_t size);
  std::string* mutable_string_data();
  std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // optional int32 num_entries = 2;
  bool has_num_entries() const;
  private:
  bool _internal_has_num_entries() const;
  public:
  void clear_num_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries() const;
  void set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_entries() const;
  void _internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 user_data_size = 4;
  bool has_user_data_size() const;
  private:
  bool _internal_has_user_data_size() const;
  public:
  void clear_user_data_size();
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size() const;
  void set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_data_size() const;
  void _internal_set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 user_data_size_bits = 5;
  bool has_user_data_size_bits() const;
  private:
  bool _internal_has_user_data_size_bits() const;
  public:
  void clear_user_data_size_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_bits() const;
  void set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_data_size_bits() const;
  void _internal_set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 flags = 6;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool user_data_fixed_size = 3;
  bool has_user_data_fixed_size() const;
  private:
  bool _internal_has_user_data_fixed_size() const;
  public:
  void clear_user_data_fixed_size();
  bool user_data_fixed_size() const;
  void set_user_data_fixed_size(bool value);
  private:
  bool _internal_user_data_fixed_size() const;
  void _internal_set_user_data_fixed_size(bool value);
  public:

  // optional bool data_compressed = 9;
  bool has_data_compressed() const;
  private:
  bool _internal_has_data_compressed() const;
  public:
  void clear_data_compressed();
  bool data_compressed() const;
  void set_data_compressed(bool value);
  private:
  bool _internal_data_compressed() const;
  void _internal_set_data_compressed(bool value);
  public:

  // optional int32 uncompressed_size = 8;
  bool has_uncompressed_size() const;
  private:
  bool _internal_has_uncompressed_size() const;
  public:
  void clear_uncompressed_size();
  ::PROTOBUF_NAMESPACE_ID::int32 uncompressed_size() const;
  void set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uncompressed_size() const;
  void _internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_CreateStringTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_entries_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_data_size_bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  bool user_data_fixed_size_;
  bool data_compressed_;
  ::PROTOBUF_NAMESPACE_ID::int32 uncompressed_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_UpdateStringTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_UpdateStringTable) */ {
 public:
  inline CSVCMsg_UpdateStringTable() : CSVCMsg_UpdateStringTable(nullptr) {}
  virtual ~CSVCMsg_UpdateStringTable();
  explicit constexpr CSVCMsg_UpdateStringTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_UpdateStringTable(const CSVCMsg_UpdateStringTable& from);
  CSVCMsg_UpdateStringTable(CSVCMsg_UpdateStringTable&& from) noexcept
    : CSVCMsg_UpdateStringTable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_UpdateStringTable& operator=(const CSVCMsg_UpdateStringTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_UpdateStringTable& operator=(CSVCMsg_UpdateStringTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_UpdateStringTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_UpdateStringTable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_UpdateStringTable*>(
               &_CSVCMsg_UpdateStringTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CSVCMsg_UpdateStringTable& a, CSVCMsg_UpdateStringTable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_UpdateStringTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_UpdateStringTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_UpdateStringTable* New() const final {
    return CreateMaybeMessage<CSVCMsg_UpdateStringTable>(nullptr);
  }

  CSVCMsg_UpdateStringTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_UpdateStringTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_UpdateStringTable& from);
  void MergeFrom(const CSVCMsg_UpdateStringTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_UpdateStringTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_UpdateStringTable";
  }
  protected:
  explicit CSVCMsg_UpdateStringTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringDataFieldNumber = 3,
    kTableIdFieldNumber = 1,
    kNumChangedEntriesFieldNumber = 2,
  };
  // optional bytes string_data = 3;
  bool has_string_data() const;
  private:
  bool _internal_has_string_data() const;
  public:
  void clear_string_data();
  const std::string& string_data() const;
  void set_string_data(const std::string& value);
  void set_string_data(std::string&& value);
  void set_string_data(const char* value);
  void set_string_data(const void* value, size_t size);
  std::string* mutable_string_data();
  std::string* release_string_data();
  void set_allocated_string_data(std::string* string_data);
  private:
  const std::string& _internal_string_data() const;
  void _internal_set_string_data(const std::string& value);
  std::string* _internal_mutable_string_data();
  public:

  // optional int32 table_id = 1;
  bool has_table_id() const;
  private:
  bool _internal_has_table_id() const;
  public:
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::int32 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_changed_entries = 2;
  bool has_num_changed_entries() const;
  private:
  bool _internal_has_num_changed_entries() const;
  public:
  void clear_num_changed_entries();
  ::PROTOBUF_NAMESPACE_ID::int32 num_changed_entries() const;
  void set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_changed_entries() const;
  void _internal_set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_UpdateStringTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_changed_entries_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_VoiceData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_VoiceData) */ {
 public:
  inline CSVCMsg_VoiceData() : CSVCMsg_VoiceData(nullptr) {}
  virtual ~CSVCMsg_VoiceData();
  explicit constexpr CSVCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_VoiceData(const CSVCMsg_VoiceData& from);
  CSVCMsg_VoiceData(CSVCMsg_VoiceData&& from) noexcept
    : CSVCMsg_VoiceData() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_VoiceData& operator=(const CSVCMsg_VoiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_VoiceData& operator=(CSVCMsg_VoiceData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_VoiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_VoiceData* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_VoiceData*>(
               &_CSVCMsg_VoiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CSVCMsg_VoiceData& a, CSVCMsg_VoiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_VoiceData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_VoiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_VoiceData* New() const final {
    return CreateMaybeMessage<CSVCMsg_VoiceData>(nullptr);
  }

  CSVCMsg_VoiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_VoiceData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_VoiceData& from);
  void MergeFrom(const CSVCMsg_VoiceData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_VoiceData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_VoiceData";
  }
  protected:
  explicit CSVCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kClientFieldNumber = 2,
    kProximityFieldNumber = 3,
    kXuidFieldNumber = 4,
    kAudibleMaskFieldNumber = 5,
    kTickFieldNumber = 6,
  };
  // optional .CMsgVoiceAudio audio = 1;
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::CMsgVoiceAudio& audio() const;
  ::CMsgVoiceAudio* release_audio();
  ::CMsgVoiceAudio* mutable_audio();
  void set_allocated_audio(::CMsgVoiceAudio* audio);
  private:
  const ::CMsgVoiceAudio& _internal_audio() const;
  ::CMsgVoiceAudio* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::CMsgVoiceAudio* audio);
  ::CMsgVoiceAudio* unsafe_arena_release_audio();

  // optional int32 client = 2;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client() const;
  void _internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool proximity = 3;
  bool has_proximity() const;
  private:
  bool _internal_has_proximity() const;
  public:
  void clear_proximity();
  bool proximity() const;
  void set_proximity(bool value);
  private:
  bool _internal_proximity() const;
  void _internal_set_proximity(bool value);
  public:

  // optional fixed64 xuid = 4;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid() const;
  void set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xuid() const;
  void _internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 audible_mask = 5;
  bool has_audible_mask() const;
  private:
  bool _internal_has_audible_mask() const;
  public:
  void clear_audible_mask();
  ::PROTOBUF_NAMESPACE_ID::int32 audible_mask() const;
  void set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_audible_mask() const;
  void _internal_set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 tick = 6;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_VoiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgVoiceAudio* audio_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  bool proximity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 audible_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PacketReliable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PacketReliable) */ {
 public:
  inline CSVCMsg_PacketReliable() : CSVCMsg_PacketReliable(nullptr) {}
  virtual ~CSVCMsg_PacketReliable();
  explicit constexpr CSVCMsg_PacketReliable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PacketReliable(const CSVCMsg_PacketReliable& from);
  CSVCMsg_PacketReliable(CSVCMsg_PacketReliable&& from) noexcept
    : CSVCMsg_PacketReliable() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PacketReliable& operator=(const CSVCMsg_PacketReliable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PacketReliable& operator=(CSVCMsg_PacketReliable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_PacketReliable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PacketReliable* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PacketReliable*>(
               &_CSVCMsg_PacketReliable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CSVCMsg_PacketReliable& a, CSVCMsg_PacketReliable& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PacketReliable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PacketReliable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PacketReliable* New() const final {
    return CreateMaybeMessage<CSVCMsg_PacketReliable>(nullptr);
  }

  CSVCMsg_PacketReliable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PacketReliable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_PacketReliable& from);
  void MergeFrom(const CSVCMsg_PacketReliable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PacketReliable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PacketReliable";
  }
  protected:
  explicit CSVCMsg_PacketReliable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 1,
    kMessagessizeFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // optional int32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 messagessize = 2;
  bool has_messagessize() const;
  private:
  bool _internal_has_messagessize() const;
  public:
  void clear_messagessize();
  ::PROTOBUF_NAMESPACE_ID::int32 messagessize() const;
  void set_messagessize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_messagessize() const;
  void _internal_set_messagessize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_PacketReliable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 messagessize_;
  bool state_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_FullFrameSplit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_FullFrameSplit) */ {
 public:
  inline CSVCMsg_FullFrameSplit() : CSVCMsg_FullFrameSplit(nullptr) {}
  virtual ~CSVCMsg_FullFrameSplit();
  explicit constexpr CSVCMsg_FullFrameSplit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_FullFrameSplit(const CSVCMsg_FullFrameSplit& from);
  CSVCMsg_FullFrameSplit(CSVCMsg_FullFrameSplit&& from) noexcept
    : CSVCMsg_FullFrameSplit() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_FullFrameSplit& operator=(const CSVCMsg_FullFrameSplit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_FullFrameSplit& operator=(CSVCMsg_FullFrameSplit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_FullFrameSplit& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_FullFrameSplit* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_FullFrameSplit*>(
               &_CSVCMsg_FullFrameSplit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CSVCMsg_FullFrameSplit& a, CSVCMsg_FullFrameSplit& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_FullFrameSplit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_FullFrameSplit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_FullFrameSplit* New() const final {
    return CreateMaybeMessage<CSVCMsg_FullFrameSplit>(nullptr);
  }

  CSVCMsg_FullFrameSplit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_FullFrameSplit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_FullFrameSplit& from);
  void MergeFrom(const CSVCMsg_FullFrameSplit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_FullFrameSplit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_FullFrameSplit";
  }
  protected:
  explicit CSVCMsg_FullFrameSplit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kTickFieldNumber = 1,
    kSectionFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 section = 2;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int32 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 total = 3;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_FullFrameSplit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 section_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_HLTVStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_HLTVStatus) */ {
 public:
  inline CSVCMsg_HLTVStatus() : CSVCMsg_HLTVStatus(nullptr) {}
  virtual ~CSVCMsg_HLTVStatus();
  explicit constexpr CSVCMsg_HLTVStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_HLTVStatus(const CSVCMsg_HLTVStatus& from);
  CSVCMsg_HLTVStatus(CSVCMsg_HLTVStatus&& from) noexcept
    : CSVCMsg_HLTVStatus() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_HLTVStatus& operator=(const CSVCMsg_HLTVStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_HLTVStatus& operator=(CSVCMsg_HLTVStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_HLTVStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_HLTVStatus* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_HLTVStatus*>(
               &_CSVCMsg_HLTVStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CSVCMsg_HLTVStatus& a, CSVCMsg_HLTVStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_HLTVStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_HLTVStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_HLTVStatus* New() const final {
    return CreateMaybeMessage<CSVCMsg_HLTVStatus>(nullptr);
  }

  CSVCMsg_HLTVStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_HLTVStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_HLTVStatus& from);
  void MergeFrom(const CSVCMsg_HLTVStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_HLTVStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_HLTVStatus";
  }
  protected:
  explicit CSVCMsg_HLTVStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 1,
    kClientsFieldNumber = 2,
    kSlotsFieldNumber = 3,
    kProxiesFieldNumber = 4,
  };
  // optional string master = 1;
  bool has_master() const;
  private:
  bool _internal_has_master() const;
  public:
  void clear_master();
  const std::string& master() const;
  void set_master(const std::string& value);
  void set_master(std::string&& value);
  void set_master(const char* value);
  void set_master(const char* value, size_t size);
  std::string* mutable_master();
  std::string* release_master();
  void set_allocated_master(std::string* master);
  private:
  const std::string& _internal_master() const;
  void _internal_set_master(const std::string& value);
  std::string* _internal_mutable_master();
  public:

  // optional int32 clients = 2;
  bool has_clients() const;
  private:
  bool _internal_has_clients() const;
  public:
  void clear_clients();
  ::PROTOBUF_NAMESPACE_ID::int32 clients() const;
  void set_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clients() const;
  void _internal_set_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 slots = 3;
  bool has_slots() const;
  private:
  bool _internal_has_slots() const;
  public:
  void clear_slots();
  ::PROTOBUF_NAMESPACE_ID::int32 slots() const;
  void set_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slots() const;
  void _internal_set_slots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 proxies = 4;
  bool has_proxies() const;
  private:
  bool _internal_has_proxies() const;
  public:
  void clear_proxies();
  ::PROTOBUF_NAMESPACE_ID::int32 proxies() const;
  void set_proxies(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proxies() const;
  void _internal_set_proxies(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_HLTVStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_;
  ::PROTOBUF_NAMESPACE_ID::int32 clients_;
  ::PROTOBUF_NAMESPACE_ID::int32 slots_;
  ::PROTOBUF_NAMESPACE_ID::int32 proxies_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ServerSteamID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ServerSteamID) */ {
 public:
  inline CSVCMsg_ServerSteamID() : CSVCMsg_ServerSteamID(nullptr) {}
  virtual ~CSVCMsg_ServerSteamID();
  explicit constexpr CSVCMsg_ServerSteamID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ServerSteamID(const CSVCMsg_ServerSteamID& from);
  CSVCMsg_ServerSteamID(CSVCMsg_ServerSteamID&& from) noexcept
    : CSVCMsg_ServerSteamID() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ServerSteamID& operator=(const CSVCMsg_ServerSteamID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ServerSteamID& operator=(CSVCMsg_ServerSteamID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_ServerSteamID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ServerSteamID* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ServerSteamID*>(
               &_CSVCMsg_ServerSteamID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CSVCMsg_ServerSteamID& a, CSVCMsg_ServerSteamID& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ServerSteamID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ServerSteamID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ServerSteamID* New() const final {
    return CreateMaybeMessage<CSVCMsg_ServerSteamID>(nullptr);
  }

  CSVCMsg_ServerSteamID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ServerSteamID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_ServerSteamID& from);
  void MergeFrom(const CSVCMsg_ServerSteamID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ServerSteamID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ServerSteamID";
  }
  protected:
  explicit CSVCMsg_ServerSteamID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
  };
  // optional uint64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ServerSteamID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_CmdKeyValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_CmdKeyValues) */ {
 public:
  inline CSVCMsg_CmdKeyValues() : CSVCMsg_CmdKeyValues(nullptr) {}
  virtual ~CSVCMsg_CmdKeyValues();
  explicit constexpr CSVCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_CmdKeyValues(const CSVCMsg_CmdKeyValues& from);
  CSVCMsg_CmdKeyValues(CSVCMsg_CmdKeyValues&& from) noexcept
    : CSVCMsg_CmdKeyValues() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_CmdKeyValues& operator=(const CSVCMsg_CmdKeyValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_CmdKeyValues& operator=(CSVCMsg_CmdKeyValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_CmdKeyValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_CmdKeyValues* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_CmdKeyValues*>(
               &_CSVCMsg_CmdKeyValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CSVCMsg_CmdKeyValues& a, CSVCMsg_CmdKeyValues& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_CmdKeyValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_CmdKeyValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_CmdKeyValues* New() const final {
    return CreateMaybeMessage<CSVCMsg_CmdKeyValues>(nullptr);
  }

  CSVCMsg_CmdKeyValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_CmdKeyValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_CmdKeyValues& from);
  void MergeFrom(const CSVCMsg_CmdKeyValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_CmdKeyValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_CmdKeyValues";
  }
  protected:
  explicit CSVCMsg_CmdKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_CmdKeyValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_RconServerDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_RconServerDetails) */ {
 public:
  inline CSVCMsg_RconServerDetails() : CSVCMsg_RconServerDetails(nullptr) {}
  virtual ~CSVCMsg_RconServerDetails();
  explicit constexpr CSVCMsg_RconServerDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_RconServerDetails(const CSVCMsg_RconServerDetails& from);
  CSVCMsg_RconServerDetails(CSVCMsg_RconServerDetails&& from) noexcept
    : CSVCMsg_RconServerDetails() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_RconServerDetails& operator=(const CSVCMsg_RconServerDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_RconServerDetails& operator=(CSVCMsg_RconServerDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_RconServerDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_RconServerDetails* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_RconServerDetails*>(
               &_CSVCMsg_RconServerDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CSVCMsg_RconServerDetails& a, CSVCMsg_RconServerDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_RconServerDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_RconServerDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_RconServerDetails* New() const final {
    return CreateMaybeMessage<CSVCMsg_RconServerDetails>(nullptr);
  }

  CSVCMsg_RconServerDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_RconServerDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_RconServerDetails& from);
  void MergeFrom(const CSVCMsg_RconServerDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_RconServerDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_RconServerDetails";
  }
  protected:
  explicit CSVCMsg_RconServerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // optional bytes token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // optional string details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_RconServerDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgIPCAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgIPCAddress) */ {
 public:
  inline CMsgIPCAddress() : CMsgIPCAddress(nullptr) {}
  virtual ~CMsgIPCAddress();
  explicit constexpr CMsgIPCAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgIPCAddress(const CMsgIPCAddress& from);
  CMsgIPCAddress(CMsgIPCAddress&& from) noexcept
    : CMsgIPCAddress() {
    *this = ::std::move(from);
  }

  inline CMsgIPCAddress& operator=(const CMsgIPCAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgIPCAddress& operator=(CMsgIPCAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgIPCAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgIPCAddress* internal_default_instance() {
    return reinterpret_cast<const CMsgIPCAddress*>(
               &_CMsgIPCAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgIPCAddress& a, CMsgIPCAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgIPCAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgIPCAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgIPCAddress* New() const final {
    return CreateMaybeMessage<CMsgIPCAddress>(nullptr);
  }

  CMsgIPCAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgIPCAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgIPCAddress& from);
  void MergeFrom(const CMsgIPCAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgIPCAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgIPCAddress";
  }
  protected:
  explicit CMsgIPCAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputerGuidFieldNumber = 1,
    kProcessIdFieldNumber = 2,
  };
  // optional fixed64 computer_guid = 1;
  bool has_computer_guid() const;
  private:
  bool _internal_has_computer_guid() const;
  public:
  void clear_computer_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 computer_guid() const;
  void set_computer_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_computer_guid() const;
  void _internal_set_computer_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 process_id = 2;
  bool has_process_id() const;
  private:
  bool _internal_has_process_id() const;
  public:
  void clear_process_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id() const;
  void set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_process_id() const;
  void _internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgIPCAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 computer_guid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 process_id_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerPeer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerPeer) */ {
 public:
  inline CMsgServerPeer() : CMsgServerPeer(nullptr) {}
  virtual ~CMsgServerPeer();
  explicit constexpr CMsgServerPeer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerPeer(const CMsgServerPeer& from);
  CMsgServerPeer(CMsgServerPeer&& from) noexcept
    : CMsgServerPeer() {
    *this = ::std::move(from);
  }

  inline CMsgServerPeer& operator=(const CMsgServerPeer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerPeer& operator=(CMsgServerPeer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgServerPeer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerPeer* internal_default_instance() {
    return reinterpret_cast<const CMsgServerPeer*>(
               &_CMsgServerPeer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgServerPeer& a, CMsgServerPeer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerPeer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerPeer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgServerPeer* New() const final {
    return CreateMaybeMessage<CMsgServerPeer>(nullptr);
  }

  CMsgServerPeer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgServerPeer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgServerPeer& from);
  void MergeFrom(const CMsgServerPeer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerPeer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerPeer";
  }
  protected:
  explicit CMsgServerPeer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpcFieldNumber = 3,
    kSteamidFieldNumber = 2,
    kPlayerSlotFieldNumber = 1,
    kTheyHearYouFieldNumber = 4,
    kYouHearThemFieldNumber = 5,
    kIsListenserverHostFieldNumber = 6,
  };
  // optional .CMsgIPCAddress ipc = 3;
  bool has_ipc() const;
  private:
  bool _internal_has_ipc() const;
  public:
  void clear_ipc();
  const ::CMsgIPCAddress& ipc() const;
  ::CMsgIPCAddress* release_ipc();
  ::CMsgIPCAddress* mutable_ipc();
  void set_allocated_ipc(::CMsgIPCAddress* ipc);
  private:
  const ::CMsgIPCAddress& _internal_ipc() const;
  ::CMsgIPCAddress* _internal_mutable_ipc();
  public:
  void unsafe_arena_set_allocated_ipc(
      ::CMsgIPCAddress* ipc);
  ::CMsgIPCAddress* unsafe_arena_release_ipc();

  // optional fixed64 steamid = 2;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 player_slot = 1;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot() const;
  void set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_slot() const;
  void _internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool they_hear_you = 4;
  bool has_they_hear_you() const;
  private:
  bool _internal_has_they_hear_you() const;
  public:
  void clear_they_hear_you();
  bool they_hear_you() const;
  void set_they_hear_you(bool value);
  private:
  bool _internal_they_hear_you() const;
  void _internal_set_they_hear_you(bool value);
  public:

  // optional bool you_hear_them = 5;
  bool has_you_hear_them() const;
  private:
  bool _internal_has_you_hear_them() const;
  public:
  void clear_you_hear_them();
  bool you_hear_them() const;
  void set_you_hear_them(bool value);
  private:
  bool _internal_you_hear_them() const;
  void _internal_set_you_hear_them(bool value);
  public:

  // optional bool is_listenserver_host = 6;
  bool has_is_listenserver_host() const;
  private:
  bool _internal_has_is_listenserver_host() const;
  public:
  void clear_is_listenserver_host();
  bool is_listenserver_host() const;
  void set_is_listenserver_host(bool value);
  private:
  bool _internal_is_listenserver_host() const;
  void _internal_set_is_listenserver_host(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerPeer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgIPCAddress* ipc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_slot_;
  bool they_hear_you_;
  bool you_hear_them_;
  bool is_listenserver_host_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_PeerList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_PeerList) */ {
 public:
  inline CSVCMsg_PeerList() : CSVCMsg_PeerList(nullptr) {}
  virtual ~CSVCMsg_PeerList();
  explicit constexpr CSVCMsg_PeerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_PeerList(const CSVCMsg_PeerList& from);
  CSVCMsg_PeerList(CSVCMsg_PeerList&& from) noexcept
    : CSVCMsg_PeerList() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_PeerList& operator=(const CSVCMsg_PeerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_PeerList& operator=(CSVCMsg_PeerList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_PeerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_PeerList* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_PeerList*>(
               &_CSVCMsg_PeerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CSVCMsg_PeerList& a, CSVCMsg_PeerList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_PeerList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_PeerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_PeerList* New() const final {
    return CreateMaybeMessage<CSVCMsg_PeerList>(nullptr);
  }

  CSVCMsg_PeerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_PeerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_PeerList& from);
  void MergeFrom(const CSVCMsg_PeerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_PeerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_PeerList";
  }
  protected:
  explicit CSVCMsg_PeerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 1,
  };
  // repeated .CMsgServerPeer peer = 1;
  int peer_size() const;
  private:
  int _internal_peer_size() const;
  public:
  void clear_peer();
  ::CMsgServerPeer* mutable_peer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerPeer >*
      mutable_peer();
  private:
  const ::CMsgServerPeer& _internal_peer(int index) const;
  ::CMsgServerPeer* _internal_add_peer();
  public:
  const ::CMsgServerPeer& peer(int index) const;
  ::CMsgServerPeer* add_peer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerPeer >&
      peer() const;

  // @@protoc_insertion_point(class_scope:CSVCMsg_PeerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerPeer > peer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_ClearAllStringTables PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_ClearAllStringTables) */ {
 public:
  inline CSVCMsg_ClearAllStringTables() : CSVCMsg_ClearAllStringTables(nullptr) {}
  virtual ~CSVCMsg_ClearAllStringTables();
  explicit constexpr CSVCMsg_ClearAllStringTables(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_ClearAllStringTables(const CSVCMsg_ClearAllStringTables& from);
  CSVCMsg_ClearAllStringTables(CSVCMsg_ClearAllStringTables&& from) noexcept
    : CSVCMsg_ClearAllStringTables() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_ClearAllStringTables& operator=(const CSVCMsg_ClearAllStringTables& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_ClearAllStringTables& operator=(CSVCMsg_ClearAllStringTables&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_ClearAllStringTables& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_ClearAllStringTables* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_ClearAllStringTables*>(
               &_CSVCMsg_ClearAllStringTables_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CSVCMsg_ClearAllStringTables& a, CSVCMsg_ClearAllStringTables& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_ClearAllStringTables* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_ClearAllStringTables* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_ClearAllStringTables* New() const final {
    return CreateMaybeMessage<CSVCMsg_ClearAllStringTables>(nullptr);
  }

  CSVCMsg_ClearAllStringTables* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_ClearAllStringTables>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_ClearAllStringTables& from);
  void MergeFrom(const CSVCMsg_ClearAllStringTables& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_ClearAllStringTables* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_ClearAllStringTables";
  }
  protected:
  explicit CSVCMsg_ClearAllStringTables(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapnameFieldNumber = 1,
  };
  // optional string mapname = 1;
  bool has_mapname() const;
  private:
  bool _internal_has_mapname() const;
  public:
  void clear_mapname();
  const std::string& mapname() const;
  void set_mapname(const std::string& value);
  void set_mapname(std::string&& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  std::string* mutable_mapname();
  std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_ClearAllStringTables)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class ProtoFlattenedSerializerField_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoFlattenedSerializerField_t) */ {
 public:
  inline ProtoFlattenedSerializerField_t() : ProtoFlattenedSerializerField_t(nullptr) {}
  virtual ~ProtoFlattenedSerializerField_t();
  explicit constexpr ProtoFlattenedSerializerField_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoFlattenedSerializerField_t(const ProtoFlattenedSerializerField_t& from);
  ProtoFlattenedSerializerField_t(ProtoFlattenedSerializerField_t&& from) noexcept
    : ProtoFlattenedSerializerField_t() {
    *this = ::std::move(from);
  }

  inline ProtoFlattenedSerializerField_t& operator=(const ProtoFlattenedSerializerField_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoFlattenedSerializerField_t& operator=(ProtoFlattenedSerializerField_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoFlattenedSerializerField_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoFlattenedSerializerField_t* internal_default_instance() {
    return reinterpret_cast<const ProtoFlattenedSerializerField_t*>(
               &_ProtoFlattenedSerializerField_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ProtoFlattenedSerializerField_t& a, ProtoFlattenedSerializerField_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoFlattenedSerializerField_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoFlattenedSerializerField_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoFlattenedSerializerField_t* New() const final {
    return CreateMaybeMessage<ProtoFlattenedSerializerField_t>(nullptr);
  }

  ProtoFlattenedSerializerField_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoFlattenedSerializerField_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoFlattenedSerializerField_t& from);
  void MergeFrom(const ProtoFlattenedSerializerField_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoFlattenedSerializerField_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoFlattenedSerializerField_t";
  }
  protected:
  explicit ProtoFlattenedSerializerField_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarTypeSymFieldNumber = 1,
    kVarNameSymFieldNumber = 2,
    kBitCountFieldNumber = 3,
    kLowValueFieldNumber = 4,
    kHighValueFieldNumber = 5,
    kEncodeFlagsFieldNumber = 6,
    kFieldSerializerNameSymFieldNumber = 7,
    kFieldSerializerVersionFieldNumber = 8,
    kSendNodeSymFieldNumber = 9,
    kVarEncoderSymFieldNumber = 10,
  };
  // optional int32 var_type_sym = 1;
  bool has_var_type_sym() const;
  private:
  bool _internal_has_var_type_sym() const;
  public:
  void clear_var_type_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_sym() const;
  void set_var_type_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type_sym() const;
  void _internal_set_var_type_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 var_name_sym = 2;
  bool has_var_name_sym() const;
  private:
  bool _internal_has_var_name_sym() const;
  public:
  void clear_var_name_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 var_name_sym() const;
  void set_var_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_name_sym() const;
  void _internal_set_var_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 bit_count = 3;
  bool has_bit_count() const;
  private:
  bool _internal_has_bit_count() const;
  public:
  void clear_bit_count();
  ::PROTOBUF_NAMESPACE_ID::int32 bit_count() const;
  void set_bit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bit_count() const;
  void _internal_set_bit_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float low_value = 4;
  bool has_low_value() const;
  private:
  bool _internal_has_low_value() const;
  public:
  void clear_low_value();
  float low_value() const;
  void set_low_value(float value);
  private:
  float _internal_low_value() const;
  void _internal_set_low_value(float value);
  public:

  // optional float high_value = 5;
  bool has_high_value() const;
  private:
  bool _internal_has_high_value() const;
  public:
  void clear_high_value();
  float high_value() const;
  void set_high_value(float value);
  private:
  float _internal_high_value() const;
  void _internal_set_high_value(float value);
  public:

  // optional int32 encode_flags = 6;
  bool has_encode_flags() const;
  private:
  bool _internal_has_encode_flags() const;
  public:
  void clear_encode_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 encode_flags() const;
  void set_encode_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encode_flags() const;
  void _internal_set_encode_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 field_serializer_name_sym = 7;
  bool has_field_serializer_name_sym() const;
  private:
  bool _internal_has_field_serializer_name_sym() const;
  public:
  void clear_field_serializer_name_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 field_serializer_name_sym() const;
  void set_field_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_serializer_name_sym() const;
  void _internal_set_field_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 field_serializer_version = 8;
  bool has_field_serializer_version() const;
  private:
  bool _internal_has_field_serializer_version() const;
  public:
  void clear_field_serializer_version();
  ::PROTOBUF_NAMESPACE_ID::int32 field_serializer_version() const;
  void set_field_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_serializer_version() const;
  void _internal_set_field_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 send_node_sym = 9;
  bool has_send_node_sym() const;
  private:
  bool _internal_has_send_node_sym() const;
  public:
  void clear_send_node_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 send_node_sym() const;
  void set_send_node_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_send_node_sym() const;
  void _internal_set_send_node_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 var_encoder_sym = 10;
  bool has_var_encoder_sym() const;
  private:
  bool _internal_has_var_encoder_sym() const;
  public:
  void clear_var_encoder_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 var_encoder_sym() const;
  void set_var_encoder_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_encoder_sym() const;
  void _internal_set_var_encoder_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoFlattenedSerializerField_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_sym_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_name_sym_;
  ::PROTOBUF_NAMESPACE_ID::int32 bit_count_;
  float low_value_;
  float high_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 encode_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_serializer_name_sym_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_serializer_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 send_node_sym_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_encoder_sym_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class ProtoFlattenedSerializer_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProtoFlattenedSerializer_t) */ {
 public:
  inline ProtoFlattenedSerializer_t() : ProtoFlattenedSerializer_t(nullptr) {}
  virtual ~ProtoFlattenedSerializer_t();
  explicit constexpr ProtoFlattenedSerializer_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtoFlattenedSerializer_t(const ProtoFlattenedSerializer_t& from);
  ProtoFlattenedSerializer_t(ProtoFlattenedSerializer_t&& from) noexcept
    : ProtoFlattenedSerializer_t() {
    *this = ::std::move(from);
  }

  inline ProtoFlattenedSerializer_t& operator=(const ProtoFlattenedSerializer_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoFlattenedSerializer_t& operator=(ProtoFlattenedSerializer_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoFlattenedSerializer_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoFlattenedSerializer_t* internal_default_instance() {
    return reinterpret_cast<const ProtoFlattenedSerializer_t*>(
               &_ProtoFlattenedSerializer_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ProtoFlattenedSerializer_t& a, ProtoFlattenedSerializer_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoFlattenedSerializer_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoFlattenedSerializer_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoFlattenedSerializer_t* New() const final {
    return CreateMaybeMessage<ProtoFlattenedSerializer_t>(nullptr);
  }

  ProtoFlattenedSerializer_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoFlattenedSerializer_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoFlattenedSerializer_t& from);
  void MergeFrom(const ProtoFlattenedSerializer_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoFlattenedSerializer_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProtoFlattenedSerializer_t";
  }
  protected:
  explicit ProtoFlattenedSerializer_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsIndexFieldNumber = 3,
    kSerializerNameSymFieldNumber = 1,
    kSerializerVersionFieldNumber = 2,
  };
  // repeated int32 fields_index = 3;
  int fields_index_size() const;
  private:
  int _internal_fields_index_size() const;
  public:
  void clear_fields_index();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fields_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_fields_index() const;
  void _internal_add_fields_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_fields_index();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 fields_index(int index) const;
  void set_fields_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_fields_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      fields_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_fields_index();

  // optional int32 serializer_name_sym = 1;
  bool has_serializer_name_sym() const;
  private:
  bool _internal_has_serializer_name_sym() const;
  public:
  void clear_serializer_name_sym();
  ::PROTOBUF_NAMESPACE_ID::int32 serializer_name_sym() const;
  void set_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serializer_name_sym() const;
  void _internal_set_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 serializer_version = 2;
  bool has_serializer_version() const;
  private:
  bool _internal_has_serializer_version() const;
  public:
  void clear_serializer_version();
  ::PROTOBUF_NAMESPACE_ID::int32 serializer_version() const;
  void set_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serializer_version() const;
  void _internal_set_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ProtoFlattenedSerializer_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > fields_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 serializer_name_sym_;
  ::PROTOBUF_NAMESPACE_ID::int32 serializer_version_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_FlattenedSerializer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_FlattenedSerializer) */ {
 public:
  inline CSVCMsg_FlattenedSerializer() : CSVCMsg_FlattenedSerializer(nullptr) {}
  virtual ~CSVCMsg_FlattenedSerializer();
  explicit constexpr CSVCMsg_FlattenedSerializer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_FlattenedSerializer(const CSVCMsg_FlattenedSerializer& from);
  CSVCMsg_FlattenedSerializer(CSVCMsg_FlattenedSerializer&& from) noexcept
    : CSVCMsg_FlattenedSerializer() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_FlattenedSerializer& operator=(const CSVCMsg_FlattenedSerializer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_FlattenedSerializer& operator=(CSVCMsg_FlattenedSerializer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_FlattenedSerializer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_FlattenedSerializer* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_FlattenedSerializer*>(
               &_CSVCMsg_FlattenedSerializer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CSVCMsg_FlattenedSerializer& a, CSVCMsg_FlattenedSerializer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_FlattenedSerializer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_FlattenedSerializer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_FlattenedSerializer* New() const final {
    return CreateMaybeMessage<CSVCMsg_FlattenedSerializer>(nullptr);
  }

  CSVCMsg_FlattenedSerializer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_FlattenedSerializer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_FlattenedSerializer& from);
  void MergeFrom(const CSVCMsg_FlattenedSerializer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_FlattenedSerializer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_FlattenedSerializer";
  }
  protected:
  explicit CSVCMsg_FlattenedSerializer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializersFieldNumber = 1,
    kSymbolsFieldNumber = 2,
    kFieldsFieldNumber = 3,
  };
  // repeated .ProtoFlattenedSerializer_t serializers = 1;
  int serializers_size() const;
  private:
  int _internal_serializers_size() const;
  public:
  void clear_serializers();
  ::ProtoFlattenedSerializer_t* mutable_serializers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializer_t >*
      mutable_serializers();
  private:
  const ::ProtoFlattenedSerializer_t& _internal_serializers(int index) const;
  ::ProtoFlattenedSerializer_t* _internal_add_serializers();
  public:
  const ::ProtoFlattenedSerializer_t& serializers(int index) const;
  ::ProtoFlattenedSerializer_t* add_serializers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializer_t >&
      serializers() const;

  // repeated string symbols = 2;
  int symbols_size() const;
  private:
  int _internal_symbols_size() const;
  public:
  void clear_symbols();
  const std::string& symbols(int index) const;
  std::string* mutable_symbols(int index);
  void set_symbols(int index, const std::string& value);
  void set_symbols(int index, std::string&& value);
  void set_symbols(int index, const char* value);
  void set_symbols(int index, const char* value, size_t size);
  std::string* add_symbols();
  void add_symbols(const std::string& value);
  void add_symbols(std::string&& value);
  void add_symbols(const char* value);
  void add_symbols(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& symbols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_symbols();
  private:
  const std::string& _internal_symbols(int index) const;
  std::string* _internal_add_symbols();
  public:

  // repeated .ProtoFlattenedSerializerField_t fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::ProtoFlattenedSerializerField_t* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializerField_t >*
      mutable_fields();
  private:
  const ::ProtoFlattenedSerializerField_t& _internal_fields(int index) const;
  ::ProtoFlattenedSerializerField_t* _internal_add_fields();
  public:
  const ::ProtoFlattenedSerializerField_t& fields(int index) const;
  ::ProtoFlattenedSerializerField_t* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializerField_t >&
      fields() const;

  // @@protoc_insertion_point(class_scope:CSVCMsg_FlattenedSerializer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializer_t > serializers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> symbols_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializerField_t > fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_StopSound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_StopSound) */ {
 public:
  inline CSVCMsg_StopSound() : CSVCMsg_StopSound(nullptr) {}
  virtual ~CSVCMsg_StopSound();
  explicit constexpr CSVCMsg_StopSound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_StopSound(const CSVCMsg_StopSound& from);
  CSVCMsg_StopSound(CSVCMsg_StopSound&& from) noexcept
    : CSVCMsg_StopSound() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_StopSound& operator=(const CSVCMsg_StopSound& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_StopSound& operator=(CSVCMsg_StopSound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_StopSound& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_StopSound* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_StopSound*>(
               &_CSVCMsg_StopSound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CSVCMsg_StopSound& a, CSVCMsg_StopSound& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_StopSound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_StopSound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_StopSound* New() const final {
    return CreateMaybeMessage<CSVCMsg_StopSound>(nullptr);
  }

  CSVCMsg_StopSound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_StopSound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_StopSound& from);
  void MergeFrom(const CSVCMsg_StopSound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_StopSound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_StopSound";
  }
  protected:
  explicit CSVCMsg_StopSound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // optional fixed32 guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint32 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_StopSound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guid_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CBidirMsg_RebroadcastGameEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBidirMsg_RebroadcastGameEvent) */ {
 public:
  inline CBidirMsg_RebroadcastGameEvent() : CBidirMsg_RebroadcastGameEvent(nullptr) {}
  virtual ~CBidirMsg_RebroadcastGameEvent();
  explicit constexpr CBidirMsg_RebroadcastGameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBidirMsg_RebroadcastGameEvent(const CBidirMsg_RebroadcastGameEvent& from);
  CBidirMsg_RebroadcastGameEvent(CBidirMsg_RebroadcastGameEvent&& from) noexcept
    : CBidirMsg_RebroadcastGameEvent() {
    *this = ::std::move(from);
  }

  inline CBidirMsg_RebroadcastGameEvent& operator=(const CBidirMsg_RebroadcastGameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBidirMsg_RebroadcastGameEvent& operator=(CBidirMsg_RebroadcastGameEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBidirMsg_RebroadcastGameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBidirMsg_RebroadcastGameEvent* internal_default_instance() {
    return reinterpret_cast<const CBidirMsg_RebroadcastGameEvent*>(
               &_CBidirMsg_RebroadcastGameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CBidirMsg_RebroadcastGameEvent& a, CBidirMsg_RebroadcastGameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CBidirMsg_RebroadcastGameEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBidirMsg_RebroadcastGameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBidirMsg_RebroadcastGameEvent* New() const final {
    return CreateMaybeMessage<CBidirMsg_RebroadcastGameEvent>(nullptr);
  }

  CBidirMsg_RebroadcastGameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBidirMsg_RebroadcastGameEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBidirMsg_RebroadcastGameEvent& from);
  void MergeFrom(const CBidirMsg_RebroadcastGameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBidirMsg_RebroadcastGameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBidirMsg_RebroadcastGameEvent";
  }
  protected:
  explicit CBidirMsg_RebroadcastGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosttoserverFieldNumber = 1,
    kBuftypeFieldNumber = 2,
    kReceivingclientsFieldNumber = 4,
    kClientbitcountFieldNumber = 3,
  };
  // optional bool posttoserver = 1;
  bool has_posttoserver() const;
  private:
  bool _internal_has_posttoserver() const;
  public:
  void clear_posttoserver();
  bool posttoserver() const;
  void set_posttoserver(bool value);
  private:
  bool _internal_posttoserver() const;
  void _internal_set_posttoserver(bool value);
  public:

  // optional int32 buftype = 2;
  bool has_buftype() const;
  private:
  bool _internal_has_buftype() const;
  public:
  void clear_buftype();
  ::PROTOBUF_NAMESPACE_ID::int32 buftype() const;
  void set_buftype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buftype() const;
  void _internal_set_buftype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 receivingclients = 4;
  bool has_receivingclients() const;
  private:
  bool _internal_has_receivingclients() const;
  public:
  void clear_receivingclients();
  ::PROTOBUF_NAMESPACE_ID::uint64 receivingclients() const;
  void set_receivingclients(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_receivingclients() const;
  void _internal_set_receivingclients(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 clientbitcount = 3;
  bool has_clientbitcount() const;
  private:
  bool _internal_has_clientbitcount() const;
  public:
  void clear_clientbitcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 clientbitcount() const;
  void set_clientbitcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_clientbitcount() const;
  void _internal_set_clientbitcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBidirMsg_RebroadcastGameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool posttoserver_;
  ::PROTOBUF_NAMESPACE_ID::int32 buftype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 receivingclients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 clientbitcount_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CBidirMsg_RebroadcastSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBidirMsg_RebroadcastSource) */ {
 public:
  inline CBidirMsg_RebroadcastSource() : CBidirMsg_RebroadcastSource(nullptr) {}
  virtual ~CBidirMsg_RebroadcastSource();
  explicit constexpr CBidirMsg_RebroadcastSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBidirMsg_RebroadcastSource(const CBidirMsg_RebroadcastSource& from);
  CBidirMsg_RebroadcastSource(CBidirMsg_RebroadcastSource&& from) noexcept
    : CBidirMsg_RebroadcastSource() {
    *this = ::std::move(from);
  }

  inline CBidirMsg_RebroadcastSource& operator=(const CBidirMsg_RebroadcastSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBidirMsg_RebroadcastSource& operator=(CBidirMsg_RebroadcastSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBidirMsg_RebroadcastSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBidirMsg_RebroadcastSource* internal_default_instance() {
    return reinterpret_cast<const CBidirMsg_RebroadcastSource*>(
               &_CBidirMsg_RebroadcastSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CBidirMsg_RebroadcastSource& a, CBidirMsg_RebroadcastSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CBidirMsg_RebroadcastSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBidirMsg_RebroadcastSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBidirMsg_RebroadcastSource* New() const final {
    return CreateMaybeMessage<CBidirMsg_RebroadcastSource>(nullptr);
  }

  CBidirMsg_RebroadcastSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBidirMsg_RebroadcastSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBidirMsg_RebroadcastSource& from);
  void MergeFrom(const CBidirMsg_RebroadcastSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBidirMsg_RebroadcastSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBidirMsg_RebroadcastSource";
  }
  protected:
  explicit CBidirMsg_RebroadcastSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsourceFieldNumber = 1,
  };
  // optional int32 eventsource = 1;
  bool has_eventsource() const;
  private:
  bool _internal_has_eventsource() const;
  public:
  void clear_eventsource();
  ::PROTOBUF_NAMESPACE_ID::int32 eventsource() const;
  void set_eventsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventsource() const;
  void _internal_set_eventsource(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBidirMsg_RebroadcastSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventsource_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class SerializedNetAddress_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SerializedNetAddress_t) */ {
 public:
  inline SerializedNetAddress_t() : SerializedNetAddress_t(nullptr) {}
  virtual ~SerializedNetAddress_t();
  explicit constexpr SerializedNetAddress_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedNetAddress_t(const SerializedNetAddress_t& from);
  SerializedNetAddress_t(SerializedNetAddress_t&& from) noexcept
    : SerializedNetAddress_t() {
    *this = ::std::move(from);
  }

  inline SerializedNetAddress_t& operator=(const SerializedNetAddress_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedNetAddress_t& operator=(SerializedNetAddress_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SerializedNetAddress_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedNetAddress_t* internal_default_instance() {
    return reinterpret_cast<const SerializedNetAddress_t*>(
               &_SerializedNetAddress_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SerializedNetAddress_t& a, SerializedNetAddress_t& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedNetAddress_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedNetAddress_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SerializedNetAddress_t* New() const final {
    return CreateMaybeMessage<SerializedNetAddress_t>(nullptr);
  }

  SerializedNetAddress_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SerializedNetAddress_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SerializedNetAddress_t& from);
  void MergeFrom(const SerializedNetAddress_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SerializedNetAddress_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SerializedNetAddress_t";
  }
  protected:
  explicit SerializedNetAddress_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedAddressFieldNumber = 1,
  };
  // required bytes serializedAddress = 1;
  bool has_serializedaddress() const;
  private:
  bool _internal_has_serializedaddress() const;
  public:
  void clear_serializedaddress();
  const std::string& serializedaddress() const;
  void set_serializedaddress(const std::string& value);
  void set_serializedaddress(std::string&& value);
  void set_serializedaddress(const char* value);
  void set_serializedaddress(const void* value, size_t size);
  std::string* mutable_serializedaddress();
  std::string* release_serializedaddress();
  void set_allocated_serializedaddress(std::string* serializedaddress);
  private:
  const std::string& _internal_serializedaddress() const;
  void _internal_set_serializedaddress(const std::string& value);
  std::string* _internal_mutable_serializedaddress();
  public:

  // @@protoc_insertion_point(class_scope:SerializedNetAddress_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serializedaddress_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CBidirMsg_RelayInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBidirMsg_RelayInfo) */ {
 public:
  inline CBidirMsg_RelayInfo() : CBidirMsg_RelayInfo(nullptr) {}
  virtual ~CBidirMsg_RelayInfo();
  explicit constexpr CBidirMsg_RelayInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBidirMsg_RelayInfo(const CBidirMsg_RelayInfo& from);
  CBidirMsg_RelayInfo(CBidirMsg_RelayInfo&& from) noexcept
    : CBidirMsg_RelayInfo() {
    *this = ::std::move(from);
  }

  inline CBidirMsg_RelayInfo& operator=(const CBidirMsg_RelayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBidirMsg_RelayInfo& operator=(CBidirMsg_RelayInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBidirMsg_RelayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBidirMsg_RelayInfo* internal_default_instance() {
    return reinterpret_cast<const CBidirMsg_RelayInfo*>(
               &_CBidirMsg_RelayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CBidirMsg_RelayInfo& a, CBidirMsg_RelayInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CBidirMsg_RelayInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBidirMsg_RelayInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBidirMsg_RelayInfo* New() const final {
    return CreateMaybeMessage<CBidirMsg_RelayInfo>(nullptr);
  }

  CBidirMsg_RelayInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBidirMsg_RelayInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBidirMsg_RelayInfo& from);
  void MergeFrom(const CBidirMsg_RelayInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBidirMsg_RelayInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBidirMsg_RelayInfo";
  }
  protected:
  explicit CBidirMsg_RelayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CBidirMsg_RelayInfo_Operation_t Operation_t;
  static constexpr Operation_t RIO_REQUEST_RELAY =
    CBidirMsg_RelayInfo_Operation_t_RIO_REQUEST_RELAY;
  static constexpr Operation_t RIO_WILL_RELAY =
    CBidirMsg_RelayInfo_Operation_t_RIO_WILL_RELAY;
  static constexpr Operation_t RIO_NO_ROUTE =
    CBidirMsg_RelayInfo_Operation_t_RIO_NO_ROUTE;
  static constexpr Operation_t RIO_REJECT_RELAY =
    CBidirMsg_RelayInfo_Operation_t_RIO_REJECT_RELAY;
  static constexpr Operation_t RIO_ESTABLISH_CONNECTION =
    CBidirMsg_RelayInfo_Operation_t_RIO_ESTABLISH_CONNECTION;
  static inline bool Operation_t_IsValid(int value) {
    return CBidirMsg_RelayInfo_Operation_t_IsValid(value);
  }
  static constexpr Operation_t Operation_t_MIN =
    CBidirMsg_RelayInfo_Operation_t_Operation_t_MIN;
  static constexpr Operation_t Operation_t_MAX =
    CBidirMsg_RelayInfo_Operation_t_Operation_t_MAX;
  static constexpr int Operation_t_ARRAYSIZE =
    CBidirMsg_RelayInfo_Operation_t_Operation_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_t_descriptor() {
    return CBidirMsg_RelayInfo_Operation_t_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_t_Name.");
    return CBidirMsg_RelayInfo_Operation_t_Name(enum_t_value);
  }
  static inline bool Operation_t_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation_t* value) {
    return CBidirMsg_RelayInfo_Operation_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedTargetAddressFieldNumber = 2,
    kOperationFieldNumber = 1,
    kAdditionalHopsFieldNumber = 3,
  };
  // optional .SerializedNetAddress_t serializedTargetAddress = 2;
  bool has_serializedtargetaddress() const;
  private:
  bool _internal_has_serializedtargetaddress() const;
  public:
  void clear_serializedtargetaddress();
  const ::SerializedNetAddress_t& serializedtargetaddress() const;
  ::SerializedNetAddress_t* release_serializedtargetaddress();
  ::SerializedNetAddress_t* mutable_serializedtargetaddress();
  void set_allocated_serializedtargetaddress(::SerializedNetAddress_t* serializedtargetaddress);
  private:
  const ::SerializedNetAddress_t& _internal_serializedtargetaddress() const;
  ::SerializedNetAddress_t* _internal_mutable_serializedtargetaddress();
  public:
  void unsafe_arena_set_allocated_serializedtargetaddress(
      ::SerializedNetAddress_t* serializedtargetaddress);
  ::SerializedNetAddress_t* unsafe_arena_release_serializedtargetaddress();

  // required .CBidirMsg_RelayInfo.Operation_t operation = 1 [default = RIO_REQUEST_RELAY];
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::CBidirMsg_RelayInfo_Operation_t operation() const;
  void set_operation(::CBidirMsg_RelayInfo_Operation_t value);
  private:
  ::CBidirMsg_RelayInfo_Operation_t _internal_operation() const;
  void _internal_set_operation(::CBidirMsg_RelayInfo_Operation_t value);
  public:

  // optional uint32 additionalHops = 3;
  bool has_additionalhops() const;
  private:
  bool _internal_has_additionalhops() const;
  public:
  void clear_additionalhops();
  ::PROTOBUF_NAMESPACE_ID::uint32 additionalhops() const;
  void set_additionalhops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additionalhops() const;
  void _internal_set_additionalhops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBidirMsg_RelayInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SerializedNetAddress_t* serializedtargetaddress_;
  int operation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additionalhops_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class SignedPayload_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SignedPayload_t) */ {
 public:
  inline SignedPayload_t() : SignedPayload_t(nullptr) {}
  virtual ~SignedPayload_t();
  explicit constexpr SignedPayload_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignedPayload_t(const SignedPayload_t& from);
  SignedPayload_t(SignedPayload_t&& from) noexcept
    : SignedPayload_t() {
    *this = ::std::move(from);
  }

  inline SignedPayload_t& operator=(const SignedPayload_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedPayload_t& operator=(SignedPayload_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedPayload_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedPayload_t* internal_default_instance() {
    return reinterpret_cast<const SignedPayload_t*>(
               &_SignedPayload_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SignedPayload_t& a, SignedPayload_t& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedPayload_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedPayload_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedPayload_t* New() const final {
    return CreateMaybeMessage<SignedPayload_t>(nullptr);
  }

  SignedPayload_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedPayload_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedPayload_t& from);
  void MergeFrom(const SignedPayload_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedPayload_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SignedPayload_t";
  }
  protected:
  explicit SignedPayload_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadDataFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kBPayloadEncryptedFieldNumber = 3,
  };
  // required bytes payloadData = 1;
  bool has_payloaddata() const;
  private:
  bool _internal_has_payloaddata() const;
  public:
  void clear_payloaddata();
  const std::string& payloaddata() const;
  void set_payloaddata(const std::string& value);
  void set_payloaddata(std::string&& value);
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  std::string* mutable_payloaddata();
  std::string* release_payloaddata();
  void set_allocated_payloaddata(std::string* payloaddata);
  private:
  const std::string& _internal_payloaddata() const;
  void _internal_set_payloaddata(const std::string& value);
  std::string* _internal_mutable_payloaddata();
  public:

  // required uint32 signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  ::PROTOBUF_NAMESPACE_ID::uint32 signature() const;
  void set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signature() const;
  void _internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool bPayloadEncrypted = 3;
  bool has_bpayloadencrypted() const;
  private:
  bool _internal_has_bpayloadencrypted() const;
  public:
  void clear_bpayloadencrypted();
  bool bpayloadencrypted() const;
  void set_bpayloadencrypted(bool value);
  private:
  bool _internal_bpayloadencrypted() const;
  void _internal_set_bpayloadencrypted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SignedPayload_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payloaddata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_;
  bool bpayloadencrypted_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CBidirMsg_RelayPacket_SignedDestinationAddress_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBidirMsg_RelayPacket.SignedDestinationAddress_t) */ {
 public:
  inline CBidirMsg_RelayPacket_SignedDestinationAddress_t() : CBidirMsg_RelayPacket_SignedDestinationAddress_t(nullptr) {}
  virtual ~CBidirMsg_RelayPacket_SignedDestinationAddress_t();
  explicit constexpr CBidirMsg_RelayPacket_SignedDestinationAddress_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBidirMsg_RelayPacket_SignedDestinationAddress_t(const CBidirMsg_RelayPacket_SignedDestinationAddress_t& from);
  CBidirMsg_RelayPacket_SignedDestinationAddress_t(CBidirMsg_RelayPacket_SignedDestinationAddress_t&& from) noexcept
    : CBidirMsg_RelayPacket_SignedDestinationAddress_t() {
    *this = ::std::move(from);
  }

  inline CBidirMsg_RelayPacket_SignedDestinationAddress_t& operator=(const CBidirMsg_RelayPacket_SignedDestinationAddress_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBidirMsg_RelayPacket_SignedDestinationAddress_t& operator=(CBidirMsg_RelayPacket_SignedDestinationAddress_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBidirMsg_RelayPacket_SignedDestinationAddress_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBidirMsg_RelayPacket_SignedDestinationAddress_t* internal_default_instance() {
    return reinterpret_cast<const CBidirMsg_RelayPacket_SignedDestinationAddress_t*>(
               &_CBidirMsg_RelayPacket_SignedDestinationAddress_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CBidirMsg_RelayPacket_SignedDestinationAddress_t& a, CBidirMsg_RelayPacket_SignedDestinationAddress_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CBidirMsg_RelayPacket_SignedDestinationAddress_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBidirMsg_RelayPacket_SignedDestinationAddress_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBidirMsg_RelayPacket_SignedDestinationAddress_t* New() const final {
    return CreateMaybeMessage<CBidirMsg_RelayPacket_SignedDestinationAddress_t>(nullptr);
  }

  CBidirMsg_RelayPacket_SignedDestinationAddress_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBidirMsg_RelayPacket_SignedDestinationAddress_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBidirMsg_RelayPacket_SignedDestinationAddress_t& from);
  void MergeFrom(const CBidirMsg_RelayPacket_SignedDestinationAddress_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBidirMsg_RelayPacket_SignedDestinationAddress_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBidirMsg_RelayPacket.SignedDestinationAddress_t";
  }
  protected:
  explicit CBidirMsg_RelayPacket_SignedDestinationAddress_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedPayloadKeyFieldNumber = 3,
    kSerializedAddrFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // optional bytes encryptedPayloadKey = 3;
  bool has_encryptedpayloadkey() const;
  private:
  bool _internal_has_encryptedpayloadkey() const;
  public:
  void clear_encryptedpayloadkey();
  const std::string& encryptedpayloadkey() const;
  void set_encryptedpayloadkey(const std::string& value);
  void set_encryptedpayloadkey(std::string&& value);
  void set_encryptedpayloadkey(const char* value);
  void set_encryptedpayloadkey(const void* value, size_t size);
  std::string* mutable_encryptedpayloadkey();
  std::string* release_encryptedpayloadkey();
  void set_allocated_encryptedpayloadkey(std::string* encryptedpayloadkey);
  private:
  const std::string& _internal_encryptedpayloadkey() const;
  void _internal_set_encryptedpayloadkey(const std::string& value);
  std::string* _internal_mutable_encryptedpayloadkey();
  public:

  // required .SerializedNetAddress_t serializedAddr = 1;
  bool has_serializedaddr() const;
  private:
  bool _internal_has_serializedaddr() const;
  public:
  void clear_serializedaddr();
  const ::SerializedNetAddress_t& serializedaddr() const;
  ::SerializedNetAddress_t* release_serializedaddr();
  ::SerializedNetAddress_t* mutable_serializedaddr();
  void set_allocated_serializedaddr(::SerializedNetAddress_t* serializedaddr);
  private:
  const ::SerializedNetAddress_t& _internal_serializedaddr() const;
  ::SerializedNetAddress_t* _internal_mutable_serializedaddr();
  public:
  void unsafe_arena_set_allocated_serializedaddr(
      ::SerializedNetAddress_t* serializedaddr);
  ::SerializedNetAddress_t* unsafe_arena_release_serializedaddr();

  // required uint32 signature = 2;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  ::PROTOBUF_NAMESPACE_ID::uint32 signature() const;
  void set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signature() const;
  void _internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBidirMsg_RelayPacket.SignedDestinationAddress_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptedpayloadkey_;
  ::SerializedNetAddress_t* serializedaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signature_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CBidirMsg_RelayPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CBidirMsg_RelayPacket) */ {
 public:
  inline CBidirMsg_RelayPacket() : CBidirMsg_RelayPacket(nullptr) {}
  virtual ~CBidirMsg_RelayPacket();
  explicit constexpr CBidirMsg_RelayPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CBidirMsg_RelayPacket(const CBidirMsg_RelayPacket& from);
  CBidirMsg_RelayPacket(CBidirMsg_RelayPacket&& from) noexcept
    : CBidirMsg_RelayPacket() {
    *this = ::std::move(from);
  }

  inline CBidirMsg_RelayPacket& operator=(const CBidirMsg_RelayPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CBidirMsg_RelayPacket& operator=(CBidirMsg_RelayPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CBidirMsg_RelayPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CBidirMsg_RelayPacket* internal_default_instance() {
    return reinterpret_cast<const CBidirMsg_RelayPacket*>(
               &_CBidirMsg_RelayPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CBidirMsg_RelayPacket& a, CBidirMsg_RelayPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CBidirMsg_RelayPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CBidirMsg_RelayPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CBidirMsg_RelayPacket* New() const final {
    return CreateMaybeMessage<CBidirMsg_RelayPacket>(nullptr);
  }

  CBidirMsg_RelayPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CBidirMsg_RelayPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CBidirMsg_RelayPacket& from);
  void MergeFrom(const CBidirMsg_RelayPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CBidirMsg_RelayPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CBidirMsg_RelayPacket";
  }
  protected:
  explicit CBidirMsg_RelayPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CBidirMsg_RelayPacket_SignedDestinationAddress_t SignedDestinationAddress_t;

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientListFieldNumber = 4,
    kOriginalSenderFieldNumber = 2,
    kSignedPayloadFieldNumber = 3,
    kPrevhopcountFieldNumber = 1,
  };
  // repeated .CBidirMsg_RelayPacket.SignedDestinationAddress_t recipientList = 4;
  int recipientlist_size() const;
  private:
  int _internal_recipientlist_size() const;
  public:
  void clear_recipientlist();
  ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* mutable_recipientlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBidirMsg_RelayPacket_SignedDestinationAddress_t >*
      mutable_recipientlist();
  private:
  const ::CBidirMsg_RelayPacket_SignedDestinationAddress_t& _internal_recipientlist(int index) const;
  ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* _internal_add_recipientlist();
  public:
  const ::CBidirMsg_RelayPacket_SignedDestinationAddress_t& recipientlist(int index) const;
  ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* add_recipientlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBidirMsg_RelayPacket_SignedDestinationAddress_t >&
      recipientlist() const;

  // required .SerializedNetAddress_t originalSender = 2;
  bool has_originalsender() const;
  private:
  bool _internal_has_originalsender() const;
  public:
  void clear_originalsender();
  const ::SerializedNetAddress_t& originalsender() const;
  ::SerializedNetAddress_t* release_originalsender();
  ::SerializedNetAddress_t* mutable_originalsender();
  void set_allocated_originalsender(::SerializedNetAddress_t* originalsender);
  private:
  const ::SerializedNetAddress_t& _internal_originalsender() const;
  ::SerializedNetAddress_t* _internal_mutable_originalsender();
  public:
  void unsafe_arena_set_allocated_originalsender(
      ::SerializedNetAddress_t* originalsender);
  ::SerializedNetAddress_t* unsafe_arena_release_originalsender();

  // required .SignedPayload_t signedPayload = 3;
  bool has_signedpayload() const;
  private:
  bool _internal_has_signedpayload() const;
  public:
  void clear_signedpayload();
  const ::SignedPayload_t& signedpayload() const;
  ::SignedPayload_t* release_signedpayload();
  ::SignedPayload_t* mutable_signedpayload();
  void set_allocated_signedpayload(::SignedPayload_t* signedpayload);
  private:
  const ::SignedPayload_t& _internal_signedpayload() const;
  ::SignedPayload_t* _internal_mutable_signedpayload();
  public:
  void unsafe_arena_set_allocated_signedpayload(
      ::SignedPayload_t* signedpayload);
  ::SignedPayload_t* unsafe_arena_release_signedpayload();

  // required uint32 prevhopcount = 1;
  bool has_prevhopcount() const;
  private:
  bool _internal_has_prevhopcount() const;
  public:
  void clear_prevhopcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 prevhopcount() const;
  void set_prevhopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prevhopcount() const;
  void _internal_set_prevhopcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CBidirMsg_RelayPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBidirMsg_RelayPacket_SignedDestinationAddress_t > recipientlist_;
  ::SerializedNetAddress_t* originalsender_;
  ::SignedPayload_t* signedpayload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prevhopcount_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerNetworkStats_Port PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerNetworkStats.Port) */ {
 public:
  inline CMsgServerNetworkStats_Port() : CMsgServerNetworkStats_Port(nullptr) {}
  virtual ~CMsgServerNetworkStats_Port();
  explicit constexpr CMsgServerNetworkStats_Port(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerNetworkStats_Port(const CMsgServerNetworkStats_Port& from);
  CMsgServerNetworkStats_Port(CMsgServerNetworkStats_Port&& from) noexcept
    : CMsgServerNetworkStats_Port() {
    *this = ::std::move(from);
  }

  inline CMsgServerNetworkStats_Port& operator=(const CMsgServerNetworkStats_Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerNetworkStats_Port& operator=(CMsgServerNetworkStats_Port&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgServerNetworkStats_Port& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerNetworkStats_Port* internal_default_instance() {
    return reinterpret_cast<const CMsgServerNetworkStats_Port*>(
               &_CMsgServerNetworkStats_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgServerNetworkStats_Port& a, CMsgServerNetworkStats_Port& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerNetworkStats_Port* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerNetworkStats_Port* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgServerNetworkStats_Port* New() const final {
    return CreateMaybeMessage<CMsgServerNetworkStats_Port>(nullptr);
  }

  CMsgServerNetworkStats_Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgServerNetworkStats_Port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgServerNetworkStats_Port& from);
  void MergeFrom(const CMsgServerNetworkStats_Port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerNetworkStats_Port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerNetworkStats.Port";
  }
  protected:
  explicit CMsgServerNetworkStats_Port(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 port = 1;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerNetworkStats.Port)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerNetworkStats_Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerNetworkStats.Player) */ {
 public:
  inline CMsgServerNetworkStats_Player() : CMsgServerNetworkStats_Player(nullptr) {}
  virtual ~CMsgServerNetworkStats_Player();
  explicit constexpr CMsgServerNetworkStats_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerNetworkStats_Player(const CMsgServerNetworkStats_Player& from);
  CMsgServerNetworkStats_Player(CMsgServerNetworkStats_Player&& from) noexcept
    : CMsgServerNetworkStats_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerNetworkStats_Player& operator=(const CMsgServerNetworkStats_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerNetworkStats_Player& operator=(CMsgServerNetworkStats_Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgServerNetworkStats_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerNetworkStats_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerNetworkStats_Player*>(
               &_CMsgServerNetworkStats_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgServerNetworkStats_Player& a, CMsgServerNetworkStats_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerNetworkStats_Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerNetworkStats_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgServerNetworkStats_Player* New() const final {
    return CreateMaybeMessage<CMsgServerNetworkStats_Player>(nullptr);
  }

  CMsgServerNetworkStats_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgServerNetworkStats_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgServerNetworkStats_Player& from);
  void MergeFrom(const CMsgServerNetworkStats_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerNetworkStats_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerNetworkStats.Player";
  }
  protected:
  explicit CMsgServerNetworkStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteAddrFieldNumber = 2,
    kSteamidFieldNumber = 1,
    kPingStddevMsFieldNumber = 3,
    kPingAvgMsFieldNumber = 4,
    kPacketLossPctFieldNumber = 5,
    kIsBotFieldNumber = 6,
  };
  // optional string remote_addr = 2;
  bool has_remote_addr() const;
  private:
  bool _internal_has_remote_addr() const;
  public:
  void clear_remote_addr();
  const std::string& remote_addr() const;
  void set_remote_addr(const std::string& value);
  void set_remote_addr(std::string&& value);
  void set_remote_addr(const char* value);
  void set_remote_addr(const char* value, size_t size);
  std::string* mutable_remote_addr();
  std::string* release_remote_addr();
  void set_allocated_remote_addr(std::string* remote_addr);
  private:
  const std::string& _internal_remote_addr() const;
  void _internal_set_remote_addr(const std::string& value);
  std::string* _internal_mutable_remote_addr();
  public:

  // optional uint64 steamid = 1;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 ping_stddev_ms = 3;
  bool has_ping_stddev_ms() const;
  private:
  bool _internal_has_ping_stddev_ms() const;
  public:
  void clear_ping_stddev_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 ping_stddev_ms() const;
  void set_ping_stddev_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping_stddev_ms() const;
  void _internal_set_ping_stddev_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ping_avg_ms = 4;
  bool has_ping_avg_ms() const;
  private:
  bool _internal_has_ping_avg_ms() const;
  public:
  void clear_ping_avg_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 ping_avg_ms() const;
  void set_ping_avg_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping_avg_ms() const;
  void _internal_set_ping_avg_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float packet_loss_pct = 5;
  bool has_packet_loss_pct() const;
  private:
  bool _internal_has_packet_loss_pct() const;
  public:
  void clear_packet_loss_pct();
  float packet_loss_pct() const;
  void set_packet_loss_pct(float value);
  private:
  float _internal_packet_loss_pct() const;
  void _internal_set_packet_loss_pct(float value);
  public:

  // optional bool is_bot = 6;
  bool has_is_bot() const;
  private:
  bool _internal_has_is_bot() const;
  public:
  void clear_is_bot();
  bool is_bot() const;
  void set_is_bot(bool value);
  private:
  bool _internal_is_bot() const;
  void _internal_set_is_bot(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerNetworkStats.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_stddev_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_avg_ms_;
  float packet_loss_pct_;
  bool is_bot_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerNetworkStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerNetworkStats) */ {
 public:
  inline CMsgServerNetworkStats() : CMsgServerNetworkStats(nullptr) {}
  virtual ~CMsgServerNetworkStats();
  explicit constexpr CMsgServerNetworkStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerNetworkStats(const CMsgServerNetworkStats& from);
  CMsgServerNetworkStats(CMsgServerNetworkStats&& from) noexcept
    : CMsgServerNetworkStats() {
    *this = ::std::move(from);
  }

  inline CMsgServerNetworkStats& operator=(const CMsgServerNetworkStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerNetworkStats& operator=(CMsgServerNetworkStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgServerNetworkStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerNetworkStats* internal_default_instance() {
    return reinterpret_cast<const CMsgServerNetworkStats*>(
               &_CMsgServerNetworkStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgServerNetworkStats& a, CMsgServerNetworkStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerNetworkStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerNetworkStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgServerNetworkStats* New() const final {
    return CreateMaybeMessage<CMsgServerNetworkStats>(nullptr);
  }

  CMsgServerNetworkStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgServerNetworkStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgServerNetworkStats& from);
  void MergeFrom(const CMsgServerNetworkStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerNetworkStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerNetworkStats";
  }
  protected:
  explicit CMsgServerNetworkStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_netmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgServerNetworkStats_Port Port;
  typedef CMsgServerNetworkStats_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 17,
    kPlayersFieldNumber = 30,
    kDedicatedFieldNumber = 1,
    kCpuUsageFieldNumber = 2,
    kMemoryUsedMbFieldNumber = 3,
    kMemoryFreeMbFieldNumber = 4,
    kUptimeFieldNumber = 5,
    kSpawnCountFieldNumber = 6,
    kNumClientsFieldNumber = 8,
    kNumBotsFieldNumber = 9,
    kNumSpectatorsFieldNumber = 10,
    kNumTvRelaysFieldNumber = 11,
    kFpsFieldNumber = 12,
    kAvgLatencyOutFieldNumber = 18,
    kAvgLatencyInFieldNumber = 19,
    kAvgPacketsOutFieldNumber = 20,
    kAvgPacketsInFieldNumber = 21,
    kAvgLossOutFieldNumber = 22,
    kAvgLossInFieldNumber = 23,
    kAvgDataOutFieldNumber = 24,
    kTotalDataInFieldNumber = 26,
    kAvgDataInFieldNumber = 25,
    kTotalPacketsInFieldNumber = 27,
    kTotalDataOutFieldNumber = 28,
    kTotalPacketsOutFieldNumber = 29,
  };
  // repeated .CMsgServerNetworkStats.Port ports = 17;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  ::CMsgServerNetworkStats_Port* mutable_ports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Port >*
      mutable_ports();
  private:
  const ::CMsgServerNetworkStats_Port& _internal_ports(int index) const;
  ::CMsgServerNetworkStats_Port* _internal_add_ports();
  public:
  const ::CMsgServerNetworkStats_Port& ports(int index) const;
  ::CMsgServerNetworkStats_Port* add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Port >&
      ports() const;

  // repeated .CMsgServerNetworkStats.Player players = 30;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgServerNetworkStats_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Player >*
      mutable_players();
  private:
  const ::CMsgServerNetworkStats_Player& _internal_players(int index) const;
  ::CMsgServerNetworkStats_Player* _internal_add_players();
  public:
  const ::CMsgServerNetworkStats_Player& players(int index) const;
  ::CMsgServerNetworkStats_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Player >&
      players() const;

  // optional bool dedicated = 1;
  bool has_dedicated() const;
  private:
  bool _internal_has_dedicated() const;
  public:
  void clear_dedicated();
  bool dedicated() const;
  void set_dedicated(bool value);
  private:
  bool _internal_dedicated() const;
  void _internal_set_dedicated(bool value);
  public:

  // optional int32 cpu_usage = 2;
  bool has_cpu_usage() const;
  private:
  bool _internal_has_cpu_usage() const;
  public:
  void clear_cpu_usage();
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_usage() const;
  void set_cpu_usage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cpu_usage() const;
  void _internal_set_cpu_usage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 memory_used_mb = 3;
  bool has_memory_used_mb() const;
  private:
  bool _internal_has_memory_used_mb() const;
  public:
  void clear_memory_used_mb();
  ::PROTOBUF_NAMESPACE_ID::int32 memory_used_mb() const;
  void set_memory_used_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory_used_mb() const;
  void _internal_set_memory_used_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 memory_free_mb = 4;
  bool has_memory_free_mb() const;
  private:
  bool _internal_has_memory_free_mb() const;
  public:
  void clear_memory_free_mb();
  ::PROTOBUF_NAMESPACE_ID::int32 memory_free_mb() const;
  void set_memory_free_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memory_free_mb() const;
  void _internal_set_memory_free_mb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 uptime = 5;
  bool has_uptime() const;
  private:
  bool _internal_has_uptime() const;
  public:
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int32 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 spawn_count = 6;
  bool has_spawn_count() const;
  private:
  bool _internal_has_spawn_count() const;
  public:
  void clear_spawn_count();
  ::PROTOBUF_NAMESPACE_ID::int32 spawn_count() const;
  void set_spawn_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spawn_count() const;
  void _internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_clients = 8;
  bool has_num_clients() const;
  private:
  bool _internal_has_num_clients() const;
  public:
  void clear_num_clients();
  ::PROTOBUF_NAMESPACE_ID::int32 num_clients() const;
  void set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_clients() const;
  void _internal_set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_bots = 9;
  bool has_num_bots() const;
  private:
  bool _internal_has_num_bots() const;
  public:
  void clear_num_bots();
  ::PROTOBUF_NAMESPACE_ID::int32 num_bots() const;
  void set_num_bots(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_bots() const;
  void _internal_set_num_bots(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_spectators = 10;
  bool has_num_spectators() const;
  private:
  bool _internal_has_num_spectators() const;
  public:
  void clear_num_spectators();
  ::PROTOBUF_NAMESPACE_ID::int32 num_spectators() const;
  void set_num_spectators(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_spectators() const;
  void _internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 num_tv_relays = 11;
  bool has_num_tv_relays() const;
  private:
  bool _internal_has_num_tv_relays() const;
  public:
  void clear_num_tv_relays();
  ::PROTOBUF_NAMESPACE_ID::int32 num_tv_relays() const;
  void set_num_tv_relays(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_tv_relays() const;
  void _internal_set_num_tv_relays(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float fps = 12;
  bool has_fps() const;
  private:
  bool _internal_has_fps() const;
  public:
  void clear_fps();
  float fps() const;
  void set_fps(float value);
  private:
  float _internal_fps() const;
  void _internal_set_fps(float value);
  public:

  // optional float avg_latency_out = 18;
  bool has_avg_latency_out() const;
  private:
  bool _internal_has_avg_latency_out() const;
  public:
  void clear_avg_latency_out();
  float avg_latency_out() const;
  void set_avg_latency_out(float value);
  private:
  float _internal_avg_latency_out() const;
  void _internal_set_avg_latency_out(float value);
  public:

  // optional float avg_latency_in = 19;
  bool has_avg_latency_in() const;
  private:
  bool _internal_has_avg_latency_in() const;
  public:
  void clear_avg_latency_in();
  float avg_latency_in() const;
  void set_avg_latency_in(float value);
  private:
  float _internal_avg_latency_in() const;
  void _internal_set_avg_latency_in(float value);
  public:

  // optional float avg_packets_out = 20;
  bool has_avg_packets_out() const;
  private:
  bool _internal_has_avg_packets_out() const;
  public:
  void clear_avg_packets_out();
  float avg_packets_out() const;
  void set_avg_packets_out(float value);
  private:
  float _internal_avg_packets_out() const;
  void _internal_set_avg_packets_out(float value);
  public:

  // optional float avg_packets_in = 21;
  bool has_avg_packets_in() const;
  private:
  bool _internal_has_avg_packets_in() const;
  public:
  void clear_avg_packets_in();
  float avg_packets_in() const;
  void set_avg_packets_in(float value);
  private:
  float _internal_avg_packets_in() const;
  void _internal_set_avg_packets_in(float value);
  public:

  // optional float avg_loss_out = 22;
  bool has_avg_loss_out() const;
  private:
  bool _internal_has_avg_loss_out() const;
  public:
  void clear_avg_loss_out();
  float avg_loss_out() const;
  void set_avg_loss_out(float value);
  private:
  float _internal_avg_loss_out() const;
  void _internal_set_avg_loss_out(float value);
  public:

  // optional float avg_loss_in = 23;
  bool has_avg_loss_in() const;
  private:
  bool _internal_has_avg_loss_in() const;
  public:
  void clear_avg_loss_in();
  float avg_loss_in() const;
  void set_avg_loss_in(float value);
  private:
  float _internal_avg_loss_in() const;
  void _internal_set_avg_loss_in(float value);
  public:

  // optional float avg_data_out = 24;
  bool has_avg_data_out() const;
  private:
  bool _internal_has_avg_data_out() const;
  public:
  void clear_avg_data_out();
  float avg_data_out() const;
  void set_avg_data_out(float value);
  private:
  float _internal_avg_data_out() const;
  void _internal_set_avg_data_out(float value);
  public:

  // optional uint64 total_data_in = 26;
  bool has_total_data_in() const;
  private:
  bool _internal_has_total_data_in() const;
  public:
  void clear_total_data_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_data_in() const;
  void set_total_data_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_data_in() const;
  void _internal_set_total_data_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float avg_data_in = 25;
  bool has_avg_data_in() const;
  private:
  bool _internal_has_avg_data_in() const;
  public:
  void clear_avg_data_in();
  float avg_data_in() const;
  void set_avg_data_in(float value);
  private:
  float _internal_avg_data_in() const;
  void _internal_set_avg_data_in(float value);
  public:

  // optional uint64 total_packets_in = 27;
  bool has_total_packets_in() const;
  private:
  bool _internal_has_total_packets_in() const;
  public:
  void clear_total_packets_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_packets_in() const;
  void set_total_packets_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_packets_in() const;
  void _internal_set_total_packets_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 total_data_out = 28;
  bool has_total_data_out() const;
  private:
  bool _internal_has_total_data_out() const;
  public:
  void clear_total_data_out();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_data_out() const;
  void set_total_data_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_data_out() const;
  void _internal_set_total_data_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 total_packets_out = 29;
  bool has_total_packets_out() const;
  private:
  bool _internal_has_total_packets_out() const;
  public:
  void clear_total_packets_out();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_packets_out() const;
  void set_total_packets_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_packets_out() const;
  void _internal_set_total_packets_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerNetworkStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Port > ports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Player > players_;
  bool dedicated_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpu_usage_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_used_mb_;
  ::PROTOBUF_NAMESPACE_ID::int32 memory_free_mb_;
  ::PROTOBUF_NAMESPACE_ID::int32 uptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 spawn_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_clients_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_bots_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_spectators_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_tv_relays_;
  float fps_;
  float avg_latency_out_;
  float avg_latency_in_;
  float avg_packets_out_;
  float avg_packets_in_;
  float avg_loss_out_;
  float avg_loss_in_;
  float avg_data_out_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_data_in_;
  float avg_data_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_packets_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_data_out_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_packets_out_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCLCMsg_ClientInfo

// optional fixed32 send_table_crc = 1;
inline bool CCLCMsg_ClientInfo::_internal_has_send_table_crc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_send_table_crc() const {
  return _internal_has_send_table_crc();
}
inline void CCLCMsg_ClientInfo::clear_send_table_crc() {
  send_table_crc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_send_table_crc() const {
  return send_table_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::send_table_crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.send_table_crc)
  return _internal_send_table_crc();
}
inline void CCLCMsg_ClientInfo::_internal_set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  send_table_crc_ = value;
}
inline void CCLCMsg_ClientInfo::set_send_table_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_send_table_crc(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.send_table_crc)
}

// optional uint32 server_count = 2;
inline bool CCLCMsg_ClientInfo::_internal_has_server_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_server_count() const {
  return _internal_has_server_count();
}
inline void CCLCMsg_ClientInfo::clear_server_count() {
  server_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_server_count() const {
  return server_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.server_count)
  return _internal_server_count();
}
inline void CCLCMsg_ClientInfo::_internal_set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  server_count_ = value;
}
inline void CCLCMsg_ClientInfo::set_server_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_count(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.server_count)
}

// optional bool is_hltv = 3;
inline bool CCLCMsg_ClientInfo::_internal_has_is_hltv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_is_hltv() const {
  return _internal_has_is_hltv();
}
inline void CCLCMsg_ClientInfo::clear_is_hltv() {
  is_hltv_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CCLCMsg_ClientInfo::_internal_is_hltv() const {
  return is_hltv_;
}
inline bool CCLCMsg_ClientInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.is_hltv)
  return _internal_is_hltv();
}
inline void CCLCMsg_ClientInfo::_internal_set_is_hltv(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_hltv_ = value;
}
inline void CCLCMsg_ClientInfo::set_is_hltv(bool value) {
  _internal_set_is_hltv(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.is_hltv)
}

// optional uint32 friends_id = 5;
inline bool CCLCMsg_ClientInfo::_internal_has_friends_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_friends_id() const {
  return _internal_has_friends_id();
}
inline void CCLCMsg_ClientInfo::clear_friends_id() {
  friends_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::_internal_friends_id() const {
  return friends_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ClientInfo::friends_id() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_id)
  return _internal_friends_id();
}
inline void CCLCMsg_ClientInfo::_internal_set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  friends_id_ = value;
}
inline void CCLCMsg_ClientInfo::set_friends_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_friends_id(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_id)
}

// optional string friends_name = 6;
inline bool CCLCMsg_ClientInfo::_internal_has_friends_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_ClientInfo::has_friends_name() const {
  return _internal_has_friends_name();
}
inline void CCLCMsg_ClientInfo::clear_friends_name() {
  friends_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_ClientInfo::friends_name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientInfo.friends_name)
  return _internal_friends_name();
}
inline void CCLCMsg_ClientInfo::set_friends_name(const std::string& value) {
  _internal_set_friends_name(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientInfo.friends_name)
}
inline std::string* CCLCMsg_ClientInfo::mutable_friends_name() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_ClientInfo.friends_name)
  return _internal_mutable_friends_name();
}
inline const std::string& CCLCMsg_ClientInfo::_internal_friends_name() const {
  return friends_name_.Get();
}
inline void CCLCMsg_ClientInfo::_internal_set_friends_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  friends_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_ClientInfo::set_friends_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  friends_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_ClientInfo.friends_name)
}
inline void CCLCMsg_ClientInfo::set_friends_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  friends_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_ClientInfo.friends_name)
}
inline void CCLCMsg_ClientInfo::set_friends_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  friends_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_ClientInfo.friends_name)
}
inline std::string* CCLCMsg_ClientInfo::_internal_mutable_friends_name() {
  _has_bits_[0] |= 0x00000001u;
  return friends_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_ClientInfo::release_friends_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_ClientInfo.friends_name)
  if (!_internal_has_friends_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return friends_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_ClientInfo::set_allocated_friends_name(std::string* friends_name) {
  if (friends_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  friends_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friends_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_ClientInfo.friends_name)
}

// -------------------------------------------------------------------

// CCLCMsg_Move

// optional bytes data = 3;
inline bool CCLCMsg_Move::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_Move::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_Move::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.data)
  return _internal_data();
}
inline void CCLCMsg_Move::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.data)
}
inline std::string* CCLCMsg_Move::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_Move.data)
  return _internal_mutable_data();
}
inline const std::string& CCLCMsg_Move::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_Move::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_Move::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_Move.data)
}
inline void CCLCMsg_Move::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_Move.data)
}
inline void CCLCMsg_Move::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_Move.data)
}
inline std::string* CCLCMsg_Move::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_Move::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_Move.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_Move::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_Move.data)
}

// optional uint32 command_number = 4;
inline bool CCLCMsg_Move::_internal_has_command_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_command_number() const {
  return _internal_has_command_number();
}
inline void CCLCMsg_Move::clear_command_number() {
  command_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::_internal_command_number() const {
  return command_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::command_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.command_number)
  return _internal_command_number();
}
inline void CCLCMsg_Move::_internal_set_command_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  command_number_ = value;
}
inline void CCLCMsg_Move::set_command_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_number(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.command_number)
}

// optional uint32 num_commands = 5;
inline bool CCLCMsg_Move::_internal_has_num_commands() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_Move::has_num_commands() const {
  return _internal_has_num_commands();
}
inline void CCLCMsg_Move::clear_num_commands() {
  num_commands_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::_internal_num_commands() const {
  return num_commands_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_Move::num_commands() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_Move.num_commands)
  return _internal_num_commands();
}
inline void CCLCMsg_Move::_internal_set_num_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_commands_ = value;
}
inline void CCLCMsg_Move::set_num_commands(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_commands(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_Move.num_commands)
}

// -------------------------------------------------------------------

// CMsgVoiceAudio

// optional .VoiceDataFormat_t format = 1 [default = VOICEDATA_FORMAT_STEAM];
inline bool CMsgVoiceAudio::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_format() const {
  return _internal_has_format();
}
inline void CMsgVoiceAudio::clear_format() {
  format_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::VoiceDataFormat_t CMsgVoiceAudio::_internal_format() const {
  return static_cast< ::VoiceDataFormat_t >(format_);
}
inline ::VoiceDataFormat_t CMsgVoiceAudio::format() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.format)
  return _internal_format();
}
inline void CMsgVoiceAudio::_internal_set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  format_ = value;
}
inline void CMsgVoiceAudio::set_format(::VoiceDataFormat_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.format)
}

// optional bytes voice_data = 2;
inline bool CMsgVoiceAudio::_internal_has_voice_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_voice_data() const {
  return _internal_has_voice_data();
}
inline void CMsgVoiceAudio::clear_voice_data() {
  voice_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgVoiceAudio::voice_data() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.voice_data)
  return _internal_voice_data();
}
inline void CMsgVoiceAudio::set_voice_data(const std::string& value) {
  _internal_set_voice_data(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.voice_data)
}
inline std::string* CMsgVoiceAudio::mutable_voice_data() {
  // @@protoc_insertion_point(field_mutable:CMsgVoiceAudio.voice_data)
  return _internal_mutable_voice_data();
}
inline const std::string& CMsgVoiceAudio::_internal_voice_data() const {
  return voice_data_.Get();
}
inline void CMsgVoiceAudio::_internal_set_voice_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgVoiceAudio::set_voice_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgVoiceAudio.voice_data)
}
inline void CMsgVoiceAudio::set_voice_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgVoiceAudio.voice_data)
}
inline void CMsgVoiceAudio::set_voice_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgVoiceAudio.voice_data)
}
inline std::string* CMsgVoiceAudio::_internal_mutable_voice_data() {
  _has_bits_[0] |= 0x00000001u;
  return voice_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgVoiceAudio::release_voice_data() {
  // @@protoc_insertion_point(field_release:CMsgVoiceAudio.voice_data)
  if (!_internal_has_voice_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return voice_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgVoiceAudio::set_allocated_voice_data(std::string* voice_data) {
  if (voice_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  voice_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voice_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgVoiceAudio.voice_data)
}

// optional int32 sequence_bytes = 3;
inline bool CMsgVoiceAudio::_internal_has_sequence_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_sequence_bytes() const {
  return _internal_has_sequence_bytes();
}
inline void CMsgVoiceAudio::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgVoiceAudio::_internal_sequence_bytes() const {
  return sequence_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgVoiceAudio::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.sequence_bytes)
  return _internal_sequence_bytes();
}
inline void CMsgVoiceAudio::_internal_set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sequence_bytes_ = value;
}
inline void CMsgVoiceAudio::set_sequence_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_bytes(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.sequence_bytes)
}

// optional uint32 section_number = 4;
inline bool CMsgVoiceAudio::_internal_has_section_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_section_number() const {
  return _internal_has_section_number();
}
inline void CMsgVoiceAudio::clear_section_number() {
  section_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::_internal_section_number() const {
  return section_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::section_number() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.section_number)
  return _internal_section_number();
}
inline void CMsgVoiceAudio::_internal_set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  section_number_ = value;
}
inline void CMsgVoiceAudio::set_section_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section_number(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.section_number)
}

// optional uint32 sample_rate = 5;
inline bool CMsgVoiceAudio::_internal_has_sample_rate() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_sample_rate() const {
  return _internal_has_sample_rate();
}
inline void CMsgVoiceAudio::clear_sample_rate() {
  sample_rate_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::_internal_sample_rate() const {
  return sample_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::sample_rate() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.sample_rate)
  return _internal_sample_rate();
}
inline void CMsgVoiceAudio::_internal_set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sample_rate_ = value;
}
inline void CMsgVoiceAudio::set_sample_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.sample_rate)
}

// optional uint32 uncompressed_sample_offset = 6;
inline bool CMsgVoiceAudio::_internal_has_uncompressed_sample_offset() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgVoiceAudio::has_uncompressed_sample_offset() const {
  return _internal_has_uncompressed_sample_offset();
}
inline void CMsgVoiceAudio::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::_internal_uncompressed_sample_offset() const {
  return uncompressed_sample_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgVoiceAudio::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CMsgVoiceAudio.uncompressed_sample_offset)
  return _internal_uncompressed_sample_offset();
}
inline void CMsgVoiceAudio::_internal_set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  uncompressed_sample_offset_ = value;
}
inline void CMsgVoiceAudio::set_uncompressed_sample_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uncompressed_sample_offset(value);
  // @@protoc_insertion_point(field_set:CMsgVoiceAudio.uncompressed_sample_offset)
}

// -------------------------------------------------------------------

// CCLCMsg_VoiceData

// optional .CMsgVoiceAudio audio = 1;
inline bool CCLCMsg_VoiceData::_internal_has_audio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || audio_ != nullptr);
  return value;
}
inline bool CCLCMsg_VoiceData::has_audio() const {
  return _internal_has_audio();
}
inline void CCLCMsg_VoiceData::clear_audio() {
  if (audio_ != nullptr) audio_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVoiceAudio& CCLCMsg_VoiceData::_internal_audio() const {
  const ::CMsgVoiceAudio* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVoiceAudio&>(
      ::_CMsgVoiceAudio_default_instance_);
}
inline const ::CMsgVoiceAudio& CCLCMsg_VoiceData::audio() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.audio)
  return _internal_audio();
}
inline void CCLCMsg_VoiceData::unsafe_arena_set_allocated_audio(
    ::CMsgVoiceAudio* audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCLCMsg_VoiceData.audio)
}
inline ::CMsgVoiceAudio* CCLCMsg_VoiceData::release_audio() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVoiceAudio* CCLCMsg_VoiceData::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:CCLCMsg_VoiceData.audio)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::CMsgVoiceAudio* CCLCMsg_VoiceData::_internal_mutable_audio() {
  _has_bits_[0] |= 0x00000001u;
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVoiceAudio>(GetArena());
    audio_ = p;
  }
  return audio_;
}
inline ::CMsgVoiceAudio* CCLCMsg_VoiceData::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_VoiceData.audio)
  return _internal_mutable_audio();
}
inline void CCLCMsg_VoiceData::set_allocated_audio(::CMsgVoiceAudio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_VoiceData.audio)
}

// optional fixed64 xuid = 2;
inline bool CCLCMsg_VoiceData::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_xuid() const {
  return _internal_has_xuid();
}
inline void CCLCMsg_VoiceData::clear_xuid() {
  xuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCLCMsg_VoiceData::_internal_xuid() const {
  return xuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCLCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.xuid)
  return _internal_xuid();
}
inline void CCLCMsg_VoiceData::_internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  xuid_ = value;
}
inline void CCLCMsg_VoiceData::set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.xuid)
}

// optional uint32 tick = 3;
inline bool CCLCMsg_VoiceData::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_tick() const {
  return _internal_has_tick();
}
inline void CCLCMsg_VoiceData::clear_tick() {
  tick_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_VoiceData::tick() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.tick)
  return _internal_tick();
}
inline void CCLCMsg_VoiceData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tick_ = value;
}
inline void CCLCMsg_VoiceData::set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.tick)
}

// -------------------------------------------------------------------

// CCLCMsg_BaselineAck

// optional int32 baseline_tick = 1;
inline bool CCLCMsg_BaselineAck::_internal_has_baseline_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_BaselineAck::has_baseline_tick() const {
  return _internal_has_baseline_tick();
}
inline void CCLCMsg_BaselineAck::clear_baseline_tick() {
  baseline_tick_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::_internal_baseline_tick() const {
  return baseline_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::baseline_tick() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_tick)
  return _internal_baseline_tick();
}
inline void CCLCMsg_BaselineAck::_internal_set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  baseline_tick_ = value;
}
inline void CCLCMsg_BaselineAck::set_baseline_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline_tick(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_tick)
}

// optional int32 baseline_nr = 2;
inline bool CCLCMsg_BaselineAck::_internal_has_baseline_nr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_BaselineAck::has_baseline_nr() const {
  return _internal_has_baseline_nr();
}
inline void CCLCMsg_BaselineAck::clear_baseline_nr() {
  baseline_nr_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::_internal_baseline_nr() const {
  return baseline_nr_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_BaselineAck::baseline_nr() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_BaselineAck.baseline_nr)
  return _internal_baseline_nr();
}
inline void CCLCMsg_BaselineAck::_internal_set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  baseline_nr_ = value;
}
inline void CCLCMsg_BaselineAck::set_baseline_nr(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline_nr(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_BaselineAck.baseline_nr)
}

// -------------------------------------------------------------------

// CCLCMsg_ListenEvents

// repeated fixed32 event_mask = 1;
inline int CCLCMsg_ListenEvents::_internal_event_mask_size() const {
  return event_mask_.size();
}
inline int CCLCMsg_ListenEvents::event_mask_size() const {
  return _internal_event_mask_size();
}
inline void CCLCMsg_ListenEvents::clear_event_mask() {
  event_mask_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ListenEvents::_internal_event_mask(int index) const {
  return event_mask_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_ListenEvents::event_mask(int index) const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ListenEvents.event_mask)
  return _internal_event_mask(index);
}
inline void CCLCMsg_ListenEvents::set_event_mask(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  event_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ListenEvents.event_mask)
}
inline void CCLCMsg_ListenEvents::_internal_add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  event_mask_.Add(value);
}
inline void CCLCMsg_ListenEvents::add_event_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_event_mask(value);
  // @@protoc_insertion_point(field_add:CCLCMsg_ListenEvents.event_mask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ListenEvents::_internal_event_mask() const {
  return event_mask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CCLCMsg_ListenEvents::event_mask() const {
  // @@protoc_insertion_point(field_list:CCLCMsg_ListenEvents.event_mask)
  return _internal_event_mask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ListenEvents::_internal_mutable_event_mask() {
  return &event_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CCLCMsg_ListenEvents::mutable_event_mask() {
  // @@protoc_insertion_point(field_mutable_list:CCLCMsg_ListenEvents.event_mask)
  return _internal_mutable_event_mask();
}

// -------------------------------------------------------------------

// CCLCMsg_RespondCvarValue

// optional int32 cookie = 1;
inline bool CCLCMsg_RespondCvarValue::_internal_has_cookie() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_cookie() const {
  return _internal_has_cookie();
}
inline void CCLCMsg_RespondCvarValue::clear_cookie() {
  cookie_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::_internal_cookie() const {
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.cookie)
  return _internal_cookie();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  cookie_ = value;
}
inline void CCLCMsg_RespondCvarValue::set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.cookie)
}

// optional int32 status_code = 2;
inline bool CCLCMsg_RespondCvarValue::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_status_code() const {
  return _internal_has_status_code();
}
inline void CCLCMsg_RespondCvarValue::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RespondCvarValue::status_code() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.status_code)
  return _internal_status_code();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_code_ = value;
}
inline void CCLCMsg_RespondCvarValue::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.status_code)
}

// optional string name = 3;
inline bool CCLCMsg_RespondCvarValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_name() const {
  return _internal_has_name();
}
inline void CCLCMsg_RespondCvarValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_RespondCvarValue::name() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.name)
  return _internal_name();
}
inline void CCLCMsg_RespondCvarValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.name)
}
inline std::string* CCLCMsg_RespondCvarValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.name)
  return _internal_mutable_name();
}
inline const std::string& CCLCMsg_RespondCvarValue::_internal_name() const {
  return name_.Get();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_RespondCvarValue::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_RespondCvarValue.name)
}
inline void CCLCMsg_RespondCvarValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_RespondCvarValue.name)
}
inline void CCLCMsg_RespondCvarValue::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_RespondCvarValue.name)
}
inline std::string* CCLCMsg_RespondCvarValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_RespondCvarValue::release_name() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_RespondCvarValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.name)
}

// optional string value = 4;
inline bool CCLCMsg_RespondCvarValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_RespondCvarValue::has_value() const {
  return _internal_has_value();
}
inline void CCLCMsg_RespondCvarValue::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCLCMsg_RespondCvarValue::value() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RespondCvarValue.value)
  return _internal_value();
}
inline void CCLCMsg_RespondCvarValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RespondCvarValue.value)
}
inline std::string* CCLCMsg_RespondCvarValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RespondCvarValue.value)
  return _internal_mutable_value();
}
inline const std::string& CCLCMsg_RespondCvarValue::_internal_value() const {
  return value_.Get();
}
inline void CCLCMsg_RespondCvarValue::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_RespondCvarValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_RespondCvarValue.value)
}
inline void CCLCMsg_RespondCvarValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_RespondCvarValue.value)
}
inline void CCLCMsg_RespondCvarValue::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_RespondCvarValue.value)
}
inline std::string* CCLCMsg_RespondCvarValue::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_RespondCvarValue::release_value() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RespondCvarValue.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_RespondCvarValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RespondCvarValue.value)
}

// -------------------------------------------------------------------

// CCLCMsg_FileCRCCheck

// optional int32 code_path = 1;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_path() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_path() const {
  return _internal_has_code_path();
}
inline void CCLCMsg_FileCRCCheck::clear_code_path() {
  code_path_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_code_path() const {
  return code_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::code_path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_path)
  return _internal_code_path();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  code_path_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code_path(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_path)
}

// optional string path = 2;
inline bool CCLCMsg_FileCRCCheck::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_path() const {
  return _internal_has_path();
}
inline void CCLCMsg_FileCRCCheck::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_FileCRCCheck::path() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.path)
  return _internal_path();
}
inline void CCLCMsg_FileCRCCheck::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.path)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_path() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.path)
  return _internal_mutable_path();
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_path() const {
  return path_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_FileCRCCheck::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_FileCRCCheck.path)
}
inline void CCLCMsg_FileCRCCheck::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_FileCRCCheck.path)
}
inline void CCLCMsg_FileCRCCheck::set_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_FileCRCCheck.path)
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_FileCRCCheck::release_path() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_FileCRCCheck::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.path)
}

// optional int32 code_filename = 3;
inline bool CCLCMsg_FileCRCCheck::_internal_has_code_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_code_filename() const {
  return _internal_has_code_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_code_filename() {
  code_filename_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::_internal_code_filename() const {
  return code_filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_FileCRCCheck::code_filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.code_filename)
  return _internal_code_filename();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  code_filename_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_code_filename(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code_filename(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.code_filename)
}

// optional string filename = 4;
inline bool CCLCMsg_FileCRCCheck::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_filename() const {
  return _internal_has_filename();
}
inline void CCLCMsg_FileCRCCheck::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCLCMsg_FileCRCCheck::filename() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.filename)
  return _internal_filename();
}
inline void CCLCMsg_FileCRCCheck::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.filename)
}
inline std::string* CCLCMsg_FileCRCCheck::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_FileCRCCheck.filename)
  return _internal_mutable_filename();
}
inline const std::string& CCLCMsg_FileCRCCheck::_internal_filename() const {
  return filename_.Get();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_FileCRCCheck::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_FileCRCCheck.filename)
}
inline void CCLCMsg_FileCRCCheck::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_FileCRCCheck.filename)
}
inline void CCLCMsg_FileCRCCheck::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_FileCRCCheck.filename)
}
inline std::string* CCLCMsg_FileCRCCheck::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_FileCRCCheck::release_filename() {
  // @@protoc_insertion_point(field_release:CCLCMsg_FileCRCCheck.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_FileCRCCheck::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_FileCRCCheck.filename)
}

// optional fixed32 crc = 5;
inline bool CCLCMsg_FileCRCCheck::_internal_has_crc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_FileCRCCheck::has_crc() const {
  return _internal_has_crc();
}
inline void CCLCMsg_FileCRCCheck::clear_crc() {
  crc_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_FileCRCCheck::_internal_crc() const {
  return crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCLCMsg_FileCRCCheck::crc() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_FileCRCCheck.crc)
  return _internal_crc();
}
inline void CCLCMsg_FileCRCCheck::_internal_set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  crc_ = value;
}
inline void CCLCMsg_FileCRCCheck::set_crc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_FileCRCCheck.crc)
}

// -------------------------------------------------------------------

// CCLCMsg_LoadingProgress

// optional int32 progress = 1;
inline bool CCLCMsg_LoadingProgress::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_LoadingProgress::has_progress() const {
  return _internal_has_progress();
}
inline void CCLCMsg_LoadingProgress::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_LoadingProgress::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_LoadingProgress::progress() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_LoadingProgress.progress)
  return _internal_progress();
}
inline void CCLCMsg_LoadingProgress::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void CCLCMsg_LoadingProgress::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_LoadingProgress.progress)
}

// -------------------------------------------------------------------

// CCLCMsg_SplitPlayerConnect

// optional string playername = 1;
inline bool CCLCMsg_SplitPlayerConnect::_internal_has_playername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_SplitPlayerConnect::has_playername() const {
  return _internal_has_playername();
}
inline void CCLCMsg_SplitPlayerConnect::clear_playername() {
  playername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_SplitPlayerConnect::playername() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_SplitPlayerConnect.playername)
  return _internal_playername();
}
inline void CCLCMsg_SplitPlayerConnect::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_SplitPlayerConnect.playername)
}
inline std::string* CCLCMsg_SplitPlayerConnect::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_SplitPlayerConnect.playername)
  return _internal_mutable_playername();
}
inline const std::string& CCLCMsg_SplitPlayerConnect::_internal_playername() const {
  return playername_.Get();
}
inline void CCLCMsg_SplitPlayerConnect::_internal_set_playername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_SplitPlayerConnect::set_playername(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  playername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_SplitPlayerConnect.playername)
}
inline void CCLCMsg_SplitPlayerConnect::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_SplitPlayerConnect.playername)
}
inline void CCLCMsg_SplitPlayerConnect::set_playername(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_SplitPlayerConnect.playername)
}
inline std::string* CCLCMsg_SplitPlayerConnect::_internal_mutable_playername() {
  _has_bits_[0] |= 0x00000001u;
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_SplitPlayerConnect::release_playername() {
  // @@protoc_insertion_point(field_release:CCLCMsg_SplitPlayerConnect.playername)
  if (!_internal_has_playername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return playername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_SplitPlayerConnect::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_SplitPlayerConnect.playername)
}

// -------------------------------------------------------------------

// CCLCMsg_ClientMessage

// optional int32 msg_type = 1;
inline bool CCLCMsg_ClientMessage::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_ClientMessage::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CCLCMsg_ClientMessage::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_ClientMessage::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_ClientMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientMessage.msg_type)
  return _internal_msg_type();
}
inline void CCLCMsg_ClientMessage::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_ = value;
}
inline void CCLCMsg_ClientMessage::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientMessage.msg_type)
}

// optional bytes data = 2;
inline bool CCLCMsg_ClientMessage::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_ClientMessage::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_ClientMessage::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_ClientMessage::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ClientMessage.data)
  return _internal_data();
}
inline void CCLCMsg_ClientMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ClientMessage.data)
}
inline std::string* CCLCMsg_ClientMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_ClientMessage.data)
  return _internal_mutable_data();
}
inline const std::string& CCLCMsg_ClientMessage::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_ClientMessage::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_ClientMessage::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_ClientMessage.data)
}
inline void CCLCMsg_ClientMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_ClientMessage.data)
}
inline void CCLCMsg_ClientMessage::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_ClientMessage.data)
}
inline std::string* CCLCMsg_ClientMessage::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_ClientMessage::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_ClientMessage.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_ClientMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_ClientMessage.data)
}

// -------------------------------------------------------------------

// CCLCMsg_SplitPlayerDisconnect

// optional int32 slot = 1;
inline bool CCLCMsg_SplitPlayerDisconnect::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_SplitPlayerDisconnect::has_slot() const {
  return _internal_has_slot();
}
inline void CCLCMsg_SplitPlayerDisconnect::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_SplitPlayerDisconnect::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_SplitPlayerDisconnect::slot() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_SplitPlayerDisconnect.slot)
  return _internal_slot();
}
inline void CCLCMsg_SplitPlayerDisconnect::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void CCLCMsg_SplitPlayerDisconnect::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_SplitPlayerDisconnect.slot)
}

// -------------------------------------------------------------------

// CCLCMsg_ServerStatus

// optional bool simplified = 1;
inline bool CCLCMsg_ServerStatus::_internal_has_simplified() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_ServerStatus::has_simplified() const {
  return _internal_has_simplified();
}
inline void CCLCMsg_ServerStatus::clear_simplified() {
  simplified_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CCLCMsg_ServerStatus::_internal_simplified() const {
  return simplified_;
}
inline bool CCLCMsg_ServerStatus::simplified() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_ServerStatus.simplified)
  return _internal_simplified();
}
inline void CCLCMsg_ServerStatus::_internal_set_simplified(bool value) {
  _has_bits_[0] |= 0x00000001u;
  simplified_ = value;
}
inline void CCLCMsg_ServerStatus::set_simplified(bool value) {
  _internal_set_simplified(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_ServerStatus.simplified)
}

// -------------------------------------------------------------------

// CCLCMsg_ServerPing

// -------------------------------------------------------------------

// CCLCMsg_RequestPause

// optional .RequestPause_t pause_type = 1 [default = RP_PAUSE];
inline bool CCLCMsg_RequestPause::_internal_has_pause_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_RequestPause::has_pause_type() const {
  return _internal_has_pause_type();
}
inline void CCLCMsg_RequestPause::clear_pause_type() {
  pause_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::RequestPause_t CCLCMsg_RequestPause::_internal_pause_type() const {
  return static_cast< ::RequestPause_t >(pause_type_);
}
inline ::RequestPause_t CCLCMsg_RequestPause::pause_type() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RequestPause.pause_type)
  return _internal_pause_type();
}
inline void CCLCMsg_RequestPause::_internal_set_pause_type(::RequestPause_t value) {
  assert(::RequestPause_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  pause_type_ = value;
}
inline void CCLCMsg_RequestPause::set_pause_type(::RequestPause_t value) {
  _internal_set_pause_type(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RequestPause.pause_type)
}

// optional int32 pause_group = 2;
inline bool CCLCMsg_RequestPause::_internal_has_pause_group() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_RequestPause::has_pause_group() const {
  return _internal_has_pause_group();
}
inline void CCLCMsg_RequestPause::clear_pause_group() {
  pause_group_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RequestPause::_internal_pause_group() const {
  return pause_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCLCMsg_RequestPause::pause_group() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RequestPause.pause_group)
  return _internal_pause_group();
}
inline void CCLCMsg_RequestPause::_internal_set_pause_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  pause_group_ = value;
}
inline void CCLCMsg_RequestPause::set_pause_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pause_group(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RequestPause.pause_group)
}

// -------------------------------------------------------------------

// CCLCMsg_CmdKeyValues

// optional bytes data = 1;
inline bool CCLCMsg_CmdKeyValues::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_CmdKeyValues::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_CmdKeyValues::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_CmdKeyValues::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_CmdKeyValues.data)
  return _internal_data();
}
inline void CCLCMsg_CmdKeyValues::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_CmdKeyValues.data)
}
inline std::string* CCLCMsg_CmdKeyValues::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_CmdKeyValues.data)
  return _internal_mutable_data();
}
inline const std::string& CCLCMsg_CmdKeyValues::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_CmdKeyValues::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_CmdKeyValues::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_CmdKeyValues.data)
}
inline void CCLCMsg_CmdKeyValues::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_CmdKeyValues.data)
}
inline void CCLCMsg_CmdKeyValues::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_CmdKeyValues.data)
}
inline std::string* CCLCMsg_CmdKeyValues::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_CmdKeyValues::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_CmdKeyValues.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_CmdKeyValues::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_CmdKeyValues.data)
}

// -------------------------------------------------------------------

// CCLCMsg_RconServerDetails

// optional bytes token = 1;
inline bool CCLCMsg_RconServerDetails::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_RconServerDetails::has_token() const {
  return _internal_has_token();
}
inline void CCLCMsg_RconServerDetails::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_RconServerDetails::token() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_RconServerDetails.token)
  return _internal_token();
}
inline void CCLCMsg_RconServerDetails::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_RconServerDetails.token)
}
inline std::string* CCLCMsg_RconServerDetails::mutable_token() {
  // @@protoc_insertion_point(field_mutable:CCLCMsg_RconServerDetails.token)
  return _internal_mutable_token();
}
inline const std::string& CCLCMsg_RconServerDetails::_internal_token() const {
  return token_.Get();
}
inline void CCLCMsg_RconServerDetails::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCLCMsg_RconServerDetails::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCLCMsg_RconServerDetails.token)
}
inline void CCLCMsg_RconServerDetails::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCLCMsg_RconServerDetails.token)
}
inline void CCLCMsg_RconServerDetails::set_token(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCLCMsg_RconServerDetails.token)
}
inline std::string* CCLCMsg_RconServerDetails::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCLCMsg_RconServerDetails::release_token() {
  // @@protoc_insertion_point(field_release:CCLCMsg_RconServerDetails.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCLCMsg_RconServerDetails::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_RconServerDetails.token)
}

// -------------------------------------------------------------------

// CSVCMsg_ServerInfo

// optional int32 protocol = 1;
inline bool CSVCMsg_ServerInfo::_internal_has_protocol() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_protocol() const {
  return _internal_has_protocol();
}
inline void CSVCMsg_ServerInfo::clear_protocol() {
  protocol_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_protocol() const {
  return protocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::protocol() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.protocol)
  return _internal_protocol();
}
inline void CSVCMsg_ServerInfo::_internal_set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  protocol_ = value;
}
inline void CSVCMsg_ServerInfo::set_protocol(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.protocol)
}

// optional int32 server_count = 2;
inline bool CSVCMsg_ServerInfo::_internal_has_server_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_server_count() const {
  return _internal_has_server_count();
}
inline void CSVCMsg_ServerInfo::clear_server_count() {
  server_count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_server_count() const {
  return server_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::server_count() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.server_count)
  return _internal_server_count();
}
inline void CSVCMsg_ServerInfo::_internal_set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  server_count_ = value;
}
inline void CSVCMsg_ServerInfo::set_server_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_count(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.server_count)
}

// optional bool is_dedicated = 3;
inline bool CSVCMsg_ServerInfo::_internal_has_is_dedicated() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_dedicated() const {
  return _internal_has_is_dedicated();
}
inline void CSVCMsg_ServerInfo::clear_is_dedicated() {
  is_dedicated_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_dedicated() const {
  return is_dedicated_;
}
inline bool CSVCMsg_ServerInfo::is_dedicated() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_dedicated)
  return _internal_is_dedicated();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_dedicated(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_dedicated_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_dedicated(bool value) {
  _internal_set_is_dedicated(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_dedicated)
}

// optional bool is_hltv = 4;
inline bool CSVCMsg_ServerInfo::_internal_has_is_hltv() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_is_hltv() const {
  return _internal_has_is_hltv();
}
inline void CSVCMsg_ServerInfo::clear_is_hltv() {
  is_hltv_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSVCMsg_ServerInfo::_internal_is_hltv() const {
  return is_hltv_;
}
inline bool CSVCMsg_ServerInfo::is_hltv() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.is_hltv)
  return _internal_is_hltv();
}
inline void CSVCMsg_ServerInfo::_internal_set_is_hltv(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_hltv_ = value;
}
inline void CSVCMsg_ServerInfo::set_is_hltv(bool value) {
  _internal_set_is_hltv(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.is_hltv)
}

// optional int32 c_os = 6;
inline bool CSVCMsg_ServerInfo::_internal_has_c_os() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_c_os() const {
  return _internal_has_c_os();
}
inline void CSVCMsg_ServerInfo::clear_c_os() {
  c_os_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_c_os() const {
  return c_os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::c_os() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.c_os)
  return _internal_c_os();
}
inline void CSVCMsg_ServerInfo::_internal_set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  c_os_ = value;
}
inline void CSVCMsg_ServerInfo::set_c_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c_os(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.c_os)
}

// optional int32 max_clients = 10;
inline bool CSVCMsg_ServerInfo::_internal_has_max_clients() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_max_clients() const {
  return _internal_has_max_clients();
}
inline void CSVCMsg_ServerInfo::clear_max_clients() {
  max_clients_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_max_clients() const {
  return max_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::max_clients() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_clients)
  return _internal_max_clients();
}
inline void CSVCMsg_ServerInfo::_internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_clients_ = value;
}
inline void CSVCMsg_ServerInfo::set_max_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_clients(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_clients)
}

// optional int32 max_classes = 11;
inline bool CSVCMsg_ServerInfo::_internal_has_max_classes() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_max_classes() const {
  return _internal_has_max_classes();
}
inline void CSVCMsg_ServerInfo::clear_max_classes() {
  max_classes_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_max_classes() const {
  return max_classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::max_classes() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.max_classes)
  return _internal_max_classes();
}
inline void CSVCMsg_ServerInfo::_internal_set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_classes_ = value;
}
inline void CSVCMsg_ServerInfo::set_max_classes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_classes(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.max_classes)
}

// optional int32 player_slot = 12;
inline bool CSVCMsg_ServerInfo::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CSVCMsg_ServerInfo::clear_player_slot() {
  player_slot_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::_internal_player_slot() const {
  return player_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ServerInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.player_slot)
  return _internal_player_slot();
}
inline void CSVCMsg_ServerInfo::_internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  player_slot_ = value;
}
inline void CSVCMsg_ServerInfo::set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.player_slot)
}

// optional float tick_interval = 13;
inline bool CSVCMsg_ServerInfo::_internal_has_tick_interval() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_tick_interval() const {
  return _internal_has_tick_interval();
}
inline void CSVCMsg_ServerInfo::clear_tick_interval() {
  tick_interval_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CSVCMsg_ServerInfo::_internal_tick_interval() const {
  return tick_interval_;
}
inline float CSVCMsg_ServerInfo::tick_interval() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.tick_interval)
  return _internal_tick_interval();
}
inline void CSVCMsg_ServerInfo::_internal_set_tick_interval(float value) {
  _has_bits_[0] |= 0x00008000u;
  tick_interval_ = value;
}
inline void CSVCMsg_ServerInfo::set_tick_interval(float value) {
  _internal_set_tick_interval(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.tick_interval)
}

// optional string game_dir = 14;
inline bool CSVCMsg_ServerInfo::_internal_has_game_dir() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_game_dir() const {
  return _internal_has_game_dir();
}
inline void CSVCMsg_ServerInfo::clear_game_dir() {
  game_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_ServerInfo::game_dir() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.game_dir)
  return _internal_game_dir();
}
inline void CSVCMsg_ServerInfo::set_game_dir(const std::string& value) {
  _internal_set_game_dir(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.game_dir)
}
inline std::string* CSVCMsg_ServerInfo::mutable_game_dir() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.game_dir)
  return _internal_mutable_game_dir();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_game_dir() const {
  return game_dir_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_game_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_game_dir(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  game_dir_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.game_dir)
}
inline void CSVCMsg_ServerInfo::set_game_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.game_dir)
}
inline void CSVCMsg_ServerInfo::set_game_dir(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  game_dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.game_dir)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_game_dir() {
  _has_bits_[0] |= 0x00000001u;
  return game_dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_game_dir() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.game_dir)
  if (!_internal_has_game_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_dir_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_game_dir(std::string* game_dir) {
  if (game_dir != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_dir,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.game_dir)
}

// optional string map_name = 15;
inline bool CSVCMsg_ServerInfo::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_map_name() const {
  return _internal_has_map_name();
}
inline void CSVCMsg_ServerInfo::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_ServerInfo::map_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.map_name)
  return _internal_map_name();
}
inline void CSVCMsg_ServerInfo::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.map_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_map_name() const {
  return map_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.map_name)
}
inline void CSVCMsg_ServerInfo::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.map_name)
}
inline void CSVCMsg_ServerInfo::set_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.map_name)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000002u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.map_name)
}

// optional string sky_name = 16;
inline bool CSVCMsg_ServerInfo::_internal_has_sky_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_sky_name() const {
  return _internal_has_sky_name();
}
inline void CSVCMsg_ServerInfo::clear_sky_name() {
  sky_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSVCMsg_ServerInfo::sky_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.sky_name)
  return _internal_sky_name();
}
inline void CSVCMsg_ServerInfo::set_sky_name(const std::string& value) {
  _internal_set_sky_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.sky_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_sky_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.sky_name)
  return _internal_mutable_sky_name();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_sky_name() const {
  return sky_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_sky_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sky_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_sky_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sky_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.sky_name)
}
inline void CSVCMsg_ServerInfo::set_sky_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sky_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.sky_name)
}
inline void CSVCMsg_ServerInfo::set_sky_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sky_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.sky_name)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_sky_name() {
  _has_bits_[0] |= 0x00000004u;
  return sky_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_sky_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.sky_name)
  if (!_internal_has_sky_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sky_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_sky_name(std::string* sky_name) {
  if (sky_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sky_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sky_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.sky_name)
}

// optional string host_name = 17;
inline bool CSVCMsg_ServerInfo::_internal_has_host_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_host_name() const {
  return _internal_has_host_name();
}
inline void CSVCMsg_ServerInfo::clear_host_name() {
  host_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSVCMsg_ServerInfo::host_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.host_name)
  return _internal_host_name();
}
inline void CSVCMsg_ServerInfo::set_host_name(const std::string& value) {
  _internal_set_host_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.host_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_host_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.host_name)
  return _internal_mutable_host_name();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  host_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.host_name)
}
inline void CSVCMsg_ServerInfo::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.host_name)
}
inline void CSVCMsg_ServerInfo::set_host_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  host_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.host_name)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_host_name() {
  _has_bits_[0] |= 0x00000008u;
  return host_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.host_name)
  if (!_internal_has_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return host_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  host_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.host_name)
}

// optional string addon_name = 18;
inline bool CSVCMsg_ServerInfo::_internal_has_addon_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_addon_name() const {
  return _internal_has_addon_name();
}
inline void CSVCMsg_ServerInfo::clear_addon_name() {
  addon_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CSVCMsg_ServerInfo::addon_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.addon_name)
  return _internal_addon_name();
}
inline void CSVCMsg_ServerInfo::set_addon_name(const std::string& value) {
  _internal_set_addon_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.addon_name)
}
inline std::string* CSVCMsg_ServerInfo::mutable_addon_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.addon_name)
  return _internal_mutable_addon_name();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_addon_name() const {
  return addon_name_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_addon_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_addon_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  addon_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.addon_name)
}
inline void CSVCMsg_ServerInfo::set_addon_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.addon_name)
}
inline void CSVCMsg_ServerInfo::set_addon_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.addon_name)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_addon_name() {
  _has_bits_[0] |= 0x00000010u;
  return addon_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_addon_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.addon_name)
  if (!_internal_has_addon_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return addon_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_addon_name(std::string* addon_name) {
  if (addon_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  addon_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addon_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.addon_name)
}

// optional .CSVCMsg_GameSessionConfiguration game_session_config = 19;
inline bool CSVCMsg_ServerInfo::_internal_has_game_session_config() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || game_session_config_ != nullptr);
  return value;
}
inline bool CSVCMsg_ServerInfo::has_game_session_config() const {
  return _internal_has_game_session_config();
}
inline const ::CSVCMsg_GameSessionConfiguration& CSVCMsg_ServerInfo::_internal_game_session_config() const {
  const ::CSVCMsg_GameSessionConfiguration* p = game_session_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSVCMsg_GameSessionConfiguration&>(
      ::_CSVCMsg_GameSessionConfiguration_default_instance_);
}
inline const ::CSVCMsg_GameSessionConfiguration& CSVCMsg_ServerInfo::game_session_config() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.game_session_config)
  return _internal_game_session_config();
}
inline void CSVCMsg_ServerInfo::unsafe_arena_set_allocated_game_session_config(
    ::CSVCMsg_GameSessionConfiguration* game_session_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_session_config_);
  }
  game_session_config_ = game_session_config;
  if (game_session_config) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_ServerInfo.game_session_config)
}
inline ::CSVCMsg_GameSessionConfiguration* CSVCMsg_ServerInfo::release_game_session_config() {
  _has_bits_[0] &= ~0x00000040u;
  ::CSVCMsg_GameSessionConfiguration* temp = game_session_config_;
  game_session_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSVCMsg_GameSessionConfiguration* CSVCMsg_ServerInfo::unsafe_arena_release_game_session_config() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.game_session_config)
  _has_bits_[0] &= ~0x00000040u;
  ::CSVCMsg_GameSessionConfiguration* temp = game_session_config_;
  game_session_config_ = nullptr;
  return temp;
}
inline ::CSVCMsg_GameSessionConfiguration* CSVCMsg_ServerInfo::_internal_mutable_game_session_config() {
  _has_bits_[0] |= 0x00000040u;
  if (game_session_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSVCMsg_GameSessionConfiguration>(GetArena());
    game_session_config_ = p;
  }
  return game_session_config_;
}
inline ::CSVCMsg_GameSessionConfiguration* CSVCMsg_ServerInfo::mutable_game_session_config() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.game_session_config)
  return _internal_mutable_game_session_config();
}
inline void CSVCMsg_ServerInfo::set_allocated_game_session_config(::CSVCMsg_GameSessionConfiguration* game_session_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_session_config_);
  }
  if (game_session_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_session_config)->GetArena();
    if (message_arena != submessage_arena) {
      game_session_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_session_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  game_session_config_ = game_session_config;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.game_session_config)
}

// optional bytes game_session_manifest = 20;
inline bool CSVCMsg_ServerInfo::_internal_has_game_session_manifest() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_ServerInfo::has_game_session_manifest() const {
  return _internal_has_game_session_manifest();
}
inline void CSVCMsg_ServerInfo::clear_game_session_manifest() {
  game_session_manifest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CSVCMsg_ServerInfo::game_session_manifest() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerInfo.game_session_manifest)
  return _internal_game_session_manifest();
}
inline void CSVCMsg_ServerInfo::set_game_session_manifest(const std::string& value) {
  _internal_set_game_session_manifest(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerInfo.game_session_manifest)
}
inline std::string* CSVCMsg_ServerInfo::mutable_game_session_manifest() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ServerInfo.game_session_manifest)
  return _internal_mutable_game_session_manifest();
}
inline const std::string& CSVCMsg_ServerInfo::_internal_game_session_manifest() const {
  return game_session_manifest_.Get();
}
inline void CSVCMsg_ServerInfo::_internal_set_game_session_manifest(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  game_session_manifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ServerInfo::set_game_session_manifest(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  game_session_manifest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ServerInfo.game_session_manifest)
}
inline void CSVCMsg_ServerInfo::set_game_session_manifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  game_session_manifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ServerInfo.game_session_manifest)
}
inline void CSVCMsg_ServerInfo::set_game_session_manifest(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  game_session_manifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ServerInfo.game_session_manifest)
}
inline std::string* CSVCMsg_ServerInfo::_internal_mutable_game_session_manifest() {
  _has_bits_[0] |= 0x00000020u;
  return game_session_manifest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ServerInfo::release_game_session_manifest() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ServerInfo.game_session_manifest)
  if (!_internal_has_game_session_manifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return game_session_manifest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ServerInfo::set_allocated_game_session_manifest(std::string* game_session_manifest) {
  if (game_session_manifest != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  game_session_manifest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_session_manifest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ServerInfo.game_session_manifest)
}

// -------------------------------------------------------------------

// CSVCMsg_ClassInfo_class_t

// optional int32 class_id = 1;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_class_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_class_id() const {
  return _internal_has_class_id();
}
inline void CSVCMsg_ClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ClassInfo_class_t::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_ClassInfo_class_t::class_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_id)
  return _internal_class_id();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  class_id_ = value;
}
inline void CSVCMsg_ClassInfo_class_t::set_class_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_id)
}

// optional string data_table_name = 2;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_data_table_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_data_table_name() const {
  return _internal_has_data_table_name();
}
inline void CSVCMsg_ClassInfo_class_t::clear_data_table_name() {
  data_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::data_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.data_table_name)
  return _internal_data_table_name();
}
inline void CSVCMsg_ClassInfo_class_t::set_data_table_name(const std::string& value) {
  _internal_set_data_table_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.data_table_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::mutable_data_table_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.data_table_name)
  return _internal_mutable_data_table_name();
}
inline const std::string& CSVCMsg_ClassInfo_class_t::_internal_data_table_name() const {
  return data_table_name_.Get();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_data_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ClassInfo_class_t::set_data_table_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ClassInfo.class_t.data_table_name)
}
inline void CSVCMsg_ClassInfo_class_t::set_data_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ClassInfo.class_t.data_table_name)
}
inline void CSVCMsg_ClassInfo_class_t::set_data_table_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ClassInfo.class_t.data_table_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::_internal_mutable_data_table_name() {
  _has_bits_[0] |= 0x00000001u;
  return data_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ClassInfo_class_t::release_data_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.data_table_name)
  if (!_internal_has_data_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ClassInfo_class_t::set_allocated_data_table_name(std::string* data_table_name) {
  if (data_table_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.data_table_name)
}

// optional string class_name = 3;
inline bool CSVCMsg_ClassInfo_class_t::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo_class_t::has_class_name() const {
  return _internal_has_class_name();
}
inline void CSVCMsg_ClassInfo_class_t::clear_class_name() {
  class_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_ClassInfo_class_t::class_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.class_t.class_name)
  return _internal_class_name();
}
inline void CSVCMsg_ClassInfo_class_t::set_class_name(const std::string& value) {
  _internal_set_class_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.class_t.class_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.class_t.class_name)
  return _internal_mutable_class_name();
}
inline const std::string& CSVCMsg_ClassInfo_class_t::_internal_class_name() const {
  return class_name_.Get();
}
inline void CSVCMsg_ClassInfo_class_t::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ClassInfo_class_t::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ClassInfo.class_t.class_name)
}
inline void CSVCMsg_ClassInfo_class_t::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ClassInfo.class_t.class_name)
}
inline void CSVCMsg_ClassInfo_class_t::set_class_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ClassInfo.class_t.class_name)
}
inline std::string* CSVCMsg_ClassInfo_class_t::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000002u;
  return class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ClassInfo_class_t::release_class_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClassInfo.class_t.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return class_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ClassInfo_class_t::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClassInfo.class_t.class_name)
}

// -------------------------------------------------------------------

// CSVCMsg_ClassInfo

// optional bool create_on_client = 1;
inline bool CSVCMsg_ClassInfo::_internal_has_create_on_client() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ClassInfo::has_create_on_client() const {
  return _internal_has_create_on_client();
}
inline void CSVCMsg_ClassInfo::clear_create_on_client() {
  create_on_client_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_ClassInfo::_internal_create_on_client() const {
  return create_on_client_;
}
inline bool CSVCMsg_ClassInfo::create_on_client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.create_on_client)
  return _internal_create_on_client();
}
inline void CSVCMsg_ClassInfo::_internal_set_create_on_client(bool value) {
  _has_bits_[0] |= 0x00000001u;
  create_on_client_ = value;
}
inline void CSVCMsg_ClassInfo::set_create_on_client(bool value) {
  _internal_set_create_on_client(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClassInfo.create_on_client)
}

// repeated .CSVCMsg_ClassInfo.class_t classes = 2;
inline int CSVCMsg_ClassInfo::_internal_classes_size() const {
  return classes_.size();
}
inline int CSVCMsg_ClassInfo::classes_size() const {
  return _internal_classes_size();
}
inline void CSVCMsg_ClassInfo::clear_classes() {
  classes_.Clear();
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClassInfo.classes)
  return classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >*
CSVCMsg_ClassInfo::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_ClassInfo.classes)
  return &classes_;
}
inline const ::CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline const ::CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo::classes(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClassInfo.classes)
  return _internal_classes(index);
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::_internal_add_classes() {
  return classes_.Add();
}
inline ::CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo::add_classes() {
  // @@protoc_insertion_point(field_add:CSVCMsg_ClassInfo.classes)
  return _internal_add_classes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_ClassInfo_class_t >&
CSVCMsg_ClassInfo::classes() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_ClassInfo.classes)
  return classes_;
}

// -------------------------------------------------------------------

// CSVCMsg_SetPause

// optional bool paused = 1;
inline bool CSVCMsg_SetPause::_internal_has_paused() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SetPause::has_paused() const {
  return _internal_has_paused();
}
inline void CSVCMsg_SetPause::clear_paused() {
  paused_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_SetPause::_internal_paused() const {
  return paused_;
}
inline bool CSVCMsg_SetPause::paused() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetPause.paused)
  return _internal_paused();
}
inline void CSVCMsg_SetPause::_internal_set_paused(bool value) {
  _has_bits_[0] |= 0x00000001u;
  paused_ = value;
}
inline void CSVCMsg_SetPause::set_paused(bool value) {
  _internal_set_paused(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SetPause.paused)
}

// -------------------------------------------------------------------

// CSVCMsg_VoiceInit

// optional int32 quality = 1;
inline bool CSVCMsg_VoiceInit::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_quality() const {
  return _internal_has_quality();
}
inline void CSVCMsg_VoiceInit::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::quality() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.quality)
  return _internal_quality();
}
inline void CSVCMsg_VoiceInit::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quality_ = value;
}
inline void CSVCMsg_VoiceInit::set_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.quality)
}

// optional string codec = 2;
inline bool CSVCMsg_VoiceInit::_internal_has_codec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_codec() const {
  return _internal_has_codec();
}
inline void CSVCMsg_VoiceInit::clear_codec() {
  codec_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_VoiceInit::codec() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.codec)
  return _internal_codec();
}
inline void CSVCMsg_VoiceInit::set_codec(const std::string& value) {
  _internal_set_codec(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.codec)
}
inline std::string* CSVCMsg_VoiceInit::mutable_codec() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceInit.codec)
  return _internal_mutable_codec();
}
inline const std::string& CSVCMsg_VoiceInit::_internal_codec() const {
  return codec_.Get();
}
inline void CSVCMsg_VoiceInit::_internal_set_codec(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_VoiceInit::set_codec(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_VoiceInit.codec)
}
inline void CSVCMsg_VoiceInit::set_codec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_VoiceInit.codec)
}
inline void CSVCMsg_VoiceInit::set_codec(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_VoiceInit.codec)
}
inline std::string* CSVCMsg_VoiceInit::_internal_mutable_codec() {
  _has_bits_[0] |= 0x00000001u;
  return codec_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_VoiceInit::release_codec() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceInit.codec)
  if (!_internal_has_codec()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return codec_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_VoiceInit::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  codec_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codec,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceInit.codec)
}

// optional int32 version = 3 [default = 0];
inline bool CSVCMsg_VoiceInit::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceInit::has_version() const {
  return _internal_has_version();
}
inline void CSVCMsg_VoiceInit::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceInit::version() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceInit.version)
  return _internal_version();
}
inline void CSVCMsg_VoiceInit::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
}
inline void CSVCMsg_VoiceInit::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceInit.version)
}

// -------------------------------------------------------------------

// CSVCMsg_Print

// optional string text = 1;
inline bool CSVCMsg_Print::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Print::has_text() const {
  return _internal_has_text();
}
inline void CSVCMsg_Print::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_Print::text() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Print.text)
  return _internal_text();
}
inline void CSVCMsg_Print::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Print.text)
}
inline std::string* CSVCMsg_Print::mutable_text() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Print.text)
  return _internal_mutable_text();
}
inline const std::string& CSVCMsg_Print::_internal_text() const {
  return text_.Get();
}
inline void CSVCMsg_Print::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_Print::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_Print.text)
}
inline void CSVCMsg_Print::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_Print.text)
}
inline void CSVCMsg_Print::set_text(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_Print.text)
}
inline std::string* CSVCMsg_Print::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_Print::release_text() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Print.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_Print::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Print.text)
}

// -------------------------------------------------------------------

// CSVCMsg_Sounds_sounddata_t

// optional sint32 origin_x = 1;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_x() const {
  return _internal_has_origin_x();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_x() {
  origin_x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_x() const {
  return origin_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_x() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_x)
  return _internal_origin_x();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  origin_x_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_x(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_x)
}

// optional sint32 origin_y = 2;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_y() const {
  return _internal_has_origin_y();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_y() {
  origin_y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_y() const {
  return origin_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_y() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_y)
  return _internal_origin_y();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  origin_y_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_y(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_y)
}

// optional sint32 origin_z = 3;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_origin_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_origin_z() const {
  return _internal_has_origin_z();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_origin_z() {
  origin_z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_origin_z() const {
  return origin_z_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::origin_z() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.origin_z)
  return _internal_origin_z();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  origin_z_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_origin_z(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_origin_z(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.origin_z)
}

// optional uint32 volume = 4;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_volume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_volume() const {
  return _internal_has_volume();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_volume() {
  volume_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::volume() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.volume)
  return _internal_volume();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  volume_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.volume)
}

// optional float delay_value = 5;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_delay_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_delay_value() const {
  return _internal_has_delay_value();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_delay_value() {
  delay_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CSVCMsg_Sounds_sounddata_t::_internal_delay_value() const {
  return delay_value_;
}
inline float CSVCMsg_Sounds_sounddata_t::delay_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.delay_value)
  return _internal_delay_value();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_delay_value(float value) {
  _has_bits_[0] |= 0x00000010u;
  delay_value_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_delay_value(float value) {
  _internal_set_delay_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.delay_value)
}

// optional int32 sequence_number = 6;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::sequence_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sequence_number)
  return _internal_sequence_number();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sequence_number_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sequence_number)
}

// optional int32 entity_index = 7;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  entity_index_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.entity_index)
}

// optional int32 channel = 8;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_channel() const {
  return _internal_has_channel();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_channel() {
  channel_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::channel() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.channel)
  return _internal_channel();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  channel_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.channel)
}

// optional int32 pitch = 9;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_pitch() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_pitch() const {
  return _internal_has_pitch();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_pitch() {
  pitch_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_pitch() const {
  return pitch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::pitch() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.pitch)
  return _internal_pitch();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  pitch_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_pitch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.pitch)
}

// optional int32 flags = 10;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.flags)
  return _internal_flags();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  flags_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.flags)
}

// optional uint32 sound_num = 11;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_num() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_num() const {
  return _internal_has_sound_num();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_num() {
  sound_num_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_sound_num() const {
  return sound_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::sound_num() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num)
  return _internal_sound_num();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  sound_num_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sound_num(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num)
}

// optional fixed32 sound_num_handle = 12;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_num_handle() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_num_handle() const {
  return _internal_has_sound_num_handle();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_num_handle() {
  sound_num_handle_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_sound_num_handle() const {
  return sound_num_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::sound_num_handle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
  return _internal_sound_num_handle();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  sound_num_handle_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_num_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sound_num_handle(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_num_handle)
}

// optional int32 speaker_entity = 13;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_speaker_entity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_speaker_entity() const {
  return _internal_has_speaker_entity();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_speaker_entity() {
  speaker_entity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_speaker_entity() const {
  return speaker_entity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::speaker_entity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.speaker_entity)
  return _internal_speaker_entity();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  speaker_entity_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_speaker_entity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speaker_entity(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.speaker_entity)
}

// optional int32 random_seed = 14;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_random_seed() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_random_seed() const {
  return _internal_has_random_seed();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_random_seed() {
  random_seed_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_random_seed() const {
  return random_seed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::random_seed() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.random_seed)
  return _internal_random_seed();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  random_seed_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_random_seed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.random_seed)
}

// optional int32 sound_level = 15;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_level() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_level() const {
  return _internal_has_sound_level();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_level() {
  sound_level_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::_internal_sound_level() const {
  return sound_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Sounds_sounddata_t::sound_level() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_level)
  return _internal_sound_level();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  sound_level_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sound_level(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_level)
}

// optional bool is_sentence = 16;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_is_sentence() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_is_sentence() const {
  return _internal_has_is_sentence();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_is_sentence() {
  is_sentence_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CSVCMsg_Sounds_sounddata_t::_internal_is_sentence() const {
  return is_sentence_;
}
inline bool CSVCMsg_Sounds_sounddata_t::is_sentence() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_sentence)
  return _internal_is_sentence();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_is_sentence(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_sentence_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_is_sentence(bool value) {
  _internal_set_is_sentence(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_sentence)
}

// optional bool is_ambient = 17;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_is_ambient() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_is_ambient() const {
  return _internal_has_is_ambient();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_is_ambient() {
  is_ambient_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CSVCMsg_Sounds_sounddata_t::_internal_is_ambient() const {
  return is_ambient_;
}
inline bool CSVCMsg_Sounds_sounddata_t::is_ambient() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.is_ambient)
  return _internal_is_ambient();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_is_ambient(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_ambient_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_is_ambient(bool value) {
  _internal_set_is_ambient(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.is_ambient)
}

// optional uint32 guid = 18;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_guid() const {
  return _internal_has_guid();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_guid() {
  guid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_Sounds_sounddata_t::guid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.guid)
  return _internal_guid();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  guid_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.guid)
}

// optional fixed64 sound_resource_id = 19;
inline bool CSVCMsg_Sounds_sounddata_t::_internal_has_sound_resource_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds_sounddata_t::has_sound_resource_id() const {
  return _internal_has_sound_resource_id();
}
inline void CSVCMsg_Sounds_sounddata_t::clear_sound_resource_id() {
  sound_resource_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_Sounds_sounddata_t::_internal_sound_resource_id() const {
  return sound_resource_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_Sounds_sounddata_t::sound_resource_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounddata_t.sound_resource_id)
  return _internal_sound_resource_id();
}
inline void CSVCMsg_Sounds_sounddata_t::_internal_set_sound_resource_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  sound_resource_id_ = value;
}
inline void CSVCMsg_Sounds_sounddata_t::set_sound_resource_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sound_resource_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.sounddata_t.sound_resource_id)
}

// -------------------------------------------------------------------

// CSVCMsg_Sounds

// optional bool reliable_sound = 1;
inline bool CSVCMsg_Sounds::_internal_has_reliable_sound() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Sounds::has_reliable_sound() const {
  return _internal_has_reliable_sound();
}
inline void CSVCMsg_Sounds::clear_reliable_sound() {
  reliable_sound_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CSVCMsg_Sounds::_internal_reliable_sound() const {
  return reliable_sound_;
}
inline bool CSVCMsg_Sounds::reliable_sound() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.reliable_sound)
  return _internal_reliable_sound();
}
inline void CSVCMsg_Sounds::_internal_set_reliable_sound(bool value) {
  _has_bits_[0] |= 0x00000001u;
  reliable_sound_ = value;
}
inline void CSVCMsg_Sounds::set_reliable_sound(bool value) {
  _internal_set_reliable_sound(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Sounds.reliable_sound)
}

// repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
inline int CSVCMsg_Sounds::_internal_sounds_size() const {
  return sounds_.size();
}
inline int CSVCMsg_Sounds::sounds_size() const {
  return _internal_sounds_size();
}
inline void CSVCMsg_Sounds::clear_sounds() {
  sounds_.Clear();
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Sounds.sounds)
  return sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >*
CSVCMsg_Sounds::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_Sounds.sounds)
  return &sounds_;
}
inline const ::CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds::_internal_sounds(int index) const {
  return sounds_.Get(index);
}
inline const ::CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds::sounds(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Sounds.sounds)
  return _internal_sounds(index);
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::_internal_add_sounds() {
  return sounds_.Add();
}
inline ::CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds::add_sounds() {
  // @@protoc_insertion_point(field_add:CSVCMsg_Sounds.sounds)
  return _internal_add_sounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_Sounds_sounddata_t >&
CSVCMsg_Sounds::sounds() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_Sounds.sounds)
  return sounds_;
}

// -------------------------------------------------------------------

// CSVCMsg_Prefetch

// optional int32 sound_index = 1;
inline bool CSVCMsg_Prefetch::_internal_has_sound_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Prefetch::has_sound_index() const {
  return _internal_has_sound_index();
}
inline void CSVCMsg_Prefetch::clear_sound_index() {
  sound_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Prefetch::_internal_sound_index() const {
  return sound_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Prefetch::sound_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Prefetch.sound_index)
  return _internal_sound_index();
}
inline void CSVCMsg_Prefetch::_internal_set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sound_index_ = value;
}
inline void CSVCMsg_Prefetch::set_sound_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sound_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Prefetch.sound_index)
}

// optional .PrefetchType resource_type = 2 [default = PFT_SOUND];
inline bool CSVCMsg_Prefetch::_internal_has_resource_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_Prefetch::has_resource_type() const {
  return _internal_has_resource_type();
}
inline void CSVCMsg_Prefetch::clear_resource_type() {
  resource_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PrefetchType CSVCMsg_Prefetch::_internal_resource_type() const {
  return static_cast< ::PrefetchType >(resource_type_);
}
inline ::PrefetchType CSVCMsg_Prefetch::resource_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Prefetch.resource_type)
  return _internal_resource_type();
}
inline void CSVCMsg_Prefetch::_internal_set_resource_type(::PrefetchType value) {
  assert(::PrefetchType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  resource_type_ = value;
}
inline void CSVCMsg_Prefetch::set_resource_type(::PrefetchType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Prefetch.resource_type)
}

// -------------------------------------------------------------------

// CSVCMsg_SetView

// optional int32 entity_index = 1;
inline bool CSVCMsg_SetView::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SetView::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_SetView::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetView.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_SetView::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  entity_index_ = value;
}
inline void CSVCMsg_SetView::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SetView.entity_index)
}

// optional int32 slot = 2;
inline bool CSVCMsg_SetView::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SetView::has_slot() const {
  return _internal_has_slot();
}
inline void CSVCMsg_SetView::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SetView::slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SetView.slot)
  return _internal_slot();
}
inline void CSVCMsg_SetView::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void CSVCMsg_SetView::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SetView.slot)
}

// -------------------------------------------------------------------

// CSVCMsg_FixAngle

// optional bool relative = 1;
inline bool CSVCMsg_FixAngle::_internal_has_relative() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_FixAngle::has_relative() const {
  return _internal_has_relative();
}
inline void CSVCMsg_FixAngle::clear_relative() {
  relative_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_FixAngle::_internal_relative() const {
  return relative_;
}
inline bool CSVCMsg_FixAngle::relative() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.relative)
  return _internal_relative();
}
inline void CSVCMsg_FixAngle::_internal_set_relative(bool value) {
  _has_bits_[0] |= 0x00000002u;
  relative_ = value;
}
inline void CSVCMsg_FixAngle::set_relative(bool value) {
  _internal_set_relative(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FixAngle.relative)
}

// optional .CMsgQAngle angle = 2;
inline bool CSVCMsg_FixAngle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || angle_ != nullptr);
  return value;
}
inline bool CSVCMsg_FixAngle::has_angle() const {
  return _internal_has_angle();
}
inline const ::CMsgQAngle& CSVCMsg_FixAngle::_internal_angle() const {
  const ::CMsgQAngle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSVCMsg_FixAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FixAngle.angle)
  return _internal_angle();
}
inline void CSVCMsg_FixAngle::unsafe_arena_set_allocated_angle(
    ::CMsgQAngle* angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_FixAngle.angle)
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::release_angle() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_FixAngle.angle)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::_internal_mutable_angle() {
  _has_bits_[0] |= 0x00000001u;
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArena());
    angle_ = p;
  }
  return angle_;
}
inline ::CMsgQAngle* CSVCMsg_FixAngle::mutable_angle() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FixAngle.angle)
  return _internal_mutable_angle();
}
inline void CSVCMsg_FixAngle::set_allocated_angle(::CMsgQAngle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle)->GetArena();
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_FixAngle.angle)
}

// -------------------------------------------------------------------

// CSVCMsg_CrosshairAngle

// optional .CMsgQAngle angle = 1;
inline bool CSVCMsg_CrosshairAngle::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || angle_ != nullptr);
  return value;
}
inline bool CSVCMsg_CrosshairAngle::has_angle() const {
  return _internal_has_angle();
}
inline const ::CMsgQAngle& CSVCMsg_CrosshairAngle::_internal_angle() const {
  const ::CMsgQAngle* p = angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSVCMsg_CrosshairAngle::angle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CrosshairAngle.angle)
  return _internal_angle();
}
inline void CSVCMsg_CrosshairAngle::unsafe_arena_set_allocated_angle(
    ::CMsgQAngle* angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  angle_ = angle;
  if (angle) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_CrosshairAngle.angle)
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::release_angle() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::unsafe_arena_release_angle() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CrosshairAngle.angle)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = angle_;
  angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::_internal_mutable_angle() {
  _has_bits_[0] |= 0x00000001u;
  if (angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArena());
    angle_ = p;
  }
  return angle_;
}
inline ::CMsgQAngle* CSVCMsg_CrosshairAngle::mutable_angle() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CrosshairAngle.angle)
  return _internal_mutable_angle();
}
inline void CSVCMsg_CrosshairAngle::set_allocated_angle(::CMsgQAngle* angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle_);
  }
  if (angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angle)->GetArena();
    if (message_arena != submessage_arena) {
      angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  angle_ = angle;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CrosshairAngle.angle)
}

// -------------------------------------------------------------------

// CSVCMsg_BSPDecal

// optional .CMsgVector pos = 1;
inline bool CSVCMsg_BSPDecal::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool CSVCMsg_BSPDecal::has_pos() const {
  return _internal_has_pos();
}
inline const ::CMsgVector& CSVCMsg_BSPDecal::_internal_pos() const {
  const ::CMsgVector* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSVCMsg_BSPDecal::pos() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.pos)
  return _internal_pos();
}
inline void CSVCMsg_BSPDecal::unsafe_arena_set_allocated_pos(
    ::CMsgVector* pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_BSPDecal.pos)
}
inline ::CMsgVector* CSVCMsg_BSPDecal::release_pos() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:CSVCMsg_BSPDecal.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVector* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArena());
    pos_ = p;
  }
  return pos_;
}
inline ::CMsgVector* CSVCMsg_BSPDecal::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_BSPDecal.pos)
  return _internal_mutable_pos();
}
inline void CSVCMsg_BSPDecal::set_allocated_pos(::CMsgVector* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos)->GetArena();
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_BSPDecal.pos)
}

// optional int32 decal_texture_index = 2;
inline bool CSVCMsg_BSPDecal::_internal_has_decal_texture_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_decal_texture_index() const {
  return _internal_has_decal_texture_index();
}
inline void CSVCMsg_BSPDecal::clear_decal_texture_index() {
  decal_texture_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_decal_texture_index() const {
  return decal_texture_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::decal_texture_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.decal_texture_index)
  return _internal_decal_texture_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  decal_texture_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_decal_texture_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_decal_texture_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.decal_texture_index)
}

// optional int32 entity_index = 3;
inline bool CSVCMsg_BSPDecal::_internal_has_entity_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_entity_index() const {
  return _internal_has_entity_index();
}
inline void CSVCMsg_BSPDecal::clear_entity_index() {
  entity_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_entity_index() const {
  return entity_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::entity_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.entity_index)
  return _internal_entity_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  entity_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_entity_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entity_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.entity_index)
}

// optional int32 model_index = 4;
inline bool CSVCMsg_BSPDecal::_internal_has_model_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_model_index() const {
  return _internal_has_model_index();
}
inline void CSVCMsg_BSPDecal::clear_model_index() {
  model_index_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::_internal_model_index() const {
  return model_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_BSPDecal::model_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.model_index)
  return _internal_model_index();
}
inline void CSVCMsg_BSPDecal::_internal_set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  model_index_ = value;
}
inline void CSVCMsg_BSPDecal::set_model_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_model_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.model_index)
}

// optional bool low_priority = 5;
inline bool CSVCMsg_BSPDecal::_internal_has_low_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_BSPDecal::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CSVCMsg_BSPDecal::clear_low_priority() {
  low_priority_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CSVCMsg_BSPDecal::_internal_low_priority() const {
  return low_priority_;
}
inline bool CSVCMsg_BSPDecal::low_priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_BSPDecal.low_priority)
  return _internal_low_priority();
}
inline void CSVCMsg_BSPDecal::_internal_set_low_priority(bool value) {
  _has_bits_[0] |= 0x00000010u;
  low_priority_ = value;
}
inline void CSVCMsg_BSPDecal::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_BSPDecal.low_priority)
}

// -------------------------------------------------------------------

// CSVCMsg_SplitScreen

// optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
inline bool CSVCMsg_SplitScreen::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_SplitScreen::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ESplitScreenMessageType CSVCMsg_SplitScreen::_internal_type() const {
  return static_cast< ::ESplitScreenMessageType >(type_);
}
inline ::ESplitScreenMessageType CSVCMsg_SplitScreen::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.type)
  return _internal_type();
}
inline void CSVCMsg_SplitScreen::_internal_set_type(::ESplitScreenMessageType value) {
  assert(::ESplitScreenMessageType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CSVCMsg_SplitScreen::set_type(::ESplitScreenMessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.type)
}

// optional int32 slot = 2;
inline bool CSVCMsg_SplitScreen::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_slot() const {
  return _internal_has_slot();
}
inline void CSVCMsg_SplitScreen::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::slot() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.slot)
  return _internal_slot();
}
inline void CSVCMsg_SplitScreen::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void CSVCMsg_SplitScreen::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.slot)
}

// optional int32 player_index = 3;
inline bool CSVCMsg_SplitScreen::_internal_has_player_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SplitScreen::has_player_index() const {
  return _internal_has_player_index();
}
inline void CSVCMsg_SplitScreen::clear_player_index() {
  player_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::_internal_player_index() const {
  return player_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SplitScreen::player_index() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SplitScreen.player_index)
  return _internal_player_index();
}
inline void CSVCMsg_SplitScreen::_internal_set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_index_ = value;
}
inline void CSVCMsg_SplitScreen::set_player_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SplitScreen.player_index)
}

// -------------------------------------------------------------------

// CSVCMsg_GetCvarValue

// optional int32 cookie = 1;
inline bool CSVCMsg_GetCvarValue::_internal_has_cookie() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GetCvarValue::has_cookie() const {
  return _internal_has_cookie();
}
inline void CSVCMsg_GetCvarValue::clear_cookie() {
  cookie_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GetCvarValue::_internal_cookie() const {
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GetCvarValue::cookie() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cookie)
  return _internal_cookie();
}
inline void CSVCMsg_GetCvarValue::_internal_set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cookie_ = value;
}
inline void CSVCMsg_GetCvarValue::set_cookie(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cookie(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cookie)
}

// optional string cvar_name = 2;
inline bool CSVCMsg_GetCvarValue::_internal_has_cvar_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GetCvarValue::has_cvar_name() const {
  return _internal_has_cvar_name();
}
inline void CSVCMsg_GetCvarValue::clear_cvar_name() {
  cvar_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GetCvarValue::cvar_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GetCvarValue.cvar_name)
  return _internal_cvar_name();
}
inline void CSVCMsg_GetCvarValue::set_cvar_name(const std::string& value) {
  _internal_set_cvar_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GetCvarValue.cvar_name)
}
inline std::string* CSVCMsg_GetCvarValue::mutable_cvar_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GetCvarValue.cvar_name)
  return _internal_mutable_cvar_name();
}
inline const std::string& CSVCMsg_GetCvarValue::_internal_cvar_name() const {
  return cvar_name_.Get();
}
inline void CSVCMsg_GetCvarValue::_internal_set_cvar_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cvar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GetCvarValue::set_cvar_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cvar_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GetCvarValue.cvar_name)
}
inline void CSVCMsg_GetCvarValue::set_cvar_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cvar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GetCvarValue.cvar_name)
}
inline void CSVCMsg_GetCvarValue::set_cvar_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cvar_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GetCvarValue.cvar_name)
}
inline std::string* CSVCMsg_GetCvarValue::_internal_mutable_cvar_name() {
  _has_bits_[0] |= 0x00000001u;
  return cvar_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GetCvarValue::release_cvar_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GetCvarValue.cvar_name)
  if (!_internal_has_cvar_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cvar_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GetCvarValue::set_allocated_cvar_name(std::string* cvar_name) {
  if (cvar_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cvar_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cvar_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GetCvarValue.cvar_name)
}

// -------------------------------------------------------------------

// CSVCMsg_Menu

// optional int32 dialog_type = 1;
inline bool CSVCMsg_Menu::_internal_has_dialog_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_Menu::has_dialog_type() const {
  return _internal_has_dialog_type();
}
inline void CSVCMsg_Menu::clear_dialog_type() {
  dialog_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Menu::_internal_dialog_type() const {
  return dialog_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_Menu::dialog_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.dialog_type)
  return _internal_dialog_type();
}
inline void CSVCMsg_Menu::_internal_set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dialog_type_ = value;
}
inline void CSVCMsg_Menu::set_dialog_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dialog_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.dialog_type)
}

// optional bytes menu_key_values = 2;
inline bool CSVCMsg_Menu::_internal_has_menu_key_values() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_Menu::has_menu_key_values() const {
  return _internal_has_menu_key_values();
}
inline void CSVCMsg_Menu::clear_menu_key_values() {
  menu_key_values_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_Menu::menu_key_values() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_Menu.menu_key_values)
  return _internal_menu_key_values();
}
inline void CSVCMsg_Menu::set_menu_key_values(const std::string& value) {
  _internal_set_menu_key_values(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_Menu.menu_key_values)
}
inline std::string* CSVCMsg_Menu::mutable_menu_key_values() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_Menu.menu_key_values)
  return _internal_mutable_menu_key_values();
}
inline const std::string& CSVCMsg_Menu::_internal_menu_key_values() const {
  return menu_key_values_.Get();
}
inline void CSVCMsg_Menu::_internal_set_menu_key_values(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  menu_key_values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_Menu::set_menu_key_values(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  menu_key_values_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_Menu.menu_key_values)
}
inline void CSVCMsg_Menu::set_menu_key_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  menu_key_values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_Menu.menu_key_values)
}
inline void CSVCMsg_Menu::set_menu_key_values(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  menu_key_values_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_Menu.menu_key_values)
}
inline std::string* CSVCMsg_Menu::_internal_mutable_menu_key_values() {
  _has_bits_[0] |= 0x00000001u;
  return menu_key_values_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_Menu::release_menu_key_values() {
  // @@protoc_insertion_point(field_release:CSVCMsg_Menu.menu_key_values)
  if (!_internal_has_menu_key_values()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return menu_key_values_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_Menu::set_allocated_menu_key_values(std::string* menu_key_values) {
  if (menu_key_values != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  menu_key_values_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), menu_key_values,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_Menu.menu_key_values)
}

// -------------------------------------------------------------------

// CSVCMsg_SendTable_sendprop_t

// optional int32 type = 1;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.type)
  return _internal_type();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.type)
}

// optional string var_name = 2;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_var_name() const {
  return _internal_has_var_name();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_var_name() {
  var_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::var_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.var_name)
  return _internal_var_name();
}
inline void CSVCMsg_SendTable_sendprop_t::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.var_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::_internal_var_name() const {
  return var_name_.Get();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_SendTable_sendprop_t::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.sendprop_t.var_name)
}
inline void CSVCMsg_SendTable_sendprop_t::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.sendprop_t.var_name)
}
inline void CSVCMsg_SendTable_sendprop_t::set_var_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.sendprop_t.var_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::release_var_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_SendTable_sendprop_t::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.var_name)
}

// optional int32 flags = 3;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.flags)
  return _internal_flags();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flags_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.flags)
}

// optional int32 priority = 4;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_priority() const {
  return _internal_has_priority();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::priority() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.priority)
  return _internal_priority();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  priority_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.priority)
}

// optional string dt_name = 5;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_dt_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_dt_name() const {
  return _internal_has_dt_name();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_dt_name() {
  dt_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::dt_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.dt_name)
  return _internal_dt_name();
}
inline void CSVCMsg_SendTable_sendprop_t::set_dt_name(const std::string& value) {
  _internal_set_dt_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.dt_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::mutable_dt_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.sendprop_t.dt_name)
  return _internal_mutable_dt_name();
}
inline const std::string& CSVCMsg_SendTable_sendprop_t::_internal_dt_name() const {
  return dt_name_.Get();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_dt_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dt_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_SendTable_sendprop_t::set_dt_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dt_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.sendprop_t.dt_name)
}
inline void CSVCMsg_SendTable_sendprop_t::set_dt_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dt_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.sendprop_t.dt_name)
}
inline void CSVCMsg_SendTable_sendprop_t::set_dt_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dt_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.sendprop_t.dt_name)
}
inline std::string* CSVCMsg_SendTable_sendprop_t::_internal_mutable_dt_name() {
  _has_bits_[0] |= 0x00000002u;
  return dt_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_SendTable_sendprop_t::release_dt_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.sendprop_t.dt_name)
  if (!_internal_has_dt_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dt_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_SendTable_sendprop_t::set_allocated_dt_name(std::string* dt_name) {
  if (dt_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dt_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dt_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.sendprop_t.dt_name)
}

// optional int32 num_elements = 6;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_num_elements() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_num_elements() const {
  return _internal_has_num_elements();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_num_elements() {
  num_elements_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_num_elements() const {
  return num_elements_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::num_elements() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_elements)
  return _internal_num_elements();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_elements_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_num_elements(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_elements(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_elements)
}

// optional float low_value = 7;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_low_value() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_low_value() const {
  return _internal_has_low_value();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_low_value() {
  low_value_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CSVCMsg_SendTable_sendprop_t::_internal_low_value() const {
  return low_value_;
}
inline float CSVCMsg_SendTable_sendprop_t::low_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.low_value)
  return _internal_low_value();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_low_value(float value) {
  _has_bits_[0] |= 0x00000040u;
  low_value_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_low_value(float value) {
  _internal_set_low_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.low_value)
}

// optional float high_value = 8;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_high_value() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_high_value() const {
  return _internal_has_high_value();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_high_value() {
  high_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CSVCMsg_SendTable_sendprop_t::_internal_high_value() const {
  return high_value_;
}
inline float CSVCMsg_SendTable_sendprop_t::high_value() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.high_value)
  return _internal_high_value();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_high_value(float value) {
  _has_bits_[0] |= 0x00000080u;
  high_value_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_high_value(float value) {
  _internal_set_high_value(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.high_value)
}

// optional int32 num_bits = 9;
inline bool CSVCMsg_SendTable_sendprop_t::_internal_has_num_bits() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable_sendprop_t::has_num_bits() const {
  return _internal_has_num_bits();
}
inline void CSVCMsg_SendTable_sendprop_t::clear_num_bits() {
  num_bits_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::_internal_num_bits() const {
  return num_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_SendTable_sendprop_t::num_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.sendprop_t.num_bits)
  return _internal_num_bits();
}
inline void CSVCMsg_SendTable_sendprop_t::_internal_set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_bits_ = value;
}
inline void CSVCMsg_SendTable_sendprop_t::set_num_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_bits(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.sendprop_t.num_bits)
}

// -------------------------------------------------------------------

// CSVCMsg_SendTable

// optional bool is_end = 1;
inline bool CSVCMsg_SendTable::_internal_has_is_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_is_end() const {
  return _internal_has_is_end();
}
inline void CSVCMsg_SendTable::clear_is_end() {
  is_end_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_SendTable::_internal_is_end() const {
  return is_end_;
}
inline bool CSVCMsg_SendTable::is_end() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.is_end)
  return _internal_is_end();
}
inline void CSVCMsg_SendTable::_internal_set_is_end(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_end_ = value;
}
inline void CSVCMsg_SendTable::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.is_end)
}

// optional string net_table_name = 2;
inline bool CSVCMsg_SendTable::_internal_has_net_table_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_net_table_name() const {
  return _internal_has_net_table_name();
}
inline void CSVCMsg_SendTable::clear_net_table_name() {
  net_table_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_SendTable::net_table_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.net_table_name)
  return _internal_net_table_name();
}
inline void CSVCMsg_SendTable::set_net_table_name(const std::string& value) {
  _internal_set_net_table_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.net_table_name)
}
inline std::string* CSVCMsg_SendTable::mutable_net_table_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.net_table_name)
  return _internal_mutable_net_table_name();
}
inline const std::string& CSVCMsg_SendTable::_internal_net_table_name() const {
  return net_table_name_.Get();
}
inline void CSVCMsg_SendTable::_internal_set_net_table_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_SendTable::set_net_table_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  net_table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_SendTable.net_table_name)
}
inline void CSVCMsg_SendTable::set_net_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  net_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_SendTable.net_table_name)
}
inline void CSVCMsg_SendTable::set_net_table_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  net_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_SendTable.net_table_name)
}
inline std::string* CSVCMsg_SendTable::_internal_mutable_net_table_name() {
  _has_bits_[0] |= 0x00000001u;
  return net_table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_SendTable::release_net_table_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_SendTable.net_table_name)
  if (!_internal_has_net_table_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_table_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_SendTable::set_allocated_net_table_name(std::string* net_table_name) {
  if (net_table_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_SendTable.net_table_name)
}

// optional bool needs_decoder = 3;
inline bool CSVCMsg_SendTable::_internal_has_needs_decoder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_SendTable::has_needs_decoder() const {
  return _internal_has_needs_decoder();
}
inline void CSVCMsg_SendTable::clear_needs_decoder() {
  needs_decoder_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSVCMsg_SendTable::_internal_needs_decoder() const {
  return needs_decoder_;
}
inline bool CSVCMsg_SendTable::needs_decoder() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.needs_decoder)
  return _internal_needs_decoder();
}
inline void CSVCMsg_SendTable::_internal_set_needs_decoder(bool value) {
  _has_bits_[0] |= 0x00000004u;
  needs_decoder_ = value;
}
inline void CSVCMsg_SendTable::set_needs_decoder(bool value) {
  _internal_set_needs_decoder(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_SendTable.needs_decoder)
}

// repeated .CSVCMsg_SendTable.sendprop_t props = 4;
inline int CSVCMsg_SendTable::_internal_props_size() const {
  return props_.size();
}
inline int CSVCMsg_SendTable::props_size() const {
  return _internal_props_size();
}
inline void CSVCMsg_SendTable::clear_props() {
  props_.Clear();
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_SendTable.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >*
CSVCMsg_SendTable::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_SendTable.props)
  return &props_;
}
inline const ::CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable::props(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_SendTable.props)
  return _internal_props(index);
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::_internal_add_props() {
  return props_.Add();
}
inline ::CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable::add_props() {
  // @@protoc_insertion_point(field_add:CSVCMsg_SendTable.props)
  return _internal_add_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_SendTable_sendprop_t >&
CSVCMsg_SendTable::props() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_SendTable.props)
  return props_;
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList_key_t

// optional int32 type = 1;
inline bool CSVCMsg_GameEventList_key_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_key_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_GameEventList_key_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_key_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.type)
  return _internal_type();
}
inline void CSVCMsg_GameEventList_key_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CSVCMsg_GameEventList_key_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.type)
}

// optional string name = 2;
inline bool CSVCMsg_GameEventList_key_t::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_key_t::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_GameEventList_key_t::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEventList_key_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.key_t.name)
  return _internal_name();
}
inline void CSVCMsg_GameEventList_key_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.key_t.name)
}
inline std::string* CSVCMsg_GameEventList_key_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.key_t.name)
  return _internal_mutable_name();
}
inline const std::string& CSVCMsg_GameEventList_key_t::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_GameEventList_key_t::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameEventList_key_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEventList.key_t.name)
}
inline void CSVCMsg_GameEventList_key_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEventList.key_t.name)
}
inline void CSVCMsg_GameEventList_key_t::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEventList.key_t.name)
}
inline std::string* CSVCMsg_GameEventList_key_t::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameEventList_key_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.key_t.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameEventList_key_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.key_t.name)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList_descriptor_t

// optional int32 eventid = 1;
inline bool CSVCMsg_GameEventList_descriptor_t::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_descriptor_t::has_eventid() const {
  return _internal_has_eventid();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_eventid() {
  eventid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_descriptor_t::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEventList_descriptor_t::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.eventid)
  return _internal_eventid();
}
inline void CSVCMsg_GameEventList_descriptor_t::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
}
inline void CSVCMsg_GameEventList_descriptor_t::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.eventid)
}

// optional string name = 2;
inline bool CSVCMsg_GameEventList_descriptor_t::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEventList_descriptor_t::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEventList_descriptor_t::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.name)
  return _internal_name();
}
inline void CSVCMsg_GameEventList_descriptor_t::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEventList.descriptor_t.name)
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.name)
  return _internal_mutable_name();
}
inline const std::string& CSVCMsg_GameEventList_descriptor_t::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_GameEventList_descriptor_t::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameEventList_descriptor_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEventList.descriptor_t.name)
}
inline void CSVCMsg_GameEventList_descriptor_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEventList.descriptor_t.name)
}
inline void CSVCMsg_GameEventList_descriptor_t::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEventList.descriptor_t.name)
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameEventList_descriptor_t::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEventList.descriptor_t.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameEventList_descriptor_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEventList.descriptor_t.name)
}

// repeated .CSVCMsg_GameEventList.key_t keys = 3;
inline int CSVCMsg_GameEventList_descriptor_t::_internal_keys_size() const {
  return keys_.size();
}
inline int CSVCMsg_GameEventList_descriptor_t::keys_size() const {
  return _internal_keys_size();
}
inline void CSVCMsg_GameEventList_descriptor_t::clear_keys() {
  keys_.Clear();
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >*
CSVCMsg_GameEventList_descriptor_t::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return &keys_;
}
inline const ::CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_descriptor_t::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_descriptor_t::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptor_t.keys)
  return _internal_keys(index);
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::_internal_add_keys() {
  return keys_.Add();
}
inline ::CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_descriptor_t::add_keys() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptor_t.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_key_t >&
CSVCMsg_GameEventList_descriptor_t::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptor_t.keys)
  return keys_;
}

// -------------------------------------------------------------------

// CSVCMsg_GameEventList

// repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
inline int CSVCMsg_GameEventList::_internal_descriptors_size() const {
  return descriptors_.size();
}
inline int CSVCMsg_GameEventList::descriptors_size() const {
  return _internal_descriptors_size();
}
inline void CSVCMsg_GameEventList::clear_descriptors() {
  descriptors_.Clear();
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEventList.descriptors)
  return descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >*
CSVCMsg_GameEventList::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEventList.descriptors)
  return &descriptors_;
}
inline const ::CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList::_internal_descriptors(int index) const {
  return descriptors_.Get(index);
}
inline const ::CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEventList.descriptors)
  return _internal_descriptors(index);
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::_internal_add_descriptors() {
  return descriptors_.Add();
}
inline ::CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList::add_descriptors() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEventList.descriptors)
  return _internal_add_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEventList_descriptor_t >&
CSVCMsg_GameEventList::descriptors() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEventList.descriptors)
  return descriptors_;
}

// -------------------------------------------------------------------

// CSVCMsg_PacketEntities_command_queue_info_t

// optional uint32 commands_queued = 1;
inline bool CSVCMsg_PacketEntities_command_queue_info_t::_internal_has_commands_queued() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities_command_queue_info_t::has_commands_queued() const {
  return _internal_has_commands_queued();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::clear_commands_queued() {
  commands_queued_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::_internal_commands_queued() const {
  return commands_queued_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::commands_queued() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info_t.commands_queued)
  return _internal_commands_queued();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::_internal_set_commands_queued(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  commands_queued_ = value;
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::set_commands_queued(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_commands_queued(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.command_queue_info_t.commands_queued)
}

// optional uint32 command_queue_desired_size = 2;
inline bool CSVCMsg_PacketEntities_command_queue_info_t::_internal_has_command_queue_desired_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities_command_queue_info_t::has_command_queue_desired_size() const {
  return _internal_has_command_queue_desired_size();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::clear_command_queue_desired_size() {
  command_queue_desired_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::_internal_command_queue_desired_size() const {
  return command_queue_desired_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::command_queue_desired_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info_t.command_queue_desired_size)
  return _internal_command_queue_desired_size();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::_internal_set_command_queue_desired_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  command_queue_desired_size_ = value;
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::set_command_queue_desired_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_queue_desired_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.command_queue_info_t.command_queue_desired_size)
}

// optional uint32 starved_command_ticks = 3;
inline bool CSVCMsg_PacketEntities_command_queue_info_t::_internal_has_starved_command_ticks() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities_command_queue_info_t::has_starved_command_ticks() const {
  return _internal_has_starved_command_ticks();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::clear_starved_command_ticks() {
  starved_command_ticks_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::_internal_starved_command_ticks() const {
  return starved_command_ticks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::starved_command_ticks() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info_t.starved_command_ticks)
  return _internal_starved_command_ticks();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::_internal_set_starved_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  starved_command_ticks_ = value;
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::set_starved_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starved_command_ticks(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.command_queue_info_t.starved_command_ticks)
}

// optional float time_dilation_percent = 4;
inline bool CSVCMsg_PacketEntities_command_queue_info_t::_internal_has_time_dilation_percent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities_command_queue_info_t::has_time_dilation_percent() const {
  return _internal_has_time_dilation_percent();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::clear_time_dilation_percent() {
  time_dilation_percent_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CSVCMsg_PacketEntities_command_queue_info_t::_internal_time_dilation_percent() const {
  return time_dilation_percent_;
}
inline float CSVCMsg_PacketEntities_command_queue_info_t::time_dilation_percent() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info_t.time_dilation_percent)
  return _internal_time_dilation_percent();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::_internal_set_time_dilation_percent(float value) {
  _has_bits_[0] |= 0x00000008u;
  time_dilation_percent_ = value;
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::set_time_dilation_percent(float value) {
  _internal_set_time_dilation_percent(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.command_queue_info_t.time_dilation_percent)
}

// optional uint32 discarded_command_ticks = 5;
inline bool CSVCMsg_PacketEntities_command_queue_info_t::_internal_has_discarded_command_ticks() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities_command_queue_info_t::has_discarded_command_ticks() const {
  return _internal_has_discarded_command_ticks();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::clear_discarded_command_ticks() {
  discarded_command_ticks_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::_internal_discarded_command_ticks() const {
  return discarded_command_ticks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities_command_queue_info_t::discarded_command_ticks() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info_t.discarded_command_ticks)
  return _internal_discarded_command_ticks();
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::_internal_set_discarded_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  discarded_command_ticks_ = value;
}
inline void CSVCMsg_PacketEntities_command_queue_info_t::set_discarded_command_ticks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discarded_command_ticks(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.command_queue_info_t.discarded_command_ticks)
}

// -------------------------------------------------------------------

// CSVCMsg_PacketEntities

// optional int32 max_entries = 1;
inline bool CSVCMsg_PacketEntities::_internal_has_max_entries() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_max_entries() const {
  return _internal_has_max_entries();
}
inline void CSVCMsg_PacketEntities::clear_max_entries() {
  max_entries_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_max_entries() const {
  return max_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::max_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.max_entries)
  return _internal_max_entries();
}
inline void CSVCMsg_PacketEntities::_internal_set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  max_entries_ = value;
}
inline void CSVCMsg_PacketEntities::set_max_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.max_entries)
}

// optional int32 updated_entries = 2;
inline bool CSVCMsg_PacketEntities::_internal_has_updated_entries() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_updated_entries() const {
  return _internal_has_updated_entries();
}
inline void CSVCMsg_PacketEntities::clear_updated_entries() {
  updated_entries_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_updated_entries() const {
  return updated_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::updated_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.updated_entries)
  return _internal_updated_entries();
}
inline void CSVCMsg_PacketEntities::_internal_set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  updated_entries_ = value;
}
inline void CSVCMsg_PacketEntities::set_updated_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_updated_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.updated_entries)
}

// optional bool is_delta = 3;
inline bool CSVCMsg_PacketEntities::_internal_has_is_delta() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_is_delta() const {
  return _internal_has_is_delta();
}
inline void CSVCMsg_PacketEntities::clear_is_delta() {
  is_delta_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSVCMsg_PacketEntities::_internal_is_delta() const {
  return is_delta_;
}
inline bool CSVCMsg_PacketEntities::is_delta() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.is_delta)
  return _internal_is_delta();
}
inline void CSVCMsg_PacketEntities::_internal_set_is_delta(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_delta_ = value;
}
inline void CSVCMsg_PacketEntities::set_is_delta(bool value) {
  _internal_set_is_delta(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.is_delta)
}

// optional bool update_baseline = 4;
inline bool CSVCMsg_PacketEntities::_internal_has_update_baseline() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_update_baseline() const {
  return _internal_has_update_baseline();
}
inline void CSVCMsg_PacketEntities::clear_update_baseline() {
  update_baseline_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSVCMsg_PacketEntities::_internal_update_baseline() const {
  return update_baseline_;
}
inline bool CSVCMsg_PacketEntities::update_baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.update_baseline)
  return _internal_update_baseline();
}
inline void CSVCMsg_PacketEntities::_internal_set_update_baseline(bool value) {
  _has_bits_[0] |= 0x00000080u;
  update_baseline_ = value;
}
inline void CSVCMsg_PacketEntities::set_update_baseline(bool value) {
  _internal_set_update_baseline(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.update_baseline)
}

// optional int32 baseline = 5;
inline bool CSVCMsg_PacketEntities::_internal_has_baseline() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_baseline() const {
  return _internal_has_baseline();
}
inline void CSVCMsg_PacketEntities::clear_baseline() {
  baseline_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_baseline() const {
  return baseline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::baseline() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.baseline)
  return _internal_baseline();
}
inline void CSVCMsg_PacketEntities::_internal_set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  baseline_ = value;
}
inline void CSVCMsg_PacketEntities::set_baseline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_baseline(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.baseline)
}

// optional int32 delta_from = 6;
inline bool CSVCMsg_PacketEntities::_internal_has_delta_from() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_delta_from() const {
  return _internal_has_delta_from();
}
inline void CSVCMsg_PacketEntities::clear_delta_from() {
  delta_from_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::_internal_delta_from() const {
  return delta_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketEntities::delta_from() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.delta_from)
  return _internal_delta_from();
}
inline void CSVCMsg_PacketEntities::_internal_set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  delta_from_ = value;
}
inline void CSVCMsg_PacketEntities::set_delta_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta_from(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.delta_from)
}

// optional bytes entity_data = 7;
inline bool CSVCMsg_PacketEntities::_internal_has_entity_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_entity_data() const {
  return _internal_has_entity_data();
}
inline void CSVCMsg_PacketEntities::clear_entity_data() {
  entity_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_PacketEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.entity_data)
  return _internal_entity_data();
}
inline void CSVCMsg_PacketEntities::set_entity_data(const std::string& value) {
  _internal_set_entity_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.entity_data)
}
inline std::string* CSVCMsg_PacketEntities::mutable_entity_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PacketEntities.entity_data)
  return _internal_mutable_entity_data();
}
inline const std::string& CSVCMsg_PacketEntities::_internal_entity_data() const {
  return entity_data_.Get();
}
inline void CSVCMsg_PacketEntities::_internal_set_entity_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_PacketEntities::set_entity_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_PacketEntities.entity_data)
}
inline void CSVCMsg_PacketEntities::set_entity_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_PacketEntities.entity_data)
}
inline void CSVCMsg_PacketEntities::set_entity_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_PacketEntities.entity_data)
}
inline std::string* CSVCMsg_PacketEntities::_internal_mutable_entity_data() {
  _has_bits_[0] |= 0x00000001u;
  return entity_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_PacketEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PacketEntities.entity_data)
  if (!_internal_has_entity_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_PacketEntities::set_allocated_entity_data(std::string* entity_data) {
  if (entity_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PacketEntities.entity_data)
}

// optional bool pending_full_frame = 8;
inline bool CSVCMsg_PacketEntities::_internal_has_pending_full_frame() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_pending_full_frame() const {
  return _internal_has_pending_full_frame();
}
inline void CSVCMsg_PacketEntities::clear_pending_full_frame() {
  pending_full_frame_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CSVCMsg_PacketEntities::_internal_pending_full_frame() const {
  return pending_full_frame_;
}
inline bool CSVCMsg_PacketEntities::pending_full_frame() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.pending_full_frame)
  return _internal_pending_full_frame();
}
inline void CSVCMsg_PacketEntities::_internal_set_pending_full_frame(bool value) {
  _has_bits_[0] |= 0x00000100u;
  pending_full_frame_ = value;
}
inline void CSVCMsg_PacketEntities::set_pending_full_frame(bool value) {
  _internal_set_pending_full_frame(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.pending_full_frame)
}

// optional uint32 active_spawngroup_handle = 9;
inline bool CSVCMsg_PacketEntities::_internal_has_active_spawngroup_handle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_active_spawngroup_handle() const {
  return _internal_has_active_spawngroup_handle();
}
inline void CSVCMsg_PacketEntities::clear_active_spawngroup_handle() {
  active_spawngroup_handle_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::_internal_active_spawngroup_handle() const {
  return active_spawngroup_handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::active_spawngroup_handle() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.active_spawngroup_handle)
  return _internal_active_spawngroup_handle();
}
inline void CSVCMsg_PacketEntities::_internal_set_active_spawngroup_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  active_spawngroup_handle_ = value;
}
inline void CSVCMsg_PacketEntities::set_active_spawngroup_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_active_spawngroup_handle(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.active_spawngroup_handle)
}

// optional uint32 max_spawngroup_creationsequence = 10;
inline bool CSVCMsg_PacketEntities::_internal_has_max_spawngroup_creationsequence() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_max_spawngroup_creationsequence() const {
  return _internal_has_max_spawngroup_creationsequence();
}
inline void CSVCMsg_PacketEntities::clear_max_spawngroup_creationsequence() {
  max_spawngroup_creationsequence_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::_internal_max_spawngroup_creationsequence() const {
  return max_spawngroup_creationsequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::max_spawngroup_creationsequence() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.max_spawngroup_creationsequence)
  return _internal_max_spawngroup_creationsequence();
}
inline void CSVCMsg_PacketEntities::_internal_set_max_spawngroup_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_spawngroup_creationsequence_ = value;
}
inline void CSVCMsg_PacketEntities::set_max_spawngroup_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_spawngroup_creationsequence(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.max_spawngroup_creationsequence)
}

// optional uint32 last_cmd_number = 11;
inline bool CSVCMsg_PacketEntities::_internal_has_last_cmd_number() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_last_cmd_number() const {
  return _internal_has_last_cmd_number();
}
inline void CSVCMsg_PacketEntities::clear_last_cmd_number() {
  last_cmd_number_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::_internal_last_cmd_number() const {
  return last_cmd_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::last_cmd_number() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.last_cmd_number)
  return _internal_last_cmd_number();
}
inline void CSVCMsg_PacketEntities::_internal_set_last_cmd_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  last_cmd_number_ = value;
}
inline void CSVCMsg_PacketEntities::set_last_cmd_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_cmd_number(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.last_cmd_number)
}

// optional uint32 server_tick = 12;
inline bool CSVCMsg_PacketEntities::_internal_has_server_tick() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_server_tick() const {
  return _internal_has_server_tick();
}
inline void CSVCMsg_PacketEntities::clear_server_tick() {
  server_tick_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::_internal_server_tick() const {
  return server_tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_PacketEntities::server_tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.server_tick)
  return _internal_server_tick();
}
inline void CSVCMsg_PacketEntities::_internal_set_server_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  server_tick_ = value;
}
inline void CSVCMsg_PacketEntities::set_server_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.server_tick)
}

// optional bytes serialized_entities = 13;
inline bool CSVCMsg_PacketEntities::_internal_has_serialized_entities() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_PacketEntities::has_serialized_entities() const {
  return _internal_has_serialized_entities();
}
inline void CSVCMsg_PacketEntities::clear_serialized_entities() {
  serialized_entities_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_PacketEntities::serialized_entities() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.serialized_entities)
  return _internal_serialized_entities();
}
inline void CSVCMsg_PacketEntities::set_serialized_entities(const std::string& value) {
  _internal_set_serialized_entities(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketEntities.serialized_entities)
}
inline std::string* CSVCMsg_PacketEntities::mutable_serialized_entities() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PacketEntities.serialized_entities)
  return _internal_mutable_serialized_entities();
}
inline const std::string& CSVCMsg_PacketEntities::_internal_serialized_entities() const {
  return serialized_entities_.Get();
}
inline void CSVCMsg_PacketEntities::_internal_set_serialized_entities(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_entities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_PacketEntities::set_serialized_entities(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_entities_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_PacketEntities.serialized_entities)
}
inline void CSVCMsg_PacketEntities::set_serialized_entities(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_entities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_PacketEntities.serialized_entities)
}
inline void CSVCMsg_PacketEntities::set_serialized_entities(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_entities_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_PacketEntities.serialized_entities)
}
inline std::string* CSVCMsg_PacketEntities::_internal_mutable_serialized_entities() {
  _has_bits_[0] |= 0x00000002u;
  return serialized_entities_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_PacketEntities::release_serialized_entities() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PacketEntities.serialized_entities)
  if (!_internal_has_serialized_entities()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_entities_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_PacketEntities::set_allocated_serialized_entities(std::string* serialized_entities) {
  if (serialized_entities != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_entities_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_entities,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PacketEntities.serialized_entities)
}

// optional .CSVCMsg_PacketEntities.command_queue_info_t command_queue_info = 14;
inline bool CSVCMsg_PacketEntities::_internal_has_command_queue_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || command_queue_info_ != nullptr);
  return value;
}
inline bool CSVCMsg_PacketEntities::has_command_queue_info() const {
  return _internal_has_command_queue_info();
}
inline void CSVCMsg_PacketEntities::clear_command_queue_info() {
  if (command_queue_info_ != nullptr) command_queue_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CSVCMsg_PacketEntities_command_queue_info_t& CSVCMsg_PacketEntities::_internal_command_queue_info() const {
  const ::CSVCMsg_PacketEntities_command_queue_info_t* p = command_queue_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSVCMsg_PacketEntities_command_queue_info_t&>(
      ::_CSVCMsg_PacketEntities_command_queue_info_t_default_instance_);
}
inline const ::CSVCMsg_PacketEntities_command_queue_info_t& CSVCMsg_PacketEntities::command_queue_info() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketEntities.command_queue_info)
  return _internal_command_queue_info();
}
inline void CSVCMsg_PacketEntities::unsafe_arena_set_allocated_command_queue_info(
    ::CSVCMsg_PacketEntities_command_queue_info_t* command_queue_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_queue_info_);
  }
  command_queue_info_ = command_queue_info;
  if (command_queue_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_PacketEntities.command_queue_info)
}
inline ::CSVCMsg_PacketEntities_command_queue_info_t* CSVCMsg_PacketEntities::release_command_queue_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::CSVCMsg_PacketEntities_command_queue_info_t* temp = command_queue_info_;
  command_queue_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSVCMsg_PacketEntities_command_queue_info_t* CSVCMsg_PacketEntities::unsafe_arena_release_command_queue_info() {
  // @@protoc_insertion_point(field_release:CSVCMsg_PacketEntities.command_queue_info)
  _has_bits_[0] &= ~0x00000004u;
  ::CSVCMsg_PacketEntities_command_queue_info_t* temp = command_queue_info_;
  command_queue_info_ = nullptr;
  return temp;
}
inline ::CSVCMsg_PacketEntities_command_queue_info_t* CSVCMsg_PacketEntities::_internal_mutable_command_queue_info() {
  _has_bits_[0] |= 0x00000004u;
  if (command_queue_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSVCMsg_PacketEntities_command_queue_info_t>(GetArena());
    command_queue_info_ = p;
  }
  return command_queue_info_;
}
inline ::CSVCMsg_PacketEntities_command_queue_info_t* CSVCMsg_PacketEntities::mutable_command_queue_info() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PacketEntities.command_queue_info)
  return _internal_mutable_command_queue_info();
}
inline void CSVCMsg_PacketEntities::set_allocated_command_queue_info(::CSVCMsg_PacketEntities_command_queue_info_t* command_queue_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete command_queue_info_;
  }
  if (command_queue_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(command_queue_info);
    if (message_arena != submessage_arena) {
      command_queue_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_queue_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  command_queue_info_ = command_queue_info;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_PacketEntities.command_queue_info)
}

// -------------------------------------------------------------------

// CSVCMsg_TempEntities

// optional bool reliable = 1;
inline bool CSVCMsg_TempEntities::_internal_has_reliable() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_reliable() const {
  return _internal_has_reliable();
}
inline void CSVCMsg_TempEntities::clear_reliable() {
  reliable_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CSVCMsg_TempEntities::_internal_reliable() const {
  return reliable_;
}
inline bool CSVCMsg_TempEntities::reliable() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.reliable)
  return _internal_reliable();
}
inline void CSVCMsg_TempEntities::_internal_set_reliable(bool value) {
  _has_bits_[0] |= 0x00000002u;
  reliable_ = value;
}
inline void CSVCMsg_TempEntities::set_reliable(bool value) {
  _internal_set_reliable(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.reliable)
}

// optional int32 num_entries = 2;
inline bool CSVCMsg_TempEntities::_internal_has_num_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_num_entries() const {
  return _internal_has_num_entries();
}
inline void CSVCMsg_TempEntities::clear_num_entries() {
  num_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_TempEntities::_internal_num_entries() const {
  return num_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_TempEntities::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.num_entries)
  return _internal_num_entries();
}
inline void CSVCMsg_TempEntities::_internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_entries_ = value;
}
inline void CSVCMsg_TempEntities::set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.num_entries)
}

// optional bytes entity_data = 3;
inline bool CSVCMsg_TempEntities::_internal_has_entity_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_TempEntities::has_entity_data() const {
  return _internal_has_entity_data();
}
inline void CSVCMsg_TempEntities::clear_entity_data() {
  entity_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_TempEntities::entity_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_TempEntities.entity_data)
  return _internal_entity_data();
}
inline void CSVCMsg_TempEntities::set_entity_data(const std::string& value) {
  _internal_set_entity_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_TempEntities.entity_data)
}
inline std::string* CSVCMsg_TempEntities::mutable_entity_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_TempEntities.entity_data)
  return _internal_mutable_entity_data();
}
inline const std::string& CSVCMsg_TempEntities::_internal_entity_data() const {
  return entity_data_.Get();
}
inline void CSVCMsg_TempEntities::_internal_set_entity_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_TempEntities::set_entity_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_TempEntities.entity_data)
}
inline void CSVCMsg_TempEntities::set_entity_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_TempEntities.entity_data)
}
inline void CSVCMsg_TempEntities::set_entity_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entity_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_TempEntities.entity_data)
}
inline std::string* CSVCMsg_TempEntities::_internal_mutable_entity_data() {
  _has_bits_[0] |= 0x00000001u;
  return entity_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_TempEntities::release_entity_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_TempEntities.entity_data)
  if (!_internal_has_entity_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entity_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_TempEntities::set_allocated_entity_data(std::string* entity_data) {
  if (entity_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entity_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_TempEntities.entity_data)
}

// -------------------------------------------------------------------

// CSVCMsg_CreateStringTable

// optional string name = 1;
inline bool CSVCMsg_CreateStringTable::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_name() const {
  return _internal_has_name();
}
inline void CSVCMsg_CreateStringTable::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_CreateStringTable::name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.name)
  return _internal_name();
}
inline void CSVCMsg_CreateStringTable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.name)
}
inline std::string* CSVCMsg_CreateStringTable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.name)
  return _internal_mutable_name();
}
inline const std::string& CSVCMsg_CreateStringTable::_internal_name() const {
  return name_.Get();
}
inline void CSVCMsg_CreateStringTable::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_CreateStringTable::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CreateStringTable.name)
}
inline void CSVCMsg_CreateStringTable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CreateStringTable.name)
}
inline void CSVCMsg_CreateStringTable::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CreateStringTable.name)
}
inline std::string* CSVCMsg_CreateStringTable::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_CreateStringTable::release_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_CreateStringTable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.name)
}

// optional int32 num_entries = 2;
inline bool CSVCMsg_CreateStringTable::_internal_has_num_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_num_entries() const {
  return _internal_has_num_entries();
}
inline void CSVCMsg_CreateStringTable::clear_num_entries() {
  num_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_num_entries() const {
  return num_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::num_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.num_entries)
  return _internal_num_entries();
}
inline void CSVCMsg_CreateStringTable::_internal_set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_entries_ = value;
}
inline void CSVCMsg_CreateStringTable::set_num_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.num_entries)
}

// optional bool user_data_fixed_size = 3;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_fixed_size() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_fixed_size() const {
  return _internal_has_user_data_fixed_size();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_fixed_size() {
  user_data_fixed_size_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSVCMsg_CreateStringTable::_internal_user_data_fixed_size() const {
  return user_data_fixed_size_;
}
inline bool CSVCMsg_CreateStringTable::user_data_fixed_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_fixed_size)
  return _internal_user_data_fixed_size();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_fixed_size(bool value) {
  _has_bits_[0] |= 0x00000040u;
  user_data_fixed_size_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_fixed_size(bool value) {
  _internal_set_user_data_fixed_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_fixed_size)
}

// optional int32 user_data_size = 4;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_size() const {
  return _internal_has_user_data_size();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_size() {
  user_data_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_user_data_size() const {
  return user_data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::user_data_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size)
  return _internal_user_data_size();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  user_data_size_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_data_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size)
}

// optional int32 user_data_size_bits = 5;
inline bool CSVCMsg_CreateStringTable::_internal_has_user_data_size_bits() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_user_data_size_bits() const {
  return _internal_has_user_data_size_bits();
}
inline void CSVCMsg_CreateStringTable::clear_user_data_size_bits() {
  user_data_size_bits_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_user_data_size_bits() const {
  return user_data_size_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::user_data_size_bits() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.user_data_size_bits)
  return _internal_user_data_size_bits();
}
inline void CSVCMsg_CreateStringTable::_internal_set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  user_data_size_bits_ = value;
}
inline void CSVCMsg_CreateStringTable::set_user_data_size_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_data_size_bits(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.user_data_size_bits)
}

// optional int32 flags = 6;
inline bool CSVCMsg_CreateStringTable::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_flags() const {
  return _internal_has_flags();
}
inline void CSVCMsg_CreateStringTable::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::flags() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.flags)
  return _internal_flags();
}
inline void CSVCMsg_CreateStringTable::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  flags_ = value;
}
inline void CSVCMsg_CreateStringTable::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.flags)
}

// optional bytes string_data = 7;
inline bool CSVCMsg_CreateStringTable::_internal_has_string_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_string_data() const {
  return _internal_has_string_data();
}
inline void CSVCMsg_CreateStringTable::clear_string_data() {
  string_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_CreateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.string_data)
  return _internal_string_data();
}
inline void CSVCMsg_CreateStringTable::set_string_data(const std::string& value) {
  _internal_set_string_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.string_data)
}
inline std::string* CSVCMsg_CreateStringTable::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CreateStringTable.string_data)
  return _internal_mutable_string_data();
}
inline const std::string& CSVCMsg_CreateStringTable::_internal_string_data() const {
  return string_data_.Get();
}
inline void CSVCMsg_CreateStringTable::_internal_set_string_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_CreateStringTable::set_string_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CreateStringTable.string_data)
}
inline void CSVCMsg_CreateStringTable::set_string_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CreateStringTable.string_data)
}
inline void CSVCMsg_CreateStringTable::set_string_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CreateStringTable.string_data)
}
inline std::string* CSVCMsg_CreateStringTable::_internal_mutable_string_data() {
  _has_bits_[0] |= 0x00000002u;
  return string_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_CreateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CreateStringTable.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_CreateStringTable::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CreateStringTable.string_data)
}

// optional int32 uncompressed_size = 8;
inline bool CSVCMsg_CreateStringTable::_internal_has_uncompressed_size() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_uncompressed_size() const {
  return _internal_has_uncompressed_size();
}
inline void CSVCMsg_CreateStringTable::clear_uncompressed_size() {
  uncompressed_size_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::_internal_uncompressed_size() const {
  return uncompressed_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_CreateStringTable::uncompressed_size() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.uncompressed_size)
  return _internal_uncompressed_size();
}
inline void CSVCMsg_CreateStringTable::_internal_set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  uncompressed_size_ = value;
}
inline void CSVCMsg_CreateStringTable::set_uncompressed_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uncompressed_size(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.uncompressed_size)
}

// optional bool data_compressed = 9;
inline bool CSVCMsg_CreateStringTable::_internal_has_data_compressed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_CreateStringTable::has_data_compressed() const {
  return _internal_has_data_compressed();
}
inline void CSVCMsg_CreateStringTable::clear_data_compressed() {
  data_compressed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CSVCMsg_CreateStringTable::_internal_data_compressed() const {
  return data_compressed_;
}
inline bool CSVCMsg_CreateStringTable::data_compressed() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CreateStringTable.data_compressed)
  return _internal_data_compressed();
}
inline void CSVCMsg_CreateStringTable::_internal_set_data_compressed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  data_compressed_ = value;
}
inline void CSVCMsg_CreateStringTable::set_data_compressed(bool value) {
  _internal_set_data_compressed(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CreateStringTable.data_compressed)
}

// -------------------------------------------------------------------

// CSVCMsg_UpdateStringTable

// optional int32 table_id = 1;
inline bool CSVCMsg_UpdateStringTable::_internal_has_table_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_table_id() const {
  return _internal_has_table_id();
}
inline void CSVCMsg_UpdateStringTable::clear_table_id() {
  table_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::table_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.table_id)
  return _internal_table_id();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  table_id_ = value;
}
inline void CSVCMsg_UpdateStringTable::set_table_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.table_id)
}

// optional int32 num_changed_entries = 2;
inline bool CSVCMsg_UpdateStringTable::_internal_has_num_changed_entries() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_num_changed_entries() const {
  return _internal_has_num_changed_entries();
}
inline void CSVCMsg_UpdateStringTable::clear_num_changed_entries() {
  num_changed_entries_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::_internal_num_changed_entries() const {
  return num_changed_entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UpdateStringTable::num_changed_entries() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.num_changed_entries)
  return _internal_num_changed_entries();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_changed_entries_ = value;
}
inline void CSVCMsg_UpdateStringTable::set_num_changed_entries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_changed_entries(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.num_changed_entries)
}

// optional bytes string_data = 3;
inline bool CSVCMsg_UpdateStringTable::_internal_has_string_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_UpdateStringTable::has_string_data() const {
  return _internal_has_string_data();
}
inline void CSVCMsg_UpdateStringTable::clear_string_data() {
  string_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_UpdateStringTable::string_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UpdateStringTable.string_data)
  return _internal_string_data();
}
inline void CSVCMsg_UpdateStringTable::set_string_data(const std::string& value) {
  _internal_set_string_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UpdateStringTable.string_data)
}
inline std::string* CSVCMsg_UpdateStringTable::mutable_string_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UpdateStringTable.string_data)
  return _internal_mutable_string_data();
}
inline const std::string& CSVCMsg_UpdateStringTable::_internal_string_data() const {
  return string_data_.Get();
}
inline void CSVCMsg_UpdateStringTable::_internal_set_string_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_UpdateStringTable::set_string_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_UpdateStringTable.string_data)
}
inline void CSVCMsg_UpdateStringTable::set_string_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_UpdateStringTable.string_data)
}
inline void CSVCMsg_UpdateStringTable::set_string_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_UpdateStringTable.string_data)
}
inline std::string* CSVCMsg_UpdateStringTable::_internal_mutable_string_data() {
  _has_bits_[0] |= 0x00000001u;
  return string_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_UpdateStringTable::release_string_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UpdateStringTable.string_data)
  if (!_internal_has_string_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_UpdateStringTable::set_allocated_string_data(std::string* string_data) {
  if (string_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UpdateStringTable.string_data)
}

// -------------------------------------------------------------------

// CSVCMsg_VoiceData

// optional .CMsgVoiceAudio audio = 1;
inline bool CSVCMsg_VoiceData::_internal_has_audio() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || audio_ != nullptr);
  return value;
}
inline bool CSVCMsg_VoiceData::has_audio() const {
  return _internal_has_audio();
}
inline void CSVCMsg_VoiceData::clear_audio() {
  if (audio_ != nullptr) audio_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgVoiceAudio& CSVCMsg_VoiceData::_internal_audio() const {
  const ::CMsgVoiceAudio* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVoiceAudio&>(
      ::_CMsgVoiceAudio_default_instance_);
}
inline const ::CMsgVoiceAudio& CSVCMsg_VoiceData::audio() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.audio)
  return _internal_audio();
}
inline void CSVCMsg_VoiceData::unsafe_arena_set_allocated_audio(
    ::CMsgVoiceAudio* audio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsg_VoiceData.audio)
}
inline ::CMsgVoiceAudio* CSVCMsg_VoiceData::release_audio() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVoiceAudio* CSVCMsg_VoiceData::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:CSVCMsg_VoiceData.audio)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgVoiceAudio* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::CMsgVoiceAudio* CSVCMsg_VoiceData::_internal_mutable_audio() {
  _has_bits_[0] |= 0x00000001u;
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVoiceAudio>(GetArena());
    audio_ = p;
  }
  return audio_;
}
inline ::CMsgVoiceAudio* CSVCMsg_VoiceData::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_VoiceData.audio)
  return _internal_mutable_audio();
}
inline void CSVCMsg_VoiceData::set_allocated_audio(::CMsgVoiceAudio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_VoiceData.audio)
}

// optional int32 client = 2;
inline bool CSVCMsg_VoiceData::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_client() const {
  return _internal_has_client();
}
inline void CSVCMsg_VoiceData::clear_client() {
  client_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::_internal_client() const {
  return client_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::client() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.client)
  return _internal_client();
}
inline void CSVCMsg_VoiceData::_internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_ = value;
}
inline void CSVCMsg_VoiceData::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.client)
}

// optional bool proximity = 3;
inline bool CSVCMsg_VoiceData::_internal_has_proximity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_proximity() const {
  return _internal_has_proximity();
}
inline void CSVCMsg_VoiceData::clear_proximity() {
  proximity_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSVCMsg_VoiceData::_internal_proximity() const {
  return proximity_;
}
inline bool CSVCMsg_VoiceData::proximity() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.proximity)
  return _internal_proximity();
}
inline void CSVCMsg_VoiceData::_internal_set_proximity(bool value) {
  _has_bits_[0] |= 0x00000004u;
  proximity_ = value;
}
inline void CSVCMsg_VoiceData::set_proximity(bool value) {
  _internal_set_proximity(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.proximity)
}

// optional fixed64 xuid = 4;
inline bool CSVCMsg_VoiceData::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_xuid() const {
  return _internal_has_xuid();
}
inline void CSVCMsg_VoiceData::clear_xuid() {
  xuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_VoiceData::_internal_xuid() const {
  return xuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.xuid)
  return _internal_xuid();
}
inline void CSVCMsg_VoiceData::_internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  xuid_ = value;
}
inline void CSVCMsg_VoiceData::set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.xuid)
}

// optional int32 audible_mask = 5;
inline bool CSVCMsg_VoiceData::_internal_has_audible_mask() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_audible_mask() const {
  return _internal_has_audible_mask();
}
inline void CSVCMsg_VoiceData::clear_audible_mask() {
  audible_mask_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::_internal_audible_mask() const {
  return audible_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_VoiceData::audible_mask() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.audible_mask)
  return _internal_audible_mask();
}
inline void CSVCMsg_VoiceData::_internal_set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  audible_mask_ = value;
}
inline void CSVCMsg_VoiceData::set_audible_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_audible_mask(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.audible_mask)
}

// optional uint32 tick = 6;
inline bool CSVCMsg_VoiceData::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_VoiceData::has_tick() const {
  return _internal_has_tick();
}
inline void CSVCMsg_VoiceData::clear_tick() {
  tick_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_VoiceData::tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_VoiceData.tick)
  return _internal_tick();
}
inline void CSVCMsg_VoiceData::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tick_ = value;
}
inline void CSVCMsg_VoiceData::set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_VoiceData.tick)
}

// -------------------------------------------------------------------

// CSVCMsg_PacketReliable

// optional int32 tick = 1;
inline bool CSVCMsg_PacketReliable::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_PacketReliable::has_tick() const {
  return _internal_has_tick();
}
inline void CSVCMsg_PacketReliable::clear_tick() {
  tick_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketReliable::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketReliable::tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketReliable.tick)
  return _internal_tick();
}
inline void CSVCMsg_PacketReliable::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  tick_ = value;
}
inline void CSVCMsg_PacketReliable::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketReliable.tick)
}

// optional int32 messagessize = 2;
inline bool CSVCMsg_PacketReliable::_internal_has_messagessize() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_PacketReliable::has_messagessize() const {
  return _internal_has_messagessize();
}
inline void CSVCMsg_PacketReliable::clear_messagessize() {
  messagessize_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketReliable::_internal_messagessize() const {
  return messagessize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_PacketReliable::messagessize() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketReliable.messagessize)
  return _internal_messagessize();
}
inline void CSVCMsg_PacketReliable::_internal_set_messagessize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  messagessize_ = value;
}
inline void CSVCMsg_PacketReliable::set_messagessize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_messagessize(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketReliable.messagessize)
}

// optional bool state = 3;
inline bool CSVCMsg_PacketReliable::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_PacketReliable::has_state() const {
  return _internal_has_state();
}
inline void CSVCMsg_PacketReliable::clear_state() {
  state_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CSVCMsg_PacketReliable::_internal_state() const {
  return state_;
}
inline bool CSVCMsg_PacketReliable::state() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PacketReliable.state)
  return _internal_state();
}
inline void CSVCMsg_PacketReliable::_internal_set_state(bool value) {
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CSVCMsg_PacketReliable::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_PacketReliable.state)
}

// -------------------------------------------------------------------

// CSVCMsg_FullFrameSplit

// optional int32 tick = 1;
inline bool CSVCMsg_FullFrameSplit::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_FullFrameSplit::has_tick() const {
  return _internal_has_tick();
}
inline void CSVCMsg_FullFrameSplit::clear_tick() {
  tick_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FullFrameSplit.tick)
  return _internal_tick();
}
inline void CSVCMsg_FullFrameSplit::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tick_ = value;
}
inline void CSVCMsg_FullFrameSplit::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FullFrameSplit.tick)
}

// optional int32 section = 2;
inline bool CSVCMsg_FullFrameSplit::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_FullFrameSplit::has_section() const {
  return _internal_has_section();
}
inline void CSVCMsg_FullFrameSplit::clear_section() {
  section_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::section() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FullFrameSplit.section)
  return _internal_section();
}
inline void CSVCMsg_FullFrameSplit::_internal_set_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  section_ = value;
}
inline void CSVCMsg_FullFrameSplit::set_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FullFrameSplit.section)
}

// optional int32 total = 3;
inline bool CSVCMsg_FullFrameSplit::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_FullFrameSplit::has_total() const {
  return _internal_has_total();
}
inline void CSVCMsg_FullFrameSplit::clear_total() {
  total_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_FullFrameSplit::total() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FullFrameSplit.total)
  return _internal_total();
}
inline void CSVCMsg_FullFrameSplit::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  total_ = value;
}
inline void CSVCMsg_FullFrameSplit::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FullFrameSplit.total)
}

// optional bytes data = 4;
inline bool CSVCMsg_FullFrameSplit::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_FullFrameSplit::has_data() const {
  return _internal_has_data();
}
inline void CSVCMsg_FullFrameSplit::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_FullFrameSplit::data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FullFrameSplit.data)
  return _internal_data();
}
inline void CSVCMsg_FullFrameSplit::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_FullFrameSplit.data)
}
inline std::string* CSVCMsg_FullFrameSplit::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FullFrameSplit.data)
  return _internal_mutable_data();
}
inline const std::string& CSVCMsg_FullFrameSplit::_internal_data() const {
  return data_.Get();
}
inline void CSVCMsg_FullFrameSplit::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_FullFrameSplit::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_FullFrameSplit.data)
}
inline void CSVCMsg_FullFrameSplit::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_FullFrameSplit.data)
}
inline void CSVCMsg_FullFrameSplit::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_FullFrameSplit.data)
}
inline std::string* CSVCMsg_FullFrameSplit::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_FullFrameSplit::release_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_FullFrameSplit.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_FullFrameSplit::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_FullFrameSplit.data)
}

// -------------------------------------------------------------------

// CSVCMsg_HLTVStatus

// optional string master = 1;
inline bool CSVCMsg_HLTVStatus::_internal_has_master() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_HLTVStatus::has_master() const {
  return _internal_has_master();
}
inline void CSVCMsg_HLTVStatus::clear_master() {
  master_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_HLTVStatus::master() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HLTVStatus.master)
  return _internal_master();
}
inline void CSVCMsg_HLTVStatus::set_master(const std::string& value) {
  _internal_set_master(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HLTVStatus.master)
}
inline std::string* CSVCMsg_HLTVStatus::mutable_master() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_HLTVStatus.master)
  return _internal_mutable_master();
}
inline const std::string& CSVCMsg_HLTVStatus::_internal_master() const {
  return master_.Get();
}
inline void CSVCMsg_HLTVStatus::_internal_set_master(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_HLTVStatus::set_master(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  master_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_HLTVStatus.master)
}
inline void CSVCMsg_HLTVStatus::set_master(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_HLTVStatus.master)
}
inline void CSVCMsg_HLTVStatus::set_master(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_HLTVStatus.master)
}
inline std::string* CSVCMsg_HLTVStatus::_internal_mutable_master() {
  _has_bits_[0] |= 0x00000001u;
  return master_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_HLTVStatus::release_master() {
  // @@protoc_insertion_point(field_release:CSVCMsg_HLTVStatus.master)
  if (!_internal_has_master()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return master_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_HLTVStatus::set_allocated_master(std::string* master) {
  if (master != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  master_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_HLTVStatus.master)
}

// optional int32 clients = 2;
inline bool CSVCMsg_HLTVStatus::_internal_has_clients() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_HLTVStatus::has_clients() const {
  return _internal_has_clients();
}
inline void CSVCMsg_HLTVStatus::clear_clients() {
  clients_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::_internal_clients() const {
  return clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::clients() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HLTVStatus.clients)
  return _internal_clients();
}
inline void CSVCMsg_HLTVStatus::_internal_set_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  clients_ = value;
}
inline void CSVCMsg_HLTVStatus::set_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clients(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HLTVStatus.clients)
}

// optional int32 slots = 3;
inline bool CSVCMsg_HLTVStatus::_internal_has_slots() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_HLTVStatus::has_slots() const {
  return _internal_has_slots();
}
inline void CSVCMsg_HLTVStatus::clear_slots() {
  slots_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::_internal_slots() const {
  return slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::slots() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HLTVStatus.slots)
  return _internal_slots();
}
inline void CSVCMsg_HLTVStatus::_internal_set_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  slots_ = value;
}
inline void CSVCMsg_HLTVStatus::set_slots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slots(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HLTVStatus.slots)
}

// optional int32 proxies = 4;
inline bool CSVCMsg_HLTVStatus::_internal_has_proxies() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_HLTVStatus::has_proxies() const {
  return _internal_has_proxies();
}
inline void CSVCMsg_HLTVStatus::clear_proxies() {
  proxies_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::_internal_proxies() const {
  return proxies_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_HLTVStatus::proxies() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_HLTVStatus.proxies)
  return _internal_proxies();
}
inline void CSVCMsg_HLTVStatus::_internal_set_proxies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  proxies_ = value;
}
inline void CSVCMsg_HLTVStatus::set_proxies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proxies(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_HLTVStatus.proxies)
}

// -------------------------------------------------------------------

// CSVCMsg_ServerSteamID

// optional uint64 steam_id = 1;
inline bool CSVCMsg_ServerSteamID::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ServerSteamID::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CSVCMsg_ServerSteamID::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_ServerSteamID::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_ServerSteamID::steam_id() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ServerSteamID.steam_id)
  return _internal_steam_id();
}
inline void CSVCMsg_ServerSteamID::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CSVCMsg_ServerSteamID::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ServerSteamID.steam_id)
}

// -------------------------------------------------------------------

// CSVCMsg_CmdKeyValues

// optional bytes data = 1;
inline bool CSVCMsg_CmdKeyValues::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_CmdKeyValues::has_data() const {
  return _internal_has_data();
}
inline void CSVCMsg_CmdKeyValues::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_CmdKeyValues::data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_CmdKeyValues.data)
  return _internal_data();
}
inline void CSVCMsg_CmdKeyValues::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_CmdKeyValues.data)
}
inline std::string* CSVCMsg_CmdKeyValues::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_CmdKeyValues.data)
  return _internal_mutable_data();
}
inline const std::string& CSVCMsg_CmdKeyValues::_internal_data() const {
  return data_.Get();
}
inline void CSVCMsg_CmdKeyValues::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_CmdKeyValues::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_CmdKeyValues.data)
}
inline void CSVCMsg_CmdKeyValues::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_CmdKeyValues.data)
}
inline void CSVCMsg_CmdKeyValues::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_CmdKeyValues.data)
}
inline std::string* CSVCMsg_CmdKeyValues::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_CmdKeyValues::release_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_CmdKeyValues.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_CmdKeyValues::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_CmdKeyValues.data)
}

// -------------------------------------------------------------------

// CSVCMsg_RconServerDetails

// optional bytes token = 1;
inline bool CSVCMsg_RconServerDetails::_internal_has_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_RconServerDetails::has_token() const {
  return _internal_has_token();
}
inline void CSVCMsg_RconServerDetails::clear_token() {
  token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_RconServerDetails::token() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_RconServerDetails.token)
  return _internal_token();
}
inline void CSVCMsg_RconServerDetails::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_RconServerDetails.token)
}
inline std::string* CSVCMsg_RconServerDetails::mutable_token() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_RconServerDetails.token)
  return _internal_mutable_token();
}
inline const std::string& CSVCMsg_RconServerDetails::_internal_token() const {
  return token_.Get();
}
inline void CSVCMsg_RconServerDetails::_internal_set_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_RconServerDetails::set_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_RconServerDetails.token)
}
inline void CSVCMsg_RconServerDetails::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_RconServerDetails.token)
}
inline void CSVCMsg_RconServerDetails::set_token(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_RconServerDetails.token)
}
inline std::string* CSVCMsg_RconServerDetails::_internal_mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_RconServerDetails::release_token() {
  // @@protoc_insertion_point(field_release:CSVCMsg_RconServerDetails.token)
  if (!_internal_has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_RconServerDetails::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_RconServerDetails.token)
}

// optional string details = 2;
inline bool CSVCMsg_RconServerDetails::_internal_has_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_RconServerDetails::has_details() const {
  return _internal_has_details();
}
inline void CSVCMsg_RconServerDetails::clear_details() {
  details_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_RconServerDetails::details() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_RconServerDetails.details)
  return _internal_details();
}
inline void CSVCMsg_RconServerDetails::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_RconServerDetails.details)
}
inline std::string* CSVCMsg_RconServerDetails::mutable_details() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_RconServerDetails.details)
  return _internal_mutable_details();
}
inline const std::string& CSVCMsg_RconServerDetails::_internal_details() const {
  return details_.Get();
}
inline void CSVCMsg_RconServerDetails::_internal_set_details(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_RconServerDetails::set_details(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  details_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_RconServerDetails.details)
}
inline void CSVCMsg_RconServerDetails::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_RconServerDetails.details)
}
inline void CSVCMsg_RconServerDetails::set_details(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  details_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_RconServerDetails.details)
}
inline std::string* CSVCMsg_RconServerDetails::_internal_mutable_details() {
  _has_bits_[0] |= 0x00000002u;
  return details_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_RconServerDetails::release_details() {
  // @@protoc_insertion_point(field_release:CSVCMsg_RconServerDetails.details)
  if (!_internal_has_details()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return details_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_RconServerDetails::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_RconServerDetails.details)
}

// -------------------------------------------------------------------

// CMsgIPCAddress

// optional fixed64 computer_guid = 1;
inline bool CMsgIPCAddress::_internal_has_computer_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgIPCAddress::has_computer_guid() const {
  return _internal_has_computer_guid();
}
inline void CMsgIPCAddress::clear_computer_guid() {
  computer_guid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgIPCAddress::_internal_computer_guid() const {
  return computer_guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgIPCAddress::computer_guid() const {
  // @@protoc_insertion_point(field_get:CMsgIPCAddress.computer_guid)
  return _internal_computer_guid();
}
inline void CMsgIPCAddress::_internal_set_computer_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  computer_guid_ = value;
}
inline void CMsgIPCAddress::set_computer_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_computer_guid(value);
  // @@protoc_insertion_point(field_set:CMsgIPCAddress.computer_guid)
}

// optional uint32 process_id = 2;
inline bool CMsgIPCAddress::_internal_has_process_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgIPCAddress::has_process_id() const {
  return _internal_has_process_id();
}
inline void CMsgIPCAddress::clear_process_id() {
  process_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgIPCAddress::_internal_process_id() const {
  return process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgIPCAddress::process_id() const {
  // @@protoc_insertion_point(field_get:CMsgIPCAddress.process_id)
  return _internal_process_id();
}
inline void CMsgIPCAddress::_internal_set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  process_id_ = value;
}
inline void CMsgIPCAddress::set_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_process_id(value);
  // @@protoc_insertion_point(field_set:CMsgIPCAddress.process_id)
}

// -------------------------------------------------------------------

// CMsgServerPeer

// optional int32 player_slot = 1;
inline bool CMsgServerPeer::_internal_has_player_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerPeer::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgServerPeer::clear_player_slot() {
  player_slot_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerPeer::_internal_player_slot() const {
  return player_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerPeer::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.player_slot)
  return _internal_player_slot();
}
inline void CMsgServerPeer::_internal_set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_slot_ = value;
}
inline void CMsgServerPeer::set_player_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgServerPeer.player_slot)
}

// optional fixed64 steamid = 2;
inline bool CMsgServerPeer::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerPeer::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgServerPeer::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerPeer::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerPeer::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.steamid)
  return _internal_steamid();
}
inline void CMsgServerPeer::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgServerPeer::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgServerPeer.steamid)
}

// optional .CMsgIPCAddress ipc = 3;
inline bool CMsgServerPeer::_internal_has_ipc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ipc_ != nullptr);
  return value;
}
inline bool CMsgServerPeer::has_ipc() const {
  return _internal_has_ipc();
}
inline void CMsgServerPeer::clear_ipc() {
  if (ipc_ != nullptr) ipc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgIPCAddress& CMsgServerPeer::_internal_ipc() const {
  const ::CMsgIPCAddress* p = ipc_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgIPCAddress&>(
      ::_CMsgIPCAddress_default_instance_);
}
inline const ::CMsgIPCAddress& CMsgServerPeer::ipc() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.ipc)
  return _internal_ipc();
}
inline void CMsgServerPeer::unsafe_arena_set_allocated_ipc(
    ::CMsgIPCAddress* ipc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ipc_);
  }
  ipc_ = ipc;
  if (ipc) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerPeer.ipc)
}
inline ::CMsgIPCAddress* CMsgServerPeer::release_ipc() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPCAddress* temp = ipc_;
  ipc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgIPCAddress* CMsgServerPeer::unsafe_arena_release_ipc() {
  // @@protoc_insertion_point(field_release:CMsgServerPeer.ipc)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgIPCAddress* temp = ipc_;
  ipc_ = nullptr;
  return temp;
}
inline ::CMsgIPCAddress* CMsgServerPeer::_internal_mutable_ipc() {
  _has_bits_[0] |= 0x00000001u;
  if (ipc_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgIPCAddress>(GetArena());
    ipc_ = p;
  }
  return ipc_;
}
inline ::CMsgIPCAddress* CMsgServerPeer::mutable_ipc() {
  // @@protoc_insertion_point(field_mutable:CMsgServerPeer.ipc)
  return _internal_mutable_ipc();
}
inline void CMsgServerPeer::set_allocated_ipc(::CMsgIPCAddress* ipc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ipc_;
  }
  if (ipc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ipc);
    if (message_arena != submessage_arena) {
      ipc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ipc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipc_ = ipc;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerPeer.ipc)
}

// optional bool they_hear_you = 4;
inline bool CMsgServerPeer::_internal_has_they_hear_you() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerPeer::has_they_hear_you() const {
  return _internal_has_they_hear_you();
}
inline void CMsgServerPeer::clear_they_hear_you() {
  they_hear_you_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgServerPeer::_internal_they_hear_you() const {
  return they_hear_you_;
}
inline bool CMsgServerPeer::they_hear_you() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.they_hear_you)
  return _internal_they_hear_you();
}
inline void CMsgServerPeer::_internal_set_they_hear_you(bool value) {
  _has_bits_[0] |= 0x00000008u;
  they_hear_you_ = value;
}
inline void CMsgServerPeer::set_they_hear_you(bool value) {
  _internal_set_they_hear_you(value);
  // @@protoc_insertion_point(field_set:CMsgServerPeer.they_hear_you)
}

// optional bool you_hear_them = 5;
inline bool CMsgServerPeer::_internal_has_you_hear_them() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerPeer::has_you_hear_them() const {
  return _internal_has_you_hear_them();
}
inline void CMsgServerPeer::clear_you_hear_them() {
  you_hear_them_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgServerPeer::_internal_you_hear_them() const {
  return you_hear_them_;
}
inline bool CMsgServerPeer::you_hear_them() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.you_hear_them)
  return _internal_you_hear_them();
}
inline void CMsgServerPeer::_internal_set_you_hear_them(bool value) {
  _has_bits_[0] |= 0x00000010u;
  you_hear_them_ = value;
}
inline void CMsgServerPeer::set_you_hear_them(bool value) {
  _internal_set_you_hear_them(value);
  // @@protoc_insertion_point(field_set:CMsgServerPeer.you_hear_them)
}

// optional bool is_listenserver_host = 6;
inline bool CMsgServerPeer::_internal_has_is_listenserver_host() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerPeer::has_is_listenserver_host() const {
  return _internal_has_is_listenserver_host();
}
inline void CMsgServerPeer::clear_is_listenserver_host() {
  is_listenserver_host_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgServerPeer::_internal_is_listenserver_host() const {
  return is_listenserver_host_;
}
inline bool CMsgServerPeer::is_listenserver_host() const {
  // @@protoc_insertion_point(field_get:CMsgServerPeer.is_listenserver_host)
  return _internal_is_listenserver_host();
}
inline void CMsgServerPeer::_internal_set_is_listenserver_host(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_listenserver_host_ = value;
}
inline void CMsgServerPeer::set_is_listenserver_host(bool value) {
  _internal_set_is_listenserver_host(value);
  // @@protoc_insertion_point(field_set:CMsgServerPeer.is_listenserver_host)
}

// -------------------------------------------------------------------

// CSVCMsg_PeerList

// repeated .CMsgServerPeer peer = 1;
inline int CSVCMsg_PeerList::_internal_peer_size() const {
  return peer_.size();
}
inline int CSVCMsg_PeerList::peer_size() const {
  return _internal_peer_size();
}
inline void CSVCMsg_PeerList::clear_peer() {
  peer_.Clear();
}
inline ::CMsgServerPeer* CSVCMsg_PeerList::mutable_peer(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_PeerList.peer)
  return peer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerPeer >*
CSVCMsg_PeerList::mutable_peer() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_PeerList.peer)
  return &peer_;
}
inline const ::CMsgServerPeer& CSVCMsg_PeerList::_internal_peer(int index) const {
  return peer_.Get(index);
}
inline const ::CMsgServerPeer& CSVCMsg_PeerList::peer(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_PeerList.peer)
  return _internal_peer(index);
}
inline ::CMsgServerPeer* CSVCMsg_PeerList::_internal_add_peer() {
  return peer_.Add();
}
inline ::CMsgServerPeer* CSVCMsg_PeerList::add_peer() {
  // @@protoc_insertion_point(field_add:CSVCMsg_PeerList.peer)
  return _internal_add_peer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerPeer >&
CSVCMsg_PeerList::peer() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_PeerList.peer)
  return peer_;
}

// -------------------------------------------------------------------

// CSVCMsg_ClearAllStringTables

// optional string mapname = 1;
inline bool CSVCMsg_ClearAllStringTables::_internal_has_mapname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_ClearAllStringTables::has_mapname() const {
  return _internal_has_mapname();
}
inline void CSVCMsg_ClearAllStringTables::clear_mapname() {
  mapname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_ClearAllStringTables::mapname() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_ClearAllStringTables.mapname)
  return _internal_mapname();
}
inline void CSVCMsg_ClearAllStringTables::set_mapname(const std::string& value) {
  _internal_set_mapname(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_ClearAllStringTables.mapname)
}
inline std::string* CSVCMsg_ClearAllStringTables::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_ClearAllStringTables.mapname)
  return _internal_mutable_mapname();
}
inline const std::string& CSVCMsg_ClearAllStringTables::_internal_mapname() const {
  return mapname_.Get();
}
inline void CSVCMsg_ClearAllStringTables::_internal_set_mapname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_ClearAllStringTables::set_mapname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mapname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_ClearAllStringTables.mapname)
}
inline void CSVCMsg_ClearAllStringTables::set_mapname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_ClearAllStringTables.mapname)
}
inline void CSVCMsg_ClearAllStringTables::set_mapname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_ClearAllStringTables.mapname)
}
inline std::string* CSVCMsg_ClearAllStringTables::_internal_mutable_mapname() {
  _has_bits_[0] |= 0x00000001u;
  return mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_ClearAllStringTables::release_mapname() {
  // @@protoc_insertion_point(field_release:CSVCMsg_ClearAllStringTables.mapname)
  if (!_internal_has_mapname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mapname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_ClearAllStringTables::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_ClearAllStringTables.mapname)
}

// -------------------------------------------------------------------

// ProtoFlattenedSerializerField_t

// optional int32 var_type_sym = 1;
inline bool ProtoFlattenedSerializerField_t::_internal_has_var_type_sym() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_var_type_sym() const {
  return _internal_has_var_type_sym();
}
inline void ProtoFlattenedSerializerField_t::clear_var_type_sym() {
  var_type_sym_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_var_type_sym() const {
  return var_type_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::var_type_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.var_type_sym)
  return _internal_var_type_sym();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_var_type_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_type_sym_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_var_type_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.var_type_sym)
}

// optional int32 var_name_sym = 2;
inline bool ProtoFlattenedSerializerField_t::_internal_has_var_name_sym() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_var_name_sym() const {
  return _internal_has_var_name_sym();
}
inline void ProtoFlattenedSerializerField_t::clear_var_name_sym() {
  var_name_sym_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_var_name_sym() const {
  return var_name_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::var_name_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.var_name_sym)
  return _internal_var_name_sym();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_var_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_name_sym_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_var_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_name_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.var_name_sym)
}

// optional int32 bit_count = 3;
inline bool ProtoFlattenedSerializerField_t::_internal_has_bit_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_bit_count() const {
  return _internal_has_bit_count();
}
inline void ProtoFlattenedSerializerField_t::clear_bit_count() {
  bit_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_bit_count() const {
  return bit_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::bit_count() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.bit_count)
  return _internal_bit_count();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_bit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  bit_count_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_bit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bit_count(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.bit_count)
}

// optional float low_value = 4;
inline bool ProtoFlattenedSerializerField_t::_internal_has_low_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_low_value() const {
  return _internal_has_low_value();
}
inline void ProtoFlattenedSerializerField_t::clear_low_value() {
  low_value_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProtoFlattenedSerializerField_t::_internal_low_value() const {
  return low_value_;
}
inline float ProtoFlattenedSerializerField_t::low_value() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.low_value)
  return _internal_low_value();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_low_value(float value) {
  _has_bits_[0] |= 0x00000008u;
  low_value_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_low_value(float value) {
  _internal_set_low_value(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.low_value)
}

// optional float high_value = 5;
inline bool ProtoFlattenedSerializerField_t::_internal_has_high_value() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_high_value() const {
  return _internal_has_high_value();
}
inline void ProtoFlattenedSerializerField_t::clear_high_value() {
  high_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ProtoFlattenedSerializerField_t::_internal_high_value() const {
  return high_value_;
}
inline float ProtoFlattenedSerializerField_t::high_value() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.high_value)
  return _internal_high_value();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_high_value(float value) {
  _has_bits_[0] |= 0x00000010u;
  high_value_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_high_value(float value) {
  _internal_set_high_value(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.high_value)
}

// optional int32 encode_flags = 6;
inline bool ProtoFlattenedSerializerField_t::_internal_has_encode_flags() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_encode_flags() const {
  return _internal_has_encode_flags();
}
inline void ProtoFlattenedSerializerField_t::clear_encode_flags() {
  encode_flags_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_encode_flags() const {
  return encode_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::encode_flags() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.encode_flags)
  return _internal_encode_flags();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_encode_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  encode_flags_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_encode_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encode_flags(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.encode_flags)
}

// optional int32 field_serializer_name_sym = 7;
inline bool ProtoFlattenedSerializerField_t::_internal_has_field_serializer_name_sym() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_field_serializer_name_sym() const {
  return _internal_has_field_serializer_name_sym();
}
inline void ProtoFlattenedSerializerField_t::clear_field_serializer_name_sym() {
  field_serializer_name_sym_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_field_serializer_name_sym() const {
  return field_serializer_name_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::field_serializer_name_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.field_serializer_name_sym)
  return _internal_field_serializer_name_sym();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_field_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  field_serializer_name_sym_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_field_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_serializer_name_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.field_serializer_name_sym)
}

// optional int32 field_serializer_version = 8;
inline bool ProtoFlattenedSerializerField_t::_internal_has_field_serializer_version() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_field_serializer_version() const {
  return _internal_has_field_serializer_version();
}
inline void ProtoFlattenedSerializerField_t::clear_field_serializer_version() {
  field_serializer_version_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_field_serializer_version() const {
  return field_serializer_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::field_serializer_version() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.field_serializer_version)
  return _internal_field_serializer_version();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_field_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  field_serializer_version_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_field_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_serializer_version(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.field_serializer_version)
}

// optional int32 send_node_sym = 9;
inline bool ProtoFlattenedSerializerField_t::_internal_has_send_node_sym() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_send_node_sym() const {
  return _internal_has_send_node_sym();
}
inline void ProtoFlattenedSerializerField_t::clear_send_node_sym() {
  send_node_sym_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_send_node_sym() const {
  return send_node_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::send_node_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.send_node_sym)
  return _internal_send_node_sym();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_send_node_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  send_node_sym_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_send_node_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_send_node_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.send_node_sym)
}

// optional int32 var_encoder_sym = 10;
inline bool ProtoFlattenedSerializerField_t::_internal_has_var_encoder_sym() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializerField_t::has_var_encoder_sym() const {
  return _internal_has_var_encoder_sym();
}
inline void ProtoFlattenedSerializerField_t::clear_var_encoder_sym() {
  var_encoder_sym_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::_internal_var_encoder_sym() const {
  return var_encoder_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializerField_t::var_encoder_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializerField_t.var_encoder_sym)
  return _internal_var_encoder_sym();
}
inline void ProtoFlattenedSerializerField_t::_internal_set_var_encoder_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  var_encoder_sym_ = value;
}
inline void ProtoFlattenedSerializerField_t::set_var_encoder_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_encoder_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializerField_t.var_encoder_sym)
}

// -------------------------------------------------------------------

// ProtoFlattenedSerializer_t

// optional int32 serializer_name_sym = 1;
inline bool ProtoFlattenedSerializer_t::_internal_has_serializer_name_sym() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializer_t::has_serializer_name_sym() const {
  return _internal_has_serializer_name_sym();
}
inline void ProtoFlattenedSerializer_t::clear_serializer_name_sym() {
  serializer_name_sym_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::_internal_serializer_name_sym() const {
  return serializer_name_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::serializer_name_sym() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializer_t.serializer_name_sym)
  return _internal_serializer_name_sym();
}
inline void ProtoFlattenedSerializer_t::_internal_set_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  serializer_name_sym_ = value;
}
inline void ProtoFlattenedSerializer_t::set_serializer_name_sym(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serializer_name_sym(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializer_t.serializer_name_sym)
}

// optional int32 serializer_version = 2;
inline bool ProtoFlattenedSerializer_t::_internal_has_serializer_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProtoFlattenedSerializer_t::has_serializer_version() const {
  return _internal_has_serializer_version();
}
inline void ProtoFlattenedSerializer_t::clear_serializer_version() {
  serializer_version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::_internal_serializer_version() const {
  return serializer_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::serializer_version() const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializer_t.serializer_version)
  return _internal_serializer_version();
}
inline void ProtoFlattenedSerializer_t::_internal_set_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  serializer_version_ = value;
}
inline void ProtoFlattenedSerializer_t::set_serializer_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serializer_version(value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializer_t.serializer_version)
}

// repeated int32 fields_index = 3;
inline int ProtoFlattenedSerializer_t::_internal_fields_index_size() const {
  return fields_index_.size();
}
inline int ProtoFlattenedSerializer_t::fields_index_size() const {
  return _internal_fields_index_size();
}
inline void ProtoFlattenedSerializer_t::clear_fields_index() {
  fields_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::_internal_fields_index(int index) const {
  return fields_index_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoFlattenedSerializer_t::fields_index(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFlattenedSerializer_t.fields_index)
  return _internal_fields_index(index);
}
inline void ProtoFlattenedSerializer_t::set_fields_index(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  fields_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoFlattenedSerializer_t.fields_index)
}
inline void ProtoFlattenedSerializer_t::_internal_add_fields_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  fields_index_.Add(value);
}
inline void ProtoFlattenedSerializer_t::add_fields_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_fields_index(value);
  // @@protoc_insertion_point(field_add:ProtoFlattenedSerializer_t.fields_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoFlattenedSerializer_t::_internal_fields_index() const {
  return fields_index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoFlattenedSerializer_t::fields_index() const {
  // @@protoc_insertion_point(field_list:ProtoFlattenedSerializer_t.fields_index)
  return _internal_fields_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoFlattenedSerializer_t::_internal_mutable_fields_index() {
  return &fields_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoFlattenedSerializer_t::mutable_fields_index() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFlattenedSerializer_t.fields_index)
  return _internal_mutable_fields_index();
}

// -------------------------------------------------------------------

// CSVCMsg_FlattenedSerializer

// repeated .ProtoFlattenedSerializer_t serializers = 1;
inline int CSVCMsg_FlattenedSerializer::_internal_serializers_size() const {
  return serializers_.size();
}
inline int CSVCMsg_FlattenedSerializer::serializers_size() const {
  return _internal_serializers_size();
}
inline void CSVCMsg_FlattenedSerializer::clear_serializers() {
  serializers_.Clear();
}
inline ::ProtoFlattenedSerializer_t* CSVCMsg_FlattenedSerializer::mutable_serializers(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FlattenedSerializer.serializers)
  return serializers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializer_t >*
CSVCMsg_FlattenedSerializer::mutable_serializers() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_FlattenedSerializer.serializers)
  return &serializers_;
}
inline const ::ProtoFlattenedSerializer_t& CSVCMsg_FlattenedSerializer::_internal_serializers(int index) const {
  return serializers_.Get(index);
}
inline const ::ProtoFlattenedSerializer_t& CSVCMsg_FlattenedSerializer::serializers(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FlattenedSerializer.serializers)
  return _internal_serializers(index);
}
inline ::ProtoFlattenedSerializer_t* CSVCMsg_FlattenedSerializer::_internal_add_serializers() {
  return serializers_.Add();
}
inline ::ProtoFlattenedSerializer_t* CSVCMsg_FlattenedSerializer::add_serializers() {
  // @@protoc_insertion_point(field_add:CSVCMsg_FlattenedSerializer.serializers)
  return _internal_add_serializers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializer_t >&
CSVCMsg_FlattenedSerializer::serializers() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_FlattenedSerializer.serializers)
  return serializers_;
}

// repeated string symbols = 2;
inline int CSVCMsg_FlattenedSerializer::_internal_symbols_size() const {
  return symbols_.size();
}
inline int CSVCMsg_FlattenedSerializer::symbols_size() const {
  return _internal_symbols_size();
}
inline void CSVCMsg_FlattenedSerializer::clear_symbols() {
  symbols_.Clear();
}
inline std::string* CSVCMsg_FlattenedSerializer::add_symbols() {
  // @@protoc_insertion_point(field_add_mutable:CSVCMsg_FlattenedSerializer.symbols)
  return _internal_add_symbols();
}
inline const std::string& CSVCMsg_FlattenedSerializer::_internal_symbols(int index) const {
  return symbols_.Get(index);
}
inline const std::string& CSVCMsg_FlattenedSerializer::symbols(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FlattenedSerializer.symbols)
  return _internal_symbols(index);
}
inline std::string* CSVCMsg_FlattenedSerializer::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FlattenedSerializer.symbols)
  return symbols_.Mutable(index);
}
inline void CSVCMsg_FlattenedSerializer::set_symbols(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CSVCMsg_FlattenedSerializer.symbols)
  symbols_.Mutable(index)->assign(value);
}
inline void CSVCMsg_FlattenedSerializer::set_symbols(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CSVCMsg_FlattenedSerializer.symbols)
  symbols_.Mutable(index)->assign(std::move(value));
}
inline void CSVCMsg_FlattenedSerializer::set_symbols(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CSVCMsg_FlattenedSerializer.symbols)
}
inline void CSVCMsg_FlattenedSerializer::set_symbols(int index, const char* value, size_t size) {
  symbols_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_FlattenedSerializer.symbols)
}
inline std::string* CSVCMsg_FlattenedSerializer::_internal_add_symbols() {
  return symbols_.Add();
}
inline void CSVCMsg_FlattenedSerializer::add_symbols(const std::string& value) {
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CSVCMsg_FlattenedSerializer.symbols)
}
inline void CSVCMsg_FlattenedSerializer::add_symbols(std::string&& value) {
  symbols_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CSVCMsg_FlattenedSerializer.symbols)
}
inline void CSVCMsg_FlattenedSerializer::add_symbols(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  symbols_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CSVCMsg_FlattenedSerializer.symbols)
}
inline void CSVCMsg_FlattenedSerializer::add_symbols(const char* value, size_t size) {
  symbols_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CSVCMsg_FlattenedSerializer.symbols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSVCMsg_FlattenedSerializer::symbols() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_FlattenedSerializer.symbols)
  return symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSVCMsg_FlattenedSerializer::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_FlattenedSerializer.symbols)
  return &symbols_;
}

// repeated .ProtoFlattenedSerializerField_t fields = 3;
inline int CSVCMsg_FlattenedSerializer::_internal_fields_size() const {
  return fields_.size();
}
inline int CSVCMsg_FlattenedSerializer::fields_size() const {
  return _internal_fields_size();
}
inline void CSVCMsg_FlattenedSerializer::clear_fields() {
  fields_.Clear();
}
inline ::ProtoFlattenedSerializerField_t* CSVCMsg_FlattenedSerializer::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_FlattenedSerializer.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializerField_t >*
CSVCMsg_FlattenedSerializer::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_FlattenedSerializer.fields)
  return &fields_;
}
inline const ::ProtoFlattenedSerializerField_t& CSVCMsg_FlattenedSerializer::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::ProtoFlattenedSerializerField_t& CSVCMsg_FlattenedSerializer::fields(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_FlattenedSerializer.fields)
  return _internal_fields(index);
}
inline ::ProtoFlattenedSerializerField_t* CSVCMsg_FlattenedSerializer::_internal_add_fields() {
  return fields_.Add();
}
inline ::ProtoFlattenedSerializerField_t* CSVCMsg_FlattenedSerializer::add_fields() {
  // @@protoc_insertion_point(field_add:CSVCMsg_FlattenedSerializer.fields)
  return _internal_add_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProtoFlattenedSerializerField_t >&
CSVCMsg_FlattenedSerializer::fields() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_FlattenedSerializer.fields)
  return fields_;
}

// -------------------------------------------------------------------

// CSVCMsg_StopSound

// optional fixed32 guid = 1;
inline bool CSVCMsg_StopSound::_internal_has_guid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_StopSound::has_guid() const {
  return _internal_has_guid();
}
inline void CSVCMsg_StopSound::clear_guid() {
  guid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_StopSound::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_StopSound::guid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_StopSound.guid)
  return _internal_guid();
}
inline void CSVCMsg_StopSound::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  guid_ = value;
}
inline void CSVCMsg_StopSound::set_guid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_StopSound.guid)
}

// -------------------------------------------------------------------

// CBidirMsg_RebroadcastGameEvent

// optional bool posttoserver = 1;
inline bool CBidirMsg_RebroadcastGameEvent::_internal_has_posttoserver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBidirMsg_RebroadcastGameEvent::has_posttoserver() const {
  return _internal_has_posttoserver();
}
inline void CBidirMsg_RebroadcastGameEvent::clear_posttoserver() {
  posttoserver_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CBidirMsg_RebroadcastGameEvent::_internal_posttoserver() const {
  return posttoserver_;
}
inline bool CBidirMsg_RebroadcastGameEvent::posttoserver() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RebroadcastGameEvent.posttoserver)
  return _internal_posttoserver();
}
inline void CBidirMsg_RebroadcastGameEvent::_internal_set_posttoserver(bool value) {
  _has_bits_[0] |= 0x00000001u;
  posttoserver_ = value;
}
inline void CBidirMsg_RebroadcastGameEvent::set_posttoserver(bool value) {
  _internal_set_posttoserver(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RebroadcastGameEvent.posttoserver)
}

// optional int32 buftype = 2;
inline bool CBidirMsg_RebroadcastGameEvent::_internal_has_buftype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBidirMsg_RebroadcastGameEvent::has_buftype() const {
  return _internal_has_buftype();
}
inline void CBidirMsg_RebroadcastGameEvent::clear_buftype() {
  buftype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBidirMsg_RebroadcastGameEvent::_internal_buftype() const {
  return buftype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBidirMsg_RebroadcastGameEvent::buftype() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RebroadcastGameEvent.buftype)
  return _internal_buftype();
}
inline void CBidirMsg_RebroadcastGameEvent::_internal_set_buftype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  buftype_ = value;
}
inline void CBidirMsg_RebroadcastGameEvent::set_buftype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buftype(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RebroadcastGameEvent.buftype)
}

// optional uint32 clientbitcount = 3;
inline bool CBidirMsg_RebroadcastGameEvent::_internal_has_clientbitcount() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CBidirMsg_RebroadcastGameEvent::has_clientbitcount() const {
  return _internal_has_clientbitcount();
}
inline void CBidirMsg_RebroadcastGameEvent::clear_clientbitcount() {
  clientbitcount_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RebroadcastGameEvent::_internal_clientbitcount() const {
  return clientbitcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RebroadcastGameEvent::clientbitcount() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RebroadcastGameEvent.clientbitcount)
  return _internal_clientbitcount();
}
inline void CBidirMsg_RebroadcastGameEvent::_internal_set_clientbitcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  clientbitcount_ = value;
}
inline void CBidirMsg_RebroadcastGameEvent::set_clientbitcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_clientbitcount(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RebroadcastGameEvent.clientbitcount)
}

// optional uint64 receivingclients = 4;
inline bool CBidirMsg_RebroadcastGameEvent::_internal_has_receivingclients() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBidirMsg_RebroadcastGameEvent::has_receivingclients() const {
  return _internal_has_receivingclients();
}
inline void CBidirMsg_RebroadcastGameEvent::clear_receivingclients() {
  receivingclients_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBidirMsg_RebroadcastGameEvent::_internal_receivingclients() const {
  return receivingclients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CBidirMsg_RebroadcastGameEvent::receivingclients() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RebroadcastGameEvent.receivingclients)
  return _internal_receivingclients();
}
inline void CBidirMsg_RebroadcastGameEvent::_internal_set_receivingclients(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  receivingclients_ = value;
}
inline void CBidirMsg_RebroadcastGameEvent::set_receivingclients(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_receivingclients(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RebroadcastGameEvent.receivingclients)
}

// -------------------------------------------------------------------

// CBidirMsg_RebroadcastSource

// optional int32 eventsource = 1;
inline bool CBidirMsg_RebroadcastSource::_internal_has_eventsource() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBidirMsg_RebroadcastSource::has_eventsource() const {
  return _internal_has_eventsource();
}
inline void CBidirMsg_RebroadcastSource::clear_eventsource() {
  eventsource_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBidirMsg_RebroadcastSource::_internal_eventsource() const {
  return eventsource_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CBidirMsg_RebroadcastSource::eventsource() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RebroadcastSource.eventsource)
  return _internal_eventsource();
}
inline void CBidirMsg_RebroadcastSource::_internal_set_eventsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  eventsource_ = value;
}
inline void CBidirMsg_RebroadcastSource::set_eventsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventsource(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RebroadcastSource.eventsource)
}

// -------------------------------------------------------------------

// SerializedNetAddress_t

// required bytes serializedAddress = 1;
inline bool SerializedNetAddress_t::_internal_has_serializedaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedNetAddress_t::has_serializedaddress() const {
  return _internal_has_serializedaddress();
}
inline void SerializedNetAddress_t::clear_serializedaddress() {
  serializedaddress_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedNetAddress_t::serializedaddress() const {
  // @@protoc_insertion_point(field_get:SerializedNetAddress_t.serializedAddress)
  return _internal_serializedaddress();
}
inline void SerializedNetAddress_t::set_serializedaddress(const std::string& value) {
  _internal_set_serializedaddress(value);
  // @@protoc_insertion_point(field_set:SerializedNetAddress_t.serializedAddress)
}
inline std::string* SerializedNetAddress_t::mutable_serializedaddress() {
  // @@protoc_insertion_point(field_mutable:SerializedNetAddress_t.serializedAddress)
  return _internal_mutable_serializedaddress();
}
inline const std::string& SerializedNetAddress_t::_internal_serializedaddress() const {
  return serializedaddress_.Get();
}
inline void SerializedNetAddress_t::_internal_set_serializedaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serializedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SerializedNetAddress_t::set_serializedaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serializedaddress_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SerializedNetAddress_t.serializedAddress)
}
inline void SerializedNetAddress_t::set_serializedaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serializedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SerializedNetAddress_t.serializedAddress)
}
inline void SerializedNetAddress_t::set_serializedaddress(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serializedaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SerializedNetAddress_t.serializedAddress)
}
inline std::string* SerializedNetAddress_t::_internal_mutable_serializedaddress() {
  _has_bits_[0] |= 0x00000001u;
  return serializedaddress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SerializedNetAddress_t::release_serializedaddress() {
  // @@protoc_insertion_point(field_release:SerializedNetAddress_t.serializedAddress)
  if (!_internal_has_serializedaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serializedaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SerializedNetAddress_t::set_allocated_serializedaddress(std::string* serializedaddress) {
  if (serializedaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serializedaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serializedaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SerializedNetAddress_t.serializedAddress)
}

// -------------------------------------------------------------------

// CBidirMsg_RelayInfo

// required .CBidirMsg_RelayInfo.Operation_t operation = 1 [default = RIO_REQUEST_RELAY];
inline bool CBidirMsg_RelayInfo::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CBidirMsg_RelayInfo::has_operation() const {
  return _internal_has_operation();
}
inline void CBidirMsg_RelayInfo::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CBidirMsg_RelayInfo_Operation_t CBidirMsg_RelayInfo::_internal_operation() const {
  return static_cast< ::CBidirMsg_RelayInfo_Operation_t >(operation_);
}
inline ::CBidirMsg_RelayInfo_Operation_t CBidirMsg_RelayInfo::operation() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayInfo.operation)
  return _internal_operation();
}
inline void CBidirMsg_RelayInfo::_internal_set_operation(::CBidirMsg_RelayInfo_Operation_t value) {
  assert(::CBidirMsg_RelayInfo_Operation_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void CBidirMsg_RelayInfo::set_operation(::CBidirMsg_RelayInfo_Operation_t value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RelayInfo.operation)
}

// optional .SerializedNetAddress_t serializedTargetAddress = 2;
inline bool CBidirMsg_RelayInfo::_internal_has_serializedtargetaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || serializedtargetaddress_ != nullptr);
  return value;
}
inline bool CBidirMsg_RelayInfo::has_serializedtargetaddress() const {
  return _internal_has_serializedtargetaddress();
}
inline void CBidirMsg_RelayInfo::clear_serializedtargetaddress() {
  if (serializedtargetaddress_ != nullptr) serializedtargetaddress_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayInfo::_internal_serializedtargetaddress() const {
  const ::SerializedNetAddress_t* p = serializedtargetaddress_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedNetAddress_t&>(
      ::_SerializedNetAddress_t_default_instance_);
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayInfo::serializedtargetaddress() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayInfo.serializedTargetAddress)
  return _internal_serializedtargetaddress();
}
inline void CBidirMsg_RelayInfo::unsafe_arena_set_allocated_serializedtargetaddress(
    ::SerializedNetAddress_t* serializedtargetaddress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serializedtargetaddress_);
  }
  serializedtargetaddress_ = serializedtargetaddress;
  if (serializedtargetaddress) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBidirMsg_RelayInfo.serializedTargetAddress)
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayInfo::release_serializedtargetaddress() {
  _has_bits_[0] &= ~0x00000001u;
  ::SerializedNetAddress_t* temp = serializedtargetaddress_;
  serializedtargetaddress_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayInfo::unsafe_arena_release_serializedtargetaddress() {
  // @@protoc_insertion_point(field_release:CBidirMsg_RelayInfo.serializedTargetAddress)
  _has_bits_[0] &= ~0x00000001u;
  ::SerializedNetAddress_t* temp = serializedtargetaddress_;
  serializedtargetaddress_ = nullptr;
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayInfo::_internal_mutable_serializedtargetaddress() {
  _has_bits_[0] |= 0x00000001u;
  if (serializedtargetaddress_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedNetAddress_t>(GetArena());
    serializedtargetaddress_ = p;
  }
  return serializedtargetaddress_;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayInfo::mutable_serializedtargetaddress() {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayInfo.serializedTargetAddress)
  return _internal_mutable_serializedtargetaddress();
}
inline void CBidirMsg_RelayInfo::set_allocated_serializedtargetaddress(::SerializedNetAddress_t* serializedtargetaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete serializedtargetaddress_;
  }
  if (serializedtargetaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serializedtargetaddress);
    if (message_arena != submessage_arena) {
      serializedtargetaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serializedtargetaddress, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serializedtargetaddress_ = serializedtargetaddress;
  // @@protoc_insertion_point(field_set_allocated:CBidirMsg_RelayInfo.serializedTargetAddress)
}

// optional uint32 additionalHops = 3;
inline bool CBidirMsg_RelayInfo::_internal_has_additionalhops() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBidirMsg_RelayInfo::has_additionalhops() const {
  return _internal_has_additionalhops();
}
inline void CBidirMsg_RelayInfo::clear_additionalhops() {
  additionalhops_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayInfo::_internal_additionalhops() const {
  return additionalhops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayInfo::additionalhops() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayInfo.additionalHops)
  return _internal_additionalhops();
}
inline void CBidirMsg_RelayInfo::_internal_set_additionalhops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  additionalhops_ = value;
}
inline void CBidirMsg_RelayInfo::set_additionalhops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additionalhops(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RelayInfo.additionalHops)
}

// -------------------------------------------------------------------

// SignedPayload_t

// required bytes payloadData = 1;
inline bool SignedPayload_t::_internal_has_payloaddata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignedPayload_t::has_payloaddata() const {
  return _internal_has_payloaddata();
}
inline void SignedPayload_t::clear_payloaddata() {
  payloaddata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignedPayload_t::payloaddata() const {
  // @@protoc_insertion_point(field_get:SignedPayload_t.payloadData)
  return _internal_payloaddata();
}
inline void SignedPayload_t::set_payloaddata(const std::string& value) {
  _internal_set_payloaddata(value);
  // @@protoc_insertion_point(field_set:SignedPayload_t.payloadData)
}
inline std::string* SignedPayload_t::mutable_payloaddata() {
  // @@protoc_insertion_point(field_mutable:SignedPayload_t.payloadData)
  return _internal_mutable_payloaddata();
}
inline const std::string& SignedPayload_t::_internal_payloaddata() const {
  return payloaddata_.Get();
}
inline void SignedPayload_t::_internal_set_payloaddata(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SignedPayload_t::set_payloaddata(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  payloaddata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SignedPayload_t.payloadData)
}
inline void SignedPayload_t::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SignedPayload_t.payloadData)
}
inline void SignedPayload_t::set_payloaddata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  payloaddata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SignedPayload_t.payloadData)
}
inline std::string* SignedPayload_t::_internal_mutable_payloaddata() {
  _has_bits_[0] |= 0x00000001u;
  return payloaddata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SignedPayload_t::release_payloaddata() {
  // @@protoc_insertion_point(field_release:SignedPayload_t.payloadData)
  if (!_internal_has_payloaddata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return payloaddata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignedPayload_t::set_allocated_payloaddata(std::string* payloaddata) {
  if (payloaddata != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  payloaddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payloaddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SignedPayload_t.payloadData)
}

// required uint32 signature = 2;
inline bool SignedPayload_t::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignedPayload_t::has_signature() const {
  return _internal_has_signature();
}
inline void SignedPayload_t::clear_signature() {
  signature_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignedPayload_t::_internal_signature() const {
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SignedPayload_t::signature() const {
  // @@protoc_insertion_point(field_get:SignedPayload_t.signature)
  return _internal_signature();
}
inline void SignedPayload_t::_internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  signature_ = value;
}
inline void SignedPayload_t::set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:SignedPayload_t.signature)
}

// required bool bPayloadEncrypted = 3;
inline bool SignedPayload_t::_internal_has_bpayloadencrypted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignedPayload_t::has_bpayloadencrypted() const {
  return _internal_has_bpayloadencrypted();
}
inline void SignedPayload_t::clear_bpayloadencrypted() {
  bpayloadencrypted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SignedPayload_t::_internal_bpayloadencrypted() const {
  return bpayloadencrypted_;
}
inline bool SignedPayload_t::bpayloadencrypted() const {
  // @@protoc_insertion_point(field_get:SignedPayload_t.bPayloadEncrypted)
  return _internal_bpayloadencrypted();
}
inline void SignedPayload_t::_internal_set_bpayloadencrypted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  bpayloadencrypted_ = value;
}
inline void SignedPayload_t::set_bpayloadencrypted(bool value) {
  _internal_set_bpayloadencrypted(value);
  // @@protoc_insertion_point(field_set:SignedPayload_t.bPayloadEncrypted)
}

// -------------------------------------------------------------------

// CBidirMsg_RelayPacket_SignedDestinationAddress_t

// required .SerializedNetAddress_t serializedAddr = 1;
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_has_serializedaddr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || serializedaddr_ != nullptr);
  return value;
}
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::has_serializedaddr() const {
  return _internal_has_serializedaddr();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::clear_serializedaddr() {
  if (serializedaddr_ != nullptr) serializedaddr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_serializedaddr() const {
  const ::SerializedNetAddress_t* p = serializedaddr_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedNetAddress_t&>(
      ::_SerializedNetAddress_t_default_instance_);
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayPacket_SignedDestinationAddress_t::serializedaddr() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.SignedDestinationAddress_t.serializedAddr)
  return _internal_serializedaddr();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::unsafe_arena_set_allocated_serializedaddr(
    ::SerializedNetAddress_t* serializedaddr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(serializedaddr_);
  }
  serializedaddr_ = serializedaddr;
  if (serializedaddr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBidirMsg_RelayPacket.SignedDestinationAddress_t.serializedAddr)
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket_SignedDestinationAddress_t::release_serializedaddr() {
  _has_bits_[0] &= ~0x00000002u;
  ::SerializedNetAddress_t* temp = serializedaddr_;
  serializedaddr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket_SignedDestinationAddress_t::unsafe_arena_release_serializedaddr() {
  // @@protoc_insertion_point(field_release:CBidirMsg_RelayPacket.SignedDestinationAddress_t.serializedAddr)
  _has_bits_[0] &= ~0x00000002u;
  ::SerializedNetAddress_t* temp = serializedaddr_;
  serializedaddr_ = nullptr;
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_mutable_serializedaddr() {
  _has_bits_[0] |= 0x00000002u;
  if (serializedaddr_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedNetAddress_t>(GetArena());
    serializedaddr_ = p;
  }
  return serializedaddr_;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket_SignedDestinationAddress_t::mutable_serializedaddr() {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayPacket.SignedDestinationAddress_t.serializedAddr)
  return _internal_mutable_serializedaddr();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_allocated_serializedaddr(::SerializedNetAddress_t* serializedaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete serializedaddr_;
  }
  if (serializedaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(serializedaddr);
    if (message_arena != submessage_arena) {
      serializedaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serializedaddr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serializedaddr_ = serializedaddr;
  // @@protoc_insertion_point(field_set_allocated:CBidirMsg_RelayPacket.SignedDestinationAddress_t.serializedAddr)
}

// required uint32 signature = 2;
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::has_signature() const {
  return _internal_has_signature();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::clear_signature() {
  signature_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_signature() const {
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayPacket_SignedDestinationAddress_t::signature() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.SignedDestinationAddress_t.signature)
  return _internal_signature();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  signature_ = value;
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_signature(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RelayPacket.SignedDestinationAddress_t.signature)
}

// optional bytes encryptedPayloadKey = 3;
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_has_encryptedpayloadkey() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CBidirMsg_RelayPacket_SignedDestinationAddress_t::has_encryptedpayloadkey() const {
  return _internal_has_encryptedpayloadkey();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::clear_encryptedpayloadkey() {
  encryptedpayloadkey_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CBidirMsg_RelayPacket_SignedDestinationAddress_t::encryptedpayloadkey() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
  return _internal_encryptedpayloadkey();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_encryptedpayloadkey(const std::string& value) {
  _internal_set_encryptedpayloadkey(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
}
inline std::string* CBidirMsg_RelayPacket_SignedDestinationAddress_t::mutable_encryptedpayloadkey() {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
  return _internal_mutable_encryptedpayloadkey();
}
inline const std::string& CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_encryptedpayloadkey() const {
  return encryptedpayloadkey_.Get();
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_set_encryptedpayloadkey(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryptedpayloadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_encryptedpayloadkey(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encryptedpayloadkey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_encryptedpayloadkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encryptedpayloadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_encryptedpayloadkey(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encryptedpayloadkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
}
inline std::string* CBidirMsg_RelayPacket_SignedDestinationAddress_t::_internal_mutable_encryptedpayloadkey() {
  _has_bits_[0] |= 0x00000001u;
  return encryptedpayloadkey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CBidirMsg_RelayPacket_SignedDestinationAddress_t::release_encryptedpayloadkey() {
  // @@protoc_insertion_point(field_release:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
  if (!_internal_has_encryptedpayloadkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encryptedpayloadkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CBidirMsg_RelayPacket_SignedDestinationAddress_t::set_allocated_encryptedpayloadkey(std::string* encryptedpayloadkey) {
  if (encryptedpayloadkey != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryptedpayloadkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptedpayloadkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CBidirMsg_RelayPacket.SignedDestinationAddress_t.encryptedPayloadKey)
}

// -------------------------------------------------------------------

// CBidirMsg_RelayPacket

// required uint32 prevhopcount = 1;
inline bool CBidirMsg_RelayPacket::_internal_has_prevhopcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CBidirMsg_RelayPacket::has_prevhopcount() const {
  return _internal_has_prevhopcount();
}
inline void CBidirMsg_RelayPacket::clear_prevhopcount() {
  prevhopcount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayPacket::_internal_prevhopcount() const {
  return prevhopcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CBidirMsg_RelayPacket::prevhopcount() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.prevhopcount)
  return _internal_prevhopcount();
}
inline void CBidirMsg_RelayPacket::_internal_set_prevhopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  prevhopcount_ = value;
}
inline void CBidirMsg_RelayPacket::set_prevhopcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prevhopcount(value);
  // @@protoc_insertion_point(field_set:CBidirMsg_RelayPacket.prevhopcount)
}

// required .SerializedNetAddress_t originalSender = 2;
inline bool CBidirMsg_RelayPacket::_internal_has_originalsender() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || originalsender_ != nullptr);
  return value;
}
inline bool CBidirMsg_RelayPacket::has_originalsender() const {
  return _internal_has_originalsender();
}
inline void CBidirMsg_RelayPacket::clear_originalsender() {
  if (originalsender_ != nullptr) originalsender_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayPacket::_internal_originalsender() const {
  const ::SerializedNetAddress_t* p = originalsender_;
  return p != nullptr ? *p : reinterpret_cast<const ::SerializedNetAddress_t&>(
      ::_SerializedNetAddress_t_default_instance_);
}
inline const ::SerializedNetAddress_t& CBidirMsg_RelayPacket::originalsender() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.originalSender)
  return _internal_originalsender();
}
inline void CBidirMsg_RelayPacket::unsafe_arena_set_allocated_originalsender(
    ::SerializedNetAddress_t* originalsender) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalsender_);
  }
  originalsender_ = originalsender;
  if (originalsender) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBidirMsg_RelayPacket.originalSender)
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket::release_originalsender() {
  _has_bits_[0] &= ~0x00000001u;
  ::SerializedNetAddress_t* temp = originalsender_;
  originalsender_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket::unsafe_arena_release_originalsender() {
  // @@protoc_insertion_point(field_release:CBidirMsg_RelayPacket.originalSender)
  _has_bits_[0] &= ~0x00000001u;
  ::SerializedNetAddress_t* temp = originalsender_;
  originalsender_ = nullptr;
  return temp;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket::_internal_mutable_originalsender() {
  _has_bits_[0] |= 0x00000001u;
  if (originalsender_ == nullptr) {
    auto* p = CreateMaybeMessage<::SerializedNetAddress_t>(GetArena());
    originalsender_ = p;
  }
  return originalsender_;
}
inline ::SerializedNetAddress_t* CBidirMsg_RelayPacket::mutable_originalsender() {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayPacket.originalSender)
  return _internal_mutable_originalsender();
}
inline void CBidirMsg_RelayPacket::set_allocated_originalsender(::SerializedNetAddress_t* originalsender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete originalsender_;
  }
  if (originalsender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(originalsender);
    if (message_arena != submessage_arena) {
      originalsender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originalsender, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  originalsender_ = originalsender;
  // @@protoc_insertion_point(field_set_allocated:CBidirMsg_RelayPacket.originalSender)
}

// required .SignedPayload_t signedPayload = 3;
inline bool CBidirMsg_RelayPacket::_internal_has_signedpayload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || signedpayload_ != nullptr);
  return value;
}
inline bool CBidirMsg_RelayPacket::has_signedpayload() const {
  return _internal_has_signedpayload();
}
inline void CBidirMsg_RelayPacket::clear_signedpayload() {
  if (signedpayload_ != nullptr) signedpayload_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SignedPayload_t& CBidirMsg_RelayPacket::_internal_signedpayload() const {
  const ::SignedPayload_t* p = signedpayload_;
  return p != nullptr ? *p : reinterpret_cast<const ::SignedPayload_t&>(
      ::_SignedPayload_t_default_instance_);
}
inline const ::SignedPayload_t& CBidirMsg_RelayPacket::signedpayload() const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.signedPayload)
  return _internal_signedpayload();
}
inline void CBidirMsg_RelayPacket::unsafe_arena_set_allocated_signedpayload(
    ::SignedPayload_t* signedpayload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signedpayload_);
  }
  signedpayload_ = signedpayload;
  if (signedpayload) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CBidirMsg_RelayPacket.signedPayload)
}
inline ::SignedPayload_t* CBidirMsg_RelayPacket::release_signedpayload() {
  _has_bits_[0] &= ~0x00000002u;
  ::SignedPayload_t* temp = signedpayload_;
  signedpayload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SignedPayload_t* CBidirMsg_RelayPacket::unsafe_arena_release_signedpayload() {
  // @@protoc_insertion_point(field_release:CBidirMsg_RelayPacket.signedPayload)
  _has_bits_[0] &= ~0x00000002u;
  ::SignedPayload_t* temp = signedpayload_;
  signedpayload_ = nullptr;
  return temp;
}
inline ::SignedPayload_t* CBidirMsg_RelayPacket::_internal_mutable_signedpayload() {
  _has_bits_[0] |= 0x00000002u;
  if (signedpayload_ == nullptr) {
    auto* p = CreateMaybeMessage<::SignedPayload_t>(GetArena());
    signedpayload_ = p;
  }
  return signedpayload_;
}
inline ::SignedPayload_t* CBidirMsg_RelayPacket::mutable_signedpayload() {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayPacket.signedPayload)
  return _internal_mutable_signedpayload();
}
inline void CBidirMsg_RelayPacket::set_allocated_signedpayload(::SignedPayload_t* signedpayload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signedpayload_;
  }
  if (signedpayload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signedpayload);
    if (message_arena != submessage_arena) {
      signedpayload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signedpayload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signedpayload_ = signedpayload;
  // @@protoc_insertion_point(field_set_allocated:CBidirMsg_RelayPacket.signedPayload)
}

// repeated .CBidirMsg_RelayPacket.SignedDestinationAddress_t recipientList = 4;
inline int CBidirMsg_RelayPacket::_internal_recipientlist_size() const {
  return recipientlist_.size();
}
inline int CBidirMsg_RelayPacket::recipientlist_size() const {
  return _internal_recipientlist_size();
}
inline void CBidirMsg_RelayPacket::clear_recipientlist() {
  recipientlist_.Clear();
}
inline ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* CBidirMsg_RelayPacket::mutable_recipientlist(int index) {
  // @@protoc_insertion_point(field_mutable:CBidirMsg_RelayPacket.recipientList)
  return recipientlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBidirMsg_RelayPacket_SignedDestinationAddress_t >*
CBidirMsg_RelayPacket::mutable_recipientlist() {
  // @@protoc_insertion_point(field_mutable_list:CBidirMsg_RelayPacket.recipientList)
  return &recipientlist_;
}
inline const ::CBidirMsg_RelayPacket_SignedDestinationAddress_t& CBidirMsg_RelayPacket::_internal_recipientlist(int index) const {
  return recipientlist_.Get(index);
}
inline const ::CBidirMsg_RelayPacket_SignedDestinationAddress_t& CBidirMsg_RelayPacket::recipientlist(int index) const {
  // @@protoc_insertion_point(field_get:CBidirMsg_RelayPacket.recipientList)
  return _internal_recipientlist(index);
}
inline ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* CBidirMsg_RelayPacket::_internal_add_recipientlist() {
  return recipientlist_.Add();
}
inline ::CBidirMsg_RelayPacket_SignedDestinationAddress_t* CBidirMsg_RelayPacket::add_recipientlist() {
  // @@protoc_insertion_point(field_add:CBidirMsg_RelayPacket.recipientList)
  return _internal_add_recipientlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CBidirMsg_RelayPacket_SignedDestinationAddress_t >&
CBidirMsg_RelayPacket::recipientlist() const {
  // @@protoc_insertion_point(field_list:CBidirMsg_RelayPacket.recipientList)
  return recipientlist_;
}

// -------------------------------------------------------------------

// CMsgServerNetworkStats_Port

// optional int32 port = 1;
inline bool CMsgServerNetworkStats_Port::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Port::has_port() const {
  return _internal_has_port();
}
inline void CMsgServerNetworkStats_Port::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Port::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Port::port() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Port.port)
  return _internal_port();
}
inline void CMsgServerNetworkStats_Port::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  port_ = value;
}
inline void CMsgServerNetworkStats_Port::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Port.port)
}

// optional string name = 2;
inline bool CMsgServerNetworkStats_Port::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Port::has_name() const {
  return _internal_has_name();
}
inline void CMsgServerNetworkStats_Port::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgServerNetworkStats_Port::name() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Port.name)
  return _internal_name();
}
inline void CMsgServerNetworkStats_Port::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Port.name)
}
inline std::string* CMsgServerNetworkStats_Port::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgServerNetworkStats.Port.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgServerNetworkStats_Port::_internal_name() const {
  return name_.Get();
}
inline void CMsgServerNetworkStats_Port::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgServerNetworkStats_Port::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgServerNetworkStats.Port.name)
}
inline void CMsgServerNetworkStats_Port::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgServerNetworkStats.Port.name)
}
inline void CMsgServerNetworkStats_Port::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgServerNetworkStats.Port.name)
}
inline std::string* CMsgServerNetworkStats_Port::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgServerNetworkStats_Port::release_name() {
  // @@protoc_insertion_point(field_release:CMsgServerNetworkStats.Port.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgServerNetworkStats_Port::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgServerNetworkStats.Port.name)
}

// -------------------------------------------------------------------

// CMsgServerNetworkStats_Player

// optional uint64 steamid = 1;
inline bool CMsgServerNetworkStats_Player::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgServerNetworkStats_Player::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats_Player::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats_Player::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.steamid)
  return _internal_steamid();
}
inline void CMsgServerNetworkStats_Player::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steamid_ = value;
}
inline void CMsgServerNetworkStats_Player::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.steamid)
}

// optional string remote_addr = 2;
inline bool CMsgServerNetworkStats_Player::_internal_has_remote_addr() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_remote_addr() const {
  return _internal_has_remote_addr();
}
inline void CMsgServerNetworkStats_Player::clear_remote_addr() {
  remote_addr_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgServerNetworkStats_Player::remote_addr() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.remote_addr)
  return _internal_remote_addr();
}
inline void CMsgServerNetworkStats_Player::set_remote_addr(const std::string& value) {
  _internal_set_remote_addr(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.remote_addr)
}
inline std::string* CMsgServerNetworkStats_Player::mutable_remote_addr() {
  // @@protoc_insertion_point(field_mutable:CMsgServerNetworkStats.Player.remote_addr)
  return _internal_mutable_remote_addr();
}
inline const std::string& CMsgServerNetworkStats_Player::_internal_remote_addr() const {
  return remote_addr_.Get();
}
inline void CMsgServerNetworkStats_Player::_internal_set_remote_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgServerNetworkStats_Player::set_remote_addr(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_addr_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgServerNetworkStats.Player.remote_addr)
}
inline void CMsgServerNetworkStats_Player::set_remote_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  remote_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgServerNetworkStats.Player.remote_addr)
}
inline void CMsgServerNetworkStats_Player::set_remote_addr(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  remote_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgServerNetworkStats.Player.remote_addr)
}
inline std::string* CMsgServerNetworkStats_Player::_internal_mutable_remote_addr() {
  _has_bits_[0] |= 0x00000001u;
  return remote_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgServerNetworkStats_Player::release_remote_addr() {
  // @@protoc_insertion_point(field_release:CMsgServerNetworkStats.Player.remote_addr)
  if (!_internal_has_remote_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return remote_addr_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgServerNetworkStats_Player::set_allocated_remote_addr(std::string* remote_addr) {
  if (remote_addr != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgServerNetworkStats.Player.remote_addr)
}

// optional int32 ping_stddev_ms = 3;
inline bool CMsgServerNetworkStats_Player::_internal_has_ping_stddev_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_ping_stddev_ms() const {
  return _internal_has_ping_stddev_ms();
}
inline void CMsgServerNetworkStats_Player::clear_ping_stddev_ms() {
  ping_stddev_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Player::_internal_ping_stddev_ms() const {
  return ping_stddev_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Player::ping_stddev_ms() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.ping_stddev_ms)
  return _internal_ping_stddev_ms();
}
inline void CMsgServerNetworkStats_Player::_internal_set_ping_stddev_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ping_stddev_ms_ = value;
}
inline void CMsgServerNetworkStats_Player::set_ping_stddev_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping_stddev_ms(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.ping_stddev_ms)
}

// optional int32 ping_avg_ms = 4;
inline bool CMsgServerNetworkStats_Player::_internal_has_ping_avg_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_ping_avg_ms() const {
  return _internal_has_ping_avg_ms();
}
inline void CMsgServerNetworkStats_Player::clear_ping_avg_ms() {
  ping_avg_ms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Player::_internal_ping_avg_ms() const {
  return ping_avg_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats_Player::ping_avg_ms() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.ping_avg_ms)
  return _internal_ping_avg_ms();
}
inline void CMsgServerNetworkStats_Player::_internal_set_ping_avg_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  ping_avg_ms_ = value;
}
inline void CMsgServerNetworkStats_Player::set_ping_avg_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping_avg_ms(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.ping_avg_ms)
}

// optional float packet_loss_pct = 5;
inline bool CMsgServerNetworkStats_Player::_internal_has_packet_loss_pct() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_packet_loss_pct() const {
  return _internal_has_packet_loss_pct();
}
inline void CMsgServerNetworkStats_Player::clear_packet_loss_pct() {
  packet_loss_pct_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgServerNetworkStats_Player::_internal_packet_loss_pct() const {
  return packet_loss_pct_;
}
inline float CMsgServerNetworkStats_Player::packet_loss_pct() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.packet_loss_pct)
  return _internal_packet_loss_pct();
}
inline void CMsgServerNetworkStats_Player::_internal_set_packet_loss_pct(float value) {
  _has_bits_[0] |= 0x00000010u;
  packet_loss_pct_ = value;
}
inline void CMsgServerNetworkStats_Player::set_packet_loss_pct(float value) {
  _internal_set_packet_loss_pct(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.packet_loss_pct)
}

// optional bool is_bot = 6;
inline bool CMsgServerNetworkStats_Player::_internal_has_is_bot() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats_Player::has_is_bot() const {
  return _internal_has_is_bot();
}
inline void CMsgServerNetworkStats_Player::clear_is_bot() {
  is_bot_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgServerNetworkStats_Player::_internal_is_bot() const {
  return is_bot_;
}
inline bool CMsgServerNetworkStats_Player::is_bot() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.Player.is_bot)
  return _internal_is_bot();
}
inline void CMsgServerNetworkStats_Player::_internal_set_is_bot(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_bot_ = value;
}
inline void CMsgServerNetworkStats_Player::set_is_bot(bool value) {
  _internal_set_is_bot(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.Player.is_bot)
}

// -------------------------------------------------------------------

// CMsgServerNetworkStats

// optional bool dedicated = 1;
inline bool CMsgServerNetworkStats::_internal_has_dedicated() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_dedicated() const {
  return _internal_has_dedicated();
}
inline void CMsgServerNetworkStats::clear_dedicated() {
  dedicated_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgServerNetworkStats::_internal_dedicated() const {
  return dedicated_;
}
inline bool CMsgServerNetworkStats::dedicated() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.dedicated)
  return _internal_dedicated();
}
inline void CMsgServerNetworkStats::_internal_set_dedicated(bool value) {
  _has_bits_[0] |= 0x00000001u;
  dedicated_ = value;
}
inline void CMsgServerNetworkStats::set_dedicated(bool value) {
  _internal_set_dedicated(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.dedicated)
}

// optional int32 cpu_usage = 2;
inline bool CMsgServerNetworkStats::_internal_has_cpu_usage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_cpu_usage() const {
  return _internal_has_cpu_usage();
}
inline void CMsgServerNetworkStats::clear_cpu_usage() {
  cpu_usage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_cpu_usage() const {
  return cpu_usage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::cpu_usage() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.cpu_usage)
  return _internal_cpu_usage();
}
inline void CMsgServerNetworkStats::_internal_set_cpu_usage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  cpu_usage_ = value;
}
inline void CMsgServerNetworkStats::set_cpu_usage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.cpu_usage)
}

// optional int32 memory_used_mb = 3;
inline bool CMsgServerNetworkStats::_internal_has_memory_used_mb() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_memory_used_mb() const {
  return _internal_has_memory_used_mb();
}
inline void CMsgServerNetworkStats::clear_memory_used_mb() {
  memory_used_mb_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_memory_used_mb() const {
  return memory_used_mb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::memory_used_mb() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.memory_used_mb)
  return _internal_memory_used_mb();
}
inline void CMsgServerNetworkStats::_internal_set_memory_used_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  memory_used_mb_ = value;
}
inline void CMsgServerNetworkStats::set_memory_used_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory_used_mb(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.memory_used_mb)
}

// optional int32 memory_free_mb = 4;
inline bool CMsgServerNetworkStats::_internal_has_memory_free_mb() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_memory_free_mb() const {
  return _internal_has_memory_free_mb();
}
inline void CMsgServerNetworkStats::clear_memory_free_mb() {
  memory_free_mb_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_memory_free_mb() const {
  return memory_free_mb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::memory_free_mb() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.memory_free_mb)
  return _internal_memory_free_mb();
}
inline void CMsgServerNetworkStats::_internal_set_memory_free_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  memory_free_mb_ = value;
}
inline void CMsgServerNetworkStats::set_memory_free_mb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memory_free_mb(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.memory_free_mb)
}

// optional int32 uptime = 5;
inline bool CMsgServerNetworkStats::_internal_has_uptime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_uptime() const {
  return _internal_has_uptime();
}
inline void CMsgServerNetworkStats::clear_uptime() {
  uptime_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::uptime() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.uptime)
  return _internal_uptime();
}
inline void CMsgServerNetworkStats::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  uptime_ = value;
}
inline void CMsgServerNetworkStats::set_uptime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.uptime)
}

// optional int32 spawn_count = 6;
inline bool CMsgServerNetworkStats::_internal_has_spawn_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_spawn_count() const {
  return _internal_has_spawn_count();
}
inline void CMsgServerNetworkStats::clear_spawn_count() {
  spawn_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_spawn_count() const {
  return spawn_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::spawn_count() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.spawn_count)
  return _internal_spawn_count();
}
inline void CMsgServerNetworkStats::_internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  spawn_count_ = value;
}
inline void CMsgServerNetworkStats::set_spawn_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spawn_count(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.spawn_count)
}

// optional int32 num_clients = 8;
inline bool CMsgServerNetworkStats::_internal_has_num_clients() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_num_clients() const {
  return _internal_has_num_clients();
}
inline void CMsgServerNetworkStats::clear_num_clients() {
  num_clients_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_num_clients() const {
  return num_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::num_clients() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.num_clients)
  return _internal_num_clients();
}
inline void CMsgServerNetworkStats::_internal_set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  num_clients_ = value;
}
inline void CMsgServerNetworkStats::set_num_clients(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_clients(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.num_clients)
}

// optional int32 num_bots = 9;
inline bool CMsgServerNetworkStats::_internal_has_num_bots() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_num_bots() const {
  return _internal_has_num_bots();
}
inline void CMsgServerNetworkStats::clear_num_bots() {
  num_bots_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_num_bots() const {
  return num_bots_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::num_bots() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.num_bots)
  return _internal_num_bots();
}
inline void CMsgServerNetworkStats::_internal_set_num_bots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  num_bots_ = value;
}
inline void CMsgServerNetworkStats::set_num_bots(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_bots(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.num_bots)
}

// optional int32 num_spectators = 10;
inline bool CMsgServerNetworkStats::_internal_has_num_spectators() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_num_spectators() const {
  return _internal_has_num_spectators();
}
inline void CMsgServerNetworkStats::clear_num_spectators() {
  num_spectators_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_num_spectators() const {
  return num_spectators_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::num_spectators() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.num_spectators)
  return _internal_num_spectators();
}
inline void CMsgServerNetworkStats::_internal_set_num_spectators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_spectators_ = value;
}
inline void CMsgServerNetworkStats::set_num_spectators(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_spectators(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.num_spectators)
}

// optional int32 num_tv_relays = 11;
inline bool CMsgServerNetworkStats::_internal_has_num_tv_relays() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_num_tv_relays() const {
  return _internal_has_num_tv_relays();
}
inline void CMsgServerNetworkStats::clear_num_tv_relays() {
  num_tv_relays_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::_internal_num_tv_relays() const {
  return num_tv_relays_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgServerNetworkStats::num_tv_relays() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.num_tv_relays)
  return _internal_num_tv_relays();
}
inline void CMsgServerNetworkStats::_internal_set_num_tv_relays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_tv_relays_ = value;
}
inline void CMsgServerNetworkStats::set_num_tv_relays(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_tv_relays(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.num_tv_relays)
}

// optional float fps = 12;
inline bool CMsgServerNetworkStats::_internal_has_fps() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_fps() const {
  return _internal_has_fps();
}
inline void CMsgServerNetworkStats::clear_fps() {
  fps_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgServerNetworkStats::_internal_fps() const {
  return fps_;
}
inline float CMsgServerNetworkStats::fps() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.fps)
  return _internal_fps();
}
inline void CMsgServerNetworkStats::_internal_set_fps(float value) {
  _has_bits_[0] |= 0x00000400u;
  fps_ = value;
}
inline void CMsgServerNetworkStats::set_fps(float value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.fps)
}

// repeated .CMsgServerNetworkStats.Port ports = 17;
inline int CMsgServerNetworkStats::_internal_ports_size() const {
  return ports_.size();
}
inline int CMsgServerNetworkStats::ports_size() const {
  return _internal_ports_size();
}
inline void CMsgServerNetworkStats::clear_ports() {
  ports_.Clear();
}
inline ::CMsgServerNetworkStats_Port* CMsgServerNetworkStats::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerNetworkStats.ports)
  return ports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Port >*
CMsgServerNetworkStats::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerNetworkStats.ports)
  return &ports_;
}
inline const ::CMsgServerNetworkStats_Port& CMsgServerNetworkStats::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline const ::CMsgServerNetworkStats_Port& CMsgServerNetworkStats::ports(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.ports)
  return _internal_ports(index);
}
inline ::CMsgServerNetworkStats_Port* CMsgServerNetworkStats::_internal_add_ports() {
  return ports_.Add();
}
inline ::CMsgServerNetworkStats_Port* CMsgServerNetworkStats::add_ports() {
  // @@protoc_insertion_point(field_add:CMsgServerNetworkStats.ports)
  return _internal_add_ports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Port >&
CMsgServerNetworkStats::ports() const {
  // @@protoc_insertion_point(field_list:CMsgServerNetworkStats.ports)
  return ports_;
}

// optional float avg_latency_out = 18;
inline bool CMsgServerNetworkStats::_internal_has_avg_latency_out() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_latency_out() const {
  return _internal_has_avg_latency_out();
}
inline void CMsgServerNetworkStats::clear_avg_latency_out() {
  avg_latency_out_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgServerNetworkStats::_internal_avg_latency_out() const {
  return avg_latency_out_;
}
inline float CMsgServerNetworkStats::avg_latency_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_latency_out)
  return _internal_avg_latency_out();
}
inline void CMsgServerNetworkStats::_internal_set_avg_latency_out(float value) {
  _has_bits_[0] |= 0x00000800u;
  avg_latency_out_ = value;
}
inline void CMsgServerNetworkStats::set_avg_latency_out(float value) {
  _internal_set_avg_latency_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_latency_out)
}

// optional float avg_latency_in = 19;
inline bool CMsgServerNetworkStats::_internal_has_avg_latency_in() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_latency_in() const {
  return _internal_has_avg_latency_in();
}
inline void CMsgServerNetworkStats::clear_avg_latency_in() {
  avg_latency_in_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CMsgServerNetworkStats::_internal_avg_latency_in() const {
  return avg_latency_in_;
}
inline float CMsgServerNetworkStats::avg_latency_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_latency_in)
  return _internal_avg_latency_in();
}
inline void CMsgServerNetworkStats::_internal_set_avg_latency_in(float value) {
  _has_bits_[0] |= 0x00001000u;
  avg_latency_in_ = value;
}
inline void CMsgServerNetworkStats::set_avg_latency_in(float value) {
  _internal_set_avg_latency_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_latency_in)
}

// optional float avg_packets_out = 20;
inline bool CMsgServerNetworkStats::_internal_has_avg_packets_out() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_packets_out() const {
  return _internal_has_avg_packets_out();
}
inline void CMsgServerNetworkStats::clear_avg_packets_out() {
  avg_packets_out_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgServerNetworkStats::_internal_avg_packets_out() const {
  return avg_packets_out_;
}
inline float CMsgServerNetworkStats::avg_packets_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_packets_out)
  return _internal_avg_packets_out();
}
inline void CMsgServerNetworkStats::_internal_set_avg_packets_out(float value) {
  _has_bits_[0] |= 0x00002000u;
  avg_packets_out_ = value;
}
inline void CMsgServerNetworkStats::set_avg_packets_out(float value) {
  _internal_set_avg_packets_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_packets_out)
}

// optional float avg_packets_in = 21;
inline bool CMsgServerNetworkStats::_internal_has_avg_packets_in() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_packets_in() const {
  return _internal_has_avg_packets_in();
}
inline void CMsgServerNetworkStats::clear_avg_packets_in() {
  avg_packets_in_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float CMsgServerNetworkStats::_internal_avg_packets_in() const {
  return avg_packets_in_;
}
inline float CMsgServerNetworkStats::avg_packets_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_packets_in)
  return _internal_avg_packets_in();
}
inline void CMsgServerNetworkStats::_internal_set_avg_packets_in(float value) {
  _has_bits_[0] |= 0x00004000u;
  avg_packets_in_ = value;
}
inline void CMsgServerNetworkStats::set_avg_packets_in(float value) {
  _internal_set_avg_packets_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_packets_in)
}

// optional float avg_loss_out = 22;
inline bool CMsgServerNetworkStats::_internal_has_avg_loss_out() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_loss_out() const {
  return _internal_has_avg_loss_out();
}
inline void CMsgServerNetworkStats::clear_avg_loss_out() {
  avg_loss_out_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float CMsgServerNetworkStats::_internal_avg_loss_out() const {
  return avg_loss_out_;
}
inline float CMsgServerNetworkStats::avg_loss_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_loss_out)
  return _internal_avg_loss_out();
}
inline void CMsgServerNetworkStats::_internal_set_avg_loss_out(float value) {
  _has_bits_[0] |= 0x00008000u;
  avg_loss_out_ = value;
}
inline void CMsgServerNetworkStats::set_avg_loss_out(float value) {
  _internal_set_avg_loss_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_loss_out)
}

// optional float avg_loss_in = 23;
inline bool CMsgServerNetworkStats::_internal_has_avg_loss_in() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_loss_in() const {
  return _internal_has_avg_loss_in();
}
inline void CMsgServerNetworkStats::clear_avg_loss_in() {
  avg_loss_in_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CMsgServerNetworkStats::_internal_avg_loss_in() const {
  return avg_loss_in_;
}
inline float CMsgServerNetworkStats::avg_loss_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_loss_in)
  return _internal_avg_loss_in();
}
inline void CMsgServerNetworkStats::_internal_set_avg_loss_in(float value) {
  _has_bits_[0] |= 0x00010000u;
  avg_loss_in_ = value;
}
inline void CMsgServerNetworkStats::set_avg_loss_in(float value) {
  _internal_set_avg_loss_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_loss_in)
}

// optional float avg_data_out = 24;
inline bool CMsgServerNetworkStats::_internal_has_avg_data_out() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_data_out() const {
  return _internal_has_avg_data_out();
}
inline void CMsgServerNetworkStats::clear_avg_data_out() {
  avg_data_out_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CMsgServerNetworkStats::_internal_avg_data_out() const {
  return avg_data_out_;
}
inline float CMsgServerNetworkStats::avg_data_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_data_out)
  return _internal_avg_data_out();
}
inline void CMsgServerNetworkStats::_internal_set_avg_data_out(float value) {
  _has_bits_[0] |= 0x00020000u;
  avg_data_out_ = value;
}
inline void CMsgServerNetworkStats::set_avg_data_out(float value) {
  _internal_set_avg_data_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_data_out)
}

// optional float avg_data_in = 25;
inline bool CMsgServerNetworkStats::_internal_has_avg_data_in() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_avg_data_in() const {
  return _internal_has_avg_data_in();
}
inline void CMsgServerNetworkStats::clear_avg_data_in() {
  avg_data_in_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CMsgServerNetworkStats::_internal_avg_data_in() const {
  return avg_data_in_;
}
inline float CMsgServerNetworkStats::avg_data_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.avg_data_in)
  return _internal_avg_data_in();
}
inline void CMsgServerNetworkStats::_internal_set_avg_data_in(float value) {
  _has_bits_[0] |= 0x00080000u;
  avg_data_in_ = value;
}
inline void CMsgServerNetworkStats::set_avg_data_in(float value) {
  _internal_set_avg_data_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.avg_data_in)
}

// optional uint64 total_data_in = 26;
inline bool CMsgServerNetworkStats::_internal_has_total_data_in() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_total_data_in() const {
  return _internal_has_total_data_in();
}
inline void CMsgServerNetworkStats::clear_total_data_in() {
  total_data_in_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::_internal_total_data_in() const {
  return total_data_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::total_data_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.total_data_in)
  return _internal_total_data_in();
}
inline void CMsgServerNetworkStats::_internal_set_total_data_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  total_data_in_ = value;
}
inline void CMsgServerNetworkStats::set_total_data_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_data_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.total_data_in)
}

// optional uint64 total_packets_in = 27;
inline bool CMsgServerNetworkStats::_internal_has_total_packets_in() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_total_packets_in() const {
  return _internal_has_total_packets_in();
}
inline void CMsgServerNetworkStats::clear_total_packets_in() {
  total_packets_in_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::_internal_total_packets_in() const {
  return total_packets_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::total_packets_in() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.total_packets_in)
  return _internal_total_packets_in();
}
inline void CMsgServerNetworkStats::_internal_set_total_packets_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  total_packets_in_ = value;
}
inline void CMsgServerNetworkStats::set_total_packets_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_packets_in(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.total_packets_in)
}

// optional uint64 total_data_out = 28;
inline bool CMsgServerNetworkStats::_internal_has_total_data_out() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_total_data_out() const {
  return _internal_has_total_data_out();
}
inline void CMsgServerNetworkStats::clear_total_data_out() {
  total_data_out_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::_internal_total_data_out() const {
  return total_data_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::total_data_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.total_data_out)
  return _internal_total_data_out();
}
inline void CMsgServerNetworkStats::_internal_set_total_data_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  total_data_out_ = value;
}
inline void CMsgServerNetworkStats::set_total_data_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_data_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.total_data_out)
}

// optional uint64 total_packets_out = 29;
inline bool CMsgServerNetworkStats::_internal_has_total_packets_out() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgServerNetworkStats::has_total_packets_out() const {
  return _internal_has_total_packets_out();
}
inline void CMsgServerNetworkStats::clear_total_packets_out() {
  total_packets_out_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::_internal_total_packets_out() const {
  return total_packets_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgServerNetworkStats::total_packets_out() const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.total_packets_out)
  return _internal_total_packets_out();
}
inline void CMsgServerNetworkStats::_internal_set_total_packets_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  total_packets_out_ = value;
}
inline void CMsgServerNetworkStats::set_total_packets_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_packets_out(value);
  // @@protoc_insertion_point(field_set:CMsgServerNetworkStats.total_packets_out)
}

// repeated .CMsgServerNetworkStats.Player players = 30;
inline int CMsgServerNetworkStats::_internal_players_size() const {
  return players_.size();
}
inline int CMsgServerNetworkStats::players_size() const {
  return _internal_players_size();
}
inline void CMsgServerNetworkStats::clear_players() {
  players_.Clear();
}
inline ::CMsgServerNetworkStats_Player* CMsgServerNetworkStats::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerNetworkStats.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Player >*
CMsgServerNetworkStats::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerNetworkStats.players)
  return &players_;
}
inline const ::CMsgServerNetworkStats_Player& CMsgServerNetworkStats::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgServerNetworkStats_Player& CMsgServerNetworkStats::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerNetworkStats.players)
  return _internal_players(index);
}
inline ::CMsgServerNetworkStats_Player* CMsgServerNetworkStats::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgServerNetworkStats_Player* CMsgServerNetworkStats::add_players() {
  // @@protoc_insertion_point(field_add:CMsgServerNetworkStats.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerNetworkStats_Player >&
CMsgServerNetworkStats::players() const {
  // @@protoc_insertion_point(field_list:CMsgServerNetworkStats.players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CBidirMsg_RelayInfo_Operation_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CBidirMsg_RelayInfo_Operation_t>() {
  return ::CBidirMsg_RelayInfo_Operation_t_descriptor();
}
template <> struct is_proto_enum< ::CLC_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CLC_Messages>() {
  return ::CLC_Messages_descriptor();
}
template <> struct is_proto_enum< ::SVC_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SVC_Messages>() {
  return ::SVC_Messages_descriptor();
}
template <> struct is_proto_enum< ::VoiceDataFormat_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceDataFormat_t>() {
  return ::VoiceDataFormat_t_descriptor();
}
template <> struct is_proto_enum< ::RequestPause_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RequestPause_t>() {
  return ::RequestPause_t_descriptor();
}
template <> struct is_proto_enum< ::PrefetchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PrefetchType>() {
  return ::PrefetchType_descriptor();
}
template <> struct is_proto_enum< ::ESplitScreenMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ESplitScreenMessageType>() {
  return ::ESplitScreenMessageType_descriptor();
}
template <> struct is_proto_enum< ::EQueryCvarValueStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EQueryCvarValueStatus>() {
  return ::EQueryCvarValueStatus_descriptor();
}
template <> struct is_proto_enum< ::DIALOG_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DIALOG_TYPE>() {
  return ::DIALOG_TYPE_descriptor();
}
template <> struct is_proto_enum< ::SVC_Messages_LowFrequency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SVC_Messages_LowFrequency>() {
  return ::SVC_Messages_LowFrequency_descriptor();
}
template <> struct is_proto_enum< ::Bidirectional_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bidirectional_Messages>() {
  return ::Bidirectional_Messages_descriptor();
}
template <> struct is_proto_enum< ::Bidirectional_Messages_LowFrequency> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bidirectional_Messages_LowFrequency>() {
  return ::Bidirectional_Messages_LowFrequency_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
