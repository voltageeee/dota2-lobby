// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamworkssdk.proto

#include "steammessages_publishedfile.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(PROTOBUF_ULONGLONG(0))
  , list_type_(0u)
  , appid_(0)
  , notify_client_(false){}
struct CPublishedFile_Subscribe_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Subscribe_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Subscribe_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Subscribe_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Subscribe_RequestDefaultTypeInternal _CPublishedFile_Subscribe_Request_default_instance_;
constexpr CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Subscribe_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Subscribe_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Subscribe_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Subscribe_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Subscribe_ResponseDefaultTypeInternal _CPublishedFile_Subscribe_Response_default_instance_;
constexpr CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(PROTOBUF_ULONGLONG(0))
  , list_type_(0u)
  , appid_(0)
  , notify_client_(false){}
struct CPublishedFile_Unsubscribe_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Unsubscribe_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Unsubscribe_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Unsubscribe_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Unsubscribe_RequestDefaultTypeInternal _CPublishedFile_Unsubscribe_Request_default_instance_;
constexpr CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Unsubscribe_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal _CPublishedFile_Unsubscribe_Response_default_instance_;
constexpr CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , cloudfilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_cloudfilename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consumer_shortcut_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtube_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtube_videoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redirect_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collection_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , consumer_appid_(0u)
  , file_type_(0u)
  , visibility_(0u){}
struct CPublishedFile_Publish_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Publish_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Publish_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Publish_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Publish_RequestDefaultTypeInternal _CPublishedFile_Publish_Request_default_instance_;
constexpr CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : redirect_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(PROTOBUF_ULONGLONG(0)){}
struct CPublishedFile_Publish_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Publish_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Publish_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Publish_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Publish_ResponseDefaultTypeInternal _CPublishedFile_Publish_Response_default_instance_;
constexpr CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileids_()
  , includetags_(false)
  , includeadditionalpreviews_(false)
  , includechildren_(false)
  , includekvtags_(false)
  , includevotes_(false)
  , short_description_(false){}
struct CPublishedFile_GetDetails_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetDetails_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetDetails_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetDetails_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetDetails_RequestDefaultTypeInternal _CPublishedFile_GetDetails_Request_default_instance_;
constexpr PublishedFileDetails_Tag::PublishedFileDetails_Tag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , adminonly_(false){}
struct PublishedFileDetails_TagDefaultTypeInternal {
  constexpr PublishedFileDetails_TagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_TagDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Tag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_TagDefaultTypeInternal _PublishedFileDetails_Tag_default_instance_;
constexpr PublishedFileDetails_Preview::PublishedFileDetails_Preview(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtubevideoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , previewid_(PROTOBUF_ULONGLONG(0))
  , sortorder_(0u)
  , size_(0u){}
struct PublishedFileDetails_PreviewDefaultTypeInternal {
  constexpr PublishedFileDetails_PreviewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_PreviewDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Preview _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_PreviewDefaultTypeInternal _PublishedFileDetails_Preview_default_instance_;
constexpr PublishedFileDetails_Child::PublishedFileDetails_Child(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfileid_(PROTOBUF_ULONGLONG(0))
  , sortorder_(0u)
  , file_type_(0u){}
struct PublishedFileDetails_ChildDefaultTypeInternal {
  constexpr PublishedFileDetails_ChildDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_ChildDefaultTypeInternal() {}
  union {
    PublishedFileDetails_Child _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_ChildDefaultTypeInternal _PublishedFileDetails_Child_default_instance_;
constexpr PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PublishedFileDetails_KVTagDefaultTypeInternal {
  constexpr PublishedFileDetails_KVTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_KVTagDefaultTypeInternal() {}
  union {
    PublishedFileDetails_KVTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_KVTagDefaultTypeInternal _PublishedFileDetails_KVTag_default_instance_;
constexpr PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : score_(0)
  , votes_up_(0u)
  , votes_down_(0u){}
struct PublishedFileDetails_VoteDataDefaultTypeInternal {
  constexpr PublishedFileDetails_VoteDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetails_VoteDataDefaultTypeInternal() {}
  union {
    PublishedFileDetails_VoteData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetails_VoteDataDefaultTypeInternal _PublishedFileDetails_VoteData_default_instance_;
constexpr PublishedFileDetails::PublishedFileDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : previews_()
  , tags_()
  , children_()
  , kvtags_()
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , youtubevideoid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , short_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ban_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shortcutname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_data_(nullptr)
  , publishedfileid_(PROTOBUF_ULONGLONG(0))
  , result_(0u)
  , creator_appid_(0u)
  , creator_(PROTOBUF_ULONGLONG(0))
  , consumer_appid_(0u)
  , consumer_shortcutid_(0u)
  , file_size_(PROTOBUF_ULONGLONG(0))
  , preview_file_size_(PROTOBUF_ULONGLONG(0))
  , hcontent_file_(PROTOBUF_ULONGLONG(0))
  , hcontent_preview_(PROTOBUF_ULONGLONG(0))
  , time_created_(0u)
  , time_updated_(0u)
  , visibility_(0u)
  , flags_(0u)
  , workshop_file_(false)
  , workshop_accepted_(false)
  , show_subscribe_all_(false)
  , banned_(false)
  , num_comments_developer_(0)
  , banner_(PROTOBUF_ULONGLONG(0))
  , num_comments_public_(0)
  , file_type_(0u)
  , subscriptions_(0u)
  , can_be_deleted_(false)
  , incompatible_(false)
  , can_subscribe_(false)
  , spoiler_tag_(false)
  , favorited_(0u)
  , followers_(0u)
  , lifetime_subscriptions_(0u)
  , lifetime_favorited_(0u)
  , lifetime_followers_(0u)
  , views_(0u)
  , image_width_(0u)
  , image_height_(0u)
  , shortcutid_(0u)
  , num_children_(0u)
  , num_reports_(0u)
  , time_subscribed_(0u){}
struct PublishedFileDetailsDefaultTypeInternal {
  constexpr PublishedFileDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PublishedFileDetailsDefaultTypeInternal() {}
  union {
    PublishedFileDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PublishedFileDetailsDefaultTypeInternal _PublishedFileDetails_default_instance_;
constexpr CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfiledetails_(){}
struct CPublishedFile_GetDetails_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetDetails_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetDetails_ResponseDefaultTypeInternal _CPublishedFile_GetDetails_Response_default_instance_;
constexpr CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requiredtags_()
  , excludedtags_()
  , sortmethod_(nullptr)
  , appid_(0u)
  , totalonly_(false)
  , ids_only_(false)
  , privacy_(0u)
  , page_(1u)
  , numperpage_(1u){}
struct CPublishedFile_GetUserFiles_RequestDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_RequestDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_default_instance_;
constexpr CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appid_(0u)
  , shortcutid_(0u)
  , private__(false){}
struct CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Response_App _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_App_default_instance_;
constexpr CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publishedfiledetails_()
  , apps_()
  , total_(0u)
  , startindex_(0u){}
struct CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_GetUserFiles_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_default_instance_;
constexpr CPublishedFile_Update_Request::CPublishedFile_Update_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , preview_filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , publishedfileid_(PROTOBUF_ULONGLONG(0))
  , appid_(0u)
  , visibility_(0u){}
struct CPublishedFile_Update_RequestDefaultTypeInternal {
  constexpr CPublishedFile_Update_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Update_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_Update_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Update_RequestDefaultTypeInternal _CPublishedFile_Update_Request_default_instance_;
constexpr CPublishedFile_Update_Response::CPublishedFile_Update_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_Update_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_Update_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_Update_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_Update_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_Update_ResponseDefaultTypeInternal _CPublishedFile_Update_Response_default_instance_;
constexpr CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , excluded_tags_()
  , appid_(0u)
  , matching_file_type_(0u)
  , desired_queue_size_(0u)
  , match_all_tags_(true){}
struct CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal {
  constexpr CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal() {}
  union {
    CPublishedFile_RefreshVotingQueue_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
constexpr CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal {
  constexpr CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal() {}
  union {
    CPublishedFile_RefreshVotingQueue_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Subscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, list_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Unsubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, preview_cloudfilename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, file_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, consumer_shortcut_name_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, youtube_username_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, youtube_videoid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, collection_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, game_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Request, url_),
  11,
  12,
  0,
  1,
  2,
  3,
  13,
  4,
  5,
  6,
  14,
  7,
  ~0u,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Publish_Response, redirect_uri_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, publishedfileids_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includetags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includeadditionalpreviews_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includechildren_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includekvtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, includevotes_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Request, short_description_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, tag_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Tag, adminonly_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, previewid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, sortorder_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, filename_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Preview, youtubevideoid_),
  3,
  4,
  0,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, sortorder_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_Child, file_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, key_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_KVTag, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, score_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, votes_up_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails_VoteData, votes_down_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, result_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, creator_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, creator_appid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, consumer_appid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, consumer_shortcutid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, filename_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, preview_file_size_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, preview_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, youtubevideoid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, hcontent_file_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, hcontent_preview_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, title_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_description_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, short_description_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_created_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_updated_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, visibility_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, flags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, workshop_file_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, workshop_accepted_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, show_subscribe_all_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_comments_developer_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_comments_public_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, banned_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, ban_reason_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, banner_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, can_be_deleted_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, incompatible_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, app_name_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, file_type_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, can_subscribe_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, favorited_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, followers_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_subscriptions_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_favorited_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, lifetime_followers_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, views_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_width_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_height_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, image_url_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, spoiler_tag_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, shortcutname_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_children_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, num_reports_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, previews_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, tags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, children_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, kvtags_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, vote_data_),
  PROTOBUF_FIELD_OFFSET(::PublishedFileDetails, time_subscribed_),
  14,
  13,
  16,
  15,
  17,
  18,
  0,
  19,
  20,
  1,
  2,
  3,
  4,
  21,
  22,
  5,
  6,
  7,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  31,
  33,
  30,
  8,
  32,
  36,
  37,
  9,
  34,
  38,
  35,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  10,
  39,
  48,
  11,
  49,
  50,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  12,
  51,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetDetails_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, page_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, numperpage_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, sortmethod_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, totalonly_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, privacy_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, ids_only_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, requiredtags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Request, excludedtags_),
  1,
  5,
  6,
  0,
  2,
  4,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, name_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, shortcutid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response_App, private__),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, total_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, startindex_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, publishedfiledetails_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_GetUserFiles_Response, apps_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, publishedfileid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, title_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, file_description_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, visibility_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, filename_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Request, preview_filename_),
  5,
  4,
  0,
  1,
  6,
  ~0u,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_Update_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, matching_file_type_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, match_all_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, excluded_tags_),
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_),
  0,
  1,
  ~0u,
  3,
  ~0u,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPublishedFile_RefreshVotingQueue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CPublishedFile_Subscribe_Request)},
  { 13, -1, sizeof(::CPublishedFile_Subscribe_Response)},
  { 18, 27, sizeof(::CPublishedFile_Unsubscribe_Request)},
  { 31, -1, sizeof(::CPublishedFile_Unsubscribe_Response)},
  { 36, 57, sizeof(::CPublishedFile_Publish_Request)},
  { 73, 80, sizeof(::CPublishedFile_Publish_Response)},
  { 82, 94, sizeof(::CPublishedFile_GetDetails_Request)},
  { 101, 108, sizeof(::PublishedFileDetails_Tag)},
  { 110, 121, sizeof(::PublishedFileDetails_Preview)},
  { 127, 135, sizeof(::PublishedFileDetails_Child)},
  { 138, 145, sizeof(::PublishedFileDetails_KVTag)},
  { 147, 155, sizeof(::PublishedFileDetails_VoteData)},
  { 158, 219, sizeof(::PublishedFileDetails)},
  { 275, -1, sizeof(::CPublishedFile_GetDetails_Response)},
  { 281, 295, sizeof(::CPublishedFile_GetUserFiles_Request)},
  { 304, 313, sizeof(::CPublishedFile_GetUserFiles_Response_App)},
  { 317, 326, sizeof(::CPublishedFile_GetUserFiles_Response)},
  { 330, 343, sizeof(::CPublishedFile_Update_Request)},
  { 351, -1, sizeof(::CPublishedFile_Update_Response)},
  { 356, 367, sizeof(::CPublishedFile_RefreshVotingQueue_Request)},
  { 373, -1, sizeof(::CPublishedFile_RefreshVotingQueue_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Subscribe_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Subscribe_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Unsubscribe_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Unsubscribe_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Publish_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Publish_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetDetails_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Tag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Preview_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_Child_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_KVTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_VoteData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PublishedFileDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Response_App_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_GetUserFiles_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Update_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_Update_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RefreshVotingQueue_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPublishedFile_RefreshVotingQueue_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fpublishedfile_2esteamworkssdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/steammessages_publishedfile.steamworks"
  "sdk.proto\032.steammessages_unified_base.st"
  "eamworkssdk.proto\"t\n CPublishedFile_Subs"
  "cribe_Request\022\027\n\017publishedfileid\030\001 \001(\004\022\021"
  "\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnoti"
  "fy_client\030\004 \001(\010\"#\n!CPublishedFile_Subscr"
  "ibe_Response\"v\n\"CPublishedFile_Unsubscri"
  "be_Request\022\027\n\017publishedfileid\030\001 \001(\004\022\021\n\tl"
  "ist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025\n\rnotify_"
  "client\030\004 \001(\010\"%\n#CPublishedFile_Unsubscri"
  "be_Response\"\314\n\n\036CPublishedFile_Publish_R"
  "equest\022<\n\005appid\030\001 \001(\rB-\202\265\030)App Id this f"
  "ile is being published FROM.\022C\n\016consumer"
  "_appid\030\002 \001(\rB+\202\265\030\'App Id this file is be"
  "ing published TO.\022K\n\rcloudfilename\030\003 \001(\t"
  "B4\202\265\0300Name of the file to publish in the"
  " user\'s cloud.\022[\n\025preview_cloudfilename\030"
  "\004 \001(\tB<\202\265\0308Name of the file to use as th"
  "e published file\'s preview.\0225\n\005title\030\005 \001"
  "(\tB&\202\265\030\"Text title for the published fil"
  "e.\022F\n\020file_description\030\006 \001(\tB,\202\265\030(Text d"
  "escription for the published file.\022L\n\tfi"
  "le_type\030\007 \001(\rB9\202\265\0305(EWorkshopFileType) T"
  "ype of Workshop file to publish.\022I\n\026cons"
  "umer_shortcut_name\030\010 \001(\tB)\202\265\030%Shortcut n"
  "ame for the published file.\022I\n\020youtube_u"
  "sername\030\t \001(\tB/\202\265\030+(Optional) User\'s You"
  "Tube account username.\022\\\n\017youtube_videoi"
  "d\030\n \001(\tBC\202\265\030\?(Optional) Video Id of a Yo"
  "uTube video for this published file.\022\201\001\n"
  "\nvisibility\030\013 \001(\rBm\202\265\030i(ERemoteStoragePu"
  "blishedFileVisibility) Visibility of the"
  " published file (private, friends, publi"
  "c, etc.)\022k\n\014redirect_uri\030\014 \001(\tBU\202\265\030Q(Opt"
  "ional) If supplied, the resulting publis"
  "hed file\'s Id is appended to the URI.\022D\n"
  "\004tags\030\r \003(\tB6\202\265\0302Array of text tags to a"
  "pply to the published file.\022Y\n\017collectio"
  "n_type\030\016 \001(\tB@\202\265\030<(Optional) Type of col"
  "lection the published file represents.\022M"
  "\n\tgame_type\030\017 \001(\tB:\202\265\0306(Optional) Type o"
  "f game the published file represents.\022[\n"
  "\003url\030\020 \001(\tBN\202\265\030J(Optional) If this repre"
  "sents a game, this is the URL to that ga"
  "me\'s page.\"P\n\037CPublishedFile_Publish_Res"
  "ponse\022\027\n\017publishedfileid\030\001 \001(\004\022\024\n\014redire"
  "ct_uri\030\002 \001(\t\"\204\005\n!CPublishedFile_GetDetai"
  "ls_Request\022P\n\020publishedfileids\030\001 \003(\006B6\202\265"
  "\0302Set of published file Ids to retrieve "
  "details for.\022Q\n\013includetags\030\002 \001(\010B<\202\265\0308I"
  "f true, return tag information in the re"
  "turned details.\022c\n\031includeadditionalprev"
  "iews\030\003 \001(\010B@\202\265\030<If true, return preview "
  "information in the returned details.\022N\n\017"
  "includechildren\030\004 \001(\010B5\202\265\0301If true, retu"
  "rn children in the returned details.\022R\n\r"
  "includekvtags\030\005 \001(\010B;\202\265\0307If true, return"
  " key value tags in the returned details."
  "\022L\n\014includevotes\030\006 \001(\010B6\202\265\0302If true, ret"
  "urn vote data in the returned details.\022c"
  "\n\021short_description\030\010 \001(\010BH\202\265\030DIf true, "
  "return a short description instead of th"
  "e full description.\"\211\016\n\024PublishedFileDet"
  "ails\022\016\n\006result\030\001 \001(\r\022\027\n\017publishedfileid\030"
  "\002 \001(\004\022\017\n\007creator\030\003 \001(\006\022\025\n\rcreator_appid\030"
  "\004 \001(\r\022\026\n\016consumer_appid\030\005 \001(\r\022\033\n\023consume"
  "r_shortcutid\030\006 \001(\r\022\020\n\010filename\030\007 \001(\t\022\021\n\t"
  "file_size\030\010 \001(\004\022\031\n\021preview_file_size\030\t \001"
  "(\004\022\020\n\010file_url\030\n \001(\t\022\023\n\013preview_url\030\013 \001("
  "\t\022\026\n\016youtubevideoid\030\014 \001(\t\022\013\n\003url\030\r \001(\t\022\025"
  "\n\rhcontent_file\030\016 \001(\006\022\030\n\020hcontent_previe"
  "w\030\017 \001(\006\022\r\n\005title\030\020 \001(\t\022\030\n\020file_descripti"
  "on\030\021 \001(\t\022\031\n\021short_description\030\022 \001(\t\022\024\n\014t"
  "ime_created\030\023 \001(\r\022\024\n\014time_updated\030\024 \001(\r\022"
  "\022\n\nvisibility\030\025 \001(\r\022\r\n\005flags\030\026 \001(\r\022\025\n\rwo"
  "rkshop_file\030\027 \001(\010\022\031\n\021workshop_accepted\030\030"
  " \001(\010\022\032\n\022show_subscribe_all\030\031 \001(\010\022\036\n\026num_"
  "comments_developer\030\032 \001(\005\022\033\n\023num_comments"
  "_public\030\033 \001(\005\022\016\n\006banned\030\034 \001(\010\022\022\n\nban_rea"
  "son\030\035 \001(\t\022\016\n\006banner\030\036 \001(\006\022\026\n\016can_be_dele"
  "ted\030\037 \001(\010\022\024\n\014incompatible\030  \001(\010\022\020\n\010app_n"
  "ame\030! \001(\t\022\021\n\tfile_type\030\" \001(\r\022\025\n\rcan_subs"
  "cribe\030# \001(\010\022\025\n\rsubscriptions\030$ \001(\r\022\021\n\tfa"
  "vorited\030% \001(\r\022\021\n\tfollowers\030& \001(\r\022\036\n\026life"
  "time_subscriptions\030\' \001(\r\022\032\n\022lifetime_fav"
  "orited\030( \001(\r\022\032\n\022lifetime_followers\030) \001(\r"
  "\022\r\n\005views\030* \001(\r\022\023\n\013image_width\030+ \001(\r\022\024\n\014"
  "image_height\030, \001(\r\022\021\n\timage_url\030- \001(\t\022\023\n"
  "\013spoiler_tag\030. \001(\010\022\022\n\nshortcutid\030/ \001(\r\022\024"
  "\n\014shortcutname\0300 \001(\t\022\024\n\014num_children\0301 \001"
  "(\r\022\023\n\013num_reports\0302 \001(\r\022/\n\010previews\0303 \003("
  "\0132\035.PublishedFileDetails.Preview\022\'\n\004tags"
  "\0304 \003(\0132\031.PublishedFileDetails.Tag\022-\n\010chi"
  "ldren\0305 \003(\0132\033.PublishedFileDetails.Child"
  "\022+\n\006kvtags\0306 \003(\0132\033.PublishedFileDetails."
  "KVTag\0221\n\tvote_data\0307 \001(\0132\036.PublishedFile"
  "Details.VoteData\022r\n\017time_subscribed\0308 \001("
  "\rBY\202\265\030UOnly valid in PublishedFile.GetUs"
  "erFiles and not normal PublishedFile.Get"
  "Detail calls\032%\n\003Tag\022\013\n\003tag\030\001 \001(\t\022\021\n\tadmi"
  "nonly\030\002 \001(\010\032t\n\007Preview\022\021\n\tpreviewid\030\001 \001("
  "\004\022\021\n\tsortorder\030\002 \001(\r\022\013\n\003url\030\003 \001(\t\022\014\n\004siz"
  "e\030\004 \001(\r\022\020\n\010filename\030\005 \001(\t\022\026\n\016youtubevide"
  "oid\030\006 \001(\t\032F\n\005Child\022\027\n\017publishedfileid\030\001 "
  "\001(\004\022\021\n\tsortorder\030\002 \001(\r\022\021\n\tfile_type\030\003 \001("
  "\r\032#\n\005KVTag\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\?"
  "\n\010VoteData\022\r\n\005score\030\001 \001(\002\022\020\n\010votes_up\030\002 "
  "\001(\r\022\022\n\nvotes_down\030\003 \001(\r\"Y\n\"CPublishedFil"
  "e_GetDetails_Response\0223\n\024publishedfilede"
  "tails\030\001 \003(\0132\025.PublishedFileDetails\"\273\006\n#C"
  "PublishedFile_GetUserFiles_Request\022;\n\005ap"
  "pid\030\001 \001(\rB,\202\265\030(App Id to retrieve publis"
  "hed files from.\022:\n\004page\030\003 \001(\r:\0011B)\202\265\030%(O"
  "ptional) Starting page for results.\022P\n\nn"
  "umperpage\030\004 \001(\r:\0011B9\202\265\0305(Optional) The n"
  "umber of results, per page to return.\022Y\n"
  "\nsortmethod\030\006 \001(\t:\013lastupdatedB8\202\265\0304(Opt"
  "ional) Sorting method to use on returned"
  " values.\022i\n\ttotalonly\030\007 \001(\010BV\202\265\030R(Option"
  "al) If true, only return the total numbe"
  "r of files that satisfy this query.\022;\n\007p"
  "rivacy\030\t \001(\rB*\202\265\030&(optional) Filter by p"
  "rivacy settings.\022n\n\010ids_only\030\n \001(\010B\\\202\265\030X"
  "(Optional) If true, only return the publ"
  "ished file ids of files that satisfy thi"
  "s query.\022h\n\014requiredtags\030\013 \003(\tBR\202\265\030N(Opt"
  "ional) Tags that must be present on a pu"
  "blished file to satisfy the query.\022l\n\014ex"
  "cludedtags\030\014 \003(\tBV\202\265\030R(Optional) Tags th"
  "at must NOT be present on a published fi"
  "le to satisfy the query.\"\200\002\n$CPublishedF"
  "ile_GetUserFiles_Response\022\r\n\005total\030\001 \001(\r"
  "\022\022\n\nstartindex\030\002 \001(\r\0223\n\024publishedfiledet"
  "ails\030\003 \003(\0132\025.PublishedFileDetails\0227\n\004app"
  "s\030\004 \003(\0132).CPublishedFile_GetUserFiles_Re"
  "sponse.App\032G\n\003App\022\r\n\005appid\030\001 \001(\r\022\014\n\004name"
  "\030\002 \001(\t\022\022\n\nshortcutid\030\003 \001(\r\022\017\n\007private\030\004 "
  "\001(\010\"\317\004\n\035CPublishedFile_Update_Request\0229\n"
  "\005appid\030\001 \001(\rB*\202\265\030&App Id this published "
  "file belongs to.\022L\n\017publishedfileid\030\002 \001("
  "\006B3\202\265\030/Published file id of the file we\'"
  "d like update.\022:\n\005title\030\003 \001(\tB+\202\265\030\'(Opti"
  "onal) Title of the published file.\022K\n\020fi"
  "le_description\030\004 \001(\tB1\202\265\030-(Optional) Des"
  "cription of the published file.\022D\n\nvisib"
  "ility\030\005 \001(\rB0\202\265\030,(Optional) Visibility o"
  "f the published file.\022@\n\004tags\030\006 \003(\tB2\202\265\030"
  ".(Optional) Set of tags for the publishe"
  "d file.\022A\n\010filename\030\007 \001(\tB/\202\265\030+(Optional"
  ") Filename for the published file.\022Q\n\020pr"
  "eview_filename\030\010 \001(\tB7\202\265\0303(Optional) Pre"
  "view filename for the published file.\" \n"
  "\036CPublishedFile_Update_Response\"\273\004\n)CPub"
  "lishedFile_RefreshVotingQueue_Request\022\r\n"
  "\005appid\030\001 \001(\r\022B\n\022matching_file_type\030\002 \001(\r"
  "B&\202\265\030\"EPublishedFileInfoMatchingFileType"
  "\022l\n\004tags\030\003 \003(\tB^\202\265\030ZInclude files that h"
  "ave all the tags or any of the tags if m"
  "atch_all_tags is set to false.\022\225\001\n\016match"
  "_all_tags\030\004 \001(\010:\004trueBw\202\265\030sIf true, then"
  " files must have all the tags specified."
  "  If false, then must have at least one "
  "of the tags specified.\022I\n\rexcluded_tags\030"
  "\005 \003(\tB2\202\265\030.Exclude any files that have a"
  "ny of these tags.\022j\n\022desired_queue_size\030"
  "\006 \001(\rBN\202\265\030JDesired number of items in th"
  "e voting queue.  May be clamped by the s"
  "erver\",\n*CPublishedFile_RefreshVotingQue"
  "ue_Response2\203\010\n\rPublishedFile\022\201\001\n\tSubscr"
  "ibe\022!.CPublishedFile_Subscribe_Request\032\""
  ".CPublishedFile_Subscribe_Response\"-\202\265\030)"
  "Subscribes the user to the published fil"
  "e\022\213\001\n\013Unsubscribe\022#.CPublishedFile_Unsub"
  "scribe_Request\032$.CPublishedFile_Unsubscr"
  "ibe_Response\"1\202\265\030-Unsubscribes the user "
  "from the published file\022\200\001\n\007Publish\022\037.CP"
  "ublishedFile_Publish_Request\032 .CPublishe"
  "dFile_Publish_Response\"2\202\265\030.Publishes a "
  "clouded user file to the Workshop.\022\220\001\n\nG"
  "etDetails\022\".CPublishedFile_GetDetails_Re"
  "quest\032#.CPublishedFile_GetDetails_Respon"
  "se\"9\202\265\0305Retrieves information about a se"
  "t of published files.\022\205\001\n\014GetUserFiles\022$"
  ".CPublishedFile_GetUserFiles_Request\032%.C"
  "PublishedFile_GetUserFiles_Response\"(\202\265\030"
  "$Retrieves files published by a user.\022z\n"
  "\006Update\022\036.CPublishedFile_Update_Request\032"
  "\037.CPublishedFile_Update_Response\"/\202\265\030+Up"
  "dates information about a published file"
  ".\022\230\001\n\022RefreshVotingQueue\022*.CPublishedFil"
  "e_RefreshVotingQueue_Request\032+.CPublishe"
  "dFile_RefreshVotingQueue_Response\")\202\265\030%R"
  "efresh the voting queue for the user\032+\202\265"
  "\030\'A service to access published file dat"
  "a"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto = {
  false, false, 7761, descriptor_table_protodef_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, "steammessages_publishedfile.steamworkssdk.proto", 
  &descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_once, descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_deps, 1, 21,
  schemas, file_default_instances, TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto::offsets,
  file_level_metadata_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, file_level_enum_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto, file_level_service_descriptors_steammessages_5fpublishedfile_2esteamworkssdk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);
  return descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fpublishedfile_2esteamworkssdk_2eproto(&descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto);

// ===================================================================

class CPublishedFile_Subscribe_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Subscribe_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notify_client(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Subscribe_Request)
}
CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Request)
}

void CPublishedFile_Subscribe_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Subscribe_Request::~CPublishedFile_Subscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Subscribe_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Subscribe_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_Subscribe_Request::ArenaDtor(void* object) {
  CPublishedFile_Subscribe_Request* _this = reinterpret_cast< CPublishedFile_Subscribe_Request* >(object);
  (void)_this;
}
void CPublishedFile_Subscribe_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Subscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Subscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Subscribe_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Subscribe_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 list_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_list_type(&has_bits);
          list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notify_client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_notify_client(&has_bits);
          notify_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Subscribe_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Subscribe_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_notify_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Subscribe_Request)
  return target;
}

size_t CPublishedFile_Subscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Subscribe_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Subscribe_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Subscribe_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Subscribe_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Subscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Request::MergeFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Subscribe_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Request::CopyFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Request::InternalSwap(CPublishedFile_Subscribe_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Subscribe_Request, notify_client_)
      + sizeof(CPublishedFile_Subscribe_Request::notify_client_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Subscribe_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Subscribe_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Subscribe_Response::_Internal {
 public:
};

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Subscribe_Response)
}
CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Subscribe_Response)
}

void CPublishedFile_Subscribe_Response::SharedCtor() {
}

CPublishedFile_Subscribe_Response::~CPublishedFile_Subscribe_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Subscribe_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Subscribe_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_Subscribe_Response::ArenaDtor(void* object) {
  CPublishedFile_Subscribe_Response* _this = reinterpret_cast< CPublishedFile_Subscribe_Response* >(object);
  (void)_this;
}
void CPublishedFile_Subscribe_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Subscribe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Subscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Subscribe_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Subscribe_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Subscribe_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Subscribe_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Subscribe_Response)
  return target;
}

size_t CPublishedFile_Subscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Subscribe_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Subscribe_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Subscribe_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Subscribe_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Subscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Response::MergeFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Subscribe_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Response::CopyFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Response::InternalSwap(CPublishedFile_Subscribe_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Subscribe_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Unsubscribe_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Unsubscribe_Request>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_list_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notify_client(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Unsubscribe_Request)
}
CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Request)
}

void CPublishedFile_Unsubscribe_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
}

CPublishedFile_Unsubscribe_Request::~CPublishedFile_Unsubscribe_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Unsubscribe_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Unsubscribe_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_Unsubscribe_Request::ArenaDtor(void* object) {
  CPublishedFile_Unsubscribe_Request* _this = reinterpret_cast< CPublishedFile_Unsubscribe_Request* >(object);
  (void)_this;
}
void CPublishedFile_Unsubscribe_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Unsubscribe_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Unsubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Unsubscribe_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notify_client_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Unsubscribe_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 list_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_list_type(&has_bits);
          list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 appid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool notify_client = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_notify_client(&has_bits);
          notify_client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Unsubscribe_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Unsubscribe_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_notify_client(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Unsubscribe_Request)
  return target;
}

size_t CPublishedFile_Unsubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Unsubscribe_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_list_type());
    }

    // optional int32 appid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appid());
    }

    // optional bool notify_client = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Unsubscribe_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Unsubscribe_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Unsubscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Request::InternalSwap(CPublishedFile_Unsubscribe_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, notify_client_)
      + sizeof(CPublishedFile_Unsubscribe_Request::notify_client_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Unsubscribe_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Unsubscribe_Response::_Internal {
 public:
};

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Unsubscribe_Response)
}
CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Unsubscribe_Response)
}

void CPublishedFile_Unsubscribe_Response::SharedCtor() {
}

CPublishedFile_Unsubscribe_Response::~CPublishedFile_Unsubscribe_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Unsubscribe_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Unsubscribe_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_Unsubscribe_Response::ArenaDtor(void* object) {
  CPublishedFile_Unsubscribe_Response* _this = reinterpret_cast< CPublishedFile_Unsubscribe_Response* >(object);
  (void)_this;
}
void CPublishedFile_Unsubscribe_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Unsubscribe_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Unsubscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Unsubscribe_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Unsubscribe_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Unsubscribe_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Unsubscribe_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Unsubscribe_Response)
  return target;
}

size_t CPublishedFile_Unsubscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Unsubscribe_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Unsubscribe_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Unsubscribe_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Unsubscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Response::InternalSwap(CPublishedFile_Unsubscribe_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Unsubscribe_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Publish_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Publish_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_consumer_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cloudfilename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preview_cloudfilename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_consumer_shortcut_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_youtube_username(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_youtube_videoid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_redirect_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_collection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Publish_Request)
}
CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cloudfilename()) {
    cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cloudfilename(), 
      GetArena());
  }
  preview_cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preview_cloudfilename()) {
    preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_cloudfilename(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArena());
  }
  consumer_shortcut_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_consumer_shortcut_name()) {
    consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_consumer_shortcut_name(), 
      GetArena());
  }
  youtube_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtube_username()) {
    youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_username(), 
      GetArena());
  }
  youtube_videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtube_videoid()) {
    youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtube_videoid(), 
      GetArena());
  }
  redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_redirect_uri()) {
    redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_uri(), 
      GetArena());
  }
  collection_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collection_type()) {
    collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection_type(), 
      GetArena());
  }
  game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_type()) {
    game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_type(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Request)
}

void CPublishedFile_Publish_Request::SharedCtor() {
cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preview_cloudfilename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
consumer_shortcut_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
youtube_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
youtube_videoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
collection_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
}

CPublishedFile_Publish_Request::~CPublishedFile_Publish_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Publish_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cloudfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtube_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Request::ArenaDtor(void* object) {
  CPublishedFile_Publish_Request* _this = reinterpret_cast< CPublishedFile_Publish_Request* >(object);
  (void)_this;
}
void CPublishedFile_Publish_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Publish_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Publish_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Publish_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cloudfilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      preview_cloudfilename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      consumer_shortcut_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      youtube_username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      youtube_videoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      redirect_uri_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      collection_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      game_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Publish_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_consumer_appid(&has_bits);
          consumer_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cloudfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.cloudfilename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_preview_cloudfilename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.preview_cloudfilename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 5 [(.description) = "Text title for the published file."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_description = 6 [(.description) = "Text description for the published file."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_file_type(&has_bits);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_consumer_shortcut_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.consumer_shortcut_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_youtube_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.youtube_username");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_youtube_videoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.youtube_videoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.redirect_uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_collection_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.collection_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_game_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.game_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Request.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Publish_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_consumer_appid(), target);
  }

  // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cloudfilename().data(), static_cast<int>(this->_internal_cloudfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.cloudfilename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cloudfilename(), target);
  }

  // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_cloudfilename().data(), static_cast<int>(this->_internal_preview_cloudfilename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.preview_cloudfilename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preview_cloudfilename(), target);
  }

  // optional string title = 5 [(.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.title");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_title(), target);
  }

  // optional string file_description = 6 [(.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.file_description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_description(), target);
  }

  // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_file_type(), target);
  }

  // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_consumer_shortcut_name().data(), static_cast<int>(this->_internal_consumer_shortcut_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.consumer_shortcut_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_consumer_shortcut_name(), target);
  }

  // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_username().data(), static_cast<int>(this->_internal_youtube_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.youtube_username");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_youtube_username(), target);
  }

  // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtube_videoid().data(), static_cast<int>(this->_internal_youtube_videoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.youtube_videoid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_youtube_videoid(), target);
  }

  // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_visibility(), target);
  }

  // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_redirect_uri(), target);
  }

  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.tags");
    target = stream->WriteString(13, s, target);
  }

  // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collection_type().data(), static_cast<int>(this->_internal_collection_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.collection_type");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_collection_type(), target);
  }

  // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.game_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_game_type(), target);
  }

  // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Request.url");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Request)
  return target;
}

size_t CPublishedFile_Publish_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Publish_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cloudfilename());
    }

    // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_cloudfilename());
    }

    // optional string title = 5 [(.description) = "Text title for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 6 [(.description) = "Text description for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_consumer_shortcut_name());
    }

    // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_username());
    }

    // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtube_videoid());
    }

    // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redirect_uri());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_collection_type());
    }

    // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_type());
    }

    // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_consumer_appid());
    }

    // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_type());
    }

    // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibility());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Publish_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Publish_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Publish_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Publish_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Request::MergeFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cloudfilename(from._internal_cloudfilename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_preview_cloudfilename(from._internal_preview_cloudfilename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_consumer_shortcut_name(from._internal_consumer_shortcut_name());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_youtube_username(from._internal_youtube_username());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_youtube_videoid(from._internal_youtube_videoid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_redirect_uri(from._internal_redirect_uri());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_collection_type(from._internal_collection_type());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_game_type(from._internal_game_type());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00002000u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Request::CopyFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Request::InternalSwap(CPublishedFile_Publish_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  cloudfilename_.Swap(&other->cloudfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preview_cloudfilename_.Swap(&other->preview_cloudfilename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_description_.Swap(&other->file_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  consumer_shortcut_name_.Swap(&other->consumer_shortcut_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  youtube_username_.Swap(&other->youtube_username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  youtube_videoid_.Swap(&other->youtube_videoid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  redirect_uri_.Swap(&other->redirect_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  collection_type_.Swap(&other->collection_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_type_.Swap(&other->game_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Publish_Request, visibility_)
      + sizeof(CPublishedFile_Publish_Request::visibility_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Publish_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Publish_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Publish_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Publish_Response>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redirect_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Publish_Response)
}
CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_redirect_uri()) {
    redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redirect_uri(), 
      GetArena());
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Publish_Response)
}

void CPublishedFile_Publish_Response::SharedCtor() {
redirect_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
publishedfileid_ = PROTOBUF_ULONGLONG(0);
}

CPublishedFile_Publish_Response::~CPublishedFile_Publish_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Publish_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Publish_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  redirect_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Response::ArenaDtor(void* object) {
  CPublishedFile_Publish_Response* _this = reinterpret_cast< CPublishedFile_Publish_Response* >(object);
  (void)_this;
}
void CPublishedFile_Publish_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Publish_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Publish_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Publish_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    redirect_uri_.ClearNonDefaultToEmpty();
  }
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Publish_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string redirect_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Publish_Response.redirect_uri");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Publish_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Publish_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Publish_Response.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redirect_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Publish_Response)
  return target;
}

size_t CPublishedFile_Publish_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Publish_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string redirect_uri = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_redirect_uri());
    }

    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Publish_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Publish_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Publish_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Publish_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Response::MergeFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_redirect_uri(from._internal_redirect_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Response::CopyFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Response::InternalSwap(CPublishedFile_Publish_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  redirect_uri_.Swap(&other->redirect_uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(publishedfileid_, other->publishedfileid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Publish_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_GetDetails_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetDetails_Request>()._has_bits_);
  static void set_has_includetags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_includeadditionalpreviews(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_includechildren(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_includekvtags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_includevotes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publishedfileids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetDetails_Request)
}
CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&includetags_, &from.includetags_,
    static_cast<size_t>(reinterpret_cast<char*>(&short_description_) -
    reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Request)
}

void CPublishedFile_GetDetails_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&includetags_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&short_description_) -
    reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
}

CPublishedFile_GetDetails_Request::~CPublishedFile_GetDetails_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_GetDetails_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_GetDetails_Request::ArenaDtor(void* object) {
  CPublishedFile_GetDetails_Request* _this = reinterpret_cast< CPublishedFile_GetDetails_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetDetails_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetDetails_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfileids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&includetags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&short_description_) -
        reinterpret_cast<char*>(&includetags_)) + sizeof(short_description_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetDetails_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_publishedfileids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_includetags(&has_bits);
          includetags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_includeadditionalpreviews(&has_bits);
          includeadditionalpreviews_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_includechildren(&has_bits);
          includechildren_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_includekvtags(&has_bits);
          includekvtags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_includevotes(&has_bits);
          includevotes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_short_description(&has_bits);
          short_description_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_GetDetails_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  for (int i = 0, n = this->_internal_publishedfileids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_publishedfileids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_includetags(), target);
  }

  // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_includeadditionalpreviews(), target);
  }

  // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_includechildren(), target);
  }

  // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_includekvtags(), target);
  }

  // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_includevotes(), target);
  }

  // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_short_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Request)
  return target;
}

size_t CPublishedFile_GetDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetDetails_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_publishedfileids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_publishedfileids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetDetails_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_GetDetails_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_GetDetails_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_GetDetails_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Request::MergeFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      includetags_ = from.includetags_;
    }
    if (cached_has_bits & 0x00000002u) {
      includeadditionalpreviews_ = from.includeadditionalpreviews_;
    }
    if (cached_has_bits & 0x00000004u) {
      includechildren_ = from.includechildren_;
    }
    if (cached_has_bits & 0x00000008u) {
      includekvtags_ = from.includekvtags_;
    }
    if (cached_has_bits & 0x00000010u) {
      includevotes_ = from.includevotes_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_description_ = from.short_description_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetDetails_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Request::CopyFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Request::InternalSwap(CPublishedFile_GetDetails_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetDetails_Request, short_description_)
      + sizeof(CPublishedFile_GetDetails_Request::short_description_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includetags_)>(
          reinterpret_cast<char*>(&includetags_),
          reinterpret_cast<char*>(&other->includetags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetDetails_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails_Tag::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Tag>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adminonly(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_Tag::PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Tag)
}
PublishedFileDetails_Tag::PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  adminonly_ = from.adminonly_;
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Tag)
}

void PublishedFileDetails_Tag::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
adminonly_ = false;
}

PublishedFileDetails_Tag::~PublishedFileDetails_Tag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Tag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails_Tag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Tag::ArenaDtor(void* object) {
  PublishedFileDetails_Tag* _this = reinterpret_cast< PublishedFileDetails_Tag* >(object);
  (void)_this;
}
void PublishedFileDetails_Tag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Tag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  adminonly_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Tag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Tag.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool adminonly = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_adminonly(&has_bits);
          adminonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails_Tag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Tag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Tag.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_adminonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Tag)
  return target;
}

size_t PublishedFileDetails_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Tag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional bool adminonly = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Tag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Tag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails_Tag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails.Tag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails.Tag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Tag::MergeFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      adminonly_ = from.adminonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Tag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Tag::CopyFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Tag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Tag::InternalSwap(PublishedFileDetails_Tag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(adminonly_, other->adminonly_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Tag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails_Preview::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Preview>()._has_bits_);
  static void set_has_previewid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sortorder(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_youtubevideoid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublishedFileDetails_Preview::PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Preview)
}
PublishedFileDetails_Preview::PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtubevideoid()) {
    youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtubevideoid(), 
      GetArena());
  }
  ::memcpy(&previewid_, &from.previewid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Preview)
}

void PublishedFileDetails_Preview::SharedCtor() {
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&previewid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
}

PublishedFileDetails_Preview::~PublishedFileDetails_Preview() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Preview)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails_Preview::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Preview::ArenaDtor(void* object) {
  PublishedFileDetails_Preview* _this = reinterpret_cast< PublishedFileDetails_Preview* >(object);
  (void)_this;
}
void PublishedFileDetails_Preview::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Preview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Preview::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      youtubevideoid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&previewid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&previewid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Preview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 previewid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_previewid(&has_bits);
          previewid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sortorder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sortorder(&has_bits);
          sortorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string youtubevideoid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_youtubevideoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.Preview.youtubevideoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails_Preview::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Preview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_previewid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sortorder(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.filename");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_filename(), target);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtubevideoid().data(), static_cast<int>(this->_internal_youtubevideoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.Preview.youtubevideoid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_youtubevideoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Preview)
  return target;
}

size_t PublishedFileDetails_Preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Preview)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string filename = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string youtubevideoid = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtubevideoid());
    }

    // optional uint64 previewid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_previewid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sortorder());
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Preview::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Preview* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails_Preview>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails.Preview)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails.Preview)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Preview::MergeFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_youtubevideoid(from._internal_youtubevideoid());
    }
    if (cached_has_bits & 0x00000008u) {
      previewid_ = from.previewid_;
    }
    if (cached_has_bits & 0x00000010u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Preview::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Preview::CopyFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Preview::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Preview::InternalSwap(PublishedFileDetails_Preview* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  youtubevideoid_.Swap(&other->youtubevideoid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Preview, size_)
      + sizeof(PublishedFileDetails_Preview::size_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Preview, previewid_)>(
          reinterpret_cast<char*>(&previewid_),
          reinterpret_cast<char*>(&other->previewid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Preview::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails_Child::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_Child>()._has_bits_);
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sortorder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublishedFileDetails_Child::PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.Child)
}
PublishedFileDetails_Child::PublishedFileDetails_Child(const PublishedFileDetails_Child& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.Child)
}

void PublishedFileDetails_Child::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
}

PublishedFileDetails_Child::~PublishedFileDetails_Child() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.Child)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails_Child::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishedFileDetails_Child::ArenaDtor(void* object) {
  PublishedFileDetails_Child* _this = reinterpret_cast< PublishedFileDetails_Child* >(object);
  (void)_this;
}
void PublishedFileDetails_Child::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_Child::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_Child::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.Child)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_type_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(file_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_Child::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 publishedfileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sortorder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sortorder(&has_bits);
          sortorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_file_type(&has_bits);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails_Child::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.Child)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_publishedfileid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sortorder(), target);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_file_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.Child)
  return target;
}

size_t PublishedFileDetails_Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.Child)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 publishedfileid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional uint32 sortorder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sortorder());
    }

    // optional uint32 file_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_Child::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Child* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails_Child>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails.Child)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails.Child)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Child::MergeFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Child::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Child::CopyFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Child::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Child::InternalSwap(PublishedFileDetails_Child* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Child, file_type_)
      + sizeof(PublishedFileDetails_Child::file_type_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_Child, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_Child::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails_KVTag::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_KVTag>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.KVTag)
}
PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.KVTag)
}

void PublishedFileDetails_KVTag::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PublishedFileDetails_KVTag::~PublishedFileDetails_KVTag() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.KVTag)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails_KVTag::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_KVTag::ArenaDtor(void* object) {
  PublishedFileDetails_KVTag* _this = reinterpret_cast< PublishedFileDetails_KVTag* >(object);
  (void)_this;
}
void PublishedFileDetails_KVTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_KVTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.KVTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_KVTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.KVTag.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.KVTag.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails_KVTag::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.KVTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.KVTag.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.KVTag.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.KVTag)
  return target;
}

size_t PublishedFileDetails_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.KVTag)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_KVTag::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_KVTag* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails_KVTag>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails.KVTag)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails.KVTag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_KVTag::MergeFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void PublishedFileDetails_KVTag::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_KVTag::CopyFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_KVTag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_KVTag::InternalSwap(PublishedFileDetails_KVTag* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_KVTag::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails_VoteData::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails_VoteData>()._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_votes_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_votes_down(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails.VoteData)
}
PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails.VoteData)
}

void PublishedFileDetails_VoteData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&score_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
}

PublishedFileDetails_VoteData::~PublishedFileDetails_VoteData() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails.VoteData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails_VoteData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PublishedFileDetails_VoteData::ArenaDtor(void* object) {
  PublishedFileDetails_VoteData* _this = reinterpret_cast< PublishedFileDetails_VoteData* >(object);
  (void)_this;
}
void PublishedFileDetails_VoteData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails_VoteData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails_VoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails.VoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&votes_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(votes_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails_VoteData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 votes_up = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_votes_up(&has_bits);
          votes_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 votes_down = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_votes_down(&has_bits);
          votes_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails_VoteData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails.VoteData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_score(), target);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_votes_up(), target);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_votes_down(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails.VoteData)
  return target;
}

size_t PublishedFileDetails_VoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails.VoteData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float score = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 votes_up = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_votes_up());
    }

    // optional uint32 votes_down = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_votes_down());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails_VoteData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_VoteData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails_VoteData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails.VoteData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails.VoteData)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_VoteData::MergeFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      votes_up_ = from.votes_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      votes_down_ = from.votes_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_VoteData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_VoteData::CopyFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_VoteData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_VoteData::InternalSwap(PublishedFileDetails_VoteData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_down_)
      + sizeof(PublishedFileDetails_VoteData::votes_down_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails_VoteData, score_)>(
          reinterpret_cast<char*>(&score_),
          reinterpret_cast<char*>(&other->score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails_VoteData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PublishedFileDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PublishedFileDetails>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_creator_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_consumer_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_consumer_shortcutid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_preview_file_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_file_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preview_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_youtubevideoid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hcontent_file(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_hcontent_preview(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_short_description(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_time_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_workshop_file(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_workshop_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_show_subscribe_all(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_num_comments_developer(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_num_comments_public(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ban_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_banner(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_can_be_deleted(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_incompatible(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_file_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_can_subscribe(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_subscriptions(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_favorited(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_followers(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_lifetime_subscriptions(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_lifetime_favorited(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_lifetime_followers(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_views(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_image_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_spoiler_tag(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_shortcutid(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_shortcutname(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_children(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_num_reports(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::PublishedFileDetails_VoteData& vote_data(const PublishedFileDetails* msg);
  static void set_has_vote_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_time_subscribed(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
};

const ::PublishedFileDetails_VoteData&
PublishedFileDetails::_Internal::vote_data(const PublishedFileDetails* msg) {
  return *msg->vote_data_;
}
PublishedFileDetails::PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  previews_(arena),
  tags_(arena),
  children_(arena),
  kvtags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PublishedFileDetails)
}
PublishedFileDetails::PublishedFileDetails(const PublishedFileDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      previews_(from.previews_),
      tags_(from.tags_),
      children_(from.children_),
      kvtags_(from.kvtags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_url()) {
    file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_url(), 
      GetArena());
  }
  preview_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preview_url()) {
    preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_url(), 
      GetArena());
  }
  youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_youtubevideoid()) {
    youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_youtubevideoid(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArena());
  }
  short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_short_description()) {
    short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_short_description(), 
      GetArena());
  }
  ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ban_reason()) {
    ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ban_reason(), 
      GetArena());
  }
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_app_name()) {
    app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_name(), 
      GetArena());
  }
  image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_url()) {
    image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_url(), 
      GetArena());
  }
  shortcutname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shortcutname()) {
    shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shortcutname(), 
      GetArena());
  }
  if (from._internal_has_vote_data()) {
    vote_data_ = new ::PublishedFileDetails_VoteData(*from.vote_data_);
  } else {
    vote_data_ = nullptr;
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_subscribed_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(time_subscribed_));
  // @@protoc_insertion_point(copy_constructor:PublishedFileDetails)
}

void PublishedFileDetails::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preview_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
youtubevideoid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
short_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ban_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shortcutname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vote_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_subscribed_) -
    reinterpret_cast<char*>(&vote_data_)) + sizeof(time_subscribed_));
}

PublishedFileDetails::~PublishedFileDetails() {
  // @@protoc_insertion_point(destructor:PublishedFileDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublishedFileDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  short_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ban_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcutname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vote_data_;
}

void PublishedFileDetails::ArenaDtor(void* object) {
  PublishedFileDetails* _this = reinterpret_cast< PublishedFileDetails* >(object);
  (void)_this;
}
void PublishedFileDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishedFileDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PublishedFileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:PublishedFileDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  previews_.Clear();
  tags_.Clear();
  children_.Clear();
  kvtags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      preview_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      youtubevideoid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      short_description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ban_reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      image_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      shortcutname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(vote_data_ != nullptr);
      vote_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creator_appid_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(creator_appid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_created_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(time_created_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&time_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_comments_developer_) -
        reinterpret_cast<char*>(&time_updated_)) + sizeof(num_comments_developer_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&banner_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spoiler_tag_) -
        reinterpret_cast<char*>(&banner_)) + sizeof(spoiler_tag_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&favorited_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&image_height_) -
        reinterpret_cast<char*>(&favorited_)) + sizeof(image_height_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&shortcutid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_subscribed_) -
        reinterpret_cast<char*>(&shortcutid_)) + sizeof(time_subscribed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishedFileDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&_has_bits_);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 publishedfileid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_publishedfileid(&_has_bits_);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 creator = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_creator(&_has_bits_);
          creator_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 creator_appid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_creator_appid(&_has_bits_);
          creator_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 consumer_appid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_consumer_appid(&_has_bits_);
          consumer_appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 consumer_shortcutid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_consumer_shortcutid(&_has_bits_);
          consumer_shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 file_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_file_size(&_has_bits_);
          file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 preview_file_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_preview_file_size(&_has_bits_);
          preview_file_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_url = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_file_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.file_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preview_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_preview_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.preview_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string youtubevideoid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_youtubevideoid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.youtubevideoid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hcontent_file = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_hcontent_file(&_has_bits_);
          hcontent_file_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 hcontent_preview = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_hcontent_preview(&_has_bits_);
          hcontent_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string title = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_description = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string short_description = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_short_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.short_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_time_created(&_has_bits_);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_updated = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_time_updated(&_has_bits_);
          time_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visibility = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_visibility(&_has_bits_);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_flags(&_has_bits_);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool workshop_file = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_workshop_file(&_has_bits_);
          workshop_file_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool workshop_accepted = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_workshop_accepted(&_has_bits_);
          workshop_accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_subscribe_all = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_show_subscribe_all(&_has_bits_);
          show_subscribe_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_comments_developer = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_num_comments_developer(&_has_bits_);
          num_comments_developer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_comments_public = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_num_comments_public(&_has_bits_);
          num_comments_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool banned = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_banned(&_has_bits_);
          banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ban_reason = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_ban_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.ban_reason");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 banner = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_banner(&_has_bits_);
          banner_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool can_be_deleted = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_can_be_deleted(&_has_bits_);
          can_be_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool incompatible = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_incompatible(&_has_bits_);
          incompatible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string app_name = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.app_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 file_type = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_file_type(&_has_bits_);
          file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_subscribe = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_can_subscribe(&_has_bits_);
          can_subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subscriptions = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_subscriptions(&_has_bits_);
          subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorited = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_favorited(&_has_bits_);
          favorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 followers = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_followers(&_has_bits_);
          followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lifetime_subscriptions = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lifetime_subscriptions(&_has_bits_);
          lifetime_subscriptions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lifetime_favorited = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lifetime_favorited(&_has_bits_);
          lifetime_favorited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lifetime_followers = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_lifetime_followers(&_has_bits_);
          lifetime_followers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 views = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_views(&_has_bits_);
          views_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_width = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_image_width(&_has_bits_);
          image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 image_height = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_image_height(&_has_bits_);
          image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_url = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_image_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.image_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool spoiler_tag = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_spoiler_tag(&_has_bits_);
          spoiler_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shortcutid = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_shortcutid(&_has_bits_);
          shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shortcutname = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_shortcutname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PublishedFileDetails.shortcutname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_children = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_num_children(&_has_bits_);
          num_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_reports = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_num_reports(&_has_bits_);
          num_reports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Preview previews = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_previews(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Tag tags = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.Child children = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<426>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails.KVTag kvtags = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_kvtags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .PublishedFileDetails.VoteData vote_data = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_time_subscribed(&_has_bits_);
          time_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishedFileDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PublishedFileDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_creator(), target);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_creator_appid(), target);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_consumer_appid(), target);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_consumer_shortcutid(), target);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.filename");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filename(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_file_size(), target);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_preview_file_size(), target);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_url().data(), static_cast<int>(this->_internal_file_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.file_url");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_file_url(), target);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_url().data(), static_cast<int>(this->_internal_preview_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.preview_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_preview_url(), target);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_youtubevideoid().data(), static_cast<int>(this->_internal_youtubevideoid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.youtubevideoid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_youtubevideoid(), target);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.url");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_url(), target);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_hcontent_file(), target);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_hcontent_preview(), target);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.title");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_title(), target);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.file_description");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_file_description(), target);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_short_description().data(), static_cast<int>(this->_internal_short_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.short_description");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_short_description(), target);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_time_created(), target);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_time_updated(), target);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_visibility(), target);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_flags(), target);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_workshop_file(), target);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_workshop_accepted(), target);
  }

  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_show_subscribe_all(), target);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_num_comments_developer(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_comments_public(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool banned = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_banned(), target);
  }

  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ban_reason().data(), static_cast<int>(this->_internal_ban_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.ban_reason");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_ban_reason(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(30, this->_internal_banner(), target);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_can_be_deleted(), target);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_incompatible(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.app_name");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_app_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_file_type(), target);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_can_subscribe(), target);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_subscriptions(), target);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_favorited(), target);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_followers(), target);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_lifetime_subscriptions(), target);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_lifetime_favorited(), target);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_lifetime_followers(), target);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_views(), target);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_image_width(), target);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_image_height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_url().data(), static_cast<int>(this->_internal_image_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.image_url");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_image_url(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_spoiler_tag(), target);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_shortcutid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shortcutname().data(), static_cast<int>(this->_internal_shortcutname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PublishedFileDetails.shortcutname");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_shortcutname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_num_children(), target);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_num_reports(), target);
  }

  // repeated .PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_previews_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_previews(i), target, stream);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, this->_internal_tags(i), target, stream);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, this->_internal_children(i), target, stream);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kvtags_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, this->_internal_kvtags(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::vote_data(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_time_subscribed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PublishedFileDetails)
  return target;
}

size_t PublishedFileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublishedFileDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails.Preview previews = 51;
  total_size += 2UL * this->_internal_previews_size();
  for (const auto& msg : this->previews_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.Tag tags = 52;
  total_size += 2UL * this->_internal_tags_size();
  for (const auto& msg : this->tags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.Child children = 53;
  total_size += 2UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  total_size += 2UL * this->_internal_kvtags_size();
  for (const auto& msg : this->kvtags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string filename = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string file_url = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_url());
    }

    // optional string preview_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_url());
    }

    // optional string youtubevideoid = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_youtubevideoid());
    }

    // optional string url = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string title = 16;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 17;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string short_description = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_short_description());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string ban_reason = 29;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ban_reason());
    }

    // optional string app_name = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string image_url = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_url());
    }

    // optional string shortcutname = 48;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shortcutname());
    }

    // optional .PublishedFileDetails.VoteData vote_data = 55;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vote_data_);
    }

    // optional uint64 publishedfileid = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_publishedfileid());
    }

    // optional uint32 result = 1;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

    // optional uint32 creator_appid = 4;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creator_appid());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 creator = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional uint32 consumer_appid = 5;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_consumer_appid());
    }

    // optional uint32 consumer_shortcutid = 6;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_consumer_shortcutid());
    }

    // optional uint64 file_size = 8;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_file_size());
    }

    // optional uint64 preview_file_size = 9;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_preview_file_size());
    }

    // optional fixed64 hcontent_file = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional fixed64 hcontent_preview = 15;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 time_updated = 20;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_updated());
    }

    // optional uint32 visibility = 21;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibility());
    }

    // optional uint32 flags = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional bool workshop_file = 23;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool workshop_accepted = 24;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool show_subscribe_all = 25;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool banned = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional int32 num_comments_developer = 26;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_comments_developer());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 banner = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional int32 num_comments_public = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_num_comments_public());
    }

    // optional uint32 file_type = 34;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_file_type());
    }

    // optional uint32 subscriptions = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subscriptions());
    }

    // optional bool can_be_deleted = 31;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool incompatible = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool can_subscribe = 35;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool spoiler_tag = 46;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 favorited = 37;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorited());
    }

    // optional uint32 followers = 38;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_followers());
    }

    // optional uint32 lifetime_subscriptions = 39;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_subscriptions());
    }

    // optional uint32 lifetime_favorited = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_favorited());
    }

    // optional uint32 lifetime_followers = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lifetime_followers());
    }

    // optional uint32 views = 42;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_views());
    }

    // optional uint32 image_width = 43;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_width());
    }

    // optional uint32 image_height = 44;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_image_height());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 shortcutid = 47;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shortcutid());
    }

    // optional uint32 num_children = 49;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_children());
    }

    // optional uint32 num_reports = 50;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_reports());
    }

    // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_subscribed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishedFileDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishedFileDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublishedFileDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublishedFileDetails)
    MergeFrom(*source);
  }
}

void PublishedFileDetails::MergeFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previews_.MergeFrom(from.previews_);
  tags_.MergeFrom(from.tags_);
  children_.MergeFrom(from.children_);
  kvtags_.MergeFrom(from.kvtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_url(from._internal_file_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_preview_url(from._internal_preview_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_youtubevideoid(from._internal_youtubevideoid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_short_description(from._internal_short_description());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_ban_reason(from._internal_ban_reason());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_image_url(from._internal_image_url());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_shortcutname(from._internal_shortcutname());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_vote_data()->::PublishedFileDetails_VoteData::MergeFrom(from._internal_vote_data());
    }
    if (cached_has_bits & 0x00002000u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00004000u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00008000u) {
      creator_appid_ = from.creator_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00020000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00040000u) {
      consumer_shortcutid_ = from.consumer_shortcutid_;
    }
    if (cached_has_bits & 0x00080000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      preview_file_size_ = from.preview_file_size_;
    }
    if (cached_has_bits & 0x00200000u) {
      hcontent_file_ = from.hcontent_file_;
    }
    if (cached_has_bits & 0x00400000u) {
      hcontent_preview_ = from.hcontent_preview_;
    }
    if (cached_has_bits & 0x00800000u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x02000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x04000000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x08000000u) {
      workshop_file_ = from.workshop_file_;
    }
    if (cached_has_bits & 0x10000000u) {
      workshop_accepted_ = from.workshop_accepted_;
    }
    if (cached_has_bits & 0x20000000u) {
      show_subscribe_all_ = from.show_subscribe_all_;
    }
    if (cached_has_bits & 0x40000000u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x80000000u) {
      num_comments_developer_ = from.num_comments_developer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      banner_ = from.banner_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_comments_public_ = from.num_comments_public_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      subscriptions_ = from.subscriptions_;
    }
    if (cached_has_bits & 0x00000010u) {
      can_be_deleted_ = from.can_be_deleted_;
    }
    if (cached_has_bits & 0x00000020u) {
      incompatible_ = from.incompatible_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_subscribe_ = from.can_subscribe_;
    }
    if (cached_has_bits & 0x00000080u) {
      spoiler_tag_ = from.spoiler_tag_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      favorited_ = from.favorited_;
    }
    if (cached_has_bits & 0x00000200u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00000400u) {
      lifetime_subscriptions_ = from.lifetime_subscriptions_;
    }
    if (cached_has_bits & 0x00000800u) {
      lifetime_favorited_ = from.lifetime_favorited_;
    }
    if (cached_has_bits & 0x00001000u) {
      lifetime_followers_ = from.lifetime_followers_;
    }
    if (cached_has_bits & 0x00002000u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00004000u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00008000u) {
      image_height_ = from.image_height_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_children_ = from.num_children_;
    }
    if (cached_has_bits & 0x00040000u) {
      num_reports_ = from.num_reports_;
    }
    if (cached_has_bits & 0x00080000u) {
      time_subscribed_ = from.time_subscribed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PublishedFileDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails::CopyFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails::IsInitialized() const {
  return true;
}

void PublishedFileDetails::InternalSwap(PublishedFileDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  previews_.InternalSwap(&other->previews_);
  tags_.InternalSwap(&other->tags_);
  children_.InternalSwap(&other->children_);
  kvtags_.InternalSwap(&other->kvtags_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_url_.Swap(&other->file_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preview_url_.Swap(&other->preview_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  youtubevideoid_.Swap(&other->youtubevideoid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_description_.Swap(&other->file_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  short_description_.Swap(&other->short_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ban_reason_.Swap(&other->ban_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_url_.Swap(&other->image_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shortcutname_.Swap(&other->shortcutname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublishedFileDetails, time_subscribed_)
      + sizeof(PublishedFileDetails::time_subscribed_)
      - PROTOBUF_FIELD_OFFSET(PublishedFileDetails, vote_data_)>(
          reinterpret_cast<char*>(&vote_data_),
          reinterpret_cast<char*>(&other->vote_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishedFileDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_GetDetails_Response::_Internal {
 public:
};

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publishedfiledetails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetDetails_Response)
}
CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetDetails_Response)
}

void CPublishedFile_GetDetails_Response::SharedCtor() {
}

CPublishedFile_GetDetails_Response::~CPublishedFile_GetDetails_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetDetails_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_GetDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_GetDetails_Response::ArenaDtor(void* object) {
  CPublishedFile_GetDetails_Response* _this = reinterpret_cast< CPublishedFile_GetDetails_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PublishedFileDetails publishedfiledetails = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishedfiledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_GetDetails_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetDetails_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publishedfiledetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_publishedfiledetails(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetDetails_Response)
  return target;
}

size_t CPublishedFile_GetDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetDetails_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 1;
  total_size += 1UL * this->_internal_publishedfiledetails_size();
  for (const auto& msg : this->publishedfiledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetDetails_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_GetDetails_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_GetDetails_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_GetDetails_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Response::MergeFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Response::InternalSwap(CPublishedFile_GetDetails_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetDetails_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_GetUserFiles_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_numperpage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sortmethod(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_totalonly(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_privacy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ids_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_{{{"lastupdated", 11}}, {nullptr}};
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requiredtags_(arena),
  excludedtags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Request)
}
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sortmethod_.UnsafeSetDefault(nullptr);
  if (from._internal_has_sortmethod()) {
    sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_sortmethod(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&numperpage_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(numperpage_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Request)
}

void CPublishedFile_GetUserFiles_Request::SharedCtor() {
sortmethod_.UnsafeSetDefault(nullptr);
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&privacy_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(privacy_));
page_ = 1u;
numperpage_ = 1u;
}

CPublishedFile_GetUserFiles_Request::~CPublishedFile_GetUserFiles_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_GetUserFiles_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sortmethod_.DestroyNoArena(nullptr);
}

void CPublishedFile_GetUserFiles_Request::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Request* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Request* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredtags_.Clear();
  excludedtags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sortmethod_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArena());
     }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privacy_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(privacy_));
    page_ = 1u;
    numperpage_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App Id to retrieve published files from."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page = 3 [default = 1, (.description) = "(Optional) Starting page for results."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 numperpage = 4 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_numperpage(&has_bits);
          numperpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sortmethod = 6 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sortmethod();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.sortmethod");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool totalonly = 7 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_totalonly(&has_bits);
          totalonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_privacy(&has_bits);
          privacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ids_only = 10 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ids_only(&has_bits);
          ids_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string requiredtags = 11 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requiredtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.requiredtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string excludedtags = 12 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excludedtags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Request.excludedtags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_GetUserFiles_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App Id to retrieve published files from."];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 page = 3 [default = 1, (.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // optional uint32 numperpage = 4 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_numperpage(), target);
  }

  // optional string sortmethod = 6 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sortmethod().data(), static_cast<int>(this->_internal_sortmethod().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.sortmethod");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sortmethod(), target);
  }

  // optional bool totalonly = 7 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_totalonly(), target);
  }

  // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_privacy(), target);
  }

  // optional bool ids_only = 10 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_ids_only(), target);
  }

  // repeated string requiredtags = 11 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->_internal_requiredtags_size(); i < n; i++) {
    const auto& s = this->_internal_requiredtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.requiredtags");
    target = stream->WriteString(11, s, target);
  }

  // repeated string excludedtags = 12 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->_internal_excludedtags_size(); i < n; i++) {
    const auto& s = this->_internal_excludedtags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Request.excludedtags");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Request)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requiredtags = 11 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(requiredtags_.size());
  for (int i = 0, n = requiredtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      requiredtags_.Get(i));
  }

  // repeated string excludedtags = 12 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excludedtags_.size());
  for (int i = 0, n = excludedtags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excludedtags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string sortmethod = 6 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sortmethod());
    }

    // optional uint32 appid = 1 [(.description) = "App Id to retrieve published files from."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional bool totalonly = 7 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool ids_only = 10 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_privacy());
    }

    // optional uint32 page = 3 [default = 1, (.description) = "(Optional) Starting page for results."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional uint32 numperpage = 4 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_numperpage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_GetUserFiles_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_GetUserFiles_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sortmethod(from._internal_sortmethod());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00000008u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00000010u) {
      privacy_ = from.privacy_;
    }
    if (cached_has_bits & 0x00000020u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000040u) {
      numperpage_ = from.numperpage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request::InternalSwap(CPublishedFile_GetUserFiles_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requiredtags_.InternalSwap(&other->requiredtags_);
  excludedtags_.InternalSwap(&other->excludedtags_);
  sortmethod_.Swap(&other->sortmethod_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, privacy_)
      + sizeof(CPublishedFile_GetUserFiles_Request::privacy_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
  swap(page_, other->page_);
  swap(numperpage_, other->numperpage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_GetUserFiles_Response_App::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Response_App>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shortcutid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_private_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Response.App)
}
CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response.App)
}

void CPublishedFile_GetUserFiles_Response_App::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_)) + sizeof(private__));
}

CPublishedFile_GetUserFiles_Response_App::~CPublishedFile_GetUserFiles_Response_App() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response.App)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_GetUserFiles_Response_App::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Response_App::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Response_App* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Response_App* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Response_App::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Response_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private__) -
        reinterpret_cast<char*>(&appid_)) + sizeof(private__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Response_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_GetUserFiles_Response.App.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shortcutid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_shortcutid(&has_bits);
          shortcutid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool private = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_private_(&has_bits);
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_GetUserFiles_Response_App::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_GetUserFiles_Response.App.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_shortcutid(), target);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_private_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response.App)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Response.App)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 shortcutid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shortcutid());
    }

    // optional bool private = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response_App* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Response_App>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_GetUserFiles_Response.App)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_GetUserFiles_Response.App)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00000008u) {
      private__ = from.private__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response_App::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response_App::InternalSwap(CPublishedFile_GetUserFiles_Response_App* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, private__)
      + sizeof(CPublishedFile_GetUserFiles_Response_App::private__)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Response_App::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_GetUserFiles_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_GetUserFiles_Response>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  publishedfiledetails_(arena),
  apps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_GetUserFiles_Response)
}
CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      publishedfiledetails_(from.publishedfiledetails_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_GetUserFiles_Response)
}

void CPublishedFile_GetUserFiles_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
}

CPublishedFile_GetUserFiles_Response::~CPublishedFile_GetUserFiles_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_GetUserFiles_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_GetUserFiles_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_GetUserFiles_Response::ArenaDtor(void* object) {
  CPublishedFile_GetUserFiles_Response* _this = reinterpret_cast< CPublishedFile_GetUserFiles_Response* >(object);
  (void)_this;
}
void CPublishedFile_GetUserFiles_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_GetUserFiles_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_GetUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_GetUserFiles_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publishedfiledetails_.Clear();
  apps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startindex_) -
        reinterpret_cast<char*>(&total_)) + sizeof(startindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_GetUserFiles_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 startindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_startindex(&has_bits);
          startindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .PublishedFileDetails publishedfiledetails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publishedfiledetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_GetUserFiles_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_GetUserFiles_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total(), target);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_startindex(), target);
  }

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_publishedfiledetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_publishedfiledetails(i), target, stream);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_apps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_apps(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_GetUserFiles_Response)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_GetUserFiles_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PublishedFileDetails publishedfiledetails = 3;
  total_size += 1UL * this->_internal_publishedfiledetails_size();
  for (const auto& msg : this->publishedfiledetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total());
    }

    // optional uint32 startindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_startindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_GetUserFiles_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_GetUserFiles_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_GetUserFiles_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      startindex_ = from.startindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response::InternalSwap(CPublishedFile_GetUserFiles_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  apps_.InternalSwap(&other->apps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, startindex_)
      + sizeof(CPublishedFile_GetUserFiles_Response::startindex_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, total_)>(
          reinterpret_cast<char*>(&total_),
          reinterpret_cast<char*>(&other->total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_GetUserFiles_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Update_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_Update_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_publishedfileid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_file_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preview_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CPublishedFile_Update_Request::CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Update_Request)
}
CPublishedFile_Update_Request::CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_file_description()) {
    file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_description(), 
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  preview_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preview_filename()) {
    preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_preview_filename(), 
      GetArena());
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Request)
}

void CPublishedFile_Update_Request::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
preview_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&publishedfileid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
}

CPublishedFile_Update_Request::~CPublishedFile_Update_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Update_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Update_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preview_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Update_Request::ArenaDtor(void* object) {
  CPublishedFile_Update_Request* _this = reinterpret_cast< CPublishedFile_Update_Request* >(object);
  (void)_this;
}
void CPublishedFile_Update_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Update_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Update_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Update_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      file_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      filename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      preview_filename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&publishedfileid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visibility_) -
        reinterpret_cast<char*>(&publishedfileid_)) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Update_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like update."];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_publishedfileid(&has_bits);
          publishedfileid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.file_description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_visibility(&has_bits);
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_preview_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_Update_Request.preview_filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Update_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Update_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like update."];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_publishedfileid(), target);
  }

  // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_file_description().data(), static_cast<int>(this->_internal_file_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.file_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_description(), target);
  }

  // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_visibility(), target);
  }

  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.tags");
    target = stream->WriteString(6, s, target);
  }

  // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.filename");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filename(), target);
  }

  // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preview_filename().data(), static_cast<int>(this->_internal_preview_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_Update_Request.preview_filename");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_preview_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Update_Request)
  return target;
}

size_t CPublishedFile_Update_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Update_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_description());
    }

    // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preview_filename());
    }

    // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like update."];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visibility());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Update_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Update_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Update_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Update_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Request::MergeFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_file_description(from._internal_file_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_filename(from._internal_filename());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_preview_filename(from._internal_preview_filename());
    }
    if (cached_has_bits & 0x00000010u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Update_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Request::CopyFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Request::InternalSwap(CPublishedFile_Update_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_description_.Swap(&other->file_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preview_filename_.Swap(&other->preview_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_Update_Request, visibility_)
      + sizeof(CPublishedFile_Update_Request::visibility_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_Update_Request, publishedfileid_)>(
          reinterpret_cast<char*>(&publishedfileid_),
          reinterpret_cast<char*>(&other->publishedfileid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Update_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_Update_Response::_Internal {
 public:
};

CPublishedFile_Update_Response::CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_Update_Response)
}
CPublishedFile_Update_Response::CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_Update_Response)
}

void CPublishedFile_Update_Response::SharedCtor() {
}

CPublishedFile_Update_Response::~CPublishedFile_Update_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_Update_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_Update_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_Update_Response::ArenaDtor(void* object) {
  CPublishedFile_Update_Response* _this = reinterpret_cast< CPublishedFile_Update_Response* >(object);
  (void)_this;
}
void CPublishedFile_Update_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_Update_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_Update_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_Update_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_Update_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_Update_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_Update_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_Update_Response)
  return target;
}

size_t CPublishedFile_Update_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_Update_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_Update_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_Update_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_Update_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_Update_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Response::MergeFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Update_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Response::CopyFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Response::InternalSwap(CPublishedFile_Update_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_Update_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_RefreshVotingQueue_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPublishedFile_RefreshVotingQueue_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matching_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_all_tags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desired_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  excluded_tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RefreshVotingQueue_Request)
}
CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_),
      excluded_tags_(from.excluded_tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Request)
}

void CPublishedFile_RefreshVotingQueue_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&desired_queue_size_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(desired_queue_size_));
match_all_tags_ = true;
}

CPublishedFile_RefreshVotingQueue_Request::~CPublishedFile_RefreshVotingQueue_Request() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RefreshVotingQueue_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_RefreshVotingQueue_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_RefreshVotingQueue_Request::ArenaDtor(void* object) {
  CPublishedFile_RefreshVotingQueue_Request* _this = reinterpret_cast< CPublishedFile_RefreshVotingQueue_Request* >(object);
  (void)_this;
}
void CPublishedFile_RefreshVotingQueue_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_RefreshVotingQueue_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_RefreshVotingQueue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_RefreshVotingQueue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  excluded_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desired_queue_size_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(desired_queue_size_));
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_RefreshVotingQueue_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matching_file_type(&has_bits);
          matching_file_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_RefreshVotingQueue_Request.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_match_all_tags(&has_bits);
          match_all_tags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excluded_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_desired_queue_size(&has_bits);
          desired_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_RefreshVotingQueue_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RefreshVotingQueue_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matching_file_type(), target);
  }

  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_RefreshVotingQueue_Request.tags");
    target = stream->WriteString(3, s, target);
  }

  // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_match_all_tags(), target);
  }

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->_internal_excluded_tags_size(); i < n; i++) {
    const auto& s = this->_internal_excluded_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    target = stream->WriteString(5, s, target);
  }

  // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_desired_queue_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RefreshVotingQueue_Request)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_RefreshVotingQueue_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(excluded_tags_.size());
  for (int i = 0, n = excluded_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      excluded_tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matching_file_type());
    }

    // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_desired_queue_size());
    }

    // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_RefreshVotingQueue_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_RefreshVotingQueue_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_RefreshVotingQueue_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matching_file_type_ = from.matching_file_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      desired_queue_size_ = from.desired_queue_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Request::InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  excluded_tags_.InternalSwap(&other->excluded_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_)
      + sizeof(CPublishedFile_RefreshVotingQueue_Request::desired_queue_size_)
      - PROTOBUF_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
  swap(match_all_tags_, other->match_all_tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RefreshVotingQueue_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPublishedFile_RefreshVotingQueue_Response::_Internal {
 public:
};

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPublishedFile_RefreshVotingQueue_Response)
}
CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPublishedFile_RefreshVotingQueue_Response)
}

void CPublishedFile_RefreshVotingQueue_Response::SharedCtor() {
}

CPublishedFile_RefreshVotingQueue_Response::~CPublishedFile_RefreshVotingQueue_Response() {
  // @@protoc_insertion_point(destructor:CPublishedFile_RefreshVotingQueue_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPublishedFile_RefreshVotingQueue_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPublishedFile_RefreshVotingQueue_Response::ArenaDtor(void* object) {
  CPublishedFile_RefreshVotingQueue_Response* _this = reinterpret_cast< CPublishedFile_RefreshVotingQueue_Response* >(object);
  (void)_this;
}
void CPublishedFile_RefreshVotingQueue_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPublishedFile_RefreshVotingQueue_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPublishedFile_RefreshVotingQueue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPublishedFile_RefreshVotingQueue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPublishedFile_RefreshVotingQueue_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPublishedFile_RefreshVotingQueue_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPublishedFile_RefreshVotingQueue_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPublishedFile_RefreshVotingQueue_Response)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPublishedFile_RefreshVotingQueue_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPublishedFile_RefreshVotingQueue_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPublishedFile_RefreshVotingQueue_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPublishedFile_RefreshVotingQueue_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Response::InternalSwap(CPublishedFile_RefreshVotingQueue_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPublishedFile_RefreshVotingQueue_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPublishedFile_Subscribe_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Subscribe_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Subscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Subscribe_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Subscribe_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Subscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Unsubscribe_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Unsubscribe_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Unsubscribe_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Unsubscribe_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Unsubscribe_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Unsubscribe_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Publish_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Publish_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Publish_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Publish_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Publish_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Publish_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetDetails_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetDetails_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetDetails_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Tag* Arena::CreateMaybeMessage< ::PublishedFileDetails_Tag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Tag >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Preview* Arena::CreateMaybeMessage< ::PublishedFileDetails_Preview >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Preview >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_Child* Arena::CreateMaybeMessage< ::PublishedFileDetails_Child >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_Child >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_KVTag* Arena::CreateMaybeMessage< ::PublishedFileDetails_KVTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_KVTag >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails_VoteData* Arena::CreateMaybeMessage< ::PublishedFileDetails_VoteData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails_VoteData >(arena);
}
template<> PROTOBUF_NOINLINE ::PublishedFileDetails* Arena::CreateMaybeMessage< ::PublishedFileDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PublishedFileDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetDetails_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Request* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Response_App* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Response_App >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Response_App >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_GetUserFiles_Response* Arena::CreateMaybeMessage< ::CPublishedFile_GetUserFiles_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_GetUserFiles_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Update_Request* Arena::CreateMaybeMessage< ::CPublishedFile_Update_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Update_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_Update_Response* Arena::CreateMaybeMessage< ::CPublishedFile_Update_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_Update_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RefreshVotingQueue_Request* Arena::CreateMaybeMessage< ::CPublishedFile_RefreshVotingQueue_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RefreshVotingQueue_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPublishedFile_RefreshVotingQueue_Response* Arena::CreateMaybeMessage< ::CPublishedFile_RefreshVotingQueue_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPublishedFile_RefreshVotingQueue_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
