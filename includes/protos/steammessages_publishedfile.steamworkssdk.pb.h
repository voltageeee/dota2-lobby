// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamworkssdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamworkssdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamworkssdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fpublishedfile_2esteamworkssdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(int index);
class CPublishedFile_GetDetails_Request;
struct CPublishedFile_GetDetails_RequestDefaultTypeInternal;
extern CPublishedFile_GetDetails_RequestDefaultTypeInternal _CPublishedFile_GetDetails_Request_default_instance_;
class CPublishedFile_GetDetails_Response;
struct CPublishedFile_GetDetails_ResponseDefaultTypeInternal;
extern CPublishedFile_GetDetails_ResponseDefaultTypeInternal _CPublishedFile_GetDetails_Response_default_instance_;
class CPublishedFile_GetUserFiles_Request;
struct CPublishedFile_GetUserFiles_RequestDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_RequestDefaultTypeInternal _CPublishedFile_GetUserFiles_Request_default_instance_;
class CPublishedFile_GetUserFiles_Response;
struct CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_default_instance_;
class CPublishedFile_GetUserFiles_Response_App;
struct CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal;
extern CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal _CPublishedFile_GetUserFiles_Response_App_default_instance_;
class CPublishedFile_Publish_Request;
struct CPublishedFile_Publish_RequestDefaultTypeInternal;
extern CPublishedFile_Publish_RequestDefaultTypeInternal _CPublishedFile_Publish_Request_default_instance_;
class CPublishedFile_Publish_Response;
struct CPublishedFile_Publish_ResponseDefaultTypeInternal;
extern CPublishedFile_Publish_ResponseDefaultTypeInternal _CPublishedFile_Publish_Response_default_instance_;
class CPublishedFile_RefreshVotingQueue_Request;
struct CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal;
extern CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
class CPublishedFile_RefreshVotingQueue_Response;
struct CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal;
extern CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
class CPublishedFile_Subscribe_Request;
struct CPublishedFile_Subscribe_RequestDefaultTypeInternal;
extern CPublishedFile_Subscribe_RequestDefaultTypeInternal _CPublishedFile_Subscribe_Request_default_instance_;
class CPublishedFile_Subscribe_Response;
struct CPublishedFile_Subscribe_ResponseDefaultTypeInternal;
extern CPublishedFile_Subscribe_ResponseDefaultTypeInternal _CPublishedFile_Subscribe_Response_default_instance_;
class CPublishedFile_Unsubscribe_Request;
struct CPublishedFile_Unsubscribe_RequestDefaultTypeInternal;
extern CPublishedFile_Unsubscribe_RequestDefaultTypeInternal _CPublishedFile_Unsubscribe_Request_default_instance_;
class CPublishedFile_Unsubscribe_Response;
struct CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal;
extern CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal _CPublishedFile_Unsubscribe_Response_default_instance_;
class CPublishedFile_Update_Request;
struct CPublishedFile_Update_RequestDefaultTypeInternal;
extern CPublishedFile_Update_RequestDefaultTypeInternal _CPublishedFile_Update_Request_default_instance_;
class CPublishedFile_Update_Response;
struct CPublishedFile_Update_ResponseDefaultTypeInternal;
extern CPublishedFile_Update_ResponseDefaultTypeInternal _CPublishedFile_Update_Response_default_instance_;
class PublishedFileDetails;
struct PublishedFileDetailsDefaultTypeInternal;
extern PublishedFileDetailsDefaultTypeInternal _PublishedFileDetails_default_instance_;
class PublishedFileDetails_Child;
struct PublishedFileDetails_ChildDefaultTypeInternal;
extern PublishedFileDetails_ChildDefaultTypeInternal _PublishedFileDetails_Child_default_instance_;
class PublishedFileDetails_KVTag;
struct PublishedFileDetails_KVTagDefaultTypeInternal;
extern PublishedFileDetails_KVTagDefaultTypeInternal _PublishedFileDetails_KVTag_default_instance_;
class PublishedFileDetails_Preview;
struct PublishedFileDetails_PreviewDefaultTypeInternal;
extern PublishedFileDetails_PreviewDefaultTypeInternal _PublishedFileDetails_Preview_default_instance_;
class PublishedFileDetails_Tag;
struct PublishedFileDetails_TagDefaultTypeInternal;
extern PublishedFileDetails_TagDefaultTypeInternal _PublishedFileDetails_Tag_default_instance_;
class PublishedFileDetails_VoteData;
struct PublishedFileDetails_VoteDataDefaultTypeInternal;
extern PublishedFileDetails_VoteDataDefaultTypeInternal _PublishedFileDetails_VoteData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CPublishedFile_GetDetails_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetDetails_Request>(Arena*);
template<> ::CPublishedFile_GetDetails_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetDetails_Response>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Request* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Request>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Response* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Response>(Arena*);
template<> ::CPublishedFile_GetUserFiles_Response_App* Arena::CreateMaybeMessage<::CPublishedFile_GetUserFiles_Response_App>(Arena*);
template<> ::CPublishedFile_Publish_Request* Arena::CreateMaybeMessage<::CPublishedFile_Publish_Request>(Arena*);
template<> ::CPublishedFile_Publish_Response* Arena::CreateMaybeMessage<::CPublishedFile_Publish_Response>(Arena*);
template<> ::CPublishedFile_RefreshVotingQueue_Request* Arena::CreateMaybeMessage<::CPublishedFile_RefreshVotingQueue_Request>(Arena*);
template<> ::CPublishedFile_RefreshVotingQueue_Response* Arena::CreateMaybeMessage<::CPublishedFile_RefreshVotingQueue_Response>(Arena*);
template<> ::CPublishedFile_Subscribe_Request* Arena::CreateMaybeMessage<::CPublishedFile_Subscribe_Request>(Arena*);
template<> ::CPublishedFile_Subscribe_Response* Arena::CreateMaybeMessage<::CPublishedFile_Subscribe_Response>(Arena*);
template<> ::CPublishedFile_Unsubscribe_Request* Arena::CreateMaybeMessage<::CPublishedFile_Unsubscribe_Request>(Arena*);
template<> ::CPublishedFile_Unsubscribe_Response* Arena::CreateMaybeMessage<::CPublishedFile_Unsubscribe_Response>(Arena*);
template<> ::CPublishedFile_Update_Request* Arena::CreateMaybeMessage<::CPublishedFile_Update_Request>(Arena*);
template<> ::CPublishedFile_Update_Response* Arena::CreateMaybeMessage<::CPublishedFile_Update_Response>(Arena*);
template<> ::PublishedFileDetails* Arena::CreateMaybeMessage<::PublishedFileDetails>(Arena*);
template<> ::PublishedFileDetails_Child* Arena::CreateMaybeMessage<::PublishedFileDetails_Child>(Arena*);
template<> ::PublishedFileDetails_KVTag* Arena::CreateMaybeMessage<::PublishedFileDetails_KVTag>(Arena*);
template<> ::PublishedFileDetails_Preview* Arena::CreateMaybeMessage<::PublishedFileDetails_Preview>(Arena*);
template<> ::PublishedFileDetails_Tag* Arena::CreateMaybeMessage<::PublishedFileDetails_Tag>(Arena*);
template<> ::PublishedFileDetails_VoteData* Arena::CreateMaybeMessage<::PublishedFileDetails_VoteData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CPublishedFile_Subscribe_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Subscribe_Request) */ {
 public:
  inline CPublishedFile_Subscribe_Request() : CPublishedFile_Subscribe_Request(nullptr) {}
  virtual ~CPublishedFile_Subscribe_Request();
  explicit constexpr CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from);
  CPublishedFile_Subscribe_Request(CPublishedFile_Subscribe_Request&& from) noexcept
    : CPublishedFile_Subscribe_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Subscribe_Request& operator=(const CPublishedFile_Subscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Subscribe_Request& operator=(CPublishedFile_Subscribe_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Subscribe_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Subscribe_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Subscribe_Request*>(
               &_CPublishedFile_Subscribe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CPublishedFile_Subscribe_Request& a, CPublishedFile_Subscribe_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Subscribe_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Subscribe_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Subscribe_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Request>(nullptr);
  }

  CPublishedFile_Subscribe_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Subscribe_Request& from);
  void MergeFrom(const CPublishedFile_Subscribe_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Subscribe_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Subscribe_Request";
  }
  protected:
  explicit CPublishedFile_Subscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kListTypeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kNotifyClientFieldNumber = 4,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 list_type = 2;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 list_type() const;
  void set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_list_type() const;
  void _internal_set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool notify_client = 4;
  bool has_notify_client() const;
  private:
  bool _internal_has_notify_client() const;
  public:
  void clear_notify_client();
  bool notify_client() const;
  void set_notify_client(bool value);
  private:
  bool _internal_notify_client() const;
  void _internal_set_notify_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 list_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  bool notify_client_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Subscribe_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Subscribe_Response) */ {
 public:
  inline CPublishedFile_Subscribe_Response() : CPublishedFile_Subscribe_Response(nullptr) {}
  virtual ~CPublishedFile_Subscribe_Response();
  explicit constexpr CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from);
  CPublishedFile_Subscribe_Response(CPublishedFile_Subscribe_Response&& from) noexcept
    : CPublishedFile_Subscribe_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Subscribe_Response& operator=(const CPublishedFile_Subscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Subscribe_Response& operator=(CPublishedFile_Subscribe_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Subscribe_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Subscribe_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Subscribe_Response*>(
               &_CPublishedFile_Subscribe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CPublishedFile_Subscribe_Response& a, CPublishedFile_Subscribe_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Subscribe_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Subscribe_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Subscribe_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Response>(nullptr);
  }

  CPublishedFile_Subscribe_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Subscribe_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Subscribe_Response& from);
  void MergeFrom(const CPublishedFile_Subscribe_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Subscribe_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Subscribe_Response";
  }
  protected:
  explicit CPublishedFile_Subscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Subscribe_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Unsubscribe_Request) */ {
 public:
  inline CPublishedFile_Unsubscribe_Request() : CPublishedFile_Unsubscribe_Request(nullptr) {}
  virtual ~CPublishedFile_Unsubscribe_Request();
  explicit constexpr CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from);
  CPublishedFile_Unsubscribe_Request(CPublishedFile_Unsubscribe_Request&& from) noexcept
    : CPublishedFile_Unsubscribe_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Unsubscribe_Request& operator=(const CPublishedFile_Unsubscribe_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Unsubscribe_Request& operator=(CPublishedFile_Unsubscribe_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Unsubscribe_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Unsubscribe_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Unsubscribe_Request*>(
               &_CPublishedFile_Unsubscribe_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CPublishedFile_Unsubscribe_Request& a, CPublishedFile_Unsubscribe_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Unsubscribe_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Unsubscribe_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Unsubscribe_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Request>(nullptr);
  }

  CPublishedFile_Unsubscribe_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Unsubscribe_Request& from);
  void MergeFrom(const CPublishedFile_Unsubscribe_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Unsubscribe_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Unsubscribe_Request";
  }
  protected:
  explicit CPublishedFile_Unsubscribe_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kListTypeFieldNumber = 2,
    kAppidFieldNumber = 3,
    kNotifyClientFieldNumber = 4,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 list_type = 2;
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 list_type() const;
  void set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_list_type() const;
  void _internal_set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 appid = 3;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::int32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool notify_client = 4;
  bool has_notify_client() const;
  private:
  bool _internal_has_notify_client() const;
  public:
  void clear_notify_client();
  bool notify_client() const;
  void set_notify_client(bool value);
  private:
  bool _internal_notify_client() const;
  void _internal_set_notify_client(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 list_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 appid_;
  bool notify_client_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Unsubscribe_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Unsubscribe_Response) */ {
 public:
  inline CPublishedFile_Unsubscribe_Response() : CPublishedFile_Unsubscribe_Response(nullptr) {}
  virtual ~CPublishedFile_Unsubscribe_Response();
  explicit constexpr CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from);
  CPublishedFile_Unsubscribe_Response(CPublishedFile_Unsubscribe_Response&& from) noexcept
    : CPublishedFile_Unsubscribe_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Unsubscribe_Response& operator=(const CPublishedFile_Unsubscribe_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Unsubscribe_Response& operator=(CPublishedFile_Unsubscribe_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Unsubscribe_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Unsubscribe_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Unsubscribe_Response*>(
               &_CPublishedFile_Unsubscribe_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CPublishedFile_Unsubscribe_Response& a, CPublishedFile_Unsubscribe_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Unsubscribe_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Unsubscribe_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Unsubscribe_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Response>(nullptr);
  }

  CPublishedFile_Unsubscribe_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Unsubscribe_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Unsubscribe_Response& from);
  void MergeFrom(const CPublishedFile_Unsubscribe_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Unsubscribe_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Unsubscribe_Response";
  }
  protected:
  explicit CPublishedFile_Unsubscribe_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Unsubscribe_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Publish_Request) */ {
 public:
  inline CPublishedFile_Publish_Request() : CPublishedFile_Publish_Request(nullptr) {}
  virtual ~CPublishedFile_Publish_Request();
  explicit constexpr CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from);
  CPublishedFile_Publish_Request(CPublishedFile_Publish_Request&& from) noexcept
    : CPublishedFile_Publish_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Publish_Request& operator=(const CPublishedFile_Publish_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Publish_Request& operator=(CPublishedFile_Publish_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Publish_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Publish_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Publish_Request*>(
               &_CPublishedFile_Publish_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPublishedFile_Publish_Request& a, CPublishedFile_Publish_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Publish_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Publish_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Publish_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Request>(nullptr);
  }

  CPublishedFile_Publish_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Publish_Request& from);
  void MergeFrom(const CPublishedFile_Publish_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Publish_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Publish_Request";
  }
  protected:
  explicit CPublishedFile_Publish_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 13,
    kCloudfilenameFieldNumber = 3,
    kPreviewCloudfilenameFieldNumber = 4,
    kTitleFieldNumber = 5,
    kFileDescriptionFieldNumber = 6,
    kConsumerShortcutNameFieldNumber = 8,
    kYoutubeUsernameFieldNumber = 9,
    kYoutubeVideoidFieldNumber = 10,
    kRedirectUriFieldNumber = 12,
    kCollectionTypeFieldNumber = 14,
    kGameTypeFieldNumber = 15,
    kUrlFieldNumber = 16,
    kAppidFieldNumber = 1,
    kConsumerAppidFieldNumber = 2,
    kFileTypeFieldNumber = 7,
    kVisibilityFieldNumber = 11,
  };
  // repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
  bool has_cloudfilename() const;
  private:
  bool _internal_has_cloudfilename() const;
  public:
  void clear_cloudfilename();
  const std::string& cloudfilename() const;
  void set_cloudfilename(const std::string& value);
  void set_cloudfilename(std::string&& value);
  void set_cloudfilename(const char* value);
  void set_cloudfilename(const char* value, size_t size);
  std::string* mutable_cloudfilename();
  std::string* release_cloudfilename();
  void set_allocated_cloudfilename(std::string* cloudfilename);
  private:
  const std::string& _internal_cloudfilename() const;
  void _internal_set_cloudfilename(const std::string& value);
  std::string* _internal_mutable_cloudfilename();
  public:

  // optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
  bool has_preview_cloudfilename() const;
  private:
  bool _internal_has_preview_cloudfilename() const;
  public:
  void clear_preview_cloudfilename();
  const std::string& preview_cloudfilename() const;
  void set_preview_cloudfilename(const std::string& value);
  void set_preview_cloudfilename(std::string&& value);
  void set_preview_cloudfilename(const char* value);
  void set_preview_cloudfilename(const char* value, size_t size);
  std::string* mutable_preview_cloudfilename();
  std::string* release_preview_cloudfilename();
  void set_allocated_preview_cloudfilename(std::string* preview_cloudfilename);
  private:
  const std::string& _internal_preview_cloudfilename() const;
  void _internal_set_preview_cloudfilename(const std::string& value);
  std::string* _internal_mutable_preview_cloudfilename();
  public:

  // optional string title = 5 [(.description) = "Text title for the published file."];
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 6 [(.description) = "Text description for the published file."];
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  void set_file_description(const std::string& value);
  void set_file_description(std::string&& value);
  void set_file_description(const char* value);
  void set_file_description(const char* value, size_t size);
  std::string* mutable_file_description();
  std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
  bool has_consumer_shortcut_name() const;
  private:
  bool _internal_has_consumer_shortcut_name() const;
  public:
  void clear_consumer_shortcut_name();
  const std::string& consumer_shortcut_name() const;
  void set_consumer_shortcut_name(const std::string& value);
  void set_consumer_shortcut_name(std::string&& value);
  void set_consumer_shortcut_name(const char* value);
  void set_consumer_shortcut_name(const char* value, size_t size);
  std::string* mutable_consumer_shortcut_name();
  std::string* release_consumer_shortcut_name();
  void set_allocated_consumer_shortcut_name(std::string* consumer_shortcut_name);
  private:
  const std::string& _internal_consumer_shortcut_name() const;
  void _internal_set_consumer_shortcut_name(const std::string& value);
  std::string* _internal_mutable_consumer_shortcut_name();
  public:

  // optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
  bool has_youtube_username() const;
  private:
  bool _internal_has_youtube_username() const;
  public:
  void clear_youtube_username();
  const std::string& youtube_username() const;
  void set_youtube_username(const std::string& value);
  void set_youtube_username(std::string&& value);
  void set_youtube_username(const char* value);
  void set_youtube_username(const char* value, size_t size);
  std::string* mutable_youtube_username();
  std::string* release_youtube_username();
  void set_allocated_youtube_username(std::string* youtube_username);
  private:
  const std::string& _internal_youtube_username() const;
  void _internal_set_youtube_username(const std::string& value);
  std::string* _internal_mutable_youtube_username();
  public:

  // optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
  bool has_youtube_videoid() const;
  private:
  bool _internal_has_youtube_videoid() const;
  public:
  void clear_youtube_videoid();
  const std::string& youtube_videoid() const;
  void set_youtube_videoid(const std::string& value);
  void set_youtube_videoid(std::string&& value);
  void set_youtube_videoid(const char* value);
  void set_youtube_videoid(const char* value, size_t size);
  std::string* mutable_youtube_videoid();
  std::string* release_youtube_videoid();
  void set_allocated_youtube_videoid(std::string* youtube_videoid);
  private:
  const std::string& _internal_youtube_videoid() const;
  void _internal_set_youtube_videoid(const std::string& value);
  std::string* _internal_mutable_youtube_videoid();
  public:

  // optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  bool has_redirect_uri() const;
  private:
  bool _internal_has_redirect_uri() const;
  public:
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  void set_redirect_uri(const std::string& value);
  void set_redirect_uri(std::string&& value);
  void set_redirect_uri(const char* value);
  void set_redirect_uri(const char* value, size_t size);
  std::string* mutable_redirect_uri();
  std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
  bool has_collection_type() const;
  private:
  bool _internal_has_collection_type() const;
  public:
  void clear_collection_type();
  const std::string& collection_type() const;
  void set_collection_type(const std::string& value);
  void set_collection_type(std::string&& value);
  void set_collection_type(const char* value);
  void set_collection_type(const char* value, size_t size);
  std::string* mutable_collection_type();
  std::string* release_collection_type();
  void set_allocated_collection_type(std::string* collection_type);
  private:
  const std::string& _internal_collection_type() const;
  void _internal_set_collection_type(const std::string& value);
  std::string* _internal_mutable_collection_type();
  public:

  // optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
  bool has_game_type() const;
  private:
  bool _internal_has_game_type() const;
  public:
  void clear_game_type();
  const std::string& game_type() const;
  void set_game_type(const std::string& value);
  void set_game_type(std::string&& value);
  void set_game_type(const char* value);
  void set_game_type(const char* value, size_t size);
  std::string* mutable_game_type();
  std::string* release_game_type();
  void set_allocated_game_type(std::string* game_type);
  private:
  const std::string& _internal_game_type() const;
  void _internal_set_game_type(const std::string& value);
  std::string* _internal_mutable_game_type();
  public:

  // optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
  bool has_consumer_appid() const;
  private:
  bool _internal_has_consumer_appid() const;
  public:
  void clear_consumer_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_appid() const;
  void set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consumer_appid() const;
  void _internal_set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type() const;
  void set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_type() const;
  void _internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility() const;
  void set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visibility() const;
  void _internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloudfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_cloudfilename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consumer_shortcut_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtube_username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtube_videoid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Publish_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Publish_Response) */ {
 public:
  inline CPublishedFile_Publish_Response() : CPublishedFile_Publish_Response(nullptr) {}
  virtual ~CPublishedFile_Publish_Response();
  explicit constexpr CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from);
  CPublishedFile_Publish_Response(CPublishedFile_Publish_Response&& from) noexcept
    : CPublishedFile_Publish_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Publish_Response& operator=(const CPublishedFile_Publish_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Publish_Response& operator=(CPublishedFile_Publish_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Publish_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Publish_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Publish_Response*>(
               &_CPublishedFile_Publish_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CPublishedFile_Publish_Response& a, CPublishedFile_Publish_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Publish_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Publish_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Publish_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Response>(nullptr);
  }

  CPublishedFile_Publish_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Publish_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Publish_Response& from);
  void MergeFrom(const CPublishedFile_Publish_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Publish_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Publish_Response";
  }
  protected:
  explicit CPublishedFile_Publish_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectUriFieldNumber = 2,
    kPublishedfileidFieldNumber = 1,
  };
  // optional string redirect_uri = 2;
  bool has_redirect_uri() const;
  private:
  bool _internal_has_redirect_uri() const;
  public:
  void clear_redirect_uri();
  const std::string& redirect_uri() const;
  void set_redirect_uri(const std::string& value);
  void set_redirect_uri(std::string&& value);
  void set_redirect_uri(const char* value);
  void set_redirect_uri(const char* value, size_t size);
  std::string* mutable_redirect_uri();
  std::string* release_redirect_uri();
  void set_allocated_redirect_uri(std::string* redirect_uri);
  private:
  const std::string& _internal_redirect_uri() const;
  void _internal_set_redirect_uri(const std::string& value);
  std::string* _internal_mutable_redirect_uri();
  public:

  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Publish_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_uri_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetDetails_Request) */ {
 public:
  inline CPublishedFile_GetDetails_Request() : CPublishedFile_GetDetails_Request(nullptr) {}
  virtual ~CPublishedFile_GetDetails_Request();
  explicit constexpr CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from);
  CPublishedFile_GetDetails_Request(CPublishedFile_GetDetails_Request&& from) noexcept
    : CPublishedFile_GetDetails_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetDetails_Request& operator=(const CPublishedFile_GetDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetDetails_Request& operator=(CPublishedFile_GetDetails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_GetDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetDetails_Request*>(
               &_CPublishedFile_GetDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CPublishedFile_GetDetails_Request& a, CPublishedFile_GetDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetDetails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_GetDetails_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Request>(nullptr);
  }

  CPublishedFile_GetDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_GetDetails_Request& from);
  void MergeFrom(const CPublishedFile_GetDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetDetails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetDetails_Request";
  }
  protected:
  explicit CPublishedFile_GetDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidsFieldNumber = 1,
    kIncludetagsFieldNumber = 2,
    kIncludeadditionalpreviewsFieldNumber = 3,
    kIncludechildrenFieldNumber = 4,
    kIncludekvtagsFieldNumber = 5,
    kIncludevotesFieldNumber = 6,
    kShortDescriptionFieldNumber = 8,
  };
  // repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
  int publishedfileids_size() const;
  private:
  int _internal_publishedfileids_size() const;
  public:
  void clear_publishedfileids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_publishedfileids() const;
  void _internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_publishedfileids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileids(int index) const;
  void set_publishedfileids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_publishedfileids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      publishedfileids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_publishedfileids();

  // optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
  bool has_includetags() const;
  private:
  bool _internal_has_includetags() const;
  public:
  void clear_includetags();
  bool includetags() const;
  void set_includetags(bool value);
  private:
  bool _internal_includetags() const;
  void _internal_set_includetags(bool value);
  public:

  // optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
  bool has_includeadditionalpreviews() const;
  private:
  bool _internal_has_includeadditionalpreviews() const;
  public:
  void clear_includeadditionalpreviews();
  bool includeadditionalpreviews() const;
  void set_includeadditionalpreviews(bool value);
  private:
  bool _internal_includeadditionalpreviews() const;
  void _internal_set_includeadditionalpreviews(bool value);
  public:

  // optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
  bool has_includechildren() const;
  private:
  bool _internal_has_includechildren() const;
  public:
  void clear_includechildren();
  bool includechildren() const;
  void set_includechildren(bool value);
  private:
  bool _internal_includechildren() const;
  void _internal_set_includechildren(bool value);
  public:

  // optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
  bool has_includekvtags() const;
  private:
  bool _internal_has_includekvtags() const;
  public:
  void clear_includekvtags();
  bool includekvtags() const;
  void set_includekvtags(bool value);
  private:
  bool _internal_includekvtags() const;
  void _internal_set_includekvtags(bool value);
  public:

  // optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
  bool has_includevotes() const;
  private:
  bool _internal_has_includevotes() const;
  public:
  void clear_includevotes();
  bool includevotes() const;
  void set_includevotes(bool value);
  private:
  bool _internal_includevotes() const;
  void _internal_set_includevotes(bool value);
  public:

  // optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
  bool has_short_description() const;
  private:
  bool _internal_has_short_description() const;
  public:
  void clear_short_description();
  bool short_description() const;
  void set_short_description(bool value);
  private:
  bool _internal_short_description() const;
  void _internal_set_short_description(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > publishedfileids_;
  bool includetags_;
  bool includeadditionalpreviews_;
  bool includechildren_;
  bool includekvtags_;
  bool includevotes_;
  bool short_description_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Tag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Tag) */ {
 public:
  inline PublishedFileDetails_Tag() : PublishedFileDetails_Tag(nullptr) {}
  virtual ~PublishedFileDetails_Tag();
  explicit constexpr PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from);
  PublishedFileDetails_Tag(PublishedFileDetails_Tag&& from) noexcept
    : PublishedFileDetails_Tag() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Tag& operator=(const PublishedFileDetails_Tag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Tag& operator=(PublishedFileDetails_Tag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails_Tag& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Tag* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Tag*>(
               &_PublishedFileDetails_Tag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PublishedFileDetails_Tag& a, PublishedFileDetails_Tag& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Tag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Tag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails_Tag* New() const final {
    return CreateMaybeMessage<PublishedFileDetails_Tag>(nullptr);
  }

  PublishedFileDetails_Tag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails_Tag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails_Tag& from);
  void MergeFrom(const PublishedFileDetails_Tag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Tag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Tag";
  }
  protected:
  explicit PublishedFileDetails_Tag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kAdminonlyFieldNumber = 2,
  };
  // optional string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional bool adminonly = 2;
  bool has_adminonly() const;
  private:
  bool _internal_has_adminonly() const;
  public:
  void clear_adminonly();
  bool adminonly() const;
  void set_adminonly(bool value);
  private:
  bool _internal_adminonly() const;
  void _internal_set_adminonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Tag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  bool adminonly_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Preview PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Preview) */ {
 public:
  inline PublishedFileDetails_Preview() : PublishedFileDetails_Preview(nullptr) {}
  virtual ~PublishedFileDetails_Preview();
  explicit constexpr PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from);
  PublishedFileDetails_Preview(PublishedFileDetails_Preview&& from) noexcept
    : PublishedFileDetails_Preview() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Preview& operator=(const PublishedFileDetails_Preview& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Preview& operator=(PublishedFileDetails_Preview&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails_Preview& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Preview* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Preview*>(
               &_PublishedFileDetails_Preview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PublishedFileDetails_Preview& a, PublishedFileDetails_Preview& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Preview* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Preview* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails_Preview* New() const final {
    return CreateMaybeMessage<PublishedFileDetails_Preview>(nullptr);
  }

  PublishedFileDetails_Preview* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails_Preview>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails_Preview& from);
  void MergeFrom(const PublishedFileDetails_Preview& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Preview* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Preview";
  }
  protected:
  explicit PublishedFileDetails_Preview(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 3,
    kFilenameFieldNumber = 5,
    kYoutubevideoidFieldNumber = 6,
    kPreviewidFieldNumber = 1,
    kSortorderFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string filename = 5;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string youtubevideoid = 6;
  bool has_youtubevideoid() const;
  private:
  bool _internal_has_youtubevideoid() const;
  public:
  void clear_youtubevideoid();
  const std::string& youtubevideoid() const;
  void set_youtubevideoid(const std::string& value);
  void set_youtubevideoid(std::string&& value);
  void set_youtubevideoid(const char* value);
  void set_youtubevideoid(const char* value, size_t size);
  std::string* mutable_youtubevideoid();
  std::string* release_youtubevideoid();
  void set_allocated_youtubevideoid(std::string* youtubevideoid);
  private:
  const std::string& _internal_youtubevideoid() const;
  void _internal_set_youtubevideoid(const std::string& value);
  std::string* _internal_mutable_youtubevideoid();
  public:

  // optional uint64 previewid = 1;
  bool has_previewid() const;
  private:
  bool _internal_has_previewid() const;
  public:
  void clear_previewid();
  ::PROTOBUF_NAMESPACE_ID::uint64 previewid() const;
  void set_previewid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previewid() const;
  void _internal_set_previewid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 sortorder = 2;
  bool has_sortorder() const;
  private:
  bool _internal_has_sortorder() const;
  public:
  void clear_sortorder();
  ::PROTOBUF_NAMESPACE_ID::uint32 sortorder() const;
  void set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sortorder() const;
  void _internal_set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 4;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Preview)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtubevideoid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previewid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sortorder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_Child PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.Child) */ {
 public:
  inline PublishedFileDetails_Child() : PublishedFileDetails_Child(nullptr) {}
  virtual ~PublishedFileDetails_Child();
  explicit constexpr PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_Child(const PublishedFileDetails_Child& from);
  PublishedFileDetails_Child(PublishedFileDetails_Child&& from) noexcept
    : PublishedFileDetails_Child() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_Child& operator=(const PublishedFileDetails_Child& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_Child& operator=(PublishedFileDetails_Child&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails_Child& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_Child* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_Child*>(
               &_PublishedFileDetails_Child_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PublishedFileDetails_Child& a, PublishedFileDetails_Child& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_Child* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_Child* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails_Child* New() const final {
    return CreateMaybeMessage<PublishedFileDetails_Child>(nullptr);
  }

  PublishedFileDetails_Child* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails_Child>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails_Child& from);
  void MergeFrom(const PublishedFileDetails_Child& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_Child* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.Child";
  }
  protected:
  explicit PublishedFileDetails_Child(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfileidFieldNumber = 1,
    kSortorderFieldNumber = 2,
    kFileTypeFieldNumber = 3,
  };
  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 sortorder = 2;
  bool has_sortorder() const;
  private:
  bool _internal_has_sortorder() const;
  public:
  void clear_sortorder();
  ::PROTOBUF_NAMESPACE_ID::uint32 sortorder() const;
  void set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sortorder() const;
  void _internal_set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_type = 3;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type() const;
  void set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_type() const;
  void _internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.Child)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sortorder_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_KVTag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.KVTag) */ {
 public:
  inline PublishedFileDetails_KVTag() : PublishedFileDetails_KVTag(nullptr) {}
  virtual ~PublishedFileDetails_KVTag();
  explicit constexpr PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from);
  PublishedFileDetails_KVTag(PublishedFileDetails_KVTag&& from) noexcept
    : PublishedFileDetails_KVTag() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_KVTag& operator=(const PublishedFileDetails_KVTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_KVTag& operator=(PublishedFileDetails_KVTag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails_KVTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_KVTag* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_KVTag*>(
               &_PublishedFileDetails_KVTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PublishedFileDetails_KVTag& a, PublishedFileDetails_KVTag& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_KVTag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_KVTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails_KVTag* New() const final {
    return CreateMaybeMessage<PublishedFileDetails_KVTag>(nullptr);
  }

  PublishedFileDetails_KVTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails_KVTag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails_KVTag& from);
  void MergeFrom(const PublishedFileDetails_KVTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_KVTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.KVTag";
  }
  protected:
  explicit PublishedFileDetails_KVTag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.KVTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails_VoteData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails.VoteData) */ {
 public:
  inline PublishedFileDetails_VoteData() : PublishedFileDetails_VoteData(nullptr) {}
  virtual ~PublishedFileDetails_VoteData();
  explicit constexpr PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from);
  PublishedFileDetails_VoteData(PublishedFileDetails_VoteData&& from) noexcept
    : PublishedFileDetails_VoteData() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails_VoteData& operator=(const PublishedFileDetails_VoteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails_VoteData& operator=(PublishedFileDetails_VoteData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails_VoteData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails_VoteData* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails_VoteData*>(
               &_PublishedFileDetails_VoteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublishedFileDetails_VoteData& a, PublishedFileDetails_VoteData& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails_VoteData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails_VoteData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails_VoteData* New() const final {
    return CreateMaybeMessage<PublishedFileDetails_VoteData>(nullptr);
  }

  PublishedFileDetails_VoteData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails_VoteData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails_VoteData& from);
  void MergeFrom(const PublishedFileDetails_VoteData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails_VoteData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails.VoteData";
  }
  protected:
  explicit PublishedFileDetails_VoteData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kVotesUpFieldNumber = 2,
    kVotesDownFieldNumber = 3,
  };
  // optional float score = 1;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional uint32 votes_up = 2;
  bool has_votes_up() const;
  private:
  bool _internal_has_votes_up() const;
  public:
  void clear_votes_up();
  ::PROTOBUF_NAMESPACE_ID::uint32 votes_up() const;
  void set_votes_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votes_up() const;
  void _internal_set_votes_up(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 votes_down = 3;
  bool has_votes_down() const;
  private:
  bool _internal_has_votes_down() const;
  public:
  void clear_votes_down();
  ::PROTOBUF_NAMESPACE_ID::uint32 votes_down() const;
  void set_votes_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votes_down() const;
  void _internal_set_votes_down(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails.VoteData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votes_up_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votes_down_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class PublishedFileDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PublishedFileDetails) */ {
 public:
  inline PublishedFileDetails() : PublishedFileDetails(nullptr) {}
  virtual ~PublishedFileDetails();
  explicit constexpr PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishedFileDetails(const PublishedFileDetails& from);
  PublishedFileDetails(PublishedFileDetails&& from) noexcept
    : PublishedFileDetails() {
    *this = ::std::move(from);
  }

  inline PublishedFileDetails& operator=(const PublishedFileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishedFileDetails& operator=(PublishedFileDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublishedFileDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishedFileDetails* internal_default_instance() {
    return reinterpret_cast<const PublishedFileDetails*>(
               &_PublishedFileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PublishedFileDetails& a, PublishedFileDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishedFileDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishedFileDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublishedFileDetails* New() const final {
    return CreateMaybeMessage<PublishedFileDetails>(nullptr);
  }

  PublishedFileDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublishedFileDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublishedFileDetails& from);
  void MergeFrom(const PublishedFileDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishedFileDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PublishedFileDetails";
  }
  protected:
  explicit PublishedFileDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef PublishedFileDetails_Tag Tag;
  typedef PublishedFileDetails_Preview Preview;
  typedef PublishedFileDetails_Child Child;
  typedef PublishedFileDetails_KVTag KVTag;
  typedef PublishedFileDetails_VoteData VoteData;

  // accessors -------------------------------------------------------

  enum : int {
    kPreviewsFieldNumber = 51,
    kTagsFieldNumber = 52,
    kChildrenFieldNumber = 53,
    kKvtagsFieldNumber = 54,
    kFilenameFieldNumber = 7,
    kFileUrlFieldNumber = 10,
    kPreviewUrlFieldNumber = 11,
    kYoutubevideoidFieldNumber = 12,
    kUrlFieldNumber = 13,
    kTitleFieldNumber = 16,
    kFileDescriptionFieldNumber = 17,
    kShortDescriptionFieldNumber = 18,
    kBanReasonFieldNumber = 29,
    kAppNameFieldNumber = 33,
    kImageUrlFieldNumber = 45,
    kShortcutnameFieldNumber = 48,
    kVoteDataFieldNumber = 55,
    kPublishedfileidFieldNumber = 2,
    kResultFieldNumber = 1,
    kCreatorAppidFieldNumber = 4,
    kCreatorFieldNumber = 3,
    kConsumerAppidFieldNumber = 5,
    kConsumerShortcutidFieldNumber = 6,
    kFileSizeFieldNumber = 8,
    kPreviewFileSizeFieldNumber = 9,
    kHcontentFileFieldNumber = 14,
    kHcontentPreviewFieldNumber = 15,
    kTimeCreatedFieldNumber = 19,
    kTimeUpdatedFieldNumber = 20,
    kVisibilityFieldNumber = 21,
    kFlagsFieldNumber = 22,
    kWorkshopFileFieldNumber = 23,
    kWorkshopAcceptedFieldNumber = 24,
    kShowSubscribeAllFieldNumber = 25,
    kBannedFieldNumber = 28,
    kNumCommentsDeveloperFieldNumber = 26,
    kBannerFieldNumber = 30,
    kNumCommentsPublicFieldNumber = 27,
    kFileTypeFieldNumber = 34,
    kSubscriptionsFieldNumber = 36,
    kCanBeDeletedFieldNumber = 31,
    kIncompatibleFieldNumber = 32,
    kCanSubscribeFieldNumber = 35,
    kSpoilerTagFieldNumber = 46,
    kFavoritedFieldNumber = 37,
    kFollowersFieldNumber = 38,
    kLifetimeSubscriptionsFieldNumber = 39,
    kLifetimeFavoritedFieldNumber = 40,
    kLifetimeFollowersFieldNumber = 41,
    kViewsFieldNumber = 42,
    kImageWidthFieldNumber = 43,
    kImageHeightFieldNumber = 44,
    kShortcutidFieldNumber = 47,
    kNumChildrenFieldNumber = 49,
    kNumReportsFieldNumber = 50,
    kTimeSubscribedFieldNumber = 56,
  };
  // repeated .PublishedFileDetails.Preview previews = 51;
  int previews_size() const;
  private:
  int _internal_previews_size() const;
  public:
  void clear_previews();
  ::PublishedFileDetails_Preview* mutable_previews(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >*
      mutable_previews();
  private:
  const ::PublishedFileDetails_Preview& _internal_previews(int index) const;
  ::PublishedFileDetails_Preview* _internal_add_previews();
  public:
  const ::PublishedFileDetails_Preview& previews(int index) const;
  ::PublishedFileDetails_Preview* add_previews();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >&
      previews() const;

  // repeated .PublishedFileDetails.Tag tags = 52;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  ::PublishedFileDetails_Tag* mutable_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >*
      mutable_tags();
  private:
  const ::PublishedFileDetails_Tag& _internal_tags(int index) const;
  ::PublishedFileDetails_Tag* _internal_add_tags();
  public:
  const ::PublishedFileDetails_Tag& tags(int index) const;
  ::PublishedFileDetails_Tag* add_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >&
      tags() const;

  // repeated .PublishedFileDetails.Child children = 53;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::PublishedFileDetails_Child* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >*
      mutable_children();
  private:
  const ::PublishedFileDetails_Child& _internal_children(int index) const;
  ::PublishedFileDetails_Child* _internal_add_children();
  public:
  const ::PublishedFileDetails_Child& children(int index) const;
  ::PublishedFileDetails_Child* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >&
      children() const;

  // repeated .PublishedFileDetails.KVTag kvtags = 54;
  int kvtags_size() const;
  private:
  int _internal_kvtags_size() const;
  public:
  void clear_kvtags();
  ::PublishedFileDetails_KVTag* mutable_kvtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
      mutable_kvtags();
  private:
  const ::PublishedFileDetails_KVTag& _internal_kvtags(int index) const;
  ::PublishedFileDetails_KVTag* _internal_add_kvtags();
  public:
  const ::PublishedFileDetails_KVTag& kvtags(int index) const;
  ::PublishedFileDetails_KVTag* add_kvtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
      kvtags() const;

  // optional string filename = 7;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string file_url = 10;
  bool has_file_url() const;
  private:
  bool _internal_has_file_url() const;
  public:
  void clear_file_url();
  const std::string& file_url() const;
  void set_file_url(const std::string& value);
  void set_file_url(std::string&& value);
  void set_file_url(const char* value);
  void set_file_url(const char* value, size_t size);
  std::string* mutable_file_url();
  std::string* release_file_url();
  void set_allocated_file_url(std::string* file_url);
  private:
  const std::string& _internal_file_url() const;
  void _internal_set_file_url(const std::string& value);
  std::string* _internal_mutable_file_url();
  public:

  // optional string preview_url = 11;
  bool has_preview_url() const;
  private:
  bool _internal_has_preview_url() const;
  public:
  void clear_preview_url();
  const std::string& preview_url() const;
  void set_preview_url(const std::string& value);
  void set_preview_url(std::string&& value);
  void set_preview_url(const char* value);
  void set_preview_url(const char* value, size_t size);
  std::string* mutable_preview_url();
  std::string* release_preview_url();
  void set_allocated_preview_url(std::string* preview_url);
  private:
  const std::string& _internal_preview_url() const;
  void _internal_set_preview_url(const std::string& value);
  std::string* _internal_mutable_preview_url();
  public:

  // optional string youtubevideoid = 12;
  bool has_youtubevideoid() const;
  private:
  bool _internal_has_youtubevideoid() const;
  public:
  void clear_youtubevideoid();
  const std::string& youtubevideoid() const;
  void set_youtubevideoid(const std::string& value);
  void set_youtubevideoid(std::string&& value);
  void set_youtubevideoid(const char* value);
  void set_youtubevideoid(const char* value, size_t size);
  std::string* mutable_youtubevideoid();
  std::string* release_youtubevideoid();
  void set_allocated_youtubevideoid(std::string* youtubevideoid);
  private:
  const std::string& _internal_youtubevideoid() const;
  void _internal_set_youtubevideoid(const std::string& value);
  std::string* _internal_mutable_youtubevideoid();
  public:

  // optional string url = 13;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 16;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 17;
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  void set_file_description(const std::string& value);
  void set_file_description(std::string&& value);
  void set_file_description(const char* value);
  void set_file_description(const char* value, size_t size);
  std::string* mutable_file_description();
  std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string short_description = 18;
  bool has_short_description() const;
  private:
  bool _internal_has_short_description() const;
  public:
  void clear_short_description();
  const std::string& short_description() const;
  void set_short_description(const std::string& value);
  void set_short_description(std::string&& value);
  void set_short_description(const char* value);
  void set_short_description(const char* value, size_t size);
  std::string* mutable_short_description();
  std::string* release_short_description();
  void set_allocated_short_description(std::string* short_description);
  private:
  const std::string& _internal_short_description() const;
  void _internal_set_short_description(const std::string& value);
  std::string* _internal_mutable_short_description();
  public:

  // optional string ban_reason = 29;
  bool has_ban_reason() const;
  private:
  bool _internal_has_ban_reason() const;
  public:
  void clear_ban_reason();
  const std::string& ban_reason() const;
  void set_ban_reason(const std::string& value);
  void set_ban_reason(std::string&& value);
  void set_ban_reason(const char* value);
  void set_ban_reason(const char* value, size_t size);
  std::string* mutable_ban_reason();
  std::string* release_ban_reason();
  void set_allocated_ban_reason(std::string* ban_reason);
  private:
  const std::string& _internal_ban_reason() const;
  void _internal_set_ban_reason(const std::string& value);
  std::string* _internal_mutable_ban_reason();
  public:

  // optional string app_name = 33;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string image_url = 45;
  bool has_image_url() const;
  private:
  bool _internal_has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  void set_image_url(const std::string& value);
  void set_image_url(std::string&& value);
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  std::string* mutable_image_url();
  std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);
  private:
  const std::string& _internal_image_url() const;
  void _internal_set_image_url(const std::string& value);
  std::string* _internal_mutable_image_url();
  public:

  // optional string shortcutname = 48;
  bool has_shortcutname() const;
  private:
  bool _internal_has_shortcutname() const;
  public:
  void clear_shortcutname();
  const std::string& shortcutname() const;
  void set_shortcutname(const std::string& value);
  void set_shortcutname(std::string&& value);
  void set_shortcutname(const char* value);
  void set_shortcutname(const char* value, size_t size);
  std::string* mutable_shortcutname();
  std::string* release_shortcutname();
  void set_allocated_shortcutname(std::string* shortcutname);
  private:
  const std::string& _internal_shortcutname() const;
  void _internal_set_shortcutname(const std::string& value);
  std::string* _internal_mutable_shortcutname();
  public:

  // optional .PublishedFileDetails.VoteData vote_data = 55;
  bool has_vote_data() const;
  private:
  bool _internal_has_vote_data() const;
  public:
  void clear_vote_data();
  const ::PublishedFileDetails_VoteData& vote_data() const;
  ::PublishedFileDetails_VoteData* release_vote_data();
  ::PublishedFileDetails_VoteData* mutable_vote_data();
  void set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data);
  private:
  const ::PublishedFileDetails_VoteData& _internal_vote_data() const;
  ::PublishedFileDetails_VoteData* _internal_mutable_vote_data();
  public:
  void unsafe_arena_set_allocated_vote_data(
      ::PublishedFileDetails_VoteData* vote_data);
  ::PublishedFileDetails_VoteData* unsafe_arena_release_vote_data();

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 creator_appid = 4;
  bool has_creator_appid() const;
  private:
  bool _internal_has_creator_appid() const;
  public:
  void clear_creator_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 creator_appid() const;
  void set_creator_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creator_appid() const;
  void _internal_set_creator_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 creator = 3;
  bool has_creator() const;
  private:
  bool _internal_has_creator() const;
  public:
  void clear_creator();
  ::PROTOBUF_NAMESPACE_ID::uint64 creator() const;
  void set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_creator() const;
  void _internal_set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 consumer_appid = 5;
  bool has_consumer_appid() const;
  private:
  bool _internal_has_consumer_appid() const;
  public:
  void clear_consumer_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_appid() const;
  void set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consumer_appid() const;
  void _internal_set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 consumer_shortcutid = 6;
  bool has_consumer_shortcutid() const;
  private:
  bool _internal_has_consumer_shortcutid() const;
  public:
  void clear_consumer_shortcutid();
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_shortcutid() const;
  void set_consumer_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_consumer_shortcutid() const;
  void _internal_set_consumer_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 file_size = 8;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 preview_file_size = 9;
  bool has_preview_file_size() const;
  private:
  bool _internal_has_preview_file_size() const;
  public:
  void clear_preview_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 preview_file_size() const;
  void set_preview_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_preview_file_size() const;
  void _internal_set_preview_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 hcontent_file = 14;
  bool has_hcontent_file() const;
  private:
  bool _internal_has_hcontent_file() const;
  public:
  void clear_hcontent_file();
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_file() const;
  void set_hcontent_file(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hcontent_file() const;
  void _internal_set_hcontent_file(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 hcontent_preview = 15;
  bool has_hcontent_preview() const;
  private:
  bool _internal_has_hcontent_preview() const;
  public:
  void clear_hcontent_preview();
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_preview() const;
  void set_hcontent_preview(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hcontent_preview() const;
  void _internal_set_hcontent_preview(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 time_created = 19;
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_created() const;
  void set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_created() const;
  void _internal_set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_updated = 20;
  bool has_time_updated() const;
  private:
  bool _internal_has_time_updated() const;
  public:
  void clear_time_updated();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_updated() const;
  void set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_updated() const;
  void _internal_set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 visibility = 21;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility() const;
  void set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visibility() const;
  void _internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 22;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool workshop_file = 23;
  bool has_workshop_file() const;
  private:
  bool _internal_has_workshop_file() const;
  public:
  void clear_workshop_file();
  bool workshop_file() const;
  void set_workshop_file(bool value);
  private:
  bool _internal_workshop_file() const;
  void _internal_set_workshop_file(bool value);
  public:

  // optional bool workshop_accepted = 24;
  bool has_workshop_accepted() const;
  private:
  bool _internal_has_workshop_accepted() const;
  public:
  void clear_workshop_accepted();
  bool workshop_accepted() const;
  void set_workshop_accepted(bool value);
  private:
  bool _internal_workshop_accepted() const;
  void _internal_set_workshop_accepted(bool value);
  public:

  // optional bool show_subscribe_all = 25;
  bool has_show_subscribe_all() const;
  private:
  bool _internal_has_show_subscribe_all() const;
  public:
  void clear_show_subscribe_all();
  bool show_subscribe_all() const;
  void set_show_subscribe_all(bool value);
  private:
  bool _internal_show_subscribe_all() const;
  void _internal_set_show_subscribe_all(bool value);
  public:

  // optional bool banned = 28;
  bool has_banned() const;
  private:
  bool _internal_has_banned() const;
  public:
  void clear_banned();
  bool banned() const;
  void set_banned(bool value);
  private:
  bool _internal_banned() const;
  void _internal_set_banned(bool value);
  public:

  // optional int32 num_comments_developer = 26;
  bool has_num_comments_developer() const;
  private:
  bool _internal_has_num_comments_developer() const;
  public:
  void clear_num_comments_developer();
  ::PROTOBUF_NAMESPACE_ID::int32 num_comments_developer() const;
  void set_num_comments_developer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_comments_developer() const;
  void _internal_set_num_comments_developer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 banner = 30;
  bool has_banner() const;
  private:
  bool _internal_has_banner() const;
  public:
  void clear_banner();
  ::PROTOBUF_NAMESPACE_ID::uint64 banner() const;
  void set_banner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_banner() const;
  void _internal_set_banner(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 num_comments_public = 27;
  bool has_num_comments_public() const;
  private:
  bool _internal_has_num_comments_public() const;
  public:
  void clear_num_comments_public();
  ::PROTOBUF_NAMESPACE_ID::int32 num_comments_public() const;
  void set_num_comments_public(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_comments_public() const;
  void _internal_set_num_comments_public(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 file_type = 34;
  bool has_file_type() const;
  private:
  bool _internal_has_file_type() const;
  public:
  void clear_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type() const;
  void set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_type() const;
  void _internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 subscriptions = 36;
  bool has_subscriptions() const;
  private:
  bool _internal_has_subscriptions() const;
  public:
  void clear_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 subscriptions() const;
  void set_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subscriptions() const;
  void _internal_set_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool can_be_deleted = 31;
  bool has_can_be_deleted() const;
  private:
  bool _internal_has_can_be_deleted() const;
  public:
  void clear_can_be_deleted();
  bool can_be_deleted() const;
  void set_can_be_deleted(bool value);
  private:
  bool _internal_can_be_deleted() const;
  void _internal_set_can_be_deleted(bool value);
  public:

  // optional bool incompatible = 32;
  bool has_incompatible() const;
  private:
  bool _internal_has_incompatible() const;
  public:
  void clear_incompatible();
  bool incompatible() const;
  void set_incompatible(bool value);
  private:
  bool _internal_incompatible() const;
  void _internal_set_incompatible(bool value);
  public:

  // optional bool can_subscribe = 35;
  bool has_can_subscribe() const;
  private:
  bool _internal_has_can_subscribe() const;
  public:
  void clear_can_subscribe();
  bool can_subscribe() const;
  void set_can_subscribe(bool value);
  private:
  bool _internal_can_subscribe() const;
  void _internal_set_can_subscribe(bool value);
  public:

  // optional bool spoiler_tag = 46;
  bool has_spoiler_tag() const;
  private:
  bool _internal_has_spoiler_tag() const;
  public:
  void clear_spoiler_tag();
  bool spoiler_tag() const;
  void set_spoiler_tag(bool value);
  private:
  bool _internal_spoiler_tag() const;
  void _internal_set_spoiler_tag(bool value);
  public:

  // optional uint32 favorited = 37;
  bool has_favorited() const;
  private:
  bool _internal_has_favorited() const;
  public:
  void clear_favorited();
  ::PROTOBUF_NAMESPACE_ID::uint32 favorited() const;
  void set_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_favorited() const;
  void _internal_set_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 followers = 38;
  bool has_followers() const;
  private:
  bool _internal_has_followers() const;
  public:
  void clear_followers();
  ::PROTOBUF_NAMESPACE_ID::uint32 followers() const;
  void set_followers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_followers() const;
  void _internal_set_followers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lifetime_subscriptions = 39;
  bool has_lifetime_subscriptions() const;
  private:
  bool _internal_has_lifetime_subscriptions() const;
  public:
  void clear_lifetime_subscriptions();
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_subscriptions() const;
  void set_lifetime_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lifetime_subscriptions() const;
  void _internal_set_lifetime_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lifetime_favorited = 40;
  bool has_lifetime_favorited() const;
  private:
  bool _internal_has_lifetime_favorited() const;
  public:
  void clear_lifetime_favorited();
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_favorited() const;
  void set_lifetime_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lifetime_favorited() const;
  void _internal_set_lifetime_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lifetime_followers = 41;
  bool has_lifetime_followers() const;
  private:
  bool _internal_has_lifetime_followers() const;
  public:
  void clear_lifetime_followers();
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_followers() const;
  void set_lifetime_followers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lifetime_followers() const;
  void _internal_set_lifetime_followers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 views = 42;
  bool has_views() const;
  private:
  bool _internal_has_views() const;
  public:
  void clear_views();
  ::PROTOBUF_NAMESPACE_ID::uint32 views() const;
  void set_views(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_views() const;
  void _internal_set_views(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 image_width = 43;
  bool has_image_width() const;
  private:
  bool _internal_has_image_width() const;
  public:
  void clear_image_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_width() const;
  void _internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 image_height = 44;
  bool has_image_height() const;
  private:
  bool _internal_has_image_height() const;
  public:
  void clear_image_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_image_height() const;
  void _internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 shortcutid = 47;
  bool has_shortcutid() const;
  private:
  bool _internal_has_shortcutid() const;
  public:
  void clear_shortcutid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shortcutid() const;
  void set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shortcutid() const;
  void _internal_set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_children = 49;
  bool has_num_children() const;
  private:
  bool _internal_has_num_children() const;
  public:
  void clear_num_children();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_children() const;
  void set_num_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_children() const;
  void _internal_set_num_children(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_reports = 50;
  bool has_num_reports() const;
  private:
  bool _internal_has_num_reports() const;
  public:
  void clear_num_reports();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_reports() const;
  void set_num_reports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_reports() const;
  void _internal_set_num_reports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  bool has_time_subscribed() const;
  private:
  bool _internal_has_time_subscribed() const;
  public:
  void clear_time_subscribed();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_subscribed() const;
  void set_time_subscribed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_subscribed() const;
  void _internal_set_time_subscribed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:PublishedFileDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview > previews_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag > tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child > children_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag > kvtags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr youtubevideoid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ban_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcutname_;
  ::PublishedFileDetails_VoteData* vote_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creator_appid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 consumer_shortcutid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 preview_file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_file_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hcontent_preview_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_created_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_updated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  bool workshop_file_;
  bool workshop_accepted_;
  bool show_subscribe_all_;
  bool banned_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_comments_developer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 banner_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_comments_public_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subscriptions_;
  bool can_be_deleted_;
  bool incompatible_;
  bool can_subscribe_;
  bool spoiler_tag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 favorited_;
  ::PROTOBUF_NAMESPACE_ID::uint32 followers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_subscriptions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_favorited_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lifetime_followers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 views_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shortcutid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_children_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_reports_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_subscribed_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetDetails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetDetails_Response) */ {
 public:
  inline CPublishedFile_GetDetails_Response() : CPublishedFile_GetDetails_Response(nullptr) {}
  virtual ~CPublishedFile_GetDetails_Response();
  explicit constexpr CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from);
  CPublishedFile_GetDetails_Response(CPublishedFile_GetDetails_Response&& from) noexcept
    : CPublishedFile_GetDetails_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetDetails_Response& operator=(const CPublishedFile_GetDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetDetails_Response& operator=(CPublishedFile_GetDetails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_GetDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetDetails_Response*>(
               &_CPublishedFile_GetDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CPublishedFile_GetDetails_Response& a, CPublishedFile_GetDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetDetails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_GetDetails_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Response>(nullptr);
  }

  CPublishedFile_GetDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_GetDetails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_GetDetails_Response& from);
  void MergeFrom(const CPublishedFile_GetDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetDetails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetDetails_Response";
  }
  protected:
  explicit CPublishedFile_GetDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfiledetailsFieldNumber = 1,
  };
  // repeated .PublishedFileDetails publishedfiledetails = 1;
  int publishedfiledetails_size() const;
  private:
  int _internal_publishedfiledetails_size() const;
  public:
  void clear_publishedfiledetails();
  ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();
  private:
  const ::PublishedFileDetails& _internal_publishedfiledetails(int index) const;
  ::PublishedFileDetails* _internal_add_publishedfiledetails();
  public:
  const ::PublishedFileDetails& publishedfiledetails(int index) const;
  ::PublishedFileDetails* add_publishedfiledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Request) */ {
 public:
  inline CPublishedFile_GetUserFiles_Request() : CPublishedFile_GetUserFiles_Request(nullptr) {}
  virtual ~CPublishedFile_GetUserFiles_Request();
  explicit constexpr CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from);
  CPublishedFile_GetUserFiles_Request(CPublishedFile_GetUserFiles_Request&& from) noexcept
    : CPublishedFile_GetUserFiles_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Request& operator=(const CPublishedFile_GetUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Request& operator=(CPublishedFile_GetUserFiles_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_GetUserFiles_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Request*>(
               &_CPublishedFile_GetUserFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CPublishedFile_GetUserFiles_Request& a, CPublishedFile_GetUserFiles_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_GetUserFiles_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Request>(nullptr);
  }

  CPublishedFile_GetUserFiles_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_GetUserFiles_Request& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Request";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredtagsFieldNumber = 11,
    kExcludedtagsFieldNumber = 12,
    kSortmethodFieldNumber = 6,
    kAppidFieldNumber = 1,
    kTotalonlyFieldNumber = 7,
    kIdsOnlyFieldNumber = 10,
    kPrivacyFieldNumber = 9,
    kPageFieldNumber = 3,
    kNumperpageFieldNumber = 4,
  };
  // repeated string requiredtags = 11 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  int requiredtags_size() const;
  private:
  int _internal_requiredtags_size() const;
  public:
  void clear_requiredtags();
  const std::string& requiredtags(int index) const;
  std::string* mutable_requiredtags(int index);
  void set_requiredtags(int index, const std::string& value);
  void set_requiredtags(int index, std::string&& value);
  void set_requiredtags(int index, const char* value);
  void set_requiredtags(int index, const char* value, size_t size);
  std::string* add_requiredtags();
  void add_requiredtags(const std::string& value);
  void add_requiredtags(std::string&& value);
  void add_requiredtags(const char* value);
  void add_requiredtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& requiredtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_requiredtags();
  private:
  const std::string& _internal_requiredtags(int index) const;
  std::string* _internal_add_requiredtags();
  public:

  // repeated string excludedtags = 12 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  int excludedtags_size() const;
  private:
  int _internal_excludedtags_size() const;
  public:
  void clear_excludedtags();
  const std::string& excludedtags(int index) const;
  std::string* mutable_excludedtags(int index);
  void set_excludedtags(int index, const std::string& value);
  void set_excludedtags(int index, std::string&& value);
  void set_excludedtags(int index, const char* value);
  void set_excludedtags(int index, const char* value, size_t size);
  std::string* add_excludedtags();
  void add_excludedtags(const std::string& value);
  void add_excludedtags(std::string&& value);
  void add_excludedtags(const char* value);
  void add_excludedtags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excludedtags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excludedtags();
  private:
  const std::string& _internal_excludedtags(int index) const;
  std::string* _internal_add_excludedtags();
  public:

  // optional string sortmethod = 6 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
  bool has_sortmethod() const;
  private:
  bool _internal_has_sortmethod() const;
  public:
  void clear_sortmethod();
  const std::string& sortmethod() const;
  void set_sortmethod(const std::string& value);
  void set_sortmethod(std::string&& value);
  void set_sortmethod(const char* value);
  void set_sortmethod(const char* value, size_t size);
  std::string* mutable_sortmethod();
  std::string* release_sortmethod();
  void set_allocated_sortmethod(std::string* sortmethod);
  private:
  const std::string& _internal_sortmethod() const;
  void _internal_set_sortmethod(const std::string& value);
  std::string* _internal_mutable_sortmethod();
  public:

  // optional uint32 appid = 1 [(.description) = "App Id to retrieve published files from."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool totalonly = 7 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  bool has_totalonly() const;
  private:
  bool _internal_has_totalonly() const;
  public:
  void clear_totalonly();
  bool totalonly() const;
  void set_totalonly(bool value);
  private:
  bool _internal_totalonly() const;
  void _internal_set_totalonly(bool value);
  public:

  // optional bool ids_only = 10 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  bool has_ids_only() const;
  private:
  bool _internal_has_ids_only() const;
  public:
  void clear_ids_only();
  bool ids_only() const;
  void set_ids_only(bool value);
  private:
  bool _internal_ids_only() const;
  void _internal_set_ids_only(bool value);
  public:

  // optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
  bool has_privacy() const;
  private:
  bool _internal_has_privacy() const;
  public:
  void clear_privacy();
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy() const;
  void set_privacy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_privacy() const;
  void _internal_set_privacy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 page = 3 [default = 1, (.description) = "(Optional) Starting page for results."];
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 numperpage = 4 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
  bool has_numperpage() const;
  private:
  bool _internal_has_numperpage() const;
  public:
  void clear_numperpage();
  ::PROTOBUF_NAMESPACE_ID::uint32 numperpage() const;
  void set_numperpage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numperpage() const;
  void _internal_set_numperpage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> requiredtags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excludedtags_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_sortmethod_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sortmethod_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool totalonly_;
  bool ids_only_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privacy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numperpage_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response_App PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Response.App) */ {
 public:
  inline CPublishedFile_GetUserFiles_Response_App() : CPublishedFile_GetUserFiles_Response_App(nullptr) {}
  virtual ~CPublishedFile_GetUserFiles_Response_App();
  explicit constexpr CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from);
  CPublishedFile_GetUserFiles_Response_App(CPublishedFile_GetUserFiles_Response_App&& from) noexcept
    : CPublishedFile_GetUserFiles_Response_App() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Response_App& operator=(const CPublishedFile_GetUserFiles_Response_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Response_App& operator=(CPublishedFile_GetUserFiles_Response_App&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_GetUserFiles_Response_App& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Response_App* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Response_App*>(
               &_CPublishedFile_GetUserFiles_Response_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CPublishedFile_GetUserFiles_Response_App& a, CPublishedFile_GetUserFiles_Response_App& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Response_App* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Response_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_GetUserFiles_Response_App* New() const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response_App>(nullptr);
  }

  CPublishedFile_GetUserFiles_Response_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response_App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Response_App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Response.App";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Response_App(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAppidFieldNumber = 1,
    kShortcutidFieldNumber = 3,
    kPrivateFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 shortcutid = 3;
  bool has_shortcutid() const;
  private:
  bool _internal_has_shortcutid() const;
  public:
  void clear_shortcutid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shortcutid() const;
  void set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shortcutid() const;
  void _internal_set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool private = 4;
  bool has_private_() const;
  private:
  bool _internal_has_private_() const;
  public:
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shortcutid_;
  bool private__;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_GetUserFiles_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_GetUserFiles_Response) */ {
 public:
  inline CPublishedFile_GetUserFiles_Response() : CPublishedFile_GetUserFiles_Response(nullptr) {}
  virtual ~CPublishedFile_GetUserFiles_Response();
  explicit constexpr CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from);
  CPublishedFile_GetUserFiles_Response(CPublishedFile_GetUserFiles_Response&& from) noexcept
    : CPublishedFile_GetUserFiles_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_GetUserFiles_Response& operator=(const CPublishedFile_GetUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_GetUserFiles_Response& operator=(CPublishedFile_GetUserFiles_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_GetUserFiles_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_GetUserFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_GetUserFiles_Response*>(
               &_CPublishedFile_GetUserFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CPublishedFile_GetUserFiles_Response& a, CPublishedFile_GetUserFiles_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_GetUserFiles_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_GetUserFiles_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_GetUserFiles_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response>(nullptr);
  }

  CPublishedFile_GetUserFiles_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_GetUserFiles_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_GetUserFiles_Response& from);
  void MergeFrom(const CPublishedFile_GetUserFiles_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_GetUserFiles_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_GetUserFiles_Response";
  }
  protected:
  explicit CPublishedFile_GetUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CPublishedFile_GetUserFiles_Response_App App;

  // accessors -------------------------------------------------------

  enum : int {
    kPublishedfiledetailsFieldNumber = 3,
    kAppsFieldNumber = 4,
    kTotalFieldNumber = 1,
    kStartindexFieldNumber = 2,
  };
  // repeated .PublishedFileDetails publishedfiledetails = 3;
  int publishedfiledetails_size() const;
  private:
  int _internal_publishedfiledetails_size() const;
  public:
  void clear_publishedfiledetails();
  ::PublishedFileDetails* mutable_publishedfiledetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
      mutable_publishedfiledetails();
  private:
  const ::PublishedFileDetails& _internal_publishedfiledetails(int index) const;
  ::PublishedFileDetails* _internal_add_publishedfiledetails();
  public:
  const ::PublishedFileDetails& publishedfiledetails(int index) const;
  ::PublishedFileDetails* add_publishedfiledetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
      publishedfiledetails() const;

  // repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
  int apps_size() const;
  private:
  int _internal_apps_size() const;
  public:
  void clear_apps();
  ::CPublishedFile_GetUserFiles_Response_App* mutable_apps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
      mutable_apps();
  private:
  const ::CPublishedFile_GetUserFiles_Response_App& _internal_apps(int index) const;
  ::CPublishedFile_GetUserFiles_Response_App* _internal_add_apps();
  public:
  const ::CPublishedFile_GetUserFiles_Response_App& apps(int index) const;
  ::CPublishedFile_GetUserFiles_Response_App* add_apps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
      apps() const;

  // optional uint32 total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 startindex = 2;
  bool has_startindex() const;
  private:
  bool _internal_has_startindex() const;
  public:
  void clear_startindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 startindex() const;
  void set_startindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startindex() const;
  void _internal_set_startindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_GetUserFiles_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails > publishedfiledetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App > apps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startindex_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Update_Request) */ {
 public:
  inline CPublishedFile_Update_Request() : CPublishedFile_Update_Request(nullptr) {}
  virtual ~CPublishedFile_Update_Request();
  explicit constexpr CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from);
  CPublishedFile_Update_Request(CPublishedFile_Update_Request&& from) noexcept
    : CPublishedFile_Update_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Update_Request& operator=(const CPublishedFile_Update_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Update_Request& operator=(CPublishedFile_Update_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Update_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Update_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Update_Request*>(
               &_CPublishedFile_Update_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CPublishedFile_Update_Request& a, CPublishedFile_Update_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Update_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Update_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Update_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_Update_Request>(nullptr);
  }

  CPublishedFile_Update_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Update_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Update_Request& from);
  void MergeFrom(const CPublishedFile_Update_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Update_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Update_Request";
  }
  protected:
  explicit CPublishedFile_Update_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 6,
    kTitleFieldNumber = 3,
    kFileDescriptionFieldNumber = 4,
    kFilenameFieldNumber = 7,
    kPreviewFilenameFieldNumber = 8,
    kPublishedfileidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kVisibilityFieldNumber = 5,
  };
  // repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // optional string title = 3 [(.description) = "(Optional) Title of the published file."];
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
  bool has_file_description() const;
  private:
  bool _internal_has_file_description() const;
  public:
  void clear_file_description();
  const std::string& file_description() const;
  void set_file_description(const std::string& value);
  void set_file_description(std::string&& value);
  void set_file_description(const char* value);
  void set_file_description(const char* value, size_t size);
  std::string* mutable_file_description();
  std::string* release_file_description();
  void set_allocated_file_description(std::string* file_description);
  private:
  const std::string& _internal_file_description() const;
  void _internal_set_file_description(const std::string& value);
  std::string* _internal_mutable_file_description();
  public:

  // optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
  bool has_preview_filename() const;
  private:
  bool _internal_has_preview_filename() const;
  public:
  void clear_preview_filename();
  const std::string& preview_filename() const;
  void set_preview_filename(const std::string& value);
  void set_preview_filename(std::string&& value);
  void set_preview_filename(const char* value);
  void set_preview_filename(const char* value, size_t size);
  std::string* mutable_preview_filename();
  std::string* release_preview_filename();
  void set_allocated_preview_filename(std::string* preview_filename);
  private:
  const std::string& _internal_preview_filename() const;
  void _internal_set_preview_filename(const std::string& value);
  std::string* _internal_mutable_preview_filename();
  public:

  // optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like update."];
  bool has_publishedfileid() const;
  private:
  bool _internal_has_publishedfileid() const;
  public:
  void clear_publishedfileid();
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid() const;
  void set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_publishedfileid() const;
  void _internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility() const;
  void set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_visibility() const;
  void _internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preview_filename_;
  ::PROTOBUF_NAMESPACE_ID::uint64 publishedfileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 visibility_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_Update_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_Update_Response) */ {
 public:
  inline CPublishedFile_Update_Response() : CPublishedFile_Update_Response(nullptr) {}
  virtual ~CPublishedFile_Update_Response();
  explicit constexpr CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from);
  CPublishedFile_Update_Response(CPublishedFile_Update_Response&& from) noexcept
    : CPublishedFile_Update_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_Update_Response& operator=(const CPublishedFile_Update_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_Update_Response& operator=(CPublishedFile_Update_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_Update_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_Update_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_Update_Response*>(
               &_CPublishedFile_Update_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CPublishedFile_Update_Response& a, CPublishedFile_Update_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_Update_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_Update_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_Update_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_Update_Response>(nullptr);
  }

  CPublishedFile_Update_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_Update_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_Update_Response& from);
  void MergeFrom(const CPublishedFile_Update_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_Update_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_Update_Response";
  }
  protected:
  explicit CPublishedFile_Update_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_Update_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_RefreshVotingQueue_Request) */ {
 public:
  inline CPublishedFile_RefreshVotingQueue_Request() : CPublishedFile_RefreshVotingQueue_Request(nullptr) {}
  virtual ~CPublishedFile_RefreshVotingQueue_Request();
  explicit constexpr CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from);
  CPublishedFile_RefreshVotingQueue_Request(CPublishedFile_RefreshVotingQueue_Request&& from) noexcept
    : CPublishedFile_RefreshVotingQueue_Request() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RefreshVotingQueue_Request& operator=(const CPublishedFile_RefreshVotingQueue_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RefreshVotingQueue_Request& operator=(CPublishedFile_RefreshVotingQueue_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_RefreshVotingQueue_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RefreshVotingQueue_Request* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RefreshVotingQueue_Request*>(
               &_CPublishedFile_RefreshVotingQueue_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CPublishedFile_RefreshVotingQueue_Request& a, CPublishedFile_RefreshVotingQueue_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RefreshVotingQueue_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_RefreshVotingQueue_Request* New() const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Request>(nullptr);
  }

  CPublishedFile_RefreshVotingQueue_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RefreshVotingQueue_Request";
  }
  protected:
  explicit CPublishedFile_RefreshVotingQueue_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 3,
    kExcludedTagsFieldNumber = 5,
    kAppidFieldNumber = 1,
    kMatchingFileTypeFieldNumber = 2,
    kDesiredQueueSizeFieldNumber = 6,
    kMatchAllTagsFieldNumber = 4,
  };
  // repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
  int excluded_tags_size() const;
  private:
  int _internal_excluded_tags_size() const;
  public:
  void clear_excluded_tags();
  const std::string& excluded_tags(int index) const;
  std::string* mutable_excluded_tags(int index);
  void set_excluded_tags(int index, const std::string& value);
  void set_excluded_tags(int index, std::string&& value);
  void set_excluded_tags(int index, const char* value);
  void set_excluded_tags(int index, const char* value, size_t size);
  std::string* add_excluded_tags();
  void add_excluded_tags(const std::string& value);
  void add_excluded_tags(std::string&& value);
  void add_excluded_tags(const char* value);
  void add_excluded_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_tags();
  private:
  const std::string& _internal_excluded_tags(int index) const;
  std::string* _internal_add_excluded_tags();
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
  bool has_matching_file_type() const;
  private:
  bool _internal_has_matching_file_type() const;
  public:
  void clear_matching_file_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_file_type() const;
  void set_matching_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matching_file_type() const;
  void _internal_set_matching_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  bool has_desired_queue_size() const;
  private:
  bool _internal_has_desired_queue_size() const;
  public:
  void clear_desired_queue_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_queue_size() const;
  void set_desired_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_desired_queue_size() const;
  void _internal_set_desired_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  bool has_match_all_tags() const;
  private:
  bool _internal_has_match_all_tags() const;
  public:
  void clear_match_all_tags();
  bool match_all_tags() const;
  void set_match_all_tags(bool value);
  private:
  bool _internal_match_all_tags() const;
  void _internal_set_match_all_tags(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_tags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matching_file_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 desired_queue_size_;
  bool match_all_tags_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CPublishedFile_RefreshVotingQueue_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CPublishedFile_RefreshVotingQueue_Response) */ {
 public:
  inline CPublishedFile_RefreshVotingQueue_Response() : CPublishedFile_RefreshVotingQueue_Response(nullptr) {}
  virtual ~CPublishedFile_RefreshVotingQueue_Response();
  explicit constexpr CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from);
  CPublishedFile_RefreshVotingQueue_Response(CPublishedFile_RefreshVotingQueue_Response&& from) noexcept
    : CPublishedFile_RefreshVotingQueue_Response() {
    *this = ::std::move(from);
  }

  inline CPublishedFile_RefreshVotingQueue_Response& operator=(const CPublishedFile_RefreshVotingQueue_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPublishedFile_RefreshVotingQueue_Response& operator=(CPublishedFile_RefreshVotingQueue_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPublishedFile_RefreshVotingQueue_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPublishedFile_RefreshVotingQueue_Response* internal_default_instance() {
    return reinterpret_cast<const CPublishedFile_RefreshVotingQueue_Response*>(
               &_CPublishedFile_RefreshVotingQueue_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CPublishedFile_RefreshVotingQueue_Response& a, CPublishedFile_RefreshVotingQueue_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CPublishedFile_RefreshVotingQueue_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPublishedFile_RefreshVotingQueue_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPublishedFile_RefreshVotingQueue_Response* New() const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Response>(nullptr);
  }

  CPublishedFile_RefreshVotingQueue_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPublishedFile_RefreshVotingQueue_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from);
  void MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPublishedFile_RefreshVotingQueue_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CPublishedFile_RefreshVotingQueue_Response";
  }
  protected:
  explicit CPublishedFile_RefreshVotingQueue_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fpublishedfile_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CPublishedFile_RefreshVotingQueue_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fpublishedfile_2esteamworkssdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CPublishedFile_Subscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Subscribe_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Subscribe_Request::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Subscribe_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Subscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Subscribe_Request::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_list_type() const {
  return _internal_has_list_type();
}
inline void CPublishedFile_Subscribe_Request::clear_list_type() {
  list_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Subscribe_Request::_internal_list_type() const {
  return list_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Subscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.list_type)
  return _internal_list_type();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  list_type_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Subscribe_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Subscribe_Request::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPublishedFile_Subscribe_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPublishedFile_Subscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Subscribe_Request::_internal_has_notify_client() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Subscribe_Request::has_notify_client() const {
  return _internal_has_notify_client();
}
inline void CPublishedFile_Subscribe_Request::clear_notify_client() {
  notify_client_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_Subscribe_Request::_internal_notify_client() const {
  return notify_client_;
}
inline bool CPublishedFile_Subscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Subscribe_Request.notify_client)
  return _internal_notify_client();
}
inline void CPublishedFile_Subscribe_Request::_internal_set_notify_client(bool value) {
  _has_bits_[0] |= 0x00000008u;
  notify_client_ = value;
}
inline void CPublishedFile_Subscribe_Request::set_notify_client(bool value) {
  _internal_set_notify_client(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Subscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Subscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Request

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Unsubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Unsubscribe_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Unsubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_list_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_list_type() const {
  return _internal_has_list_type();
}
inline void CPublishedFile_Unsubscribe_Request::clear_list_type() {
  list_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Unsubscribe_Request::_internal_list_type() const {
  return list_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Unsubscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.list_type)
  return _internal_list_type();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  list_type_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_list_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.list_type)
}

// optional int32 appid = 3;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Unsubscribe_Request::clear_appid() {
  appid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPublishedFile_Unsubscribe_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPublishedFile_Unsubscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  appid_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_appid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.appid)
}

// optional bool notify_client = 4;
inline bool CPublishedFile_Unsubscribe_Request::_internal_has_notify_client() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Unsubscribe_Request::has_notify_client() const {
  return _internal_has_notify_client();
}
inline void CPublishedFile_Unsubscribe_Request::clear_notify_client() {
  notify_client_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_Unsubscribe_Request::_internal_notify_client() const {
  return notify_client_;
}
inline bool CPublishedFile_Unsubscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Unsubscribe_Request.notify_client)
  return _internal_notify_client();
}
inline void CPublishedFile_Unsubscribe_Request::_internal_set_notify_client(bool value) {
  _has_bits_[0] |= 0x00000008u;
  notify_client_ = value;
}
inline void CPublishedFile_Unsubscribe_Request::set_notify_client(bool value) {
  _internal_set_notify_client(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Unsubscribe_Request.notify_client)
}

// -------------------------------------------------------------------

// CPublishedFile_Unsubscribe_Response

// -------------------------------------------------------------------

// CPublishedFile_Publish_Request

// optional uint32 appid = 1 [(.description) = "App Id this file is being published FROM."];
inline bool CPublishedFile_Publish_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Publish_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Publish_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  appid_ = value;
}
inline void CPublishedFile_Publish_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.appid)
}

// optional uint32 consumer_appid = 2 [(.description) = "App Id this file is being published TO."];
inline bool CPublishedFile_Publish_Request::_internal_has_consumer_appid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_consumer_appid() const {
  return _internal_has_consumer_appid();
}
inline void CPublishedFile_Publish_Request::clear_consumer_appid() {
  consumer_appid_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::_internal_consumer_appid() const {
  return consumer_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::consumer_appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_appid)
  return _internal_consumer_appid();
}
inline void CPublishedFile_Publish_Request::_internal_set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  consumer_appid_ = value;
}
inline void CPublishedFile_Publish_Request::set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consumer_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_appid)
}

// optional string cloudfilename = 3 [(.description) = "Name of the file to publish in the user\'s cloud."];
inline bool CPublishedFile_Publish_Request::_internal_has_cloudfilename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_cloudfilename() const {
  return _internal_has_cloudfilename();
}
inline void CPublishedFile_Publish_Request::clear_cloudfilename() {
  cloudfilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Publish_Request::cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.cloudfilename)
  return _internal_cloudfilename();
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const std::string& value) {
  _internal_set_cloudfilename(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::mutable_cloudfilename() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.cloudfilename)
  return _internal_mutable_cloudfilename();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_cloudfilename() const {
  return cloudfilename_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_cloudfilename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cloudfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_cloudfilename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_cloudfilename() {
  _has_bits_[0] |= 0x00000001u;
  return cloudfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_cloudfilename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.cloudfilename)
  if (!_internal_has_cloudfilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cloudfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_cloudfilename(std::string* cloudfilename) {
  if (cloudfilename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cloudfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloudfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.cloudfilename)
}

// optional string preview_cloudfilename = 4 [(.description) = "Name of the file to use as the published file\'s preview."];
inline bool CPublishedFile_Publish_Request::_internal_has_preview_cloudfilename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_preview_cloudfilename() const {
  return _internal_has_preview_cloudfilename();
}
inline void CPublishedFile_Publish_Request::clear_preview_cloudfilename() {
  preview_cloudfilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_Publish_Request::preview_cloudfilename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.preview_cloudfilename)
  return _internal_preview_cloudfilename();
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const std::string& value) {
  _internal_set_preview_cloudfilename(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::mutable_preview_cloudfilename() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.preview_cloudfilename)
  return _internal_mutable_preview_cloudfilename();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_preview_cloudfilename() const {
  return preview_cloudfilename_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_preview_cloudfilename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  preview_cloudfilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  preview_cloudfilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.preview_cloudfilename)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_preview_cloudfilename() {
  _has_bits_[0] |= 0x00000002u;
  return preview_cloudfilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_preview_cloudfilename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.preview_cloudfilename)
  if (!_internal_has_preview_cloudfilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return preview_cloudfilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_preview_cloudfilename(std::string* preview_cloudfilename) {
  if (preview_cloudfilename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preview_cloudfilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_cloudfilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.preview_cloudfilename)
}

// optional string title = 5 [(.description) = "Text title for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_title() const {
  return _internal_has_title();
}
inline void CPublishedFile_Publish_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPublishedFile_Publish_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.title)
  return _internal_title();
}
inline void CPublishedFile_Publish_Request::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.title)
}
inline std::string* CPublishedFile_Publish_Request::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.title)
  return _internal_mutable_title();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_title() const {
  return title_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.title)
}
inline void CPublishedFile_Publish_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.title)
}
inline void CPublishedFile_Publish_Request::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.title)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_title() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.title)
}

// optional string file_description = 6 [(.description) = "Text description for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_file_description() const {
  return _internal_has_file_description();
}
inline void CPublishedFile_Publish_Request::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPublishedFile_Publish_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_description)
  return _internal_file_description();
}
inline void CPublishedFile_Publish_Request::set_file_description(const std::string& value) {
  _internal_set_file_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_description)
}
inline std::string* CPublishedFile_Publish_Request::mutable_file_description() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.file_description)
  return _internal_mutable_file_description();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_file_description() const {
  return file_description_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_file_description(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  file_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.file_description)
}
inline void CPublishedFile_Publish_Request::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.file_description)
}
inline void CPublishedFile_Publish_Request::set_file_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.file_description)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000008u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.file_description)
}

// optional uint32 file_type = 7 [(.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
inline bool CPublishedFile_Publish_Request::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_file_type() const {
  return _internal_has_file_type();
}
inline void CPublishedFile_Publish_Request::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::_internal_file_type() const {
  return file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.file_type)
  return _internal_file_type();
}
inline void CPublishedFile_Publish_Request::_internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  file_type_ = value;
}
inline void CPublishedFile_Publish_Request::set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.file_type)
}

// optional string consumer_shortcut_name = 8 [(.description) = "Shortcut name for the published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_consumer_shortcut_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_consumer_shortcut_name() const {
  return _internal_has_consumer_shortcut_name();
}
inline void CPublishedFile_Publish_Request::clear_consumer_shortcut_name() {
  consumer_shortcut_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CPublishedFile_Publish_Request::consumer_shortcut_name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return _internal_consumer_shortcut_name();
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const std::string& value) {
  _internal_set_consumer_shortcut_name(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline std::string* CPublishedFile_Publish_Request::mutable_consumer_shortcut_name() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.consumer_shortcut_name)
  return _internal_mutable_consumer_shortcut_name();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_consumer_shortcut_name() const {
  return consumer_shortcut_name_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_consumer_shortcut_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  consumer_shortcut_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  consumer_shortcut_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.consumer_shortcut_name)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_consumer_shortcut_name() {
  _has_bits_[0] |= 0x00000010u;
  return consumer_shortcut_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_consumer_shortcut_name() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.consumer_shortcut_name)
  if (!_internal_has_consumer_shortcut_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return consumer_shortcut_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_consumer_shortcut_name(std::string* consumer_shortcut_name) {
  if (consumer_shortcut_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  consumer_shortcut_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consumer_shortcut_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.consumer_shortcut_name)
}

// optional string youtube_username = 9 [(.description) = "(Optional) User\'s YouTube account username."];
inline bool CPublishedFile_Publish_Request::_internal_has_youtube_username() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_youtube_username() const {
  return _internal_has_youtube_username();
}
inline void CPublishedFile_Publish_Request::clear_youtube_username() {
  youtube_username_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CPublishedFile_Publish_Request::youtube_username() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_username)
  return _internal_youtube_username();
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const std::string& value) {
  _internal_set_youtube_username(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_username)
}
inline std::string* CPublishedFile_Publish_Request::mutable_youtube_username() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_username)
  return _internal_mutable_youtube_username();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_youtube_username() const {
  return youtube_username_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_youtube_username(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_youtube_username(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  youtube_username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.youtube_username)
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.youtube_username)
}
inline void CPublishedFile_Publish_Request::set_youtube_username(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  youtube_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.youtube_username)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_youtube_username() {
  _has_bits_[0] |= 0x00000020u;
  return youtube_username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_youtube_username() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.youtube_username)
  if (!_internal_has_youtube_username()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return youtube_username_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_username(std::string* youtube_username) {
  if (youtube_username != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  youtube_username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtube_username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_username)
}

// optional string youtube_videoid = 10 [(.description) = "(Optional) Video Id of a YouTube video for this published file."];
inline bool CPublishedFile_Publish_Request::_internal_has_youtube_videoid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_youtube_videoid() const {
  return _internal_has_youtube_videoid();
}
inline void CPublishedFile_Publish_Request::clear_youtube_videoid() {
  youtube_videoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CPublishedFile_Publish_Request::youtube_videoid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.youtube_videoid)
  return _internal_youtube_videoid();
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const std::string& value) {
  _internal_set_youtube_videoid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.youtube_videoid)
}
inline std::string* CPublishedFile_Publish_Request::mutable_youtube_videoid() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.youtube_videoid)
  return _internal_mutable_youtube_videoid();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_youtube_videoid() const {
  return youtube_videoid_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_youtube_videoid(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  youtube_videoid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.youtube_videoid)
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.youtube_videoid)
}
inline void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  youtube_videoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.youtube_videoid)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_youtube_videoid() {
  _has_bits_[0] |= 0x00000040u;
  return youtube_videoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_youtube_videoid() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.youtube_videoid)
  if (!_internal_has_youtube_videoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return youtube_videoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_youtube_videoid(std::string* youtube_videoid) {
  if (youtube_videoid != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  youtube_videoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtube_videoid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.youtube_videoid)
}

// optional uint32 visibility = 11 [(.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
inline bool CPublishedFile_Publish_Request::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_visibility() const {
  return _internal_has_visibility();
}
inline void CPublishedFile_Publish_Request::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::_internal_visibility() const {
  return visibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Publish_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.visibility)
  return _internal_visibility();
}
inline void CPublishedFile_Publish_Request::_internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  visibility_ = value;
}
inline void CPublishedFile_Publish_Request::set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.visibility)
}

// optional string redirect_uri = 12 [(.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
inline bool CPublishedFile_Publish_Request::_internal_has_redirect_uri() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_redirect_uri() const {
  return _internal_has_redirect_uri();
}
inline void CPublishedFile_Publish_Request::clear_redirect_uri() {
  redirect_uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CPublishedFile_Publish_Request::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.redirect_uri)
  return _internal_redirect_uri();
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const std::string& value) {
  _internal_set_redirect_uri(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Request::mutable_redirect_uri() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.redirect_uri)
  return _internal_mutable_redirect_uri();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_redirect_uri() const {
  return redirect_uri_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_redirect_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  redirect_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.redirect_uri)
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.redirect_uri)
}
inline void CPublishedFile_Publish_Request::set_redirect_uri(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_redirect_uri() {
  _has_bits_[0] |= 0x00000080u;
  return redirect_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.redirect_uri)
  if (!_internal_has_redirect_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return redirect_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  redirect_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.redirect_uri)
}

// repeated string tags = 13 [(.description) = "Array of text tags to apply to the published file."];
inline int CPublishedFile_Publish_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_Publish_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_Publish_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_Publish_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_Publish_Request.tags)
  return _internal_add_tags();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_Publish_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_Publish_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_Publish_Request::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.tags)
}
inline std::string* CPublishedFile_Publish_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Publish_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Publish_Request.tags)
}
inline void CPublishedFile_Publish_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Publish_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_Publish_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Publish_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_Publish_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Publish_Request.tags)
  return &tags_;
}

// optional string collection_type = 14 [(.description) = "(Optional) Type of collection the published file represents."];
inline bool CPublishedFile_Publish_Request::_internal_has_collection_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_collection_type() const {
  return _internal_has_collection_type();
}
inline void CPublishedFile_Publish_Request::clear_collection_type() {
  collection_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& CPublishedFile_Publish_Request::collection_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.collection_type)
  return _internal_collection_type();
}
inline void CPublishedFile_Publish_Request::set_collection_type(const std::string& value) {
  _internal_set_collection_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.collection_type)
}
inline std::string* CPublishedFile_Publish_Request::mutable_collection_type() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.collection_type)
  return _internal_mutable_collection_type();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_collection_type() const {
  return collection_type_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_collection_type(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_collection_type(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  collection_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.collection_type)
}
inline void CPublishedFile_Publish_Request::set_collection_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.collection_type)
}
inline void CPublishedFile_Publish_Request::set_collection_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  collection_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.collection_type)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_collection_type() {
  _has_bits_[0] |= 0x00000100u;
  return collection_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_collection_type() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.collection_type)
  if (!_internal_has_collection_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return collection_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_collection_type(std::string* collection_type) {
  if (collection_type != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  collection_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.collection_type)
}

// optional string game_type = 15 [(.description) = "(Optional) Type of game the published file represents."];
inline bool CPublishedFile_Publish_Request::_internal_has_game_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_game_type() const {
  return _internal_has_game_type();
}
inline void CPublishedFile_Publish_Request::clear_game_type() {
  game_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& CPublishedFile_Publish_Request::game_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.game_type)
  return _internal_game_type();
}
inline void CPublishedFile_Publish_Request::set_game_type(const std::string& value) {
  _internal_set_game_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.game_type)
}
inline std::string* CPublishedFile_Publish_Request::mutable_game_type() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.game_type)
  return _internal_mutable_game_type();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_game_type() const {
  return game_type_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_game_type(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_game_type(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  game_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.game_type)
}
inline void CPublishedFile_Publish_Request::set_game_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.game_type)
}
inline void CPublishedFile_Publish_Request::set_game_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  game_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.game_type)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_game_type() {
  _has_bits_[0] |= 0x00000200u;
  return game_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_game_type() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.game_type)
  if (!_internal_has_game_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return game_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_game_type(std::string* game_type) {
  if (game_type != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  game_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.game_type)
}

// optional string url = 16 [(.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
inline bool CPublishedFile_Publish_Request::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Request::has_url() const {
  return _internal_has_url();
}
inline void CPublishedFile_Publish_Request::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& CPublishedFile_Publish_Request::url() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Request.url)
  return _internal_url();
}
inline void CPublishedFile_Publish_Request::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Request.url)
}
inline std::string* CPublishedFile_Publish_Request::mutable_url() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Request.url)
  return _internal_mutable_url();
}
inline const std::string& CPublishedFile_Publish_Request::_internal_url() const {
  return url_.Get();
}
inline void CPublishedFile_Publish_Request::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Request::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Request.url)
}
inline void CPublishedFile_Publish_Request::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Request.url)
}
inline void CPublishedFile_Publish_Request::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Request.url)
}
inline std::string* CPublishedFile_Publish_Request::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000400u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Request::release_url() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Request.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Request::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Request.url)
}

// -------------------------------------------------------------------

// CPublishedFile_Publish_Response

// optional uint64 publishedfileid = 1;
inline bool CPublishedFile_Publish_Response::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Response::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Publish_Response::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Publish_Response::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Publish_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Publish_Response::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Publish_Response::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.publishedfileid)
}

// optional string redirect_uri = 2;
inline bool CPublishedFile_Publish_Response::_internal_has_redirect_uri() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Publish_Response::has_redirect_uri() const {
  return _internal_has_redirect_uri();
}
inline void CPublishedFile_Publish_Response::clear_redirect_uri() {
  redirect_uri_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Publish_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Publish_Response.redirect_uri)
  return _internal_redirect_uri();
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const std::string& value) {
  _internal_set_redirect_uri(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Publish_Response.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Response::mutable_redirect_uri() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Publish_Response.redirect_uri)
  return _internal_mutable_redirect_uri();
}
inline const std::string& CPublishedFile_Publish_Response::_internal_redirect_uri() const {
  return redirect_uri_.Get();
}
inline void CPublishedFile_Publish_Response::_internal_set_redirect_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  redirect_uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Publish_Response.redirect_uri)
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Publish_Response.redirect_uri)
}
inline void CPublishedFile_Publish_Response::set_redirect_uri(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  redirect_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Publish_Response.redirect_uri)
}
inline std::string* CPublishedFile_Publish_Response::_internal_mutable_redirect_uri() {
  _has_bits_[0] |= 0x00000001u;
  return redirect_uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Publish_Response::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Publish_Response.redirect_uri)
  if (!_internal_has_redirect_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return redirect_uri_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Publish_Response::set_allocated_redirect_uri(std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  redirect_uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Publish_Response.redirect_uri)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Request

// repeated fixed64 publishedfileids = 1 [(.description) = "Set of published file Ids to retrieve details for."];
inline int CPublishedFile_GetDetails_Request::_internal_publishedfileids_size() const {
  return publishedfileids_.size();
}
inline int CPublishedFile_GetDetails_Request::publishedfileids_size() const {
  return _internal_publishedfileids_size();
}
inline void CPublishedFile_GetDetails_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_GetDetails_Request::_internal_publishedfileids(int index) const {
  return publishedfileids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_GetDetails_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_publishedfileids(index);
}
inline void CPublishedFile_GetDetails_Request::set_publishedfileids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline void CPublishedFile_GetDetails_Request::_internal_add_publishedfileids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  publishedfileids_.Add(value);
}
inline void CPublishedFile_GetDetails_Request::add_publishedfileids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_publishedfileids(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Request.publishedfileids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CPublishedFile_GetDetails_Request::_internal_publishedfileids() const {
  return publishedfileids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CPublishedFile_GetDetails_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_publishedfileids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CPublishedFile_GetDetails_Request::_internal_mutable_publishedfileids() {
  return &publishedfileids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CPublishedFile_GetDetails_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Request.publishedfileids)
  return _internal_mutable_publishedfileids();
}

// optional bool includetags = 2 [(.description) = "If true, return tag information in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includetags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includetags() const {
  return _internal_has_includetags();
}
inline void CPublishedFile_GetDetails_Request::clear_includetags() {
  includetags_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includetags() const {
  return includetags_;
}
inline bool CPublishedFile_GetDetails_Request::includetags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includetags)
  return _internal_includetags();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includetags(bool value) {
  _has_bits_[0] |= 0x00000001u;
  includetags_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includetags(bool value) {
  _internal_set_includetags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includetags)
}

// optional bool includeadditionalpreviews = 3 [(.description) = "If true, return preview information in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includeadditionalpreviews() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includeadditionalpreviews() const {
  return _internal_has_includeadditionalpreviews();
}
inline void CPublishedFile_GetDetails_Request::clear_includeadditionalpreviews() {
  includeadditionalpreviews_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includeadditionalpreviews() const {
  return includeadditionalpreviews_;
}
inline bool CPublishedFile_GetDetails_Request::includeadditionalpreviews() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
  return _internal_includeadditionalpreviews();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includeadditionalpreviews(bool value) {
  _has_bits_[0] |= 0x00000002u;
  includeadditionalpreviews_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includeadditionalpreviews(bool value) {
  _internal_set_includeadditionalpreviews(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includeadditionalpreviews)
}

// optional bool includechildren = 4 [(.description) = "If true, return children in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includechildren() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includechildren() const {
  return _internal_has_includechildren();
}
inline void CPublishedFile_GetDetails_Request::clear_includechildren() {
  includechildren_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includechildren() const {
  return includechildren_;
}
inline bool CPublishedFile_GetDetails_Request::includechildren() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includechildren)
  return _internal_includechildren();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includechildren(bool value) {
  _has_bits_[0] |= 0x00000004u;
  includechildren_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includechildren(bool value) {
  _internal_set_includechildren(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includechildren)
}

// optional bool includekvtags = 5 [(.description) = "If true, return key value tags in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includekvtags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includekvtags() const {
  return _internal_has_includekvtags();
}
inline void CPublishedFile_GetDetails_Request::clear_includekvtags() {
  includekvtags_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includekvtags() const {
  return includekvtags_;
}
inline bool CPublishedFile_GetDetails_Request::includekvtags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includekvtags)
  return _internal_includekvtags();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includekvtags(bool value) {
  _has_bits_[0] |= 0x00000008u;
  includekvtags_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includekvtags(bool value) {
  _internal_set_includekvtags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includekvtags)
}

// optional bool includevotes = 6 [(.description) = "If true, return vote data in the returned details."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_includevotes() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_includevotes() const {
  return _internal_has_includevotes();
}
inline void CPublishedFile_GetDetails_Request::clear_includevotes() {
  includevotes_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_includevotes() const {
  return includevotes_;
}
inline bool CPublishedFile_GetDetails_Request::includevotes() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.includevotes)
  return _internal_includevotes();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_includevotes(bool value) {
  _has_bits_[0] |= 0x00000010u;
  includevotes_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_includevotes(bool value) {
  _internal_set_includevotes(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.includevotes)
}

// optional bool short_description = 8 [(.description) = "If true, return a short description instead of the full description."];
inline bool CPublishedFile_GetDetails_Request::_internal_has_short_description() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_GetDetails_Request::has_short_description() const {
  return _internal_has_short_description();
}
inline void CPublishedFile_GetDetails_Request::clear_short_description() {
  short_description_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CPublishedFile_GetDetails_Request::_internal_short_description() const {
  return short_description_;
}
inline bool CPublishedFile_GetDetails_Request::short_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Request.short_description)
  return _internal_short_description();
}
inline void CPublishedFile_GetDetails_Request::_internal_set_short_description(bool value) {
  _has_bits_[0] |= 0x00000020u;
  short_description_ = value;
}
inline void CPublishedFile_GetDetails_Request::set_short_description(bool value) {
  _internal_set_short_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetDetails_Request.short_description)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Tag

// optional string tag = 1;
inline bool PublishedFileDetails_Tag::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Tag::has_tag() const {
  return _internal_has_tag();
}
inline void PublishedFileDetails_Tag::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_Tag::tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.tag)
  return _internal_tag();
}
inline void PublishedFileDetails_Tag::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.tag)
}
inline std::string* PublishedFileDetails_Tag::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Tag.tag)
  return _internal_mutable_tag();
}
inline const std::string& PublishedFileDetails_Tag::_internal_tag() const {
  return tag_.Get();
}
inline void PublishedFileDetails_Tag::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_Tag::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.Tag.tag)
}
inline void PublishedFileDetails_Tag::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Tag.tag)
}
inline void PublishedFileDetails_Tag::set_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Tag.tag)
}
inline std::string* PublishedFileDetails_Tag::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_Tag::release_tag() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Tag.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_Tag::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Tag.tag)
}

// optional bool adminonly = 2;
inline bool PublishedFileDetails_Tag::_internal_has_adminonly() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Tag::has_adminonly() const {
  return _internal_has_adminonly();
}
inline void PublishedFileDetails_Tag::clear_adminonly() {
  adminonly_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PublishedFileDetails_Tag::_internal_adminonly() const {
  return adminonly_;
}
inline bool PublishedFileDetails_Tag::adminonly() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Tag.adminonly)
  return _internal_adminonly();
}
inline void PublishedFileDetails_Tag::_internal_set_adminonly(bool value) {
  _has_bits_[0] |= 0x00000002u;
  adminonly_ = value;
}
inline void PublishedFileDetails_Tag::set_adminonly(bool value) {
  _internal_set_adminonly(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Tag.adminonly)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Preview

// optional uint64 previewid = 1;
inline bool PublishedFileDetails_Preview::_internal_has_previewid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_previewid() const {
  return _internal_has_previewid();
}
inline void PublishedFileDetails_Preview::clear_previewid() {
  previewid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails_Preview::_internal_previewid() const {
  return previewid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails_Preview::previewid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.previewid)
  return _internal_previewid();
}
inline void PublishedFileDetails_Preview::_internal_set_previewid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  previewid_ = value;
}
inline void PublishedFileDetails_Preview::set_previewid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previewid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.previewid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Preview::_internal_has_sortorder() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_sortorder() const {
  return _internal_has_sortorder();
}
inline void PublishedFileDetails_Preview::clear_sortorder() {
  sortorder_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Preview::_internal_sortorder() const {
  return sortorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Preview::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.sortorder)
  return _internal_sortorder();
}
inline void PublishedFileDetails_Preview::_internal_set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  sortorder_ = value;
}
inline void PublishedFileDetails_Preview::set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.sortorder)
}

// optional string url = 3;
inline bool PublishedFileDetails_Preview::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_url() const {
  return _internal_has_url();
}
inline void PublishedFileDetails_Preview::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_Preview::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.url)
  return _internal_url();
}
inline void PublishedFileDetails_Preview::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.url)
}
inline std::string* PublishedFileDetails_Preview::mutable_url() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.url)
  return _internal_mutable_url();
}
inline const std::string& PublishedFileDetails_Preview::_internal_url() const {
  return url_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_Preview::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.Preview.url)
}
inline void PublishedFileDetails_Preview::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.url)
}
inline void PublishedFileDetails_Preview::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.url)
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_Preview::release_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_Preview::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.url)
}

// optional uint32 size = 4;
inline bool PublishedFileDetails_Preview::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_size() const {
  return _internal_has_size();
}
inline void PublishedFileDetails_Preview::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Preview::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Preview::size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.size)
  return _internal_size();
}
inline void PublishedFileDetails_Preview::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  size_ = value;
}
inline void PublishedFileDetails_Preview::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.size)
}

// optional string filename = 5;
inline bool PublishedFileDetails_Preview::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_filename() const {
  return _internal_has_filename();
}
inline void PublishedFileDetails_Preview::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails_Preview::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.filename)
  return _internal_filename();
}
inline void PublishedFileDetails_Preview::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.filename)
}
inline std::string* PublishedFileDetails_Preview::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.filename)
  return _internal_mutable_filename();
}
inline const std::string& PublishedFileDetails_Preview::_internal_filename() const {
  return filename_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_Preview::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.Preview.filename)
}
inline void PublishedFileDetails_Preview::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.filename)
}
inline void PublishedFileDetails_Preview::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.filename)
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_Preview::release_filename() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_Preview::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.filename)
}

// optional string youtubevideoid = 6;
inline bool PublishedFileDetails_Preview::_internal_has_youtubevideoid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_Preview::has_youtubevideoid() const {
  return _internal_has_youtubevideoid();
}
inline void PublishedFileDetails_Preview::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublishedFileDetails_Preview::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Preview.youtubevideoid)
  return _internal_youtubevideoid();
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const std::string& value) {
  _internal_set_youtubevideoid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Preview.youtubevideoid)
}
inline std::string* PublishedFileDetails_Preview::mutable_youtubevideoid() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.Preview.youtubevideoid)
  return _internal_mutable_youtubevideoid();
}
inline const std::string& PublishedFileDetails_Preview::_internal_youtubevideoid() const {
  return youtubevideoid_.Get();
}
inline void PublishedFileDetails_Preview::_internal_set_youtubevideoid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  youtubevideoid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.Preview.youtubevideoid)
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.Preview.youtubevideoid)
}
inline void PublishedFileDetails_Preview::set_youtubevideoid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.Preview.youtubevideoid)
}
inline std::string* PublishedFileDetails_Preview::_internal_mutable_youtubevideoid() {
  _has_bits_[0] |= 0x00000004u;
  return youtubevideoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_Preview::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.Preview.youtubevideoid)
  if (!_internal_has_youtubevideoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return youtubevideoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_Preview::set_allocated_youtubevideoid(std::string* youtubevideoid) {
  if (youtubevideoid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  youtubevideoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtubevideoid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.Preview.youtubevideoid)
}

// -------------------------------------------------------------------

// PublishedFileDetails_Child

// optional uint64 publishedfileid = 1;
inline bool PublishedFileDetails_Child::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void PublishedFileDetails_Child::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails_Child::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails_Child::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.publishedfileid)
  return _internal_publishedfileid();
}
inline void PublishedFileDetails_Child::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  publishedfileid_ = value;
}
inline void PublishedFileDetails_Child::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.publishedfileid)
}

// optional uint32 sortorder = 2;
inline bool PublishedFileDetails_Child::_internal_has_sortorder() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_sortorder() const {
  return _internal_has_sortorder();
}
inline void PublishedFileDetails_Child::clear_sortorder() {
  sortorder_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Child::_internal_sortorder() const {
  return sortorder_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Child::sortorder() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.sortorder)
  return _internal_sortorder();
}
inline void PublishedFileDetails_Child::_internal_set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sortorder_ = value;
}
inline void PublishedFileDetails_Child::set_sortorder(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sortorder(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.sortorder)
}

// optional uint32 file_type = 3;
inline bool PublishedFileDetails_Child::_internal_has_file_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_Child::has_file_type() const {
  return _internal_has_file_type();
}
inline void PublishedFileDetails_Child::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Child::_internal_file_type() const {
  return file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_Child::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.Child.file_type)
  return _internal_file_type();
}
inline void PublishedFileDetails_Child::_internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  file_type_ = value;
}
inline void PublishedFileDetails_Child::set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.Child.file_type)
}

// -------------------------------------------------------------------

// PublishedFileDetails_KVTag

// optional string key = 1;
inline bool PublishedFileDetails_KVTag::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_KVTag::has_key() const {
  return _internal_has_key();
}
inline void PublishedFileDetails_KVTag::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails_KVTag::key() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.key)
  return _internal_key();
}
inline void PublishedFileDetails_KVTag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.key)
}
inline std::string* PublishedFileDetails_KVTag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.key)
  return _internal_mutable_key();
}
inline const std::string& PublishedFileDetails_KVTag::_internal_key() const {
  return key_.Get();
}
inline void PublishedFileDetails_KVTag::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_KVTag::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.KVTag.key)
}
inline void PublishedFileDetails_KVTag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.KVTag.key)
}
inline void PublishedFileDetails_KVTag::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.KVTag.key)
}
inline std::string* PublishedFileDetails_KVTag::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.KVTag.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_KVTag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.key)
}

// optional string value = 2;
inline bool PublishedFileDetails_KVTag::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_KVTag::has_value() const {
  return _internal_has_value();
}
inline void PublishedFileDetails_KVTag::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails_KVTag::value() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.KVTag.value)
  return _internal_value();
}
inline void PublishedFileDetails_KVTag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.KVTag.value)
}
inline std::string* PublishedFileDetails_KVTag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.KVTag.value)
  return _internal_mutable_value();
}
inline const std::string& PublishedFileDetails_KVTag::_internal_value() const {
  return value_.Get();
}
inline void PublishedFileDetails_KVTag::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails_KVTag::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.KVTag.value)
}
inline void PublishedFileDetails_KVTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.KVTag.value)
}
inline void PublishedFileDetails_KVTag::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.KVTag.value)
}
inline std::string* PublishedFileDetails_KVTag::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.KVTag.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails_KVTag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.KVTag.value)
}

// -------------------------------------------------------------------

// PublishedFileDetails_VoteData

// optional float score = 1;
inline bool PublishedFileDetails_VoteData::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_score() const {
  return _internal_has_score();
}
inline void PublishedFileDetails_VoteData::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PublishedFileDetails_VoteData::_internal_score() const {
  return score_;
}
inline float PublishedFileDetails_VoteData::score() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.score)
  return _internal_score();
}
inline void PublishedFileDetails_VoteData::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000001u;
  score_ = value;
}
inline void PublishedFileDetails_VoteData::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.score)
}

// optional uint32 votes_up = 2;
inline bool PublishedFileDetails_VoteData::_internal_has_votes_up() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_votes_up() const {
  return _internal_has_votes_up();
}
inline void PublishedFileDetails_VoteData::clear_votes_up() {
  votes_up_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_VoteData::_internal_votes_up() const {
  return votes_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_VoteData::votes_up() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_up)
  return _internal_votes_up();
}
inline void PublishedFileDetails_VoteData::_internal_set_votes_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  votes_up_ = value;
}
inline void PublishedFileDetails_VoteData::set_votes_up(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votes_up(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_up)
}

// optional uint32 votes_down = 3;
inline bool PublishedFileDetails_VoteData::_internal_has_votes_down() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails_VoteData::has_votes_down() const {
  return _internal_has_votes_down();
}
inline void PublishedFileDetails_VoteData::clear_votes_down() {
  votes_down_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_VoteData::_internal_votes_down() const {
  return votes_down_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails_VoteData::votes_down() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.VoteData.votes_down)
  return _internal_votes_down();
}
inline void PublishedFileDetails_VoteData::_internal_set_votes_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  votes_down_ = value;
}
inline void PublishedFileDetails_VoteData::set_votes_down(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votes_down(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.VoteData.votes_down)
}

// -------------------------------------------------------------------

// PublishedFileDetails

// optional uint32 result = 1;
inline bool PublishedFileDetails::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_result() const {
  return _internal_has_result();
}
inline void PublishedFileDetails::clear_result() {
  result_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::result() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.result)
  return _internal_result();
}
inline void PublishedFileDetails::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  result_ = value;
}
inline void PublishedFileDetails::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.result)
}

// optional uint64 publishedfileid = 2;
inline bool PublishedFileDetails::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void PublishedFileDetails::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::publishedfileid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.publishedfileid)
  return _internal_publishedfileid();
}
inline void PublishedFileDetails::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  publishedfileid_ = value;
}
inline void PublishedFileDetails::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.publishedfileid)
}

// optional fixed64 creator = 3;
inline bool PublishedFileDetails::_internal_has_creator() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_creator() const {
  return _internal_has_creator();
}
inline void PublishedFileDetails::clear_creator() {
  creator_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_creator() const {
  return creator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::creator() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator)
  return _internal_creator();
}
inline void PublishedFileDetails::_internal_set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  creator_ = value;
}
inline void PublishedFileDetails::set_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_creator(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator)
}

// optional uint32 creator_appid = 4;
inline bool PublishedFileDetails::_internal_has_creator_appid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_creator_appid() const {
  return _internal_has_creator_appid();
}
inline void PublishedFileDetails::clear_creator_appid() {
  creator_appid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_creator_appid() const {
  return creator_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::creator_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.creator_appid)
  return _internal_creator_appid();
}
inline void PublishedFileDetails::_internal_set_creator_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  creator_appid_ = value;
}
inline void PublishedFileDetails::set_creator_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creator_appid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.creator_appid)
}

// optional uint32 consumer_appid = 5;
inline bool PublishedFileDetails::_internal_has_consumer_appid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_consumer_appid() const {
  return _internal_has_consumer_appid();
}
inline void PublishedFileDetails::clear_consumer_appid() {
  consumer_appid_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_consumer_appid() const {
  return consumer_appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::consumer_appid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_appid)
  return _internal_consumer_appid();
}
inline void PublishedFileDetails::_internal_set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  consumer_appid_ = value;
}
inline void PublishedFileDetails::set_consumer_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consumer_appid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_appid)
}

// optional uint32 consumer_shortcutid = 6;
inline bool PublishedFileDetails::_internal_has_consumer_shortcutid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_consumer_shortcutid() const {
  return _internal_has_consumer_shortcutid();
}
inline void PublishedFileDetails::clear_consumer_shortcutid() {
  consumer_shortcutid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_consumer_shortcutid() const {
  return consumer_shortcutid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::consumer_shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.consumer_shortcutid)
  return _internal_consumer_shortcutid();
}
inline void PublishedFileDetails::_internal_set_consumer_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  consumer_shortcutid_ = value;
}
inline void PublishedFileDetails::set_consumer_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_consumer_shortcutid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.consumer_shortcutid)
}

// optional string filename = 7;
inline bool PublishedFileDetails::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_filename() const {
  return _internal_has_filename();
}
inline void PublishedFileDetails::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishedFileDetails::filename() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.filename)
  return _internal_filename();
}
inline void PublishedFileDetails::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.filename)
}
inline std::string* PublishedFileDetails::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.filename)
  return _internal_mutable_filename();
}
inline const std::string& PublishedFileDetails::_internal_filename() const {
  return filename_.Get();
}
inline void PublishedFileDetails::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.filename)
}
inline void PublishedFileDetails::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.filename)
}
inline void PublishedFileDetails::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.filename)
}
inline std::string* PublishedFileDetails::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_filename() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.filename)
}

// optional uint64 file_size = 8;
inline bool PublishedFileDetails::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_size() const {
  return _internal_has_file_size();
}
inline void PublishedFileDetails::clear_file_size() {
  file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_size)
  return _internal_file_size();
}
inline void PublishedFileDetails::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  file_size_ = value;
}
inline void PublishedFileDetails::set_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_size)
}

// optional uint64 preview_file_size = 9;
inline bool PublishedFileDetails::_internal_has_preview_file_size() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_preview_file_size() const {
  return _internal_has_preview_file_size();
}
inline void PublishedFileDetails::clear_preview_file_size() {
  preview_file_size_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_preview_file_size() const {
  return preview_file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::preview_file_size() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_file_size)
  return _internal_preview_file_size();
}
inline void PublishedFileDetails::_internal_set_preview_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00100000u;
  preview_file_size_ = value;
}
inline void PublishedFileDetails::set_preview_file_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_preview_file_size(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_file_size)
}

// optional string file_url = 10;
inline bool PublishedFileDetails::_internal_has_file_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_url() const {
  return _internal_has_file_url();
}
inline void PublishedFileDetails::clear_file_url() {
  file_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PublishedFileDetails::file_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_url)
  return _internal_file_url();
}
inline void PublishedFileDetails::set_file_url(const std::string& value) {
  _internal_set_file_url(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_url)
}
inline std::string* PublishedFileDetails::mutable_file_url() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_url)
  return _internal_mutable_file_url();
}
inline const std::string& PublishedFileDetails::_internal_file_url() const {
  return file_url_.Get();
}
inline void PublishedFileDetails::_internal_set_file_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_file_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.file_url)
}
inline void PublishedFileDetails::set_file_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.file_url)
}
inline void PublishedFileDetails::set_file_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.file_url)
}
inline std::string* PublishedFileDetails::_internal_mutable_file_url() {
  _has_bits_[0] |= 0x00000002u;
  return file_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_file_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.file_url)
  if (!_internal_has_file_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_file_url(std::string* file_url) {
  if (file_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_url)
}

// optional string preview_url = 11;
inline bool PublishedFileDetails::_internal_has_preview_url() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_preview_url() const {
  return _internal_has_preview_url();
}
inline void PublishedFileDetails::clear_preview_url() {
  preview_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PublishedFileDetails::preview_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.preview_url)
  return _internal_preview_url();
}
inline void PublishedFileDetails::set_preview_url(const std::string& value) {
  _internal_set_preview_url(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.preview_url)
}
inline std::string* PublishedFileDetails::mutable_preview_url() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.preview_url)
  return _internal_mutable_preview_url();
}
inline const std::string& PublishedFileDetails::_internal_preview_url() const {
  return preview_url_.Get();
}
inline void PublishedFileDetails::_internal_set_preview_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_preview_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  preview_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.preview_url)
}
inline void PublishedFileDetails::set_preview_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.preview_url)
}
inline void PublishedFileDetails::set_preview_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  preview_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.preview_url)
}
inline std::string* PublishedFileDetails::_internal_mutable_preview_url() {
  _has_bits_[0] |= 0x00000004u;
  return preview_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_preview_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.preview_url)
  if (!_internal_has_preview_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return preview_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_preview_url(std::string* preview_url) {
  if (preview_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preview_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.preview_url)
}

// optional string youtubevideoid = 12;
inline bool PublishedFileDetails::_internal_has_youtubevideoid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_youtubevideoid() const {
  return _internal_has_youtubevideoid();
}
inline void PublishedFileDetails::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PublishedFileDetails::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.youtubevideoid)
  return _internal_youtubevideoid();
}
inline void PublishedFileDetails::set_youtubevideoid(const std::string& value) {
  _internal_set_youtubevideoid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.youtubevideoid)
}
inline std::string* PublishedFileDetails::mutable_youtubevideoid() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.youtubevideoid)
  return _internal_mutable_youtubevideoid();
}
inline const std::string& PublishedFileDetails::_internal_youtubevideoid() const {
  return youtubevideoid_.Get();
}
inline void PublishedFileDetails::_internal_set_youtubevideoid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_youtubevideoid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  youtubevideoid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.youtubevideoid)
}
inline void PublishedFileDetails::set_youtubevideoid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.youtubevideoid)
}
inline void PublishedFileDetails::set_youtubevideoid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  youtubevideoid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.youtubevideoid)
}
inline std::string* PublishedFileDetails::_internal_mutable_youtubevideoid() {
  _has_bits_[0] |= 0x00000008u;
  return youtubevideoid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.youtubevideoid)
  if (!_internal_has_youtubevideoid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return youtubevideoid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_youtubevideoid(std::string* youtubevideoid) {
  if (youtubevideoid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  youtubevideoid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), youtubevideoid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.youtubevideoid)
}

// optional string url = 13;
inline bool PublishedFileDetails::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_url() const {
  return _internal_has_url();
}
inline void PublishedFileDetails::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PublishedFileDetails::url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.url)
  return _internal_url();
}
inline void PublishedFileDetails::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.url)
}
inline std::string* PublishedFileDetails::mutable_url() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.url)
  return _internal_mutable_url();
}
inline const std::string& PublishedFileDetails::_internal_url() const {
  return url_.Get();
}
inline void PublishedFileDetails::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.url)
}
inline void PublishedFileDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.url)
}
inline void PublishedFileDetails::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.url)
}
inline std::string* PublishedFileDetails::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000010u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.url)
}

// optional fixed64 hcontent_file = 14;
inline bool PublishedFileDetails::_internal_has_hcontent_file() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_hcontent_file() const {
  return _internal_has_hcontent_file();
}
inline void PublishedFileDetails::clear_hcontent_file() {
  hcontent_file_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_hcontent_file() const {
  return hcontent_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::hcontent_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_file)
  return _internal_hcontent_file();
}
inline void PublishedFileDetails::_internal_set_hcontent_file(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  hcontent_file_ = value;
}
inline void PublishedFileDetails::set_hcontent_file(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hcontent_file(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_file)
}

// optional fixed64 hcontent_preview = 15;
inline bool PublishedFileDetails::_internal_has_hcontent_preview() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_hcontent_preview() const {
  return _internal_has_hcontent_preview();
}
inline void PublishedFileDetails::clear_hcontent_preview() {
  hcontent_preview_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_hcontent_preview() const {
  return hcontent_preview_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::hcontent_preview() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.hcontent_preview)
  return _internal_hcontent_preview();
}
inline void PublishedFileDetails::_internal_set_hcontent_preview(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00400000u;
  hcontent_preview_ = value;
}
inline void PublishedFileDetails::set_hcontent_preview(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hcontent_preview(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.hcontent_preview)
}

// optional string title = 16;
inline bool PublishedFileDetails::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_title() const {
  return _internal_has_title();
}
inline void PublishedFileDetails::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PublishedFileDetails::title() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.title)
  return _internal_title();
}
inline void PublishedFileDetails::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.title)
}
inline std::string* PublishedFileDetails::mutable_title() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.title)
  return _internal_mutable_title();
}
inline const std::string& PublishedFileDetails::_internal_title() const {
  return title_.Get();
}
inline void PublishedFileDetails::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.title)
}
inline void PublishedFileDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.title)
}
inline void PublishedFileDetails::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.title)
}
inline std::string* PublishedFileDetails::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000020u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_title() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.title)
}

// optional string file_description = 17;
inline bool PublishedFileDetails::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_description() const {
  return _internal_has_file_description();
}
inline void PublishedFileDetails::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PublishedFileDetails::file_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_description)
  return _internal_file_description();
}
inline void PublishedFileDetails::set_file_description(const std::string& value) {
  _internal_set_file_description(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_description)
}
inline std::string* PublishedFileDetails::mutable_file_description() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.file_description)
  return _internal_mutable_file_description();
}
inline const std::string& PublishedFileDetails::_internal_file_description() const {
  return file_description_.Get();
}
inline void PublishedFileDetails::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_file_description(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  file_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.file_description)
}
inline void PublishedFileDetails::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.file_description)
}
inline void PublishedFileDetails::set_file_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.file_description)
}
inline std::string* PublishedFileDetails::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000040u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_file_description() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.file_description)
}

// optional string short_description = 18;
inline bool PublishedFileDetails::_internal_has_short_description() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_short_description() const {
  return _internal_has_short_description();
}
inline void PublishedFileDetails::clear_short_description() {
  short_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PublishedFileDetails::short_description() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.short_description)
  return _internal_short_description();
}
inline void PublishedFileDetails::set_short_description(const std::string& value) {
  _internal_set_short_description(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.short_description)
}
inline std::string* PublishedFileDetails::mutable_short_description() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.short_description)
  return _internal_mutable_short_description();
}
inline const std::string& PublishedFileDetails::_internal_short_description() const {
  return short_description_.Get();
}
inline void PublishedFileDetails::_internal_set_short_description(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_short_description(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  short_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.short_description)
}
inline void PublishedFileDetails::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.short_description)
}
inline void PublishedFileDetails::set_short_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  short_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.short_description)
}
inline std::string* PublishedFileDetails::_internal_mutable_short_description() {
  _has_bits_[0] |= 0x00000080u;
  return short_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_short_description() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.short_description)
  if (!_internal_has_short_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return short_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_short_description(std::string* short_description) {
  if (short_description != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  short_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), short_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.short_description)
}

// optional uint32 time_created = 19;
inline bool PublishedFileDetails::_internal_has_time_created() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_created() const {
  return _internal_has_time_created();
}
inline void PublishedFileDetails::clear_time_created() {
  time_created_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_time_created() const {
  return time_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::time_created() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_created)
  return _internal_time_created();
}
inline void PublishedFileDetails::_internal_set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  time_created_ = value;
}
inline void PublishedFileDetails::set_time_created(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_created(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_created)
}

// optional uint32 time_updated = 20;
inline bool PublishedFileDetails::_internal_has_time_updated() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_updated() const {
  return _internal_has_time_updated();
}
inline void PublishedFileDetails::clear_time_updated() {
  time_updated_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_time_updated() const {
  return time_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::time_updated() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_updated)
  return _internal_time_updated();
}
inline void PublishedFileDetails::_internal_set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  time_updated_ = value;
}
inline void PublishedFileDetails::set_time_updated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_updated(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_updated)
}

// optional uint32 visibility = 21;
inline bool PublishedFileDetails::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_visibility() const {
  return _internal_has_visibility();
}
inline void PublishedFileDetails::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_visibility() const {
  return visibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::visibility() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.visibility)
  return _internal_visibility();
}
inline void PublishedFileDetails::_internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  visibility_ = value;
}
inline void PublishedFileDetails::set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.visibility)
}

// optional uint32 flags = 22;
inline bool PublishedFileDetails::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_flags() const {
  return _internal_has_flags();
}
inline void PublishedFileDetails::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::flags() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.flags)
  return _internal_flags();
}
inline void PublishedFileDetails::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  flags_ = value;
}
inline void PublishedFileDetails::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.flags)
}

// optional bool workshop_file = 23;
inline bool PublishedFileDetails::_internal_has_workshop_file() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_workshop_file() const {
  return _internal_has_workshop_file();
}
inline void PublishedFileDetails::clear_workshop_file() {
  workshop_file_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool PublishedFileDetails::_internal_workshop_file() const {
  return workshop_file_;
}
inline bool PublishedFileDetails::workshop_file() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_file)
  return _internal_workshop_file();
}
inline void PublishedFileDetails::_internal_set_workshop_file(bool value) {
  _has_bits_[0] |= 0x08000000u;
  workshop_file_ = value;
}
inline void PublishedFileDetails::set_workshop_file(bool value) {
  _internal_set_workshop_file(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_file)
}

// optional bool workshop_accepted = 24;
inline bool PublishedFileDetails::_internal_has_workshop_accepted() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_workshop_accepted() const {
  return _internal_has_workshop_accepted();
}
inline void PublishedFileDetails::clear_workshop_accepted() {
  workshop_accepted_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool PublishedFileDetails::_internal_workshop_accepted() const {
  return workshop_accepted_;
}
inline bool PublishedFileDetails::workshop_accepted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.workshop_accepted)
  return _internal_workshop_accepted();
}
inline void PublishedFileDetails::_internal_set_workshop_accepted(bool value) {
  _has_bits_[0] |= 0x10000000u;
  workshop_accepted_ = value;
}
inline void PublishedFileDetails::set_workshop_accepted(bool value) {
  _internal_set_workshop_accepted(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.workshop_accepted)
}

// optional bool show_subscribe_all = 25;
inline bool PublishedFileDetails::_internal_has_show_subscribe_all() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_show_subscribe_all() const {
  return _internal_has_show_subscribe_all();
}
inline void PublishedFileDetails::clear_show_subscribe_all() {
  show_subscribe_all_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool PublishedFileDetails::_internal_show_subscribe_all() const {
  return show_subscribe_all_;
}
inline bool PublishedFileDetails::show_subscribe_all() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.show_subscribe_all)
  return _internal_show_subscribe_all();
}
inline void PublishedFileDetails::_internal_set_show_subscribe_all(bool value) {
  _has_bits_[0] |= 0x20000000u;
  show_subscribe_all_ = value;
}
inline void PublishedFileDetails::set_show_subscribe_all(bool value) {
  _internal_set_show_subscribe_all(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.show_subscribe_all)
}

// optional int32 num_comments_developer = 26;
inline bool PublishedFileDetails::_internal_has_num_comments_developer() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_comments_developer() const {
  return _internal_has_num_comments_developer();
}
inline void PublishedFileDetails::clear_num_comments_developer() {
  num_comments_developer_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishedFileDetails::_internal_num_comments_developer() const {
  return num_comments_developer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishedFileDetails::num_comments_developer() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_developer)
  return _internal_num_comments_developer();
}
inline void PublishedFileDetails::_internal_set_num_comments_developer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  num_comments_developer_ = value;
}
inline void PublishedFileDetails::set_num_comments_developer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_comments_developer(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_developer)
}

// optional int32 num_comments_public = 27;
inline bool PublishedFileDetails::_internal_has_num_comments_public() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_comments_public() const {
  return _internal_has_num_comments_public();
}
inline void PublishedFileDetails::clear_num_comments_public() {
  num_comments_public_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishedFileDetails::_internal_num_comments_public() const {
  return num_comments_public_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PublishedFileDetails::num_comments_public() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_comments_public)
  return _internal_num_comments_public();
}
inline void PublishedFileDetails::_internal_set_num_comments_public(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  num_comments_public_ = value;
}
inline void PublishedFileDetails::set_num_comments_public(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_comments_public(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_comments_public)
}

// optional bool banned = 28;
inline bool PublishedFileDetails::_internal_has_banned() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_banned() const {
  return _internal_has_banned();
}
inline void PublishedFileDetails::clear_banned() {
  banned_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool PublishedFileDetails::_internal_banned() const {
  return banned_;
}
inline bool PublishedFileDetails::banned() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banned)
  return _internal_banned();
}
inline void PublishedFileDetails::_internal_set_banned(bool value) {
  _has_bits_[0] |= 0x40000000u;
  banned_ = value;
}
inline void PublishedFileDetails::set_banned(bool value) {
  _internal_set_banned(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banned)
}

// optional string ban_reason = 29;
inline bool PublishedFileDetails::_internal_has_ban_reason() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_ban_reason() const {
  return _internal_has_ban_reason();
}
inline void PublishedFileDetails::clear_ban_reason() {
  ban_reason_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PublishedFileDetails::ban_reason() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.ban_reason)
  return _internal_ban_reason();
}
inline void PublishedFileDetails::set_ban_reason(const std::string& value) {
  _internal_set_ban_reason(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.ban_reason)
}
inline std::string* PublishedFileDetails::mutable_ban_reason() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.ban_reason)
  return _internal_mutable_ban_reason();
}
inline const std::string& PublishedFileDetails::_internal_ban_reason() const {
  return ban_reason_.Get();
}
inline void PublishedFileDetails::_internal_set_ban_reason(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_ban_reason(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  ban_reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.ban_reason)
}
inline void PublishedFileDetails::set_ban_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.ban_reason)
}
inline void PublishedFileDetails::set_ban_reason(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  ban_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.ban_reason)
}
inline std::string* PublishedFileDetails::_internal_mutable_ban_reason() {
  _has_bits_[0] |= 0x00000100u;
  return ban_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_ban_reason() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.ban_reason)
  if (!_internal_has_ban_reason()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return ban_reason_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_ban_reason(std::string* ban_reason) {
  if (ban_reason != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  ban_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ban_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.ban_reason)
}

// optional fixed64 banner = 30;
inline bool PublishedFileDetails::_internal_has_banner() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_banner() const {
  return _internal_has_banner();
}
inline void PublishedFileDetails::clear_banner() {
  banner_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::_internal_banner() const {
  return banner_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublishedFileDetails::banner() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.banner)
  return _internal_banner();
}
inline void PublishedFileDetails::_internal_set_banner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000001u;
  banner_ = value;
}
inline void PublishedFileDetails::set_banner(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_banner(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.banner)
}

// optional bool can_be_deleted = 31;
inline bool PublishedFileDetails::_internal_has_can_be_deleted() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_can_be_deleted() const {
  return _internal_has_can_be_deleted();
}
inline void PublishedFileDetails::clear_can_be_deleted() {
  can_be_deleted_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool PublishedFileDetails::_internal_can_be_deleted() const {
  return can_be_deleted_;
}
inline bool PublishedFileDetails::can_be_deleted() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_be_deleted)
  return _internal_can_be_deleted();
}
inline void PublishedFileDetails::_internal_set_can_be_deleted(bool value) {
  _has_bits_[1] |= 0x00000010u;
  can_be_deleted_ = value;
}
inline void PublishedFileDetails::set_can_be_deleted(bool value) {
  _internal_set_can_be_deleted(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_be_deleted)
}

// optional bool incompatible = 32;
inline bool PublishedFileDetails::_internal_has_incompatible() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_incompatible() const {
  return _internal_has_incompatible();
}
inline void PublishedFileDetails::clear_incompatible() {
  incompatible_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool PublishedFileDetails::_internal_incompatible() const {
  return incompatible_;
}
inline bool PublishedFileDetails::incompatible() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.incompatible)
  return _internal_incompatible();
}
inline void PublishedFileDetails::_internal_set_incompatible(bool value) {
  _has_bits_[1] |= 0x00000020u;
  incompatible_ = value;
}
inline void PublishedFileDetails::set_incompatible(bool value) {
  _internal_set_incompatible(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.incompatible)
}

// optional string app_name = 33;
inline bool PublishedFileDetails::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_app_name() const {
  return _internal_has_app_name();
}
inline void PublishedFileDetails::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PublishedFileDetails::app_name() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.app_name)
  return _internal_app_name();
}
inline void PublishedFileDetails::set_app_name(const std::string& value) {
  _internal_set_app_name(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.app_name)
}
inline std::string* PublishedFileDetails::mutable_app_name() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.app_name)
  return _internal_mutable_app_name();
}
inline const std::string& PublishedFileDetails::_internal_app_name() const {
  return app_name_.Get();
}
inline void PublishedFileDetails::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_app_name(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  app_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.app_name)
}
inline void PublishedFileDetails::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.app_name)
}
inline void PublishedFileDetails::set_app_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  app_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.app_name)
}
inline std::string* PublishedFileDetails::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000200u;
  return app_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_app_name() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return app_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  app_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.app_name)
}

// optional uint32 file_type = 34;
inline bool PublishedFileDetails::_internal_has_file_type() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_file_type() const {
  return _internal_has_file_type();
}
inline void PublishedFileDetails::clear_file_type() {
  file_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_file_type() const {
  return file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::file_type() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.file_type)
  return _internal_file_type();
}
inline void PublishedFileDetails::_internal_set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  file_type_ = value;
}
inline void PublishedFileDetails::set_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.file_type)
}

// optional bool can_subscribe = 35;
inline bool PublishedFileDetails::_internal_has_can_subscribe() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_can_subscribe() const {
  return _internal_has_can_subscribe();
}
inline void PublishedFileDetails::clear_can_subscribe() {
  can_subscribe_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool PublishedFileDetails::_internal_can_subscribe() const {
  return can_subscribe_;
}
inline bool PublishedFileDetails::can_subscribe() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.can_subscribe)
  return _internal_can_subscribe();
}
inline void PublishedFileDetails::_internal_set_can_subscribe(bool value) {
  _has_bits_[1] |= 0x00000040u;
  can_subscribe_ = value;
}
inline void PublishedFileDetails::set_can_subscribe(bool value) {
  _internal_set_can_subscribe(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.can_subscribe)
}

// optional uint32 subscriptions = 36;
inline bool PublishedFileDetails::_internal_has_subscriptions() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_subscriptions() const {
  return _internal_has_subscriptions();
}
inline void PublishedFileDetails::clear_subscriptions() {
  subscriptions_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_subscriptions() const {
  return subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.subscriptions)
  return _internal_subscriptions();
}
inline void PublishedFileDetails::_internal_set_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  subscriptions_ = value;
}
inline void PublishedFileDetails::set_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subscriptions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.subscriptions)
}

// optional uint32 favorited = 37;
inline bool PublishedFileDetails::_internal_has_favorited() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_favorited() const {
  return _internal_has_favorited();
}
inline void PublishedFileDetails::clear_favorited() {
  favorited_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_favorited() const {
  return favorited_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.favorited)
  return _internal_favorited();
}
inline void PublishedFileDetails::_internal_set_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  favorited_ = value;
}
inline void PublishedFileDetails::set_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_favorited(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.favorited)
}

// optional uint32 followers = 38;
inline bool PublishedFileDetails::_internal_has_followers() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_followers() const {
  return _internal_has_followers();
}
inline void PublishedFileDetails::clear_followers() {
  followers_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_followers() const {
  return followers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.followers)
  return _internal_followers();
}
inline void PublishedFileDetails::_internal_set_followers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  followers_ = value;
}
inline void PublishedFileDetails::set_followers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_followers(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.followers)
}

// optional uint32 lifetime_subscriptions = 39;
inline bool PublishedFileDetails::_internal_has_lifetime_subscriptions() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_subscriptions() const {
  return _internal_has_lifetime_subscriptions();
}
inline void PublishedFileDetails::clear_lifetime_subscriptions() {
  lifetime_subscriptions_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_lifetime_subscriptions() const {
  return lifetime_subscriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::lifetime_subscriptions() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_subscriptions)
  return _internal_lifetime_subscriptions();
}
inline void PublishedFileDetails::_internal_set_lifetime_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  lifetime_subscriptions_ = value;
}
inline void PublishedFileDetails::set_lifetime_subscriptions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lifetime_subscriptions(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_subscriptions)
}

// optional uint32 lifetime_favorited = 40;
inline bool PublishedFileDetails::_internal_has_lifetime_favorited() const {
  bool value = (_has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_favorited() const {
  return _internal_has_lifetime_favorited();
}
inline void PublishedFileDetails::clear_lifetime_favorited() {
  lifetime_favorited_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_lifetime_favorited() const {
  return lifetime_favorited_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::lifetime_favorited() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_favorited)
  return _internal_lifetime_favorited();
}
inline void PublishedFileDetails::_internal_set_lifetime_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  lifetime_favorited_ = value;
}
inline void PublishedFileDetails::set_lifetime_favorited(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lifetime_favorited(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_favorited)
}

// optional uint32 lifetime_followers = 41;
inline bool PublishedFileDetails::_internal_has_lifetime_followers() const {
  bool value = (_has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_lifetime_followers() const {
  return _internal_has_lifetime_followers();
}
inline void PublishedFileDetails::clear_lifetime_followers() {
  lifetime_followers_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_lifetime_followers() const {
  return lifetime_followers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::lifetime_followers() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.lifetime_followers)
  return _internal_lifetime_followers();
}
inline void PublishedFileDetails::_internal_set_lifetime_followers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  lifetime_followers_ = value;
}
inline void PublishedFileDetails::set_lifetime_followers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lifetime_followers(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.lifetime_followers)
}

// optional uint32 views = 42;
inline bool PublishedFileDetails::_internal_has_views() const {
  bool value = (_has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_views() const {
  return _internal_has_views();
}
inline void PublishedFileDetails::clear_views() {
  views_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_views() const {
  return views_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::views() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.views)
  return _internal_views();
}
inline void PublishedFileDetails::_internal_set_views(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  views_ = value;
}
inline void PublishedFileDetails::set_views(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_views(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.views)
}

// optional uint32 image_width = 43;
inline bool PublishedFileDetails::_internal_has_image_width() const {
  bool value = (_has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_width() const {
  return _internal_has_image_width();
}
inline void PublishedFileDetails::clear_image_width() {
  image_width_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_image_width() const {
  return image_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::image_width() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_width)
  return _internal_image_width();
}
inline void PublishedFileDetails::_internal_set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  image_width_ = value;
}
inline void PublishedFileDetails::set_image_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_width)
}

// optional uint32 image_height = 44;
inline bool PublishedFileDetails::_internal_has_image_height() const {
  bool value = (_has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_height() const {
  return _internal_has_image_height();
}
inline void PublishedFileDetails::clear_image_height() {
  image_height_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_image_height() const {
  return image_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::image_height() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_height)
  return _internal_image_height();
}
inline void PublishedFileDetails::_internal_set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00008000u;
  image_height_ = value;
}
inline void PublishedFileDetails::set_image_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_height)
}

// optional string image_url = 45;
inline bool PublishedFileDetails::_internal_has_image_url() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_image_url() const {
  return _internal_has_image_url();
}
inline void PublishedFileDetails::clear_image_url() {
  image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& PublishedFileDetails::image_url() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.image_url)
  return _internal_image_url();
}
inline void PublishedFileDetails::set_image_url(const std::string& value) {
  _internal_set_image_url(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.image_url)
}
inline std::string* PublishedFileDetails::mutable_image_url() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.image_url)
  return _internal_mutable_image_url();
}
inline const std::string& PublishedFileDetails::_internal_image_url() const {
  return image_url_.Get();
}
inline void PublishedFileDetails::_internal_set_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_image_url(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.image_url)
}
inline void PublishedFileDetails::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.image_url)
}
inline void PublishedFileDetails::set_image_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  image_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.image_url)
}
inline std::string* PublishedFileDetails::_internal_mutable_image_url() {
  _has_bits_[0] |= 0x00000400u;
  return image_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_image_url() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.image_url)
  if (!_internal_has_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return image_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_image_url(std::string* image_url) {
  if (image_url != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  image_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.image_url)
}

// optional bool spoiler_tag = 46;
inline bool PublishedFileDetails::_internal_has_spoiler_tag() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_spoiler_tag() const {
  return _internal_has_spoiler_tag();
}
inline void PublishedFileDetails::clear_spoiler_tag() {
  spoiler_tag_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool PublishedFileDetails::_internal_spoiler_tag() const {
  return spoiler_tag_;
}
inline bool PublishedFileDetails::spoiler_tag() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.spoiler_tag)
  return _internal_spoiler_tag();
}
inline void PublishedFileDetails::_internal_set_spoiler_tag(bool value) {
  _has_bits_[1] |= 0x00000080u;
  spoiler_tag_ = value;
}
inline void PublishedFileDetails::set_spoiler_tag(bool value) {
  _internal_set_spoiler_tag(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.spoiler_tag)
}

// optional uint32 shortcutid = 47;
inline bool PublishedFileDetails::_internal_has_shortcutid() const {
  bool value = (_has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_shortcutid() const {
  return _internal_has_shortcutid();
}
inline void PublishedFileDetails::clear_shortcutid() {
  shortcutid_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_shortcutid() const {
  return shortcutid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::shortcutid() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutid)
  return _internal_shortcutid();
}
inline void PublishedFileDetails::_internal_set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00010000u;
  shortcutid_ = value;
}
inline void PublishedFileDetails::set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shortcutid(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutid)
}

// optional string shortcutname = 48;
inline bool PublishedFileDetails::_internal_has_shortcutname() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_shortcutname() const {
  return _internal_has_shortcutname();
}
inline void PublishedFileDetails::clear_shortcutname() {
  shortcutname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& PublishedFileDetails::shortcutname() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.shortcutname)
  return _internal_shortcutname();
}
inline void PublishedFileDetails::set_shortcutname(const std::string& value) {
  _internal_set_shortcutname(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.shortcutname)
}
inline std::string* PublishedFileDetails::mutable_shortcutname() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.shortcutname)
  return _internal_mutable_shortcutname();
}
inline const std::string& PublishedFileDetails::_internal_shortcutname() const {
  return shortcutname_.Get();
}
inline void PublishedFileDetails::_internal_set_shortcutname(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PublishedFileDetails::set_shortcutname(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  shortcutname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PublishedFileDetails.shortcutname)
}
inline void PublishedFileDetails::set_shortcutname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:PublishedFileDetails.shortcutname)
}
inline void PublishedFileDetails::set_shortcutname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  shortcutname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PublishedFileDetails.shortcutname)
}
inline std::string* PublishedFileDetails::_internal_mutable_shortcutname() {
  _has_bits_[0] |= 0x00000800u;
  return shortcutname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PublishedFileDetails::release_shortcutname() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.shortcutname)
  if (!_internal_has_shortcutname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return shortcutname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublishedFileDetails::set_allocated_shortcutname(std::string* shortcutname) {
  if (shortcutname != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  shortcutname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortcutname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.shortcutname)
}

// optional uint32 num_children = 49;
inline bool PublishedFileDetails::_internal_has_num_children() const {
  bool value = (_has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_children() const {
  return _internal_has_num_children();
}
inline void PublishedFileDetails::clear_num_children() {
  num_children_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_num_children() const {
  return num_children_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::num_children() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_children)
  return _internal_num_children();
}
inline void PublishedFileDetails::_internal_set_num_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00020000u;
  num_children_ = value;
}
inline void PublishedFileDetails::set_num_children(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_children(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_children)
}

// optional uint32 num_reports = 50;
inline bool PublishedFileDetails::_internal_has_num_reports() const {
  bool value = (_has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_num_reports() const {
  return _internal_has_num_reports();
}
inline void PublishedFileDetails::clear_num_reports() {
  num_reports_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_num_reports() const {
  return num_reports_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::num_reports() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.num_reports)
  return _internal_num_reports();
}
inline void PublishedFileDetails::_internal_set_num_reports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  num_reports_ = value;
}
inline void PublishedFileDetails::set_num_reports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_reports(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.num_reports)
}

// repeated .PublishedFileDetails.Preview previews = 51;
inline int PublishedFileDetails::_internal_previews_size() const {
  return previews_.size();
}
inline int PublishedFileDetails::previews_size() const {
  return _internal_previews_size();
}
inline void PublishedFileDetails::clear_previews() {
  previews_.Clear();
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.previews)
  return previews_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >*
PublishedFileDetails::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.previews)
  return &previews_;
}
inline const ::PublishedFileDetails_Preview& PublishedFileDetails::_internal_previews(int index) const {
  return previews_.Get(index);
}
inline const ::PublishedFileDetails_Preview& PublishedFileDetails::previews(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.previews)
  return _internal_previews(index);
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::_internal_add_previews() {
  return previews_.Add();
}
inline ::PublishedFileDetails_Preview* PublishedFileDetails::add_previews() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.previews)
  return _internal_add_previews();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Preview >&
PublishedFileDetails::previews() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.previews)
  return previews_;
}

// repeated .PublishedFileDetails.Tag tags = 52;
inline int PublishedFileDetails::_internal_tags_size() const {
  return tags_.size();
}
inline int PublishedFileDetails::tags_size() const {
  return _internal_tags_size();
}
inline void PublishedFileDetails::clear_tags() {
  tags_.Clear();
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.tags)
  return tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >*
PublishedFileDetails::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.tags)
  return &tags_;
}
inline const ::PublishedFileDetails_Tag& PublishedFileDetails::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const ::PublishedFileDetails_Tag& PublishedFileDetails::tags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.tags)
  return _internal_tags(index);
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::_internal_add_tags() {
  return tags_.Add();
}
inline ::PublishedFileDetails_Tag* PublishedFileDetails::add_tags() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.tags)
  return _internal_add_tags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Tag >&
PublishedFileDetails::tags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.tags)
  return tags_;
}

// repeated .PublishedFileDetails.Child children = 53;
inline int PublishedFileDetails::_internal_children_size() const {
  return children_.size();
}
inline int PublishedFileDetails::children_size() const {
  return _internal_children_size();
}
inline void PublishedFileDetails::clear_children() {
  children_.Clear();
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >*
PublishedFileDetails::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.children)
  return &children_;
}
inline const ::PublishedFileDetails_Child& PublishedFileDetails::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::PublishedFileDetails_Child& PublishedFileDetails::children(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.children)
  return _internal_children(index);
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::_internal_add_children() {
  return children_.Add();
}
inline ::PublishedFileDetails_Child* PublishedFileDetails::add_children() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_Child >&
PublishedFileDetails::children() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.children)
  return children_;
}

// repeated .PublishedFileDetails.KVTag kvtags = 54;
inline int PublishedFileDetails::_internal_kvtags_size() const {
  return kvtags_.size();
}
inline int PublishedFileDetails::kvtags_size() const {
  return _internal_kvtags_size();
}
inline void PublishedFileDetails::clear_kvtags() {
  kvtags_.Clear();
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::mutable_kvtags(int index) {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.kvtags)
  return kvtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >*
PublishedFileDetails::mutable_kvtags() {
  // @@protoc_insertion_point(field_mutable_list:PublishedFileDetails.kvtags)
  return &kvtags_;
}
inline const ::PublishedFileDetails_KVTag& PublishedFileDetails::_internal_kvtags(int index) const {
  return kvtags_.Get(index);
}
inline const ::PublishedFileDetails_KVTag& PublishedFileDetails::kvtags(int index) const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.kvtags)
  return _internal_kvtags(index);
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::_internal_add_kvtags() {
  return kvtags_.Add();
}
inline ::PublishedFileDetails_KVTag* PublishedFileDetails::add_kvtags() {
  // @@protoc_insertion_point(field_add:PublishedFileDetails.kvtags)
  return _internal_add_kvtags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails_KVTag >&
PublishedFileDetails::kvtags() const {
  // @@protoc_insertion_point(field_list:PublishedFileDetails.kvtags)
  return kvtags_;
}

// optional .PublishedFileDetails.VoteData vote_data = 55;
inline bool PublishedFileDetails::_internal_has_vote_data() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || vote_data_ != nullptr);
  return value;
}
inline bool PublishedFileDetails::has_vote_data() const {
  return _internal_has_vote_data();
}
inline void PublishedFileDetails::clear_vote_data() {
  if (vote_data_ != nullptr) vote_data_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::PublishedFileDetails_VoteData& PublishedFileDetails::_internal_vote_data() const {
  const ::PublishedFileDetails_VoteData* p = vote_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PublishedFileDetails_VoteData&>(
      ::_PublishedFileDetails_VoteData_default_instance_);
}
inline const ::PublishedFileDetails_VoteData& PublishedFileDetails::vote_data() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.vote_data)
  return _internal_vote_data();
}
inline void PublishedFileDetails::unsafe_arena_set_allocated_vote_data(
    ::PublishedFileDetails_VoteData* vote_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote_data_);
  }
  vote_data_ = vote_data;
  if (vote_data) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PublishedFileDetails.vote_data)
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::release_vote_data() {
  _has_bits_[0] &= ~0x00001000u;
  ::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::unsafe_arena_release_vote_data() {
  // @@protoc_insertion_point(field_release:PublishedFileDetails.vote_data)
  _has_bits_[0] &= ~0x00001000u;
  ::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = nullptr;
  return temp;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::_internal_mutable_vote_data() {
  _has_bits_[0] |= 0x00001000u;
  if (vote_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PublishedFileDetails_VoteData>(GetArena());
    vote_data_ = p;
  }
  return vote_data_;
}
inline ::PublishedFileDetails_VoteData* PublishedFileDetails::mutable_vote_data() {
  // @@protoc_insertion_point(field_mutable:PublishedFileDetails.vote_data)
  return _internal_mutable_vote_data();
}
inline void PublishedFileDetails::set_allocated_vote_data(::PublishedFileDetails_VoteData* vote_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vote_data_;
  }
  if (vote_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vote_data);
    if (message_arena != submessage_arena) {
      vote_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  vote_data_ = vote_data;
  // @@protoc_insertion_point(field_set_allocated:PublishedFileDetails.vote_data)
}

// optional uint32 time_subscribed = 56 [(.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
inline bool PublishedFileDetails::_internal_has_time_subscribed() const {
  bool value = (_has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool PublishedFileDetails::has_time_subscribed() const {
  return _internal_has_time_subscribed();
}
inline void PublishedFileDetails::clear_time_subscribed() {
  time_subscribed_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::_internal_time_subscribed() const {
  return time_subscribed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PublishedFileDetails::time_subscribed() const {
  // @@protoc_insertion_point(field_get:PublishedFileDetails.time_subscribed)
  return _internal_time_subscribed();
}
inline void PublishedFileDetails::_internal_set_time_subscribed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00080000u;
  time_subscribed_ = value;
}
inline void PublishedFileDetails::set_time_subscribed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_subscribed(value);
  // @@protoc_insertion_point(field_set:PublishedFileDetails.time_subscribed)
}

// -------------------------------------------------------------------

// CPublishedFile_GetDetails_Response

// repeated .PublishedFileDetails publishedfiledetails = 1;
inline int CPublishedFile_GetDetails_Response::_internal_publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline int CPublishedFile_GetDetails_Response::publishedfiledetails_size() const {
  return _internal_publishedfiledetails_size();
}
inline void CPublishedFile_GetDetails_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetDetails_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
inline const ::PublishedFileDetails& CPublishedFile_GetDetails_Response::_internal_publishedfiledetails(int index) const {
  return publishedfiledetails_.Get(index);
}
inline const ::PublishedFileDetails& CPublishedFile_GetDetails_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return _internal_publishedfiledetails(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::_internal_add_publishedfiledetails() {
  return publishedfiledetails_.Add();
}
inline ::PublishedFileDetails* CPublishedFile_GetDetails_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return _internal_add_publishedfiledetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetDetails_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Request

// optional uint32 appid = 1 [(.description) = "App Id to retrieve published files from."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetUserFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.appid)
}

// optional uint32 page = 3 [default = 1, (.description) = "(Optional) Starting page for results."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_page() const {
  return _internal_has_page();
}
inline void CPublishedFile_GetUserFiles_Request::clear_page() {
  page_ = 1u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.page)
  return _internal_page();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  page_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.page)
}

// optional uint32 numperpage = 4 [default = 1, (.description) = "(Optional) The number of results, per page to return."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_numperpage() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_numperpage() const {
  return _internal_has_numperpage();
}
inline void CPublishedFile_GetUserFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::_internal_numperpage() const {
  return numperpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.numperpage)
  return _internal_numperpage();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_numperpage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  numperpage_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_numperpage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numperpage(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.numperpage)
}

// optional string sortmethod = 6 [default = "lastupdated", (.description) = "(Optional) Sorting method to use on returned values."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_sortmethod() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_sortmethod() const {
  return _internal_has_sortmethod();
}
inline void CPublishedFile_GetUserFiles_Request::clear_sortmethod() {
  sortmethod_.ClearToDefault(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetUserFiles_Request::sortmethod() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.sortmethod)
  if (sortmethod_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_sortmethod_.get();
  return _internal_sortmethod();
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const std::string& value) {
  _internal_set_sortmethod(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_sortmethod() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.sortmethod)
  return _internal_mutable_sortmethod();
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_sortmethod() const {
  return sortmethod_.Get();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_sortmethod(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sortmethod_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sortmethod_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.sortmethod)
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_mutable_sortmethod() {
  _has_bits_[0] |= 0x00000001u;
  return sortmethod_.Mutable(::CPublishedFile_GetUserFiles_Request::_i_give_permission_to_break_this_code_default_sortmethod_, GetArena());
}
inline std::string* CPublishedFile_GetUserFiles_Request::release_sortmethod() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Request.sortmethod)
  if (!_internal_has_sortmethod()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sortmethod_.ReleaseNonDefault(nullptr, GetArena());
}
inline void CPublishedFile_GetUserFiles_Request::set_allocated_sortmethod(std::string* sortmethod) {
  if (sortmethod != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sortmethod_.SetAllocated(nullptr, sortmethod,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Request.sortmethod)
}

// optional bool totalonly = 7 [(.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_totalonly() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_totalonly() const {
  return _internal_has_totalonly();
}
inline void CPublishedFile_GetUserFiles_Request::clear_totalonly() {
  totalonly_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_totalonly() const {
  return totalonly_;
}
inline bool CPublishedFile_GetUserFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.totalonly)
  return _internal_totalonly();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_totalonly(bool value) {
  _has_bits_[0] |= 0x00000004u;
  totalonly_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_totalonly(bool value) {
  _internal_set_totalonly(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.totalonly)
}

// optional uint32 privacy = 9 [(.description) = "(optional) Filter by privacy settings."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_privacy() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_privacy() const {
  return _internal_has_privacy();
}
inline void CPublishedFile_GetUserFiles_Request::clear_privacy() {
  privacy_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::_internal_privacy() const {
  return privacy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Request::privacy() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.privacy)
  return _internal_privacy();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_privacy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  privacy_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_privacy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_privacy(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.privacy)
}

// optional bool ids_only = 10 [(.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
inline bool CPublishedFile_GetUserFiles_Request::_internal_has_ids_only() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Request::has_ids_only() const {
  return _internal_has_ids_only();
}
inline void CPublishedFile_GetUserFiles_Request::clear_ids_only() {
  ids_only_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetUserFiles_Request::_internal_ids_only() const {
  return ids_only_;
}
inline bool CPublishedFile_GetUserFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.ids_only)
  return _internal_ids_only();
}
inline void CPublishedFile_GetUserFiles_Request::_internal_set_ids_only(bool value) {
  _has_bits_[0] |= 0x00000008u;
  ids_only_ = value;
}
inline void CPublishedFile_GetUserFiles_Request::set_ids_only(bool value) {
  _internal_set_ids_only(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.ids_only)
}

// repeated string requiredtags = 11 [(.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
inline int CPublishedFile_GetUserFiles_Request::_internal_requiredtags_size() const {
  return requiredtags_.size();
}
inline int CPublishedFile_GetUserFiles_Request::requiredtags_size() const {
  return _internal_requiredtags_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
inline std::string* CPublishedFile_GetUserFiles_Request::add_requiredtags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_GetUserFiles_Request.requiredtags)
  return _internal_add_requiredtags();
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_requiredtags(int index) const {
  return requiredtags_.Get(index);
}
inline const std::string& CPublishedFile_GetUserFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.requiredtags)
  return _internal_requiredtags(index);
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_add_requiredtags() {
  return requiredtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(std::string&& value) {
  requiredtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.requiredtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_GetUserFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_GetUserFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 12 [(.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
inline int CPublishedFile_GetUserFiles_Request::_internal_excludedtags_size() const {
  return excludedtags_.size();
}
inline int CPublishedFile_GetUserFiles_Request::excludedtags_size() const {
  return _internal_excludedtags_size();
}
inline void CPublishedFile_GetUserFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
inline std::string* CPublishedFile_GetUserFiles_Request::add_excludedtags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_GetUserFiles_Request.excludedtags)
  return _internal_add_excludedtags();
}
inline const std::string& CPublishedFile_GetUserFiles_Request::_internal_excludedtags(int index) const {
  return excludedtags_.Get(index);
}
inline const std::string& CPublishedFile_GetUserFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Request.excludedtags)
  return _internal_excludedtags(index);
}
inline std::string* CPublishedFile_GetUserFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline std::string* CPublishedFile_GetUserFiles_Request::_internal_add_excludedtags() {
  return excludedtags_.Add();
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(std::string&& value) {
  excludedtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_GetUserFiles_Request.excludedtags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_GetUserFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_GetUserFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Request.excludedtags)
  return &excludedtags_;
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response_App

// optional uint32 appid = 1;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response_App::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response_App::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.appid)
  return _internal_appid();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.appid)
}

// optional string name = 2;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_name() const {
  return _internal_has_name();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_GetUserFiles_Response_App::name() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.name)
  return _internal_name();
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.name)
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.App.name)
  return _internal_mutable_name();
}
inline const std::string& CPublishedFile_GetUserFiles_Response_App::_internal_name() const {
  return name_.Get();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_GetUserFiles_Response.App.name)
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_GetUserFiles_Response.App.name)
}
inline void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_GetUserFiles_Response.App.name)
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_GetUserFiles_Response_App::release_name() {
  // @@protoc_insertion_point(field_release:CPublishedFile_GetUserFiles_Response.App.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_GetUserFiles_Response_App::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_GetUserFiles_Response.App.name)
}

// optional uint32 shortcutid = 3;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_shortcutid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_shortcutid() const {
  return _internal_has_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_shortcutid() {
  shortcutid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response_App::_internal_shortcutid() const {
  return shortcutid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response_App::shortcutid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.shortcutid)
  return _internal_shortcutid();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  shortcutid_ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_shortcutid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shortcutid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.shortcutid)
}

// optional bool private = 4;
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_has_private_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response_App::has_private_() const {
  return _internal_has_private_();
}
inline void CPublishedFile_GetUserFiles_Response_App::clear_private_() {
  private__ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_GetUserFiles_Response_App::_internal_private_() const {
  return private__;
}
inline bool CPublishedFile_GetUserFiles_Response_App::private_() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.App.private)
  return _internal_private_();
}
inline void CPublishedFile_GetUserFiles_Response_App::_internal_set_private_(bool value) {
  _has_bits_[0] |= 0x00000008u;
  private__ = value;
}
inline void CPublishedFile_GetUserFiles_Response_App::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.App.private)
}

// -------------------------------------------------------------------

// CPublishedFile_GetUserFiles_Response

// optional uint32 total = 1;
inline bool CPublishedFile_GetUserFiles_Response::_internal_has_total() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response::has_total() const {
  return _internal_has_total();
}
inline void CPublishedFile_GetUserFiles_Response::clear_total() {
  total_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.total)
  return _internal_total();
}
inline void CPublishedFile_GetUserFiles_Response::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_ = value;
}
inline void CPublishedFile_GetUserFiles_Response::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.total)
}

// optional uint32 startindex = 2;
inline bool CPublishedFile_GetUserFiles_Response::_internal_has_startindex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_GetUserFiles_Response::has_startindex() const {
  return _internal_has_startindex();
}
inline void CPublishedFile_GetUserFiles_Response::clear_startindex() {
  startindex_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response::_internal_startindex() const {
  return startindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_GetUserFiles_Response::startindex() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.startindex)
  return _internal_startindex();
}
inline void CPublishedFile_GetUserFiles_Response::_internal_set_startindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  startindex_ = value;
}
inline void CPublishedFile_GetUserFiles_Response::set_startindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startindex(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_GetUserFiles_Response.startindex)
}

// repeated .PublishedFileDetails publishedfiledetails = 3;
inline int CPublishedFile_GetUserFiles_Response::_internal_publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
inline int CPublishedFile_GetUserFiles_Response::publishedfiledetails_size() const {
  return _internal_publishedfiledetails_size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >*
CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
inline const ::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::_internal_publishedfiledetails(int index) const {
  return publishedfiledetails_.Get(index);
}
inline const ::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return _internal_publishedfiledetails(index);
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::_internal_add_publishedfiledetails() {
  return publishedfiledetails_.Add();
}
inline ::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return _internal_add_publishedfiledetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PublishedFileDetails >&
CPublishedFile_GetUserFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// repeated .CPublishedFile_GetUserFiles_Response.App apps = 4;
inline int CPublishedFile_GetUserFiles_Response::_internal_apps_size() const {
  return apps_.size();
}
inline int CPublishedFile_GetUserFiles_Response::apps_size() const {
  return _internal_apps_size();
}
inline void CPublishedFile_GetUserFiles_Response::clear_apps() {
  apps_.Clear();
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >*
CPublishedFile_GetUserFiles_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_GetUserFiles_Response.apps)
  return &apps_;
}
inline const ::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::_internal_apps(int index) const {
  return apps_.Get(index);
}
inline const ::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_GetUserFiles_Response.apps)
  return _internal_apps(index);
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::_internal_add_apps() {
  return apps_.Add();
}
inline ::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::add_apps() {
  // @@protoc_insertion_point(field_add:CPublishedFile_GetUserFiles_Response.apps)
  return _internal_add_apps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CPublishedFile_GetUserFiles_Response_App >&
CPublishedFile_GetUserFiles_Response::apps() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_GetUserFiles_Response.apps)
  return apps_;
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Request

// optional uint32 appid = 1 [(.description) = "App Id this published file belongs to."];
inline bool CPublishedFile_Update_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_Update_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Update_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Update_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_Update_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CPublishedFile_Update_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.appid)
}

// optional fixed64 publishedfileid = 2 [(.description) = "Published file id of the file we\'d like update."];
inline bool CPublishedFile_Update_Request::_internal_has_publishedfileid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_publishedfileid() const {
  return _internal_has_publishedfileid();
}
inline void CPublishedFile_Update_Request::clear_publishedfileid() {
  publishedfileid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Update_Request::_internal_publishedfileid() const {
  return publishedfileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CPublishedFile_Update_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.publishedfileid)
  return _internal_publishedfileid();
}
inline void CPublishedFile_Update_Request::_internal_set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  publishedfileid_ = value;
}
inline void CPublishedFile_Update_Request::set_publishedfileid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_publishedfileid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.publishedfileid)
}

// optional string title = 3 [(.description) = "(Optional) Title of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_title() const {
  return _internal_has_title();
}
inline void CPublishedFile_Update_Request::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CPublishedFile_Update_Request::title() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.title)
  return _internal_title();
}
inline void CPublishedFile_Update_Request::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.title)
}
inline std::string* CPublishedFile_Update_Request::mutable_title() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.title)
  return _internal_mutable_title();
}
inline const std::string& CPublishedFile_Update_Request::_internal_title() const {
  return title_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Update_Request::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Update_Request.title)
}
inline void CPublishedFile_Update_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.title)
}
inline void CPublishedFile_Update_Request::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.title)
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Update_Request::release_title() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Update_Request::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.title)
}

// optional string file_description = 4 [(.description) = "(Optional) Description of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_file_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_file_description() const {
  return _internal_has_file_description();
}
inline void CPublishedFile_Update_Request::clear_file_description() {
  file_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CPublishedFile_Update_Request::file_description() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.file_description)
  return _internal_file_description();
}
inline void CPublishedFile_Update_Request::set_file_description(const std::string& value) {
  _internal_set_file_description(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.file_description)
}
inline std::string* CPublishedFile_Update_Request::mutable_file_description() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.file_description)
  return _internal_mutable_file_description();
}
inline const std::string& CPublishedFile_Update_Request::_internal_file_description() const {
  return file_description_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_file_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Update_Request::set_file_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  file_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Update_Request.file_description)
}
inline void CPublishedFile_Update_Request::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.file_description)
}
inline void CPublishedFile_Update_Request::set_file_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  file_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.file_description)
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_file_description() {
  _has_bits_[0] |= 0x00000002u;
  return file_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Update_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.file_description)
  if (!_internal_has_file_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return file_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Update_Request::set_allocated_file_description(std::string* file_description) {
  if (file_description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  file_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.file_description)
}

// optional uint32 visibility = 5 [(.description) = "(Optional) Visibility of the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_visibility() const {
  return _internal_has_visibility();
}
inline void CPublishedFile_Update_Request::clear_visibility() {
  visibility_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Update_Request::_internal_visibility() const {
  return visibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_Update_Request::visibility() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.visibility)
  return _internal_visibility();
}
inline void CPublishedFile_Update_Request::_internal_set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  visibility_ = value;
}
inline void CPublishedFile_Update_Request::set_visibility(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.visibility)
}

// repeated string tags = 6 [(.description) = "(Optional) Set of tags for the published file."];
inline int CPublishedFile_Update_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_Update_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_Update_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_Update_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_Update_Request.tags)
  return _internal_add_tags();
}
inline const std::string& CPublishedFile_Update_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_Update_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_Update_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_Update_Request::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_Update_Request::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.tags)
}
inline std::string* CPublishedFile_Update_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_Update_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_Update_Request.tags)
}
inline void CPublishedFile_Update_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_Update_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_Update_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_Update_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_Update_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_Update_Request.tags)
  return &tags_;
}

// optional string filename = 7 [(.description) = "(Optional) Filename for the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CPublishedFile_Update_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CPublishedFile_Update_Request::filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.filename)
  return _internal_filename();
}
inline void CPublishedFile_Update_Request::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.filename)
}
inline std::string* CPublishedFile_Update_Request::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.filename)
  return _internal_mutable_filename();
}
inline const std::string& CPublishedFile_Update_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Update_Request::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Update_Request.filename)
}
inline void CPublishedFile_Update_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.filename)
}
inline void CPublishedFile_Update_Request::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.filename)
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000004u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Update_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Update_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.filename)
}

// optional string preview_filename = 8 [(.description) = "(Optional) Preview filename for the published file."];
inline bool CPublishedFile_Update_Request::_internal_has_preview_filename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_Update_Request::has_preview_filename() const {
  return _internal_has_preview_filename();
}
inline void CPublishedFile_Update_Request::clear_preview_filename() {
  preview_filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CPublishedFile_Update_Request::preview_filename() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_Update_Request.preview_filename)
  return _internal_preview_filename();
}
inline void CPublishedFile_Update_Request::set_preview_filename(const std::string& value) {
  _internal_set_preview_filename(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_Update_Request.preview_filename)
}
inline std::string* CPublishedFile_Update_Request::mutable_preview_filename() {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_Update_Request.preview_filename)
  return _internal_mutable_preview_filename();
}
inline const std::string& CPublishedFile_Update_Request::_internal_preview_filename() const {
  return preview_filename_.Get();
}
inline void CPublishedFile_Update_Request::_internal_set_preview_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CPublishedFile_Update_Request::set_preview_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  preview_filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CPublishedFile_Update_Request.preview_filename)
}
inline void CPublishedFile_Update_Request::set_preview_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CPublishedFile_Update_Request.preview_filename)
}
inline void CPublishedFile_Update_Request::set_preview_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  preview_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_Update_Request.preview_filename)
}
inline std::string* CPublishedFile_Update_Request::_internal_mutable_preview_filename() {
  _has_bits_[0] |= 0x00000008u;
  return preview_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CPublishedFile_Update_Request::release_preview_filename() {
  // @@protoc_insertion_point(field_release:CPublishedFile_Update_Request.preview_filename)
  if (!_internal_has_preview_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return preview_filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CPublishedFile_Update_Request::set_allocated_preview_filename(std::string* preview_filename) {
  if (preview_filename != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preview_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preview_filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CPublishedFile_Update_Request.preview_filename)
}

// -------------------------------------------------------------------

// CPublishedFile_Update_Response

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Request

// optional uint32 appid = 1;
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::appid() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.appid)
  return _internal_appid();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.appid)
}

// optional uint32 matching_file_type = 2 [(.description) = "EPublishedFileInfoMatchingFileType"];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_matching_file_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_matching_file_type() const {
  return _internal_has_matching_file_type();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_matching_file_type() {
  matching_file_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::_internal_matching_file_type() const {
  return matching_file_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::matching_file_type() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
  return _internal_matching_file_type();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_matching_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  matching_file_type_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_matching_file_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matching_file_type(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
}

// repeated string tags = 3 [(.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
inline int CPublishedFile_RefreshVotingQueue_Request::_internal_tags_size() const {
  return tags_.size();
}
inline int CPublishedFile_RefreshVotingQueue_Request::tags_size() const {
  return _internal_tags_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_tags() {
  tags_.Clear();
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_RefreshVotingQueue_Request.tags)
  return _internal_add_tags();
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.tags)
  return _internal_tags(index);
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.tags)
  tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::_internal_add_tags() {
  return tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_RefreshVotingQueue_Request::tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.tags)
  return &tags_;
}

// optional bool match_all_tags = 4 [default = true, (.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_match_all_tags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_match_all_tags() const {
  return _internal_has_match_all_tags();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_match_all_tags() const {
  return match_all_tags_;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
  return _internal_match_all_tags();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_match_all_tags(bool value) {
  _has_bits_[0] |= 0x00000008u;
  match_all_tags_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_match_all_tags(bool value) {
  _internal_set_match_all_tags(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
}

// repeated string excluded_tags = 5 [(.description) = "Exclude any files that have any of these tags."];
inline int CPublishedFile_RefreshVotingQueue_Request::_internal_excluded_tags_size() const {
  return excluded_tags_.size();
}
inline int CPublishedFile_RefreshVotingQueue_Request::excluded_tags_size() const {
  return _internal_excluded_tags_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_excluded_tags() {
  excluded_tags_.Clear();
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags() {
  // @@protoc_insertion_point(field_add_mutable:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return _internal_add_excluded_tags();
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::_internal_excluded_tags(int index) const {
  return excluded_tags_.Get(index);
}
inline const std::string& CPublishedFile_RefreshVotingQueue_Request::excluded_tags(int index) const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return _internal_excluded_tags(index);
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Mutable(index);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  excluded_tags_.Mutable(index)->assign(value);
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  excluded_tags_.Mutable(index)->assign(std::move(value));
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value, size_t size) {
  excluded_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline std::string* CPublishedFile_RefreshVotingQueue_Request::_internal_add_excluded_tags() {
  return excluded_tags_.Add();
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const std::string& value) {
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(std::string&& value) {
  excluded_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value, size_t size) {
  excluded_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CPublishedFile_RefreshVotingQueue_Request::excluded_tags() const {
  // @@protoc_insertion_point(field_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags() {
  // @@protoc_insertion_point(field_mutable_list:CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return &excluded_tags_;
}

// optional uint32 desired_queue_size = 6 [(.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
inline bool CPublishedFile_RefreshVotingQueue_Request::_internal_has_desired_queue_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CPublishedFile_RefreshVotingQueue_Request::has_desired_queue_size() const {
  return _internal_has_desired_queue_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::clear_desired_queue_size() {
  desired_queue_size_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::_internal_desired_queue_size() const {
  return desired_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CPublishedFile_RefreshVotingQueue_Request::desired_queue_size() const {
  // @@protoc_insertion_point(field_get:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
  return _internal_desired_queue_size();
}
inline void CPublishedFile_RefreshVotingQueue_Request::_internal_set_desired_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  desired_queue_size_ = value;
}
inline void CPublishedFile_RefreshVotingQueue_Request::set_desired_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_desired_queue_size(value);
  // @@protoc_insertion_point(field_set:CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
}

// -------------------------------------------------------------------

// CPublishedFile_RefreshVotingQueue_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fpublishedfile_2esteamworkssdk_2eproto
