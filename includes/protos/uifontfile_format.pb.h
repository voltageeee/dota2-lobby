// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uifontfile_format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uifontfile_5fformat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uifontfile_5fformat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uifontfile_5fformat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uifontfile_5fformat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uifontfile_5fformat_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_uifontfile_5fformat_2eproto_metadata_getter(int index);
class CUIFontFilePB;
struct CUIFontFilePBDefaultTypeInternal;
extern CUIFontFilePBDefaultTypeInternal _CUIFontFilePB_default_instance_;
class CUIFontFilePackagePB;
struct CUIFontFilePackagePBDefaultTypeInternal;
extern CUIFontFilePackagePBDefaultTypeInternal _CUIFontFilePackagePB_default_instance_;
class CUIFontFilePackagePB_CUIEncryptedFontFilePB;
struct CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal;
extern CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal _CUIFontFilePackagePB_CUIEncryptedFontFilePB_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CUIFontFilePB* Arena::CreateMaybeMessage<::CUIFontFilePB>(Arena*);
template<> ::CUIFontFilePackagePB* Arena::CreateMaybeMessage<::CUIFontFilePackagePB>(Arena*);
template<> ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* Arena::CreateMaybeMessage<::CUIFontFilePackagePB_CUIEncryptedFontFilePB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CUIFontFilePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUIFontFilePB) */ {
 public:
  inline CUIFontFilePB() : CUIFontFilePB(nullptr) {}
  virtual ~CUIFontFilePB();
  explicit constexpr CUIFontFilePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUIFontFilePB(const CUIFontFilePB& from);
  CUIFontFilePB(CUIFontFilePB&& from) noexcept
    : CUIFontFilePB() {
    *this = ::std::move(from);
  }

  inline CUIFontFilePB& operator=(const CUIFontFilePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUIFontFilePB& operator=(CUIFontFilePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUIFontFilePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUIFontFilePB* internal_default_instance() {
    return reinterpret_cast<const CUIFontFilePB*>(
               &_CUIFontFilePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CUIFontFilePB& a, CUIFontFilePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CUIFontFilePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUIFontFilePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUIFontFilePB* New() const final {
    return CreateMaybeMessage<CUIFontFilePB>(nullptr);
  }

  CUIFontFilePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUIFontFilePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUIFontFilePB& from);
  void MergeFrom(const CUIFontFilePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUIFontFilePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUIFontFilePB";
  }
  protected:
  explicit CUIFontFilePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_uifontfile_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontFileNameFieldNumber = 1,
    kOpentypeFontDataFieldNumber = 2,
  };
  // optional string font_file_name = 1;
  bool has_font_file_name() const;
  private:
  bool _internal_has_font_file_name() const;
  public:
  void clear_font_file_name();
  const std::string& font_file_name() const;
  void set_font_file_name(const std::string& value);
  void set_font_file_name(std::string&& value);
  void set_font_file_name(const char* value);
  void set_font_file_name(const char* value, size_t size);
  std::string* mutable_font_file_name();
  std::string* release_font_file_name();
  void set_allocated_font_file_name(std::string* font_file_name);
  private:
  const std::string& _internal_font_file_name() const;
  void _internal_set_font_file_name(const std::string& value);
  std::string* _internal_mutable_font_file_name();
  public:

  // optional bytes opentype_font_data = 2;
  bool has_opentype_font_data() const;
  private:
  bool _internal_has_opentype_font_data() const;
  public:
  void clear_opentype_font_data();
  const std::string& opentype_font_data() const;
  void set_opentype_font_data(const std::string& value);
  void set_opentype_font_data(std::string&& value);
  void set_opentype_font_data(const char* value);
  void set_opentype_font_data(const void* value, size_t size);
  std::string* mutable_opentype_font_data();
  std::string* release_opentype_font_data();
  void set_allocated_opentype_font_data(std::string* opentype_font_data);
  private:
  const std::string& _internal_opentype_font_data() const;
  void _internal_set_opentype_font_data(const std::string& value);
  std::string* _internal_mutable_opentype_font_data();
  public:

  // @@protoc_insertion_point(class_scope:CUIFontFilePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opentype_font_data_;
  friend struct ::TableStruct_uifontfile_5fformat_2eproto;
};
// -------------------------------------------------------------------

class CUIFontFilePackagePB_CUIEncryptedFontFilePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUIFontFilePackagePB.CUIEncryptedFontFilePB) */ {
 public:
  inline CUIFontFilePackagePB_CUIEncryptedFontFilePB() : CUIFontFilePackagePB_CUIEncryptedFontFilePB(nullptr) {}
  virtual ~CUIFontFilePackagePB_CUIEncryptedFontFilePB();
  explicit constexpr CUIFontFilePackagePB_CUIEncryptedFontFilePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUIFontFilePackagePB_CUIEncryptedFontFilePB(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);
  CUIFontFilePackagePB_CUIEncryptedFontFilePB(CUIFontFilePackagePB_CUIEncryptedFontFilePB&& from) noexcept
    : CUIFontFilePackagePB_CUIEncryptedFontFilePB() {
    *this = ::std::move(from);
  }

  inline CUIFontFilePackagePB_CUIEncryptedFontFilePB& operator=(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUIFontFilePackagePB_CUIEncryptedFontFilePB& operator=(CUIFontFilePackagePB_CUIEncryptedFontFilePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUIFontFilePackagePB_CUIEncryptedFontFilePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUIFontFilePackagePB_CUIEncryptedFontFilePB* internal_default_instance() {
    return reinterpret_cast<const CUIFontFilePackagePB_CUIEncryptedFontFilePB*>(
               &_CUIFontFilePackagePB_CUIEncryptedFontFilePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CUIFontFilePackagePB_CUIEncryptedFontFilePB& a, CUIFontFilePackagePB_CUIEncryptedFontFilePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CUIFontFilePackagePB_CUIEncryptedFontFilePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUIFontFilePackagePB_CUIEncryptedFontFilePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUIFontFilePackagePB_CUIEncryptedFontFilePB* New() const final {
    return CreateMaybeMessage<CUIFontFilePackagePB_CUIEncryptedFontFilePB>(nullptr);
  }

  CUIFontFilePackagePB_CUIEncryptedFontFilePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUIFontFilePackagePB_CUIEncryptedFontFilePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);
  void MergeFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUIFontFilePackagePB_CUIEncryptedFontFilePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUIFontFilePackagePB.CUIEncryptedFontFilePB";
  }
  protected:
  explicit CUIFontFilePackagePB_CUIEncryptedFontFilePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_uifontfile_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedContentsFieldNumber = 1,
  };
  // optional bytes encrypted_contents = 1;
  bool has_encrypted_contents() const;
  private:
  bool _internal_has_encrypted_contents() const;
  public:
  void clear_encrypted_contents();
  const std::string& encrypted_contents() const;
  void set_encrypted_contents(const std::string& value);
  void set_encrypted_contents(std::string&& value);
  void set_encrypted_contents(const char* value);
  void set_encrypted_contents(const void* value, size_t size);
  std::string* mutable_encrypted_contents();
  std::string* release_encrypted_contents();
  void set_allocated_encrypted_contents(std::string* encrypted_contents);
  private:
  const std::string& _internal_encrypted_contents() const;
  void _internal_set_encrypted_contents(const std::string& value);
  std::string* _internal_mutable_encrypted_contents();
  public:

  // @@protoc_insertion_point(class_scope:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_contents_;
  friend struct ::TableStruct_uifontfile_5fformat_2eproto;
};
// -------------------------------------------------------------------

class CUIFontFilePackagePB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CUIFontFilePackagePB) */ {
 public:
  inline CUIFontFilePackagePB() : CUIFontFilePackagePB(nullptr) {}
  virtual ~CUIFontFilePackagePB();
  explicit constexpr CUIFontFilePackagePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CUIFontFilePackagePB(const CUIFontFilePackagePB& from);
  CUIFontFilePackagePB(CUIFontFilePackagePB&& from) noexcept
    : CUIFontFilePackagePB() {
    *this = ::std::move(from);
  }

  inline CUIFontFilePackagePB& operator=(const CUIFontFilePackagePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CUIFontFilePackagePB& operator=(CUIFontFilePackagePB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CUIFontFilePackagePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CUIFontFilePackagePB* internal_default_instance() {
    return reinterpret_cast<const CUIFontFilePackagePB*>(
               &_CUIFontFilePackagePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CUIFontFilePackagePB& a, CUIFontFilePackagePB& b) {
    a.Swap(&b);
  }
  inline void Swap(CUIFontFilePackagePB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CUIFontFilePackagePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CUIFontFilePackagePB* New() const final {
    return CreateMaybeMessage<CUIFontFilePackagePB>(nullptr);
  }

  CUIFontFilePackagePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CUIFontFilePackagePB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CUIFontFilePackagePB& from);
  void MergeFrom(const CUIFontFilePackagePB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CUIFontFilePackagePB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CUIFontFilePackagePB";
  }
  protected:
  explicit CUIFontFilePackagePB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_uifontfile_5fformat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CUIFontFilePackagePB_CUIEncryptedFontFilePB CUIEncryptedFontFilePB;

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedFontFilesFieldNumber = 2,
    kPackageVersionFieldNumber = 1,
  };
  // repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
  int encrypted_font_files_size() const;
  private:
  int _internal_encrypted_font_files_size() const;
  public:
  void clear_encrypted_font_files();
  ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* mutable_encrypted_font_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >*
      mutable_encrypted_font_files();
  private:
  const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& _internal_encrypted_font_files(int index) const;
  ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* _internal_add_encrypted_font_files();
  public:
  const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& encrypted_font_files(int index) const;
  ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* add_encrypted_font_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >&
      encrypted_font_files() const;

  // required uint32 package_version = 1;
  bool has_package_version() const;
  private:
  bool _internal_has_package_version() const;
  public:
  void clear_package_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 package_version() const;
  void set_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_package_version() const;
  void _internal_set_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CUIFontFilePackagePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB > encrypted_font_files_;
  ::PROTOBUF_NAMESPACE_ID::uint32 package_version_;
  friend struct ::TableStruct_uifontfile_5fformat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CUIFontFilePB

// optional string font_file_name = 1;
inline bool CUIFontFilePB::_internal_has_font_file_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUIFontFilePB::has_font_file_name() const {
  return _internal_has_font_file_name();
}
inline void CUIFontFilePB::clear_font_file_name() {
  font_file_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUIFontFilePB::font_file_name() const {
  // @@protoc_insertion_point(field_get:CUIFontFilePB.font_file_name)
  return _internal_font_file_name();
}
inline void CUIFontFilePB::set_font_file_name(const std::string& value) {
  _internal_set_font_file_name(value);
  // @@protoc_insertion_point(field_set:CUIFontFilePB.font_file_name)
}
inline std::string* CUIFontFilePB::mutable_font_file_name() {
  // @@protoc_insertion_point(field_mutable:CUIFontFilePB.font_file_name)
  return _internal_mutable_font_file_name();
}
inline const std::string& CUIFontFilePB::_internal_font_file_name() const {
  return font_file_name_.Get();
}
inline void CUIFontFilePB::_internal_set_font_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUIFontFilePB::set_font_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  font_file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CUIFontFilePB.font_file_name)
}
inline void CUIFontFilePB::set_font_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  font_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CUIFontFilePB.font_file_name)
}
inline void CUIFontFilePB::set_font_file_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  font_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CUIFontFilePB.font_file_name)
}
inline std::string* CUIFontFilePB::_internal_mutable_font_file_name() {
  _has_bits_[0] |= 0x00000001u;
  return font_file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUIFontFilePB::release_font_file_name() {
  // @@protoc_insertion_point(field_release:CUIFontFilePB.font_file_name)
  if (!_internal_has_font_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return font_file_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUIFontFilePB::set_allocated_font_file_name(std::string* font_file_name) {
  if (font_file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), font_file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CUIFontFilePB.font_file_name)
}

// optional bytes opentype_font_data = 2;
inline bool CUIFontFilePB::_internal_has_opentype_font_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CUIFontFilePB::has_opentype_font_data() const {
  return _internal_has_opentype_font_data();
}
inline void CUIFontFilePB::clear_opentype_font_data() {
  opentype_font_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CUIFontFilePB::opentype_font_data() const {
  // @@protoc_insertion_point(field_get:CUIFontFilePB.opentype_font_data)
  return _internal_opentype_font_data();
}
inline void CUIFontFilePB::set_opentype_font_data(const std::string& value) {
  _internal_set_opentype_font_data(value);
  // @@protoc_insertion_point(field_set:CUIFontFilePB.opentype_font_data)
}
inline std::string* CUIFontFilePB::mutable_opentype_font_data() {
  // @@protoc_insertion_point(field_mutable:CUIFontFilePB.opentype_font_data)
  return _internal_mutable_opentype_font_data();
}
inline const std::string& CUIFontFilePB::_internal_opentype_font_data() const {
  return opentype_font_data_.Get();
}
inline void CUIFontFilePB::_internal_set_opentype_font_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  opentype_font_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUIFontFilePB::set_opentype_font_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  opentype_font_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CUIFontFilePB.opentype_font_data)
}
inline void CUIFontFilePB::set_opentype_font_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  opentype_font_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CUIFontFilePB.opentype_font_data)
}
inline void CUIFontFilePB::set_opentype_font_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  opentype_font_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CUIFontFilePB.opentype_font_data)
}
inline std::string* CUIFontFilePB::_internal_mutable_opentype_font_data() {
  _has_bits_[0] |= 0x00000002u;
  return opentype_font_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUIFontFilePB::release_opentype_font_data() {
  // @@protoc_insertion_point(field_release:CUIFontFilePB.opentype_font_data)
  if (!_internal_has_opentype_font_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return opentype_font_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUIFontFilePB::set_allocated_opentype_font_data(std::string* opentype_font_data) {
  if (opentype_font_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  opentype_font_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opentype_font_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CUIFontFilePB.opentype_font_data)
}

// -------------------------------------------------------------------

// CUIFontFilePackagePB_CUIEncryptedFontFilePB

// optional bytes encrypted_contents = 1;
inline bool CUIFontFilePackagePB_CUIEncryptedFontFilePB::_internal_has_encrypted_contents() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUIFontFilePackagePB_CUIEncryptedFontFilePB::has_encrypted_contents() const {
  return _internal_has_encrypted_contents();
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::clear_encrypted_contents() {
  encrypted_contents_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CUIFontFilePackagePB_CUIEncryptedFontFilePB::encrypted_contents() const {
  // @@protoc_insertion_point(field_get:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
  return _internal_encrypted_contents();
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const std::string& value) {
  _internal_set_encrypted_contents(value);
  // @@protoc_insertion_point(field_set:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
}
inline std::string* CUIFontFilePackagePB_CUIEncryptedFontFilePB::mutable_encrypted_contents() {
  // @@protoc_insertion_point(field_mutable:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
  return _internal_mutable_encrypted_contents();
}
inline const std::string& CUIFontFilePackagePB_CUIEncryptedFontFilePB::_internal_encrypted_contents() const {
  return encrypted_contents_.Get();
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::_internal_set_encrypted_contents(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_contents_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypted_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_encrypted_contents(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
}
inline std::string* CUIFontFilePackagePB_CUIEncryptedFontFilePB::_internal_mutable_encrypted_contents() {
  _has_bits_[0] |= 0x00000001u;
  return encrypted_contents_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CUIFontFilePackagePB_CUIEncryptedFontFilePB::release_encrypted_contents() {
  // @@protoc_insertion_point(field_release:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
  if (!_internal_has_encrypted_contents()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_contents_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CUIFontFilePackagePB_CUIEncryptedFontFilePB::set_allocated_encrypted_contents(std::string* encrypted_contents) {
  if (encrypted_contents != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_contents,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CUIFontFilePackagePB.CUIEncryptedFontFilePB.encrypted_contents)
}

// -------------------------------------------------------------------

// CUIFontFilePackagePB

// required uint32 package_version = 1;
inline bool CUIFontFilePackagePB::_internal_has_package_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CUIFontFilePackagePB::has_package_version() const {
  return _internal_has_package_version();
}
inline void CUIFontFilePackagePB::clear_package_version() {
  package_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CUIFontFilePackagePB::_internal_package_version() const {
  return package_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CUIFontFilePackagePB::package_version() const {
  // @@protoc_insertion_point(field_get:CUIFontFilePackagePB.package_version)
  return _internal_package_version();
}
inline void CUIFontFilePackagePB::_internal_set_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  package_version_ = value;
}
inline void CUIFontFilePackagePB::set_package_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_package_version(value);
  // @@protoc_insertion_point(field_set:CUIFontFilePackagePB.package_version)
}

// repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
inline int CUIFontFilePackagePB::_internal_encrypted_font_files_size() const {
  return encrypted_font_files_.size();
}
inline int CUIFontFilePackagePB::encrypted_font_files_size() const {
  return _internal_encrypted_font_files_size();
}
inline void CUIFontFilePackagePB::clear_encrypted_font_files() {
  encrypted_font_files_.Clear();
}
inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* CUIFontFilePackagePB::mutable_encrypted_font_files(int index) {
  // @@protoc_insertion_point(field_mutable:CUIFontFilePackagePB.encrypted_font_files)
  return encrypted_font_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >*
CUIFontFilePackagePB::mutable_encrypted_font_files() {
  // @@protoc_insertion_point(field_mutable_list:CUIFontFilePackagePB.encrypted_font_files)
  return &encrypted_font_files_;
}
inline const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& CUIFontFilePackagePB::_internal_encrypted_font_files(int index) const {
  return encrypted_font_files_.Get(index);
}
inline const ::CUIFontFilePackagePB_CUIEncryptedFontFilePB& CUIFontFilePackagePB::encrypted_font_files(int index) const {
  // @@protoc_insertion_point(field_get:CUIFontFilePackagePB.encrypted_font_files)
  return _internal_encrypted_font_files(index);
}
inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* CUIFontFilePackagePB::_internal_add_encrypted_font_files() {
  return encrypted_font_files_.Add();
}
inline ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* CUIFontFilePackagePB::add_encrypted_font_files() {
  // @@protoc_insertion_point(field_add:CUIFontFilePackagePB.encrypted_font_files)
  return _internal_add_encrypted_font_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >&
CUIFontFilePackagePB::encrypted_font_files() const {
  // @@protoc_insertion_point(field_list:CUIFontFilePackagePB.encrypted_font_files)
  return encrypted_font_files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uifontfile_5fformat_2eproto
