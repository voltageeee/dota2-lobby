// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages_auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steamnetworkingsockets_messages_certs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steamdatagram_5fmessages_5fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steamdatagram_5fmessages_5fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fauth_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(int index);
class CMsgSteamDatagramCachedCredentialsForApp;
struct CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal;
extern CMsgSteamDatagramCachedCredentialsForAppDefaultTypeInternal _CMsgSteamDatagramCachedCredentialsForApp_default_instance_;
class CMsgSteamDatagramGameCoordinatorServerLogin;
struct CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal;
extern CMsgSteamDatagramGameCoordinatorServerLoginDefaultTypeInternal _CMsgSteamDatagramGameCoordinatorServerLogin_default_instance_;
class CMsgSteamDatagramHostedServerAddressPlaintext;
struct CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal;
extern CMsgSteamDatagramHostedServerAddressPlaintextDefaultTypeInternal _CMsgSteamDatagramHostedServerAddressPlaintext_default_instance_;
class CMsgSteamDatagramRelayAuthTicket;
struct CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal;
extern CMsgSteamDatagramRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_default_instance_;
class CMsgSteamDatagramRelayAuthTicket_ExtraField;
struct CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal;
extern CMsgSteamDatagramRelayAuthTicket_ExtraFieldDefaultTypeInternal _CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_;
class CMsgSteamDatagramSignedGameCoordinatorServerLogin;
struct CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal;
extern CMsgSteamDatagramSignedGameCoordinatorServerLoginDefaultTypeInternal _CMsgSteamDatagramSignedGameCoordinatorServerLogin_default_instance_;
class CMsgSteamDatagramSignedRelayAuthTicket;
struct CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal;
extern CMsgSteamDatagramSignedRelayAuthTicketDefaultTypeInternal _CMsgSteamDatagramSignedRelayAuthTicket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgSteamDatagramCachedCredentialsForApp* Arena::CreateMaybeMessage<::CMsgSteamDatagramCachedCredentialsForApp>(Arena*);
template<> ::CMsgSteamDatagramGameCoordinatorServerLogin* Arena::CreateMaybeMessage<::CMsgSteamDatagramGameCoordinatorServerLogin>(Arena*);
template<> ::CMsgSteamDatagramHostedServerAddressPlaintext* Arena::CreateMaybeMessage<::CMsgSteamDatagramHostedServerAddressPlaintext>(Arena*);
template<> ::CMsgSteamDatagramRelayAuthTicket* Arena::CreateMaybeMessage<::CMsgSteamDatagramRelayAuthTicket>(Arena*);
template<> ::CMsgSteamDatagramRelayAuthTicket_ExtraField* Arena::CreateMaybeMessage<::CMsgSteamDatagramRelayAuthTicket_ExtraField>(Arena*);
template<> ::CMsgSteamDatagramSignedGameCoordinatorServerLogin* Arena::CreateMaybeMessage<::CMsgSteamDatagramSignedGameCoordinatorServerLogin>(Arena*);
template<> ::CMsgSteamDatagramSignedRelayAuthTicket* Arena::CreateMaybeMessage<::CMsgSteamDatagramSignedRelayAuthTicket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CMsgSteamDatagramRelayAuthTicket_ExtraField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramRelayAuthTicket.ExtraField) */ {
 public:
  inline CMsgSteamDatagramRelayAuthTicket_ExtraField() : CMsgSteamDatagramRelayAuthTicket_ExtraField(nullptr) {}
  virtual ~CMsgSteamDatagramRelayAuthTicket_ExtraField();
  explicit constexpr CMsgSteamDatagramRelayAuthTicket_ExtraField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramRelayAuthTicket_ExtraField(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  CMsgSteamDatagramRelayAuthTicket_ExtraField(CMsgSteamDatagramRelayAuthTicket_ExtraField&& from) noexcept
    : CMsgSteamDatagramRelayAuthTicket_ExtraField() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField& operator=(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramRelayAuthTicket_ExtraField& operator=(CMsgSteamDatagramRelayAuthTicket_ExtraField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramRelayAuthTicket_ExtraField& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramRelayAuthTicket_ExtraField* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRelayAuthTicket_ExtraField*>(
               &_CMsgSteamDatagramRelayAuthTicket_ExtraField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgSteamDatagramRelayAuthTicket_ExtraField& a, CMsgSteamDatagramRelayAuthTicket_ExtraField& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRelayAuthTicket_ExtraField* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket_ExtraField>(nullptr);
  }

  CMsgSteamDatagramRelayAuthTicket_ExtraField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket_ExtraField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket_ExtraField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRelayAuthTicket_ExtraField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramRelayAuthTicket.ExtraField";
  }
  protected:
  explicit CMsgSteamDatagramRelayAuthTicket_ExtraField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kInt64ValueFieldNumber = 3,
    kFixed64ValueFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string string_value = 2;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // optional sint64 int64_value = 3;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 fixed64_value = 5;
  bool has_fixed64_value() const;
  private:
  bool _internal_has_fixed64_value() const;
  public:
  void clear_fixed64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value() const;
  void set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_value() const;
  void _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRelayAuthTicket.ExtraField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramRelayAuthTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramRelayAuthTicket) */ {
 public:
  inline CMsgSteamDatagramRelayAuthTicket() : CMsgSteamDatagramRelayAuthTicket(nullptr) {}
  virtual ~CMsgSteamDatagramRelayAuthTicket();
  explicit constexpr CMsgSteamDatagramRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramRelayAuthTicket(const CMsgSteamDatagramRelayAuthTicket& from);
  CMsgSteamDatagramRelayAuthTicket(CMsgSteamDatagramRelayAuthTicket&& from) noexcept
    : CMsgSteamDatagramRelayAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramRelayAuthTicket& operator=(const CMsgSteamDatagramRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramRelayAuthTicket& operator=(CMsgSteamDatagramRelayAuthTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramRelayAuthTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramRelayAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramRelayAuthTicket*>(
               &_CMsgSteamDatagramRelayAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgSteamDatagramRelayAuthTicket& a, CMsgSteamDatagramRelayAuthTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramRelayAuthTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramRelayAuthTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramRelayAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket>(nullptr);
  }

  CMsgSteamDatagramRelayAuthTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramRelayAuthTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramRelayAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramRelayAuthTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramRelayAuthTicket";
  }
  protected:
  explicit CMsgSteamDatagramRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramRelayAuthTicket_ExtraField ExtraField;

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldsFieldNumber = 8,
    kGameserverAddressFieldNumber = 11,
    kLegacyAuthorizedClientIdentityBinaryFieldNumber = 12,
    kLegacyGameserverIdentityBinaryFieldNumber = 13,
    kAuthorizedClientIdentityStringFieldNumber = 14,
    kGameserverIdentityStringFieldNumber = 15,
    kLegacyAuthorizedSteamIdFieldNumber = 2,
    kTimeExpiryFieldNumber = 1,
    kAuthorizedPublicIpFieldNumber = 3,
    kLegacyGameserverSteamIdFieldNumber = 4,
    kLegacyGameserverNetIdFieldNumber = 5,
    kAppIdFieldNumber = 7,
    kLegacyGameserverPopIdFieldNumber = 9,
    kVirtualPortFieldNumber = 10,
  };
  // repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
  int extra_fields_size() const;
  private:
  int _internal_extra_fields_size() const;
  public:
  void clear_extra_fields();
  ::CMsgSteamDatagramRelayAuthTicket_ExtraField* mutable_extra_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
      mutable_extra_fields();
  private:
  const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& _internal_extra_fields(int index) const;
  ::CMsgSteamDatagramRelayAuthTicket_ExtraField* _internal_add_extra_fields();
  public:
  const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& extra_fields(int index) const;
  ::CMsgSteamDatagramRelayAuthTicket_ExtraField* add_extra_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
      extra_fields() const;

  // optional bytes gameserver_address = 11;
  bool has_gameserver_address() const;
  private:
  bool _internal_has_gameserver_address() const;
  public:
  void clear_gameserver_address();
  const std::string& gameserver_address() const;
  void set_gameserver_address(const std::string& value);
  void set_gameserver_address(std::string&& value);
  void set_gameserver_address(const char* value);
  void set_gameserver_address(const void* value, size_t size);
  std::string* mutable_gameserver_address();
  std::string* release_gameserver_address();
  void set_allocated_gameserver_address(std::string* gameserver_address);
  private:
  const std::string& _internal_gameserver_address() const;
  void _internal_set_gameserver_address(const std::string& value);
  std::string* _internal_mutable_gameserver_address();
  public:

  // optional bytes legacy_authorized_client_identity_binary = 12;
  bool has_legacy_authorized_client_identity_binary() const;
  private:
  bool _internal_has_legacy_authorized_client_identity_binary() const;
  public:
  void clear_legacy_authorized_client_identity_binary();
  const std::string& legacy_authorized_client_identity_binary() const;
  void set_legacy_authorized_client_identity_binary(const std::string& value);
  void set_legacy_authorized_client_identity_binary(std::string&& value);
  void set_legacy_authorized_client_identity_binary(const char* value);
  void set_legacy_authorized_client_identity_binary(const void* value, size_t size);
  std::string* mutable_legacy_authorized_client_identity_binary();
  std::string* release_legacy_authorized_client_identity_binary();
  void set_allocated_legacy_authorized_client_identity_binary(std::string* legacy_authorized_client_identity_binary);
  private:
  const std::string& _internal_legacy_authorized_client_identity_binary() const;
  void _internal_set_legacy_authorized_client_identity_binary(const std::string& value);
  std::string* _internal_mutable_legacy_authorized_client_identity_binary();
  public:

  // optional bytes legacy_gameserver_identity_binary = 13;
  bool has_legacy_gameserver_identity_binary() const;
  private:
  bool _internal_has_legacy_gameserver_identity_binary() const;
  public:
  void clear_legacy_gameserver_identity_binary();
  const std::string& legacy_gameserver_identity_binary() const;
  void set_legacy_gameserver_identity_binary(const std::string& value);
  void set_legacy_gameserver_identity_binary(std::string&& value);
  void set_legacy_gameserver_identity_binary(const char* value);
  void set_legacy_gameserver_identity_binary(const void* value, size_t size);
  std::string* mutable_legacy_gameserver_identity_binary();
  std::string* release_legacy_gameserver_identity_binary();
  void set_allocated_legacy_gameserver_identity_binary(std::string* legacy_gameserver_identity_binary);
  private:
  const std::string& _internal_legacy_gameserver_identity_binary() const;
  void _internal_set_legacy_gameserver_identity_binary(const std::string& value);
  std::string* _internal_mutable_legacy_gameserver_identity_binary();
  public:

  // optional string authorized_client_identity_string = 14;
  bool has_authorized_client_identity_string() const;
  private:
  bool _internal_has_authorized_client_identity_string() const;
  public:
  void clear_authorized_client_identity_string();
  const std::string& authorized_client_identity_string() const;
  void set_authorized_client_identity_string(const std::string& value);
  void set_authorized_client_identity_string(std::string&& value);
  void set_authorized_client_identity_string(const char* value);
  void set_authorized_client_identity_string(const char* value, size_t size);
  std::string* mutable_authorized_client_identity_string();
  std::string* release_authorized_client_identity_string();
  void set_allocated_authorized_client_identity_string(std::string* authorized_client_identity_string);
  private:
  const std::string& _internal_authorized_client_identity_string() const;
  void _internal_set_authorized_client_identity_string(const std::string& value);
  std::string* _internal_mutable_authorized_client_identity_string();
  public:

  // optional string gameserver_identity_string = 15;
  bool has_gameserver_identity_string() const;
  private:
  bool _internal_has_gameserver_identity_string() const;
  public:
  void clear_gameserver_identity_string();
  const std::string& gameserver_identity_string() const;
  void set_gameserver_identity_string(const std::string& value);
  void set_gameserver_identity_string(std::string&& value);
  void set_gameserver_identity_string(const char* value);
  void set_gameserver_identity_string(const char* value, size_t size);
  std::string* mutable_gameserver_identity_string();
  std::string* release_gameserver_identity_string();
  void set_allocated_gameserver_identity_string(std::string* gameserver_identity_string);
  private:
  const std::string& _internal_gameserver_identity_string() const;
  void _internal_set_gameserver_identity_string(const std::string& value);
  std::string* _internal_mutable_gameserver_identity_string();
  public:

  // optional fixed64 legacy_authorized_steam_id = 2;
  bool has_legacy_authorized_steam_id() const;
  private:
  bool _internal_has_legacy_authorized_steam_id() const;
  public:
  void clear_legacy_authorized_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_authorized_steam_id() const;
  void set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_authorized_steam_id() const;
  void _internal_set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 time_expiry = 1;
  bool has_time_expiry() const;
  private:
  bool _internal_has_time_expiry() const;
  public:
  void clear_time_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_expiry() const;
  void set_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_expiry() const;
  void _internal_set_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 authorized_public_ip = 3;
  bool has_authorized_public_ip() const;
  private:
  bool _internal_has_authorized_public_ip() const;
  public:
  void clear_authorized_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 authorized_public_ip() const;
  void set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_authorized_public_ip() const;
  void _internal_set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 legacy_gameserver_steam_id = 4;
  bool has_legacy_gameserver_steam_id() const;
  private:
  bool _internal_has_legacy_gameserver_steam_id() const;
  public:
  void clear_legacy_gameserver_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_steam_id() const;
  void set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_gameserver_steam_id() const;
  void _internal_set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 legacy_gameserver_net_id = 5;
  bool has_legacy_gameserver_net_id() const;
  private:
  bool _internal_has_legacy_gameserver_net_id() const;
  public:
  void clear_legacy_gameserver_net_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_net_id() const;
  void set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_gameserver_net_id() const;
  void _internal_set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 app_id = 7;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 legacy_gameserver_pop_id = 9;
  bool has_legacy_gameserver_pop_id() const;
  private:
  bool _internal_has_legacy_gameserver_pop_id() const;
  public:
  void clear_legacy_gameserver_pop_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_gameserver_pop_id() const;
  void set_legacy_gameserver_pop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_gameserver_pop_id() const;
  void _internal_set_legacy_gameserver_pop_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 virtual_port = 10;
  bool has_virtual_port() const;
  private:
  bool _internal_has_virtual_port() const;
  public:
  void clear_virtual_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 virtual_port() const;
  void set_virtual_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_virtual_port() const;
  void _internal_set_virtual_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramRelayAuthTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField > extra_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserver_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_authorized_client_identity_binary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_gameserver_identity_binary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorized_client_identity_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gameserver_identity_string_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_authorized_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 authorized_public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_net_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_gameserver_pop_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 virtual_port_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSignedRelayAuthTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramSignedRelayAuthTicket) */ {
 public:
  inline CMsgSteamDatagramSignedRelayAuthTicket() : CMsgSteamDatagramSignedRelayAuthTicket(nullptr) {}
  virtual ~CMsgSteamDatagramSignedRelayAuthTicket();
  explicit constexpr CMsgSteamDatagramSignedRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramSignedRelayAuthTicket(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  CMsgSteamDatagramSignedRelayAuthTicket(CMsgSteamDatagramSignedRelayAuthTicket&& from) noexcept
    : CMsgSteamDatagramSignedRelayAuthTicket() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramSignedRelayAuthTicket& operator=(const CMsgSteamDatagramSignedRelayAuthTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramSignedRelayAuthTicket& operator=(CMsgSteamDatagramSignedRelayAuthTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramSignedRelayAuthTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramSignedRelayAuthTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramSignedRelayAuthTicket*>(
               &_CMsgSteamDatagramSignedRelayAuthTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgSteamDatagramSignedRelayAuthTicket& a, CMsgSteamDatagramSignedRelayAuthTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramSignedRelayAuthTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramSignedRelayAuthTicket* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedRelayAuthTicket>(nullptr);
  }

  CMsgSteamDatagramSignedRelayAuthTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedRelayAuthTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  void MergeFrom(const CMsgSteamDatagramSignedRelayAuthTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramSignedRelayAuthTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramSignedRelayAuthTicket";
  }
  protected:
  explicit CMsgSteamDatagramSignedRelayAuthTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertsFieldNumber = 5,
    kTicketFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kReservedDoNotUseFieldNumber = 1,
    kKeyIdFieldNumber = 2,
  };
  // repeated .CMsgSteamDatagramCertificateSigned certs = 5;
  int certs_size() const;
  private:
  int _internal_certs_size() const;
  public:
  void clear_certs();
  ::CMsgSteamDatagramCertificateSigned* mutable_certs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramCertificateSigned >*
      mutable_certs();
  private:
  const ::CMsgSteamDatagramCertificateSigned& _internal_certs(int index) const;
  ::CMsgSteamDatagramCertificateSigned* _internal_add_certs();
  public:
  const ::CMsgSteamDatagramCertificateSigned& certs(int index) const;
  ::CMsgSteamDatagramCertificateSigned* add_certs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramCertificateSigned >&
      certs() const;

  // optional bytes ticket = 3;
  bool has_ticket() const;
  private:
  bool _internal_has_ticket() const;
  public:
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const void* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // optional bytes signature = 4;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional fixed64 reserved_do_not_use = 1;
  bool has_reserved_do_not_use() const;
  private:
  bool _internal_has_reserved_do_not_use() const;
  public:
  void clear_reserved_do_not_use();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_do_not_use() const;
  void set_reserved_do_not_use(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reserved_do_not_use() const;
  void _internal_set_reserved_do_not_use(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 key_id = 2;
  bool has_key_id() const;
  private:
  bool _internal_has_key_id() const;
  public:
  void clear_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id() const;
  void set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key_id() const;
  void _internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSignedRelayAuthTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramCertificateSigned > certs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserved_do_not_use_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramCachedCredentialsForApp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramCachedCredentialsForApp) */ {
 public:
  inline CMsgSteamDatagramCachedCredentialsForApp() : CMsgSteamDatagramCachedCredentialsForApp(nullptr) {}
  virtual ~CMsgSteamDatagramCachedCredentialsForApp();
  explicit constexpr CMsgSteamDatagramCachedCredentialsForApp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramCachedCredentialsForApp(const CMsgSteamDatagramCachedCredentialsForApp& from);
  CMsgSteamDatagramCachedCredentialsForApp(CMsgSteamDatagramCachedCredentialsForApp&& from) noexcept
    : CMsgSteamDatagramCachedCredentialsForApp() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramCachedCredentialsForApp& operator=(const CMsgSteamDatagramCachedCredentialsForApp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramCachedCredentialsForApp& operator=(CMsgSteamDatagramCachedCredentialsForApp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramCachedCredentialsForApp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramCachedCredentialsForApp* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramCachedCredentialsForApp*>(
               &_CMsgSteamDatagramCachedCredentialsForApp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgSteamDatagramCachedCredentialsForApp& a, CMsgSteamDatagramCachedCredentialsForApp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramCachedCredentialsForApp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramCachedCredentialsForApp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramCachedCredentialsForApp* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramCachedCredentialsForApp>(nullptr);
  }

  CMsgSteamDatagramCachedCredentialsForApp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramCachedCredentialsForApp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  void MergeFrom(const CMsgSteamDatagramCachedCredentialsForApp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramCachedCredentialsForApp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramCachedCredentialsForApp";
  }
  protected:
  explicit CMsgSteamDatagramCachedCredentialsForApp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayTicketsFieldNumber = 3,
    kPrivateKeyFieldNumber = 1,
    kCertFieldNumber = 2,
  };
  // repeated bytes relay_tickets = 3;
  int relay_tickets_size() const;
  private:
  int _internal_relay_tickets_size() const;
  public:
  void clear_relay_tickets();
  const std::string& relay_tickets(int index) const;
  std::string* mutable_relay_tickets(int index);
  void set_relay_tickets(int index, const std::string& value);
  void set_relay_tickets(int index, std::string&& value);
  void set_relay_tickets(int index, const char* value);
  void set_relay_tickets(int index, const void* value, size_t size);
  std::string* add_relay_tickets();
  void add_relay_tickets(const std::string& value);
  void add_relay_tickets(std::string&& value);
  void add_relay_tickets(const char* value);
  void add_relay_tickets(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relay_tickets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relay_tickets();
  private:
  const std::string& _internal_relay_tickets(int index) const;
  std::string* _internal_add_relay_tickets();
  public:

  // optional bytes private_key = 1;
  bool has_private_key() const;
  private:
  bool _internal_has_private_key() const;
  public:
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // optional bytes cert = 2;
  bool has_cert() const;
  private:
  bool _internal_has_cert() const;
  public:
  void clear_cert();
  const std::string& cert() const;
  void set_cert(const std::string& value);
  void set_cert(std::string&& value);
  void set_cert(const char* value);
  void set_cert(const void* value, size_t size);
  std::string* mutable_cert();
  std::string* release_cert();
  void set_allocated_cert(std::string* cert);
  private:
  const std::string& _internal_cert() const;
  void _internal_set_cert(const std::string& value);
  std::string* _internal_mutable_cert();
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCachedCredentialsForApp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relay_tickets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramGameCoordinatorServerLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramGameCoordinatorServerLogin) */ {
 public:
  inline CMsgSteamDatagramGameCoordinatorServerLogin() : CMsgSteamDatagramGameCoordinatorServerLogin(nullptr) {}
  virtual ~CMsgSteamDatagramGameCoordinatorServerLogin();
  explicit constexpr CMsgSteamDatagramGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramGameCoordinatorServerLogin(const CMsgSteamDatagramGameCoordinatorServerLogin& from);
  CMsgSteamDatagramGameCoordinatorServerLogin(CMsgSteamDatagramGameCoordinatorServerLogin&& from) noexcept
    : CMsgSteamDatagramGameCoordinatorServerLogin() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramGameCoordinatorServerLogin& operator=(const CMsgSteamDatagramGameCoordinatorServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramGameCoordinatorServerLogin& operator=(CMsgSteamDatagramGameCoordinatorServerLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramGameCoordinatorServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramGameCoordinatorServerLogin* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramGameCoordinatorServerLogin*>(
               &_CMsgSteamDatagramGameCoordinatorServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgSteamDatagramGameCoordinatorServerLogin& a, CMsgSteamDatagramGameCoordinatorServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramGameCoordinatorServerLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramGameCoordinatorServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramGameCoordinatorServerLogin* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameCoordinatorServerLogin>(nullptr);
  }

  CMsgSteamDatagramGameCoordinatorServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramGameCoordinatorServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from);
  void MergeFrom(const CMsgSteamDatagramGameCoordinatorServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramGameCoordinatorServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramGameCoordinatorServerLogin";
  }
  protected:
  explicit CMsgSteamDatagramGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingFieldNumber = 3,
    kAppdataFieldNumber = 4,
    kLegacyIdentityBinaryFieldNumber = 5,
    kIdentityStringFieldNumber = 6,
    kTimeGeneratedFieldNumber = 1,
    kAppidFieldNumber = 2,
    kDummySteamIdFieldNumber = 99,
  };
  // optional bytes routing = 3;
  bool has_routing() const;
  private:
  bool _internal_has_routing() const;
  public:
  void clear_routing();
  const std::string& routing() const;
  void set_routing(const std::string& value);
  void set_routing(std::string&& value);
  void set_routing(const char* value);
  void set_routing(const void* value, size_t size);
  std::string* mutable_routing();
  std::string* release_routing();
  void set_allocated_routing(std::string* routing);
  private:
  const std::string& _internal_routing() const;
  void _internal_set_routing(const std::string& value);
  std::string* _internal_mutable_routing();
  public:

  // optional bytes appdata = 4;
  bool has_appdata() const;
  private:
  bool _internal_has_appdata() const;
  public:
  void clear_appdata();
  const std::string& appdata() const;
  void set_appdata(const std::string& value);
  void set_appdata(std::string&& value);
  void set_appdata(const char* value);
  void set_appdata(const void* value, size_t size);
  std::string* mutable_appdata();
  std::string* release_appdata();
  void set_allocated_appdata(std::string* appdata);
  private:
  const std::string& _internal_appdata() const;
  void _internal_set_appdata(const std::string& value);
  std::string* _internal_mutable_appdata();
  public:

  // optional bytes legacy_identity_binary = 5;
  bool has_legacy_identity_binary() const;
  private:
  bool _internal_has_legacy_identity_binary() const;
  public:
  void clear_legacy_identity_binary();
  const std::string& legacy_identity_binary() const;
  void set_legacy_identity_binary(const std::string& value);
  void set_legacy_identity_binary(std::string&& value);
  void set_legacy_identity_binary(const char* value);
  void set_legacy_identity_binary(const void* value, size_t size);
  std::string* mutable_legacy_identity_binary();
  std::string* release_legacy_identity_binary();
  void set_allocated_legacy_identity_binary(std::string* legacy_identity_binary);
  private:
  const std::string& _internal_legacy_identity_binary() const;
  void _internal_set_legacy_identity_binary(const std::string& value);
  std::string* _internal_mutable_legacy_identity_binary();
  public:

  // optional string identity_string = 6;
  bool has_identity_string() const;
  private:
  bool _internal_has_identity_string() const;
  public:
  void clear_identity_string();
  const std::string& identity_string() const;
  void set_identity_string(const std::string& value);
  void set_identity_string(std::string&& value);
  void set_identity_string(const char* value);
  void set_identity_string(const char* value, size_t size);
  std::string* mutable_identity_string();
  std::string* release_identity_string();
  void set_allocated_identity_string(std::string* identity_string);
  private:
  const std::string& _internal_identity_string() const;
  void _internal_set_identity_string(const std::string& value);
  std::string* _internal_mutable_identity_string();
  public:

  // optional uint32 time_generated = 1;
  bool has_time_generated() const;
  private:
  bool _internal_has_time_generated() const;
  public:
  void clear_time_generated();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_generated() const;
  void set_time_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_generated() const;
  void _internal_set_time_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 appid = 2;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 dummy_steam_id = 99;
  bool has_dummy_steam_id() const;
  private:
  bool _internal_has_dummy_steam_id() const;
  public:
  void clear_dummy_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 dummy_steam_id() const;
  void set_dummy_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dummy_steam_id() const;
  void _internal_set_dummy_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramGameCoordinatorServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appdata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_identity_binary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_string_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_generated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dummy_steam_id_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSignedGameCoordinatorServerLogin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramSignedGameCoordinatorServerLogin) */ {
 public:
  inline CMsgSteamDatagramSignedGameCoordinatorServerLogin() : CMsgSteamDatagramSignedGameCoordinatorServerLogin(nullptr) {}
  virtual ~CMsgSteamDatagramSignedGameCoordinatorServerLogin();
  explicit constexpr CMsgSteamDatagramSignedGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramSignedGameCoordinatorServerLogin(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);
  CMsgSteamDatagramSignedGameCoordinatorServerLogin(CMsgSteamDatagramSignedGameCoordinatorServerLogin&& from) noexcept
    : CMsgSteamDatagramSignedGameCoordinatorServerLogin() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramSignedGameCoordinatorServerLogin& operator=(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramSignedGameCoordinatorServerLogin& operator=(CMsgSteamDatagramSignedGameCoordinatorServerLogin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramSignedGameCoordinatorServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramSignedGameCoordinatorServerLogin* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramSignedGameCoordinatorServerLogin*>(
               &_CMsgSteamDatagramSignedGameCoordinatorServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgSteamDatagramSignedGameCoordinatorServerLogin& a, CMsgSteamDatagramSignedGameCoordinatorServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramSignedGameCoordinatorServerLogin* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedGameCoordinatorServerLogin>(nullptr);
  }

  CMsgSteamDatagramSignedGameCoordinatorServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramSignedGameCoordinatorServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);
  void MergeFrom(const CMsgSteamDatagramSignedGameCoordinatorServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramSignedGameCoordinatorServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramSignedGameCoordinatorServerLogin";
  }
  protected:
  explicit CMsgSteamDatagramSignedGameCoordinatorServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kCertFieldNumber = 1,
  };
  // optional bytes login = 2;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const void* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // optional bytes signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  bool has_cert() const;
  private:
  bool _internal_has_cert() const;
  public:
  void clear_cert();
  const ::CMsgSteamDatagramCertificateSigned& cert() const;
  ::CMsgSteamDatagramCertificateSigned* release_cert();
  ::CMsgSteamDatagramCertificateSigned* mutable_cert();
  void set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert);
  private:
  const ::CMsgSteamDatagramCertificateSigned& _internal_cert() const;
  ::CMsgSteamDatagramCertificateSigned* _internal_mutable_cert();
  public:
  void unsafe_arena_set_allocated_cert(
      ::CMsgSteamDatagramCertificateSigned* cert);
  ::CMsgSteamDatagramCertificateSigned* unsafe_arena_release_cert();

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSignedGameCoordinatorServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::CMsgSteamDatagramCertificateSigned* cert_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramHostedServerAddressPlaintext PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramHostedServerAddressPlaintext) */ {
 public:
  inline CMsgSteamDatagramHostedServerAddressPlaintext() : CMsgSteamDatagramHostedServerAddressPlaintext(nullptr) {}
  virtual ~CMsgSteamDatagramHostedServerAddressPlaintext();
  explicit constexpr CMsgSteamDatagramHostedServerAddressPlaintext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamDatagramHostedServerAddressPlaintext(const CMsgSteamDatagramHostedServerAddressPlaintext& from);
  CMsgSteamDatagramHostedServerAddressPlaintext(CMsgSteamDatagramHostedServerAddressPlaintext&& from) noexcept
    : CMsgSteamDatagramHostedServerAddressPlaintext() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramHostedServerAddressPlaintext& operator=(const CMsgSteamDatagramHostedServerAddressPlaintext& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramHostedServerAddressPlaintext& operator=(CMsgSteamDatagramHostedServerAddressPlaintext&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramHostedServerAddressPlaintext& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamDatagramHostedServerAddressPlaintext* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramHostedServerAddressPlaintext*>(
               &_CMsgSteamDatagramHostedServerAddressPlaintext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgSteamDatagramHostedServerAddressPlaintext& a, CMsgSteamDatagramHostedServerAddressPlaintext& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamDatagramHostedServerAddressPlaintext* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramHostedServerAddressPlaintext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramHostedServerAddressPlaintext* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramHostedServerAddressPlaintext>(nullptr);
  }

  CMsgSteamDatagramHostedServerAddressPlaintext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramHostedServerAddressPlaintext>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from);
  void MergeFrom(const CMsgSteamDatagramHostedServerAddressPlaintext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramHostedServerAddressPlaintext* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramHostedServerAddressPlaintext";
  }
  protected:
  explicit CMsgSteamDatagramHostedServerAddressPlaintext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steamdatagram_5fmessages_5fauth_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv6FieldNumber = 2,
    kIpv4FieldNumber = 1,
    kPortFieldNumber = 3,
    kRoutingSecretFieldNumber = 4,
  };
  // optional bytes ipv6 = 2;
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  const std::string& ipv6() const;
  void set_ipv6(const std::string& value);
  void set_ipv6(std::string&& value);
  void set_ipv6(const char* value);
  void set_ipv6(const void* value, size_t size);
  std::string* mutable_ipv6();
  std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // optional fixed32 ipv4 = 1;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4() const;
  void set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ipv4() const;
  void _internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 routing_secret = 4;
  bool has_routing_secret() const;
  private:
  bool _internal_has_routing_secret() const;
  public:
  void clear_routing_secret();
  ::PROTOBUF_NAMESPACE_ID::uint64 routing_secret() const;
  void set_routing_secret(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_routing_secret() const;
  void _internal_set_routing_secret(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramHostedServerAddressPlaintext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ipv4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint64 routing_secret_;
  friend struct ::TableStruct_steamdatagram_5fmessages_5fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamDatagramRelayAuthTicket_ExtraField

// optional string name = 1;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_name() const {
  return _internal_has_name();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::name() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  return _internal_name();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_name() const {
  return name_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_name() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.ExtraField.name)
}

// optional string string_value = 2;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_has_string_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_string_value() const {
  return _internal_has_string_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_string_value() {
  string_value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::string_value() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  return _internal_string_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_string_value() const {
  return string_value_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_string_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_mutable_string_value() {
  _has_bits_[0] |= 0x00000002u;
  return string_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket_ExtraField::release_string_value() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
  if (!_internal_has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  string_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.ExtraField.string_value)
}

// optional sint64 int64_value = 3;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_has_int64_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_int64_value() {
  int64_value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_int64_value() const {
  return int64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CMsgSteamDatagramRelayAuthTicket_ExtraField::int64_value() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.ExtraField.int64_value)
  return _internal_int64_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  int64_value_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.ExtraField.int64_value)
}

// optional fixed64 fixed64_value = 5;
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_has_fixed64_value() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket_ExtraField::has_fixed64_value() const {
  return _internal_has_fixed64_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::clear_fixed64_value() {
  fixed64_value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_fixed64_value() const {
  return fixed64_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket_ExtraField::fixed64_value() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.ExtraField.fixed64_value)
  return _internal_fixed64_value();
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::_internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  fixed64_value_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket_ExtraField::set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_value(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.ExtraField.fixed64_value)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramRelayAuthTicket

// optional fixed32 time_expiry = 1;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_time_expiry() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_time_expiry() const {
  return _internal_has_time_expiry();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_time_expiry() {
  time_expiry_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::_internal_time_expiry() const {
  return time_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::time_expiry() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.time_expiry)
  return _internal_time_expiry();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  time_expiry_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_expiry(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.time_expiry)
}

// optional string authorized_client_identity_string = 14;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_authorized_client_identity_string() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_client_identity_string() const {
  return _internal_has_authorized_client_identity_string();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_client_identity_string() {
  authorized_client_identity_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::authorized_client_identity_string() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
  return _internal_authorized_client_identity_string();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const std::string& value) {
  _internal_set_authorized_client_identity_string(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::mutable_authorized_client_identity_string() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
  return _internal_mutable_authorized_client_identity_string();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::_internal_authorized_client_identity_string() const {
  return authorized_client_identity_string_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_authorized_client_identity_string(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  authorized_client_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  authorized_client_identity_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  authorized_client_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_client_identity_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  authorized_client_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::_internal_mutable_authorized_client_identity_string() {
  _has_bits_[0] |= 0x00000008u;
  return authorized_client_identity_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::release_authorized_client_identity_string() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
  if (!_internal_has_authorized_client_identity_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return authorized_client_identity_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_authorized_client_identity_string(std::string* authorized_client_identity_string) {
  if (authorized_client_identity_string != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  authorized_client_identity_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorized_client_identity_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.authorized_client_identity_string)
}

// optional string gameserver_identity_string = 15;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_gameserver_identity_string() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_identity_string() const {
  return _internal_has_gameserver_identity_string();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_identity_string() {
  gameserver_identity_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_identity_string() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
  return _internal_gameserver_identity_string();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const std::string& value) {
  _internal_set_gameserver_identity_string(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_identity_string() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
  return _internal_mutable_gameserver_identity_string();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::_internal_gameserver_identity_string() const {
  return gameserver_identity_string_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_gameserver_identity_string(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  gameserver_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  gameserver_identity_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  gameserver_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_identity_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  gameserver_identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::_internal_mutable_gameserver_identity_string() {
  _has_bits_[0] |= 0x00000010u;
  return gameserver_identity_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_identity_string() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
  if (!_internal_has_gameserver_identity_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return gameserver_identity_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_identity_string(std::string* gameserver_identity_string) {
  if (gameserver_identity_string != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gameserver_identity_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserver_identity_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.gameserver_identity_string)
}

// optional fixed32 authorized_public_ip = 3;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_authorized_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_authorized_public_ip() const {
  return _internal_has_authorized_public_ip();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_authorized_public_ip() {
  authorized_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::_internal_authorized_public_ip() const {
  return authorized_public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::authorized_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.authorized_public_ip)
  return _internal_authorized_public_ip();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  authorized_public_ip_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_authorized_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.authorized_public_ip)
}

// optional bytes gameserver_address = 11;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_gameserver_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_gameserver_address() const {
  return _internal_has_gameserver_address();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_gameserver_address() {
  gameserver_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::gameserver_address() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  return _internal_gameserver_address();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const std::string& value) {
  _internal_set_gameserver_address(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::mutable_gameserver_address() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  return _internal_mutable_gameserver_address();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::_internal_gameserver_address() const {
  return gameserver_address_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_gameserver_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gameserver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gameserver_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gameserver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_gameserver_address(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gameserver_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::_internal_mutable_gameserver_address() {
  _has_bits_[0] |= 0x00000001u;
  return gameserver_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::release_gameserver_address() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
  if (!_internal_has_gameserver_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gameserver_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_gameserver_address(std::string* gameserver_address) {
  if (gameserver_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gameserver_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gameserver_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.gameserver_address)
}

// optional uint32 app_id = 7;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_app_id() const {
  return _internal_has_app_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_app_id() {
  app_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::app_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.app_id)
  return _internal_app_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  app_id_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.app_id)
}

// optional uint32 virtual_port = 10;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_virtual_port() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_virtual_port() const {
  return _internal_has_virtual_port();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_virtual_port() {
  virtual_port_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::_internal_virtual_port() const {
  return virtual_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::virtual_port() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.virtual_port)
  return _internal_virtual_port();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_virtual_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  virtual_port_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_virtual_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_virtual_port(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.virtual_port)
}

// repeated .CMsgSteamDatagramRelayAuthTicket.ExtraField extra_fields = 8;
inline int CMsgSteamDatagramRelayAuthTicket::_internal_extra_fields_size() const {
  return extra_fields_.size();
}
inline int CMsgSteamDatagramRelayAuthTicket::extra_fields_size() const {
  return _internal_extra_fields_size();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_extra_fields() {
  extra_fields_.Clear();
}
inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >*
CMsgSteamDatagramRelayAuthTicket::mutable_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return &extra_fields_;
}
inline const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket::_internal_extra_fields(int index) const {
  return extra_fields_.Get(index);
}
inline const ::CMsgSteamDatagramRelayAuthTicket_ExtraField& CMsgSteamDatagramRelayAuthTicket::extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return _internal_extra_fields(index);
}
inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::_internal_add_extra_fields() {
  return extra_fields_.Add();
}
inline ::CMsgSteamDatagramRelayAuthTicket_ExtraField* CMsgSteamDatagramRelayAuthTicket::add_extra_fields() {
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return _internal_add_extra_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramRelayAuthTicket_ExtraField >&
CMsgSteamDatagramRelayAuthTicket::extra_fields() const {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramRelayAuthTicket.extra_fields)
  return extra_fields_;
}

// optional fixed64 legacy_authorized_steam_id = 2;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_authorized_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_authorized_steam_id() const {
  return _internal_has_legacy_authorized_steam_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_authorized_steam_id() {
  legacy_authorized_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::_internal_legacy_authorized_steam_id() const {
  return legacy_authorized_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_authorized_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_steam_id)
  return _internal_legacy_authorized_steam_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  legacy_authorized_steam_id_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_authorized_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_steam_id)
}

// optional fixed64 legacy_gameserver_steam_id = 4;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_gameserver_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_steam_id() const {
  return _internal_has_legacy_gameserver_steam_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_steam_id() {
  legacy_gameserver_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::_internal_legacy_gameserver_steam_id() const {
  return legacy_gameserver_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_steam_id)
  return _internal_legacy_gameserver_steam_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  legacy_gameserver_steam_id_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_gameserver_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_steam_id)
}

// optional fixed64 legacy_gameserver_net_id = 5;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_gameserver_net_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_net_id() const {
  return _internal_has_legacy_gameserver_net_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_net_id() {
  legacy_gameserver_net_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::_internal_legacy_gameserver_net_id() const {
  return legacy_gameserver_net_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_net_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_net_id)
  return _internal_legacy_gameserver_net_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  legacy_gameserver_net_id_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_gameserver_net_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_net_id)
}

// optional fixed32 legacy_gameserver_pop_id = 9;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_gameserver_pop_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_pop_id() const {
  return _internal_has_legacy_gameserver_pop_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_pop_id() {
  legacy_gameserver_pop_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::_internal_legacy_gameserver_pop_id() const {
  return legacy_gameserver_pop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_pop_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_pop_id)
  return _internal_legacy_gameserver_pop_id();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_gameserver_pop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  legacy_gameserver_pop_id_ = value;
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_pop_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_gameserver_pop_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_pop_id)
}

// optional bytes legacy_authorized_client_identity_binary = 12;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_authorized_client_identity_binary() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_authorized_client_identity_binary() const {
  return _internal_has_legacy_authorized_client_identity_binary();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_authorized_client_identity_binary() {
  legacy_authorized_client_identity_binary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::legacy_authorized_client_identity_binary() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
  return _internal_legacy_authorized_client_identity_binary();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const std::string& value) {
  _internal_set_legacy_authorized_client_identity_binary(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::mutable_legacy_authorized_client_identity_binary() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
  return _internal_mutable_legacy_authorized_client_identity_binary();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::_internal_legacy_authorized_client_identity_binary() const {
  return legacy_authorized_client_identity_binary_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_authorized_client_identity_binary(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_authorized_client_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  legacy_authorized_client_identity_binary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  legacy_authorized_client_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_authorized_client_identity_binary(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  legacy_authorized_client_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::_internal_mutable_legacy_authorized_client_identity_binary() {
  _has_bits_[0] |= 0x00000002u;
  return legacy_authorized_client_identity_binary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::release_legacy_authorized_client_identity_binary() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
  if (!_internal_has_legacy_authorized_client_identity_binary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return legacy_authorized_client_identity_binary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_legacy_authorized_client_identity_binary(std::string* legacy_authorized_client_identity_binary) {
  if (legacy_authorized_client_identity_binary != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  legacy_authorized_client_identity_binary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_authorized_client_identity_binary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.legacy_authorized_client_identity_binary)
}

// optional bytes legacy_gameserver_identity_binary = 13;
inline bool CMsgSteamDatagramRelayAuthTicket::_internal_has_legacy_gameserver_identity_binary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamDatagramRelayAuthTicket::has_legacy_gameserver_identity_binary() const {
  return _internal_has_legacy_gameserver_identity_binary();
}
inline void CMsgSteamDatagramRelayAuthTicket::clear_legacy_gameserver_identity_binary() {
  legacy_gameserver_identity_binary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::legacy_gameserver_identity_binary() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
  return _internal_legacy_gameserver_identity_binary();
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const std::string& value) {
  _internal_set_legacy_gameserver_identity_binary(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::mutable_legacy_gameserver_identity_binary() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
  return _internal_mutable_legacy_gameserver_identity_binary();
}
inline const std::string& CMsgSteamDatagramRelayAuthTicket::_internal_legacy_gameserver_identity_binary() const {
  return legacy_gameserver_identity_binary_.Get();
}
inline void CMsgSteamDatagramRelayAuthTicket::_internal_set_legacy_gameserver_identity_binary(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_gameserver_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_gameserver_identity_binary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  legacy_gameserver_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
}
inline void CMsgSteamDatagramRelayAuthTicket::set_legacy_gameserver_identity_binary(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  legacy_gameserver_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::_internal_mutable_legacy_gameserver_identity_binary() {
  _has_bits_[0] |= 0x00000004u;
  return legacy_gameserver_identity_binary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramRelayAuthTicket::release_legacy_gameserver_identity_binary() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
  if (!_internal_has_legacy_gameserver_identity_binary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return legacy_gameserver_identity_binary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramRelayAuthTicket::set_allocated_legacy_gameserver_identity_binary(std::string* legacy_gameserver_identity_binary) {
  if (legacy_gameserver_identity_binary != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  legacy_gameserver_identity_binary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_gameserver_identity_binary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramRelayAuthTicket.legacy_gameserver_identity_binary)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSignedRelayAuthTicket

// optional fixed64 reserved_do_not_use = 1;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::_internal_has_reserved_do_not_use() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_reserved_do_not_use() const {
  return _internal_has_reserved_do_not_use();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_reserved_do_not_use() {
  reserved_do_not_use_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramSignedRelayAuthTicket::_internal_reserved_do_not_use() const {
  return reserved_do_not_use_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramSignedRelayAuthTicket::reserved_do_not_use() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedRelayAuthTicket.reserved_do_not_use)
  return _internal_reserved_do_not_use();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::_internal_set_reserved_do_not_use(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  reserved_do_not_use_ = value;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_reserved_do_not_use(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reserved_do_not_use(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedRelayAuthTicket.reserved_do_not_use)
}

// optional bytes ticket = 3;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::_internal_has_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_ticket() const {
  return _internal_has_ticket();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_ticket() {
  ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramSignedRelayAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  return _internal_ticket();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& CMsgSteamDatagramSignedRelayAuthTicket::_internal_ticket() const {
  return ticket_.Get();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::_internal_set_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::_internal_mutable_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
  if (!_internal_has_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSignedRelayAuthTicket.ticket)
}

// optional bytes signature = 4;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_signature() const {
  return _internal_has_signature();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramSignedRelayAuthTicket::signature() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedRelayAuthTicket.signature)
  return _internal_signature();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedRelayAuthTicket.signature)
  return _internal_mutable_signature();
}
inline const std::string& CMsgSteamDatagramSignedRelayAuthTicket::_internal_signature() const {
  return signature_.Get();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSignedRelayAuthTicket.signature)
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramSignedRelayAuthTicket::release_signature() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSignedRelayAuthTicket.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSignedRelayAuthTicket.signature)
}

// optional fixed64 key_id = 2;
inline bool CMsgSteamDatagramSignedRelayAuthTicket::_internal_has_key_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedRelayAuthTicket::has_key_id() const {
  return _internal_has_key_id();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::clear_key_id() {
  key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramSignedRelayAuthTicket::_internal_key_id() const {
  return key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramSignedRelayAuthTicket::key_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedRelayAuthTicket.key_id)
  return _internal_key_id();
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::_internal_set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  key_id_ = value;
}
inline void CMsgSteamDatagramSignedRelayAuthTicket::set_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedRelayAuthTicket.key_id)
}

// repeated .CMsgSteamDatagramCertificateSigned certs = 5;
inline int CMsgSteamDatagramSignedRelayAuthTicket::_internal_certs_size() const {
  return certs_.size();
}
inline int CMsgSteamDatagramSignedRelayAuthTicket::certs_size() const {
  return _internal_certs_size();
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedRelayAuthTicket::mutable_certs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedRelayAuthTicket.certs)
  return certs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramCertificateSigned >*
CMsgSteamDatagramSignedRelayAuthTicket::mutable_certs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramSignedRelayAuthTicket.certs)
  return &certs_;
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedRelayAuthTicket::_internal_certs(int index) const {
  return certs_.Get(index);
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedRelayAuthTicket::certs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedRelayAuthTicket.certs)
  return _internal_certs(index);
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedRelayAuthTicket::_internal_add_certs() {
  return certs_.Add();
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedRelayAuthTicket::add_certs() {
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramSignedRelayAuthTicket.certs)
  return _internal_add_certs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamDatagramCertificateSigned >&
CMsgSteamDatagramSignedRelayAuthTicket::certs() const {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramSignedRelayAuthTicket.certs)
  return certs_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCachedCredentialsForApp

// optional bytes private_key = 1;
inline bool CMsgSteamDatagramCachedCredentialsForApp::_internal_has_private_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_private_key() const {
  return _internal_has_private_key();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_private_key() {
  private_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::private_key() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCachedCredentialsForApp.private_key)
  return _internal_private_key();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const std::string& value) {
  _internal_set_private_key(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_private_key() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCachedCredentialsForApp.private_key)
  return _internal_mutable_private_key();
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::_internal_private_key() const {
  return private_key_.Get();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::_internal_set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_private_key(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramCachedCredentialsForApp.private_key)
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::_internal_mutable_private_key() {
  _has_bits_[0] |= 0x00000001u;
  return private_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::release_private_key() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCachedCredentialsForApp.private_key)
  if (!_internal_has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCachedCredentialsForApp.private_key)
}

// optional bytes cert = 2;
inline bool CMsgSteamDatagramCachedCredentialsForApp::_internal_has_cert() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramCachedCredentialsForApp::has_cert() const {
  return _internal_has_cert();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_cert() {
  cert_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::cert() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCachedCredentialsForApp.cert)
  return _internal_cert();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const std::string& value) {
  _internal_set_cert(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_cert() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCachedCredentialsForApp.cert)
  return _internal_mutable_cert();
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::_internal_cert() const {
  return cert_.Get();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::_internal_set_cert(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cert_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_cert(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramCachedCredentialsForApp.cert)
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::_internal_mutable_cert() {
  _has_bits_[0] |= 0x00000002u;
  return cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::release_cert() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCachedCredentialsForApp.cert)
  if (!_internal_has_cert()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cert_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_allocated_cert(std::string* cert) {
  if (cert != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCachedCredentialsForApp.cert)
}

// repeated bytes relay_tickets = 3;
inline int CMsgSteamDatagramCachedCredentialsForApp::_internal_relay_tickets_size() const {
  return relay_tickets_.size();
}
inline int CMsgSteamDatagramCachedCredentialsForApp::relay_tickets_size() const {
  return _internal_relay_tickets_size();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::clear_relay_tickets() {
  relay_tickets_.Clear();
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets() {
  // @@protoc_insertion_point(field_add_mutable:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return _internal_add_relay_tickets();
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::_internal_relay_tickets(int index) const {
  return relay_tickets_.Get(index);
}
inline const std::string& CMsgSteamDatagramCachedCredentialsForApp::relay_tickets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return _internal_relay_tickets(index);
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_.Mutable(index);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  relay_tickets_.Mutable(index)->assign(value);
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  relay_tickets_.Mutable(index)->assign(std::move(value));
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relay_tickets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::set_relay_tickets(int index, const void* value, size_t size) {
  relay_tickets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline std::string* CMsgSteamDatagramCachedCredentialsForApp::_internal_add_relay_tickets() {
  return relay_tickets_.Add();
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const std::string& value) {
  relay_tickets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(std::string&& value) {
  relay_tickets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  relay_tickets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline void CMsgSteamDatagramCachedCredentialsForApp::add_relay_tickets(const void* value, size_t size) {
  relay_tickets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgSteamDatagramCachedCredentialsForApp::relay_tickets() const {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return relay_tickets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgSteamDatagramCachedCredentialsForApp::mutable_relay_tickets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramCachedCredentialsForApp.relay_tickets)
  return &relay_tickets_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramGameCoordinatorServerLogin

// optional uint32 time_generated = 1;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_time_generated() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_time_generated() const {
  return _internal_has_time_generated();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_time_generated() {
  time_generated_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::_internal_time_generated() const {
  return time_generated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::time_generated() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.time_generated)
  return _internal_time_generated();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_time_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  time_generated_ = value;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_time_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_generated(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.time_generated)
}

// optional uint32 appid = 2;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_appid() const {
  return _internal_has_appid();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramGameCoordinatorServerLogin::appid() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.appid)
  return _internal_appid();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  appid_ = value;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.appid)
}

// optional bytes routing = 3;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_routing() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_routing() const {
  return _internal_has_routing();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_routing() {
  routing_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::routing() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
  return _internal_routing();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const std::string& value) {
  _internal_set_routing(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_routing() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
  return _internal_mutable_routing();
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::_internal_routing() const {
  return routing_.Get();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_routing(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  routing_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_routing(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  routing_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::_internal_mutable_routing() {
  _has_bits_[0] |= 0x00000001u;
  return routing_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_routing() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
  if (!_internal_has_routing()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return routing_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_routing(std::string* routing) {
  if (routing != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  routing_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), routing,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramGameCoordinatorServerLogin.routing)
}

// optional bytes appdata = 4;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_appdata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_appdata() const {
  return _internal_has_appdata();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_appdata() {
  appdata_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::appdata() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
  return _internal_appdata();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const std::string& value) {
  _internal_set_appdata(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_appdata() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
  return _internal_mutable_appdata();
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::_internal_appdata() const {
  return appdata_.Get();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_appdata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  appdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  appdata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  appdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_appdata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  appdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::_internal_mutable_appdata() {
  _has_bits_[0] |= 0x00000002u;
  return appdata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_appdata() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
  if (!_internal_has_appdata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return appdata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_appdata(std::string* appdata) {
  if (appdata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  appdata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appdata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramGameCoordinatorServerLogin.appdata)
}

// optional bytes legacy_identity_binary = 5;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_legacy_identity_binary() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_legacy_identity_binary() const {
  return _internal_has_legacy_identity_binary();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_legacy_identity_binary() {
  legacy_identity_binary_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::legacy_identity_binary() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
  return _internal_legacy_identity_binary();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const std::string& value) {
  _internal_set_legacy_identity_binary(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_legacy_identity_binary() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
  return _internal_mutable_legacy_identity_binary();
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::_internal_legacy_identity_binary() const {
  return legacy_identity_binary_.Get();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_legacy_identity_binary(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_identity_binary_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  legacy_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_legacy_identity_binary(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  legacy_identity_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::_internal_mutable_legacy_identity_binary() {
  _has_bits_[0] |= 0x00000004u;
  return legacy_identity_binary_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_legacy_identity_binary() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
  if (!_internal_has_legacy_identity_binary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return legacy_identity_binary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_legacy_identity_binary(std::string* legacy_identity_binary) {
  if (legacy_identity_binary != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  legacy_identity_binary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_identity_binary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramGameCoordinatorServerLogin.legacy_identity_binary)
}

// optional string identity_string = 6;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_identity_string() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_identity_string() const {
  return _internal_has_identity_string();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_identity_string() {
  identity_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::identity_string() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
  return _internal_identity_string();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const std::string& value) {
  _internal_set_identity_string(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::mutable_identity_string() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
  return _internal_mutable_identity_string();
}
inline const std::string& CMsgSteamDatagramGameCoordinatorServerLogin::_internal_identity_string() const {
  return identity_string_.Get();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_identity_string(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  identity_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_identity_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  identity_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::_internal_mutable_identity_string() {
  _has_bits_[0] |= 0x00000008u;
  return identity_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramGameCoordinatorServerLogin::release_identity_string() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
  if (!_internal_has_identity_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return identity_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_allocated_identity_string(std::string* identity_string) {
  if (identity_string != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  identity_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramGameCoordinatorServerLogin.identity_string)
}

// optional fixed64 dummy_steam_id = 99;
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::_internal_has_dummy_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamDatagramGameCoordinatorServerLogin::has_dummy_steam_id() const {
  return _internal_has_dummy_steam_id();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::clear_dummy_steam_id() {
  dummy_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramGameCoordinatorServerLogin::_internal_dummy_steam_id() const {
  return dummy_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramGameCoordinatorServerLogin::dummy_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramGameCoordinatorServerLogin.dummy_steam_id)
  return _internal_dummy_steam_id();
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::_internal_set_dummy_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  dummy_steam_id_ = value;
}
inline void CMsgSteamDatagramGameCoordinatorServerLogin::set_dummy_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dummy_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramGameCoordinatorServerLogin.dummy_steam_id)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSignedGameCoordinatorServerLogin

// optional .CMsgSteamDatagramCertificateSigned cert = 1;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_has_cert() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || cert_ != nullptr);
  return value;
}
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_cert() const {
  return _internal_has_cert();
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_cert() const {
  const ::CMsgSteamDatagramCertificateSigned* p = cert_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramCertificateSigned&>(
      ::_CMsgSteamDatagramCertificateSigned_default_instance_);
}
inline const ::CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramSignedGameCoordinatorServerLogin::cert() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedGameCoordinatorServerLogin.cert)
  return _internal_cert();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::unsafe_arena_set_allocated_cert(
    ::CMsgSteamDatagramCertificateSigned* cert) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cert_);
  }
  cert_ = cert;
  if (cert) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamDatagramSignedGameCoordinatorServerLogin.cert)
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_cert() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::unsafe_arena_release_cert() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSignedGameCoordinatorServerLogin.cert)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamDatagramCertificateSigned* temp = cert_;
  cert_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_mutable_cert() {
  _has_bits_[0] |= 0x00000004u;
  if (cert_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramCertificateSigned>(GetArena());
    cert_ = p;
  }
  return cert_;
}
inline ::CMsgSteamDatagramCertificateSigned* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_cert() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedGameCoordinatorServerLogin.cert)
  return _internal_mutable_cert();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_cert(::CMsgSteamDatagramCertificateSigned* cert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cert_);
  }
  if (cert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cert)->GetArena();
    if (message_arena != submessage_arena) {
      cert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cert_ = cert;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSignedGameCoordinatorServerLogin.cert)
}

// optional bytes login = 2;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_has_login() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_login() const {
  return _internal_has_login();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_login() {
  login_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::login() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
  return _internal_login();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_login() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
  return _internal_mutable_login();
}
inline const std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_login() const {
  return login_.Get();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_set_login(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  login_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_login(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  login_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_mutable_login() {
  _has_bits_[0] |= 0x00000001u;
  return login_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_login() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
  if (!_internal_has_login()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return login_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSignedGameCoordinatorServerLogin.login)
}

// optional bytes signature = 3;
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramSignedGameCoordinatorServerLogin::has_signature() const {
  return _internal_has_signature();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::clear_signature() {
  signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::signature() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
  return _internal_signature();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
  return _internal_mutable_signature();
}
inline const std::string& CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_signature() const {
  return signature_.Get();
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramSignedGameCoordinatorServerLogin::release_signature() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramSignedGameCoordinatorServerLogin::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSignedGameCoordinatorServerLogin.signature)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramHostedServerAddressPlaintext

// optional fixed32 ipv4 = 1;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::_internal_has_ipv4() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_ipv4() {
  ipv4_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::_internal_ipv4() const {
  return ipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::ipv4() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramHostedServerAddressPlaintext.ipv4)
  return _internal_ipv4();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::_internal_set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ipv4_ = value;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramHostedServerAddressPlaintext.ipv4)
}

// optional bytes ipv6 = 2;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::_internal_has_ipv6() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_ipv6() {
  ipv6_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramHostedServerAddressPlaintext::ipv6() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
  return _internal_ipv6();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const std::string& value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
}
inline std::string* CMsgSteamDatagramHostedServerAddressPlaintext::mutable_ipv6() {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
  return _internal_mutable_ipv6();
}
inline const std::string& CMsgSteamDatagramHostedServerAddressPlaintext::_internal_ipv6() const {
  return ipv6_.Get();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::_internal_set_ipv6(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ipv6_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_ipv6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
}
inline std::string* CMsgSteamDatagramHostedServerAddressPlaintext::_internal_mutable_ipv6() {
  _has_bits_[0] |= 0x00000001u;
  return ipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSteamDatagramHostedServerAddressPlaintext::release_ipv6() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
  if (!_internal_has_ipv6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ipv6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramHostedServerAddressPlaintext.ipv6)
}

// optional uint32 port = 3;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_port() const {
  return _internal_has_port();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_port() {
  port_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramHostedServerAddressPlaintext::port() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramHostedServerAddressPlaintext.port)
  return _internal_port();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramHostedServerAddressPlaintext.port)
}

// optional fixed64 routing_secret = 4;
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::_internal_has_routing_secret() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamDatagramHostedServerAddressPlaintext::has_routing_secret() const {
  return _internal_has_routing_secret();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::clear_routing_secret() {
  routing_secret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramHostedServerAddressPlaintext::_internal_routing_secret() const {
  return routing_secret_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramHostedServerAddressPlaintext::routing_secret() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramHostedServerAddressPlaintext.routing_secret)
  return _internal_routing_secret();
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::_internal_set_routing_secret(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  routing_secret_ = value;
}
inline void CMsgSteamDatagramHostedServerAddressPlaintext::set_routing_secret(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_routing_secret(value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramHostedServerAddressPlaintext.routing_secret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steamdatagram_5fmessages_5fauth_2eproto
