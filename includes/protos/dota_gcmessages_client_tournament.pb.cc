// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#include "dota_gcmessages_client_tournament.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_id_(0u){}
struct CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo_PhaseGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal _CMsgDOTATournamentInfo_PhaseGroup_default_instance_;
constexpr CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_list_()
  , phase_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , phase_id_(0u)
  , type_id_(0u)
  , iterations_(0u)
  , min_start_time_(0u)
  , max_start_time_(0u){}
struct CMsgDOTATournamentInfo_PhaseDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfo_PhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfo_PhaseDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo_Phase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfo_PhaseDefaultTypeInternal _CMsgDOTATournamentInfo_Phase_default_instance_;
constexpr CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0u)
  , eliminated_(false)
  , team_logo_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTATournamentInfo_TeamDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfo_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfo_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfo_TeamDefaultTypeInternal _CMsgDOTATournamentInfo_Team_default_instance_;
constexpr CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stage_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , winner_stage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , loser_stage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team1_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team2_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team1_prev_opponent_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team2_prev_opponent_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , series_id_(0u)
  , team1_id_(0u)
  , team2_id_(0u)
  , bo_(0u)
  , start_time_(0u)
  , team1_prev_opponent_id_(0u)
  , team1_logo_(PROTOBUF_ULONGLONG(0))
  , team2_logo_(PROTOBUF_ULONGLONG(0))
  , team1_prev_opponent_logo_(PROTOBUF_ULONGLONG(0))
  , team2_prev_opponent_logo_(PROTOBUF_ULONGLONG(0))
  , team2_prev_opponent_id_(0u)
  , team1_prev_match_score_(0u)
  , team1_prev_match_opponent_score_(0u)
  , team2_prev_match_score_(0u)
  , team2_prev_match_opponent_score_(0u)
  , phase_type_(0u)
  , team1_score_(0u)
  , team2_score_(0u)
  , phase_id_(0u){}
struct CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo_UpcomingMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal _CMsgDOTATournamentInfo_UpcomingMatch_default_instance_;
constexpr CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0u){}
struct CMsgDOTATournamentInfo_NewsDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfo_NewsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfo_NewsDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo_News _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfo_NewsDefaultTypeInternal _CMsgDOTATournamentInfo_News_default_instance_;
constexpr CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phase_list_()
  , teams_list_()
  , upcoming_matches_list_()
  , news_list_()
  , league_id_(0u){}
struct CMsgDOTATournamentInfoDefaultTypeInternal {
  constexpr CMsgDOTATournamentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentInfoDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentInfoDefaultTypeInternal _CMsgDOTATournamentInfo_default_instance_;
constexpr CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgRequestWeekendTourneyScheduleDefaultTypeInternal {
  constexpr CMsgRequestWeekendTourneyScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestWeekendTourneyScheduleDefaultTypeInternal() {}
  union {
    CMsgRequestWeekendTourneySchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestWeekendTourneyScheduleDefaultTypeInternal _CMsgRequestWeekendTourneySchedule_default_instance_;
constexpr CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : division_code_(0u)
  , time_window_open_(0u)
  , time_window_close_(0u)
  , time_window_open_next_(0u)
  , trophy_id_(0u)
  , free_weekend_(false){}
struct CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal {
  constexpr CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal() {}
  union {
    CMsgWeekendTourneySchedule_Division _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal _CMsgWeekendTourneySchedule_Division_default_instance_;
constexpr CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : divisions_(){}
struct CMsgWeekendTourneyScheduleDefaultTypeInternal {
  constexpr CMsgWeekendTourneyScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWeekendTourneyScheduleDefaultTypeInternal() {}
  union {
    CMsgWeekendTourneySchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWeekendTourneyScheduleDefaultTypeInternal _CMsgWeekendTourneySchedule_default_instance_;
constexpr CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pickup_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , participating_(false)
  , division_id_(0u)
  , buyin_(0u)
  , skill_level_(0u)
  , match_groups_(0u)
  , team_id_(0u)
  , pickup_team_logo_(PROTOBUF_ULONGLONG(0)){}
struct CMsgWeekendTourneyOptsDefaultTypeInternal {
  constexpr CMsgWeekendTourneyOptsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWeekendTourneyOptsDefaultTypeInternal() {}
  union {
    CMsgWeekendTourneyOpts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWeekendTourneyOptsDefaultTypeInternal _CMsgWeekendTourneyOpts_default_instance_;
constexpr CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgWeekendTourneyLeaveDefaultTypeInternal {
  constexpr CMsgWeekendTourneyLeaveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWeekendTourneyLeaveDefaultTypeInternal() {}
  union {
    CMsgWeekendTourneyLeave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWeekendTourneyLeaveDefaultTypeInternal _CMsgWeekendTourneyLeave_default_instance_;
constexpr CMsgDOTATournament_Team::CMsgDOTATournament_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , _players_cached_byte_size_()
  , player_buyin_()
  , _player_buyin_cached_byte_size_()
  , player_skill_level_()
  , _player_skill_level_cached_byte_size_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_gid_(PROTOBUF_ULONGLONG(0))
  , node_or_state_(0u)
  , team_id_(0u)
  , team_base_logo_(PROTOBUF_ULONGLONG(0))
  , team_ui_logo_(PROTOBUF_ULONGLONG(0))
  , match_group_mask_(0u){}
struct CMsgDOTATournament_TeamDefaultTypeInternal {
  constexpr CMsgDOTATournament_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournament_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTATournament_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournament_TeamDefaultTypeInternal _CMsgDOTATournament_Team_default_instance_;
constexpr CMsgDOTATournament_Game::CMsgDOTATournament_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(PROTOBUF_ULONGLONG(0))
  , node_idx_(0u)
  , team_a_good_(false)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , state_(0)

  , start_time_(0u){}
struct CMsgDOTATournament_GameDefaultTypeInternal {
  constexpr CMsgDOTATournament_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournament_GameDefaultTypeInternal() {}
  union {
    CMsgDOTATournament_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournament_GameDefaultTypeInternal _CMsgDOTATournament_Game_default_instance_;
constexpr CMsgDOTATournament_Node::CMsgDOTATournament_Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(0u)
  , team_idx_a_(0u)
  , team_idx_b_(0u)
  , node_state_(0)
{}
struct CMsgDOTATournament_NodeDefaultTypeInternal {
  constexpr CMsgDOTATournament_NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournament_NodeDefaultTypeInternal() {}
  union {
    CMsgDOTATournament_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournament_NodeDefaultTypeInternal _CMsgDOTATournament_Node_default_instance_;
constexpr CMsgDOTATournament::CMsgDOTATournament(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , games_()
  , nodes_()
  , tournament_id_(0u)
  , division_id_(0u)
  , schedule_time_(0u)
  , skill_level_(0u)
  , tournament_template_(0)

  , state_(0)

  , state_seq_num_(0u)
  , season_trophy_id_(0u){}
struct CMsgDOTATournamentDefaultTypeInternal {
  constexpr CMsgDOTATournamentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentDefaultTypeInternal() {}
  union {
    CMsgDOTATournament _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentDefaultTypeInternal _CMsgDOTATournament_default_instance_;
constexpr CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , new_state_(0)
{}
struct CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal {
  constexpr CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentStateChange_GameChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_GameChange_default_instance_;
constexpr CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_gid_(PROTOBUF_ULONGLONG(0))
  , new_node_or_state_(0u)
  , old_node_or_state_(0u){}
struct CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal {
  constexpr CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentStateChange_TeamChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_TeamChange_default_instance_;
constexpr CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_changes_()
  , team_changes_()
  , merged_tournament_ids_()
  , _merged_tournament_ids_cached_byte_size_()
  , new_tournament_id_(0u)
  , event_(0)

  , new_tournament_state_(0)

  , state_seq_num_(0u){}
struct CMsgDOTATournamentStateChangeDefaultTypeInternal {
  constexpr CMsgDOTATournamentStateChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentStateChangeDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentStateChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentStateChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_default_instance_;
constexpr CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_tournament_gid_(PROTOBUF_ULONGLONG(0))
  , tournament_id_(0u){}
struct CMsgDOTATournamentRequestDefaultTypeInternal {
  constexpr CMsgDOTATournamentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentRequestDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentRequestDefaultTypeInternal _CMsgDOTATournamentRequest_default_instance_;
constexpr CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tournament_(nullptr)
  , result_(2u){}
struct CMsgDOTATournamentResponseDefaultTypeInternal {
  constexpr CMsgDOTATournamentResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATournamentResponseDefaultTypeInternal() {}
  union {
    CMsgDOTATournamentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATournamentResponseDefaultTypeInternal _CMsgDOTATournamentResponse_default_instance_;
constexpr CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tournament_id_(0u)
  , game_id_(0u){}
struct CMsgDOTAClearTournamentGameDefaultTypeInternal {
  constexpr CMsgDOTAClearTournamentGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAClearTournamentGameDefaultTypeInternal() {}
  union {
    CMsgDOTAClearTournamentGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAClearTournamentGameDefaultTypeInternal _CMsgDOTAClearTournamentGame_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skill_level_(0u)
  , times_won_0_(0u)
  , times_won_1_(0u)
  , times_won_2_(0u)
  , times_won_3_(0u)
  , times_bye_and_lost_(0u)
  , times_bye_and_won_(0u)
  , total_games_won_(0u)
  , score_(0u)
  , times_unusual_champ_(0u){}
struct CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerSkillLevelStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skill_levels_()
  , account_id_(0u)
  , season_trophy_id_(0u)
  , current_tier_(0u){}
struct CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerStats_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , season_trophy_id_(0u){}
struct CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerStatsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , season_trophy_id_(0u){}
struct CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerHistoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tournament_id_(0u)
  , start_time_(0u)
  , tournament_tier_(0u)
  , team_id_(0u)
  , team_date_(0u)
  , team_result_(0u)
  , season_trophy_id_(0u){}
struct CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerHistory_Tournament _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_;
constexpr CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tournaments_()
  , account_id_(0u){}
struct CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyPlayerHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_;
constexpr CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tier_(0u)
  , players_(0u)
  , teams_(0u)
  , winning_teams_(0u)
  , players_streak_2_(0u)
  , players_streak_3_(0u)
  , players_streak_4_(0u)
  , players_streak_5_(0u){}
struct CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyParticipationDetails_Tier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_;
constexpr CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tiers_()
  , division_id_(0u)
  , schedule_time_(0u){}
struct CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyParticipationDetails_Division _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_;
constexpr CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : divisions_(){}
struct CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal {
  constexpr CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTAWeekendTourneyParticipationDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_PhaseGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_PhaseGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_PhaseGroup, group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_PhaseGroup, group_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, phase_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, type_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, iterations_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, min_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, max_start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Phase, group_list_),
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_Team, eliminated_),
  2,
  0,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, bo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, stage_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, winner_stage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, loser_stage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_opponent_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_opponent_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, phase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team1_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, team2_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_UpcomingMatch, phase_id_),
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  14,
  15,
  16,
  12,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, link_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, image_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo_News, timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, phase_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, teams_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, upcoming_matches_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentInfo, news_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, division_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, time_window_open_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, time_window_close_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, time_window_open_next_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule_Division, free_weekend_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneySchedule, divisions_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, participating_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, division_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, buyin_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, match_groups_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, pickup_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyOpts, pickup_team_logo_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgWeekendTourneyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, team_gid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, node_or_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, player_buyin_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, player_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, match_group_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Team, team_ui_logo_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  6,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, node_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, team_a_good_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Game, start_time_),
  1,
  0,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, team_idx_a_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, team_idx_b_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament_Node, node_state_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, division_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, tournament_template_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, state_seq_num_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, games_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournament, nodes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_GameChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_GameChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_GameChange, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_GameChange, new_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_TeamChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_TeamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_TeamChange, team_gid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_TeamChange, new_node_or_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange_TeamChange, old_node_or_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, new_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, event_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, new_tournament_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, game_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, team_changes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, merged_tournament_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentStateChange, state_seq_num_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentRequest, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentRequest, client_tournament_gid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATournamentResponse, tournament_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClearTournamentGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClearTournamentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClearTournamentGame, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAClearTournamentGame, game_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_0_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_lost_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_unusual_champ_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, total_games_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, skill_levels_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStats, current_tier_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStatsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStatsRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerStatsRequest, season_trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistoryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistoryRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistoryRequest, season_trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, season_trophy_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyPlayerHistory, tournaments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, winning_teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_4_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Division, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Division, division_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Division, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails_Division, tiers_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAWeekendTourneyParticipationDetails, divisions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgDOTATournamentInfo_PhaseGroup)},
  { 9, 21, sizeof(::CMsgDOTATournamentInfo_Phase)},
  { 28, 38, sizeof(::CMsgDOTATournamentInfo_Team)},
  { 43, 74, sizeof(::CMsgDOTATournamentInfo_UpcomingMatch)},
  { 100, 109, sizeof(::CMsgDOTATournamentInfo_News)},
  { 113, 123, sizeof(::CMsgDOTATournamentInfo)},
  { 128, -1, sizeof(::CMsgRequestWeekendTourneySchedule)},
  { 133, 144, sizeof(::CMsgWeekendTourneySchedule_Division)},
  { 150, -1, sizeof(::CMsgWeekendTourneySchedule)},
  { 156, 169, sizeof(::CMsgWeekendTourneyOpts)},
  { 177, -1, sizeof(::CMsgWeekendTourneyLeave)},
  { 182, 197, sizeof(::CMsgDOTATournament_Team)},
  { 207, 218, sizeof(::CMsgDOTATournament_Game)},
  { 224, 233, sizeof(::CMsgDOTATournament_Node)},
  { 237, 253, sizeof(::CMsgDOTATournament)},
  { 264, 271, sizeof(::CMsgDOTATournamentStateChange_GameChange)},
  { 273, 281, sizeof(::CMsgDOTATournamentStateChange_TeamChange)},
  { 284, 296, sizeof(::CMsgDOTATournamentStateChange)},
  { 303, 310, sizeof(::CMsgDOTATournamentRequest)},
  { 312, 319, sizeof(::CMsgDOTATournamentResponse)},
  { 321, 328, sizeof(::CMsgDOTAClearTournamentGame)},
  { 330, 345, sizeof(::CMsgDOTAWeekendTourneyPlayerSkillLevelStats)},
  { 355, 364, sizeof(::CMsgDOTAWeekendTourneyPlayerStats)},
  { 368, 375, sizeof(::CMsgDOTAWeekendTourneyPlayerStatsRequest)},
  { 377, 384, sizeof(::CMsgDOTAWeekendTourneyPlayerHistoryRequest)},
  { 386, 400, sizeof(::CMsgDOTAWeekendTourneyPlayerHistory_Tournament)},
  { 409, 416, sizeof(::CMsgDOTAWeekendTourneyPlayerHistory)},
  { 418, 431, sizeof(::CMsgDOTAWeekendTourneyParticipationDetails_Tier)},
  { 439, 447, sizeof(::CMsgDOTAWeekendTourneyParticipationDetails_Division)},
  { 450, -1, sizeof(::CMsgDOTAWeekendTourneyParticipationDetails)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_PhaseGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_Phase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_UpcomingMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_News_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWeekendTourneySchedule_Division_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWeekendTourneyOpts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWeekendTourneyLeave_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournament_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournament_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournament_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournament_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentStateChange_GameChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentStateChange_TeamChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentStateChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATournamentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAClearTournamentGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyPlayerHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAWeekendTourneyParticipationDetails_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5ftournament_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'dota_gcmessages_client_tournament.prot"
  "o\032\027dota_client_enums.proto\"\270\n\n\026CMsgDOTAT"
  "ournamentInfo\022\021\n\tleague_id\030\001 \001(\r\0221\n\nphas"
  "e_list\030\002 \003(\0132\035.CMsgDOTATournamentInfo.Ph"
  "ase\0220\n\nteams_list\030\003 \003(\0132\034.CMsgDOTATourna"
  "mentInfo.Team\022D\n\025upcoming_matches_list\030\004"
  " \003(\0132%.CMsgDOTATournamentInfo.UpcomingMa"
  "tch\022/\n\tnews_list\030\005 \003(\0132\034.CMsgDOTATournam"
  "entInfo.News\0322\n\nPhaseGroup\022\020\n\010group_id\030\001"
  " \001(\r\022\022\n\ngroup_name\030\002 \001(\t\032\272\001\n\005Phase\022\020\n\010ph"
  "ase_id\030\001 \001(\r\022\022\n\nphase_name\030\002 \001(\t\022\017\n\007type"
  "_id\030\003 \001(\r\022\022\n\niterations\030\004 \001(\r\022\026\n\016min_sta"
  "rt_time\030\005 \001(\r\022\026\n\016max_start_time\030\006 \001(\r\0226\n"
  "\ngroup_list\030\007 \003(\0132\".CMsgDOTATournamentIn"
  "fo.PhaseGroup\032Y\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\014"
  "\n\004name\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022\021\n\tteam_logo\030\004"
  " \001(\004\022\022\n\neliminated\030\005 \001(\010\032\233\005\n\rUpcomingMat"
  "ch\022\021\n\tseries_id\030\001 \001(\r\022\020\n\010team1_id\030\002 \001(\r\022"
  "\020\n\010team2_id\030\003 \001(\r\022\n\n\002bo\030\004 \001(\r\022\022\n\nstage_n"
  "ame\030\005 \001(\t\022\022\n\nstart_time\030\006 \001(\r\022\024\n\014winner_"
  "stage\030\007 \001(\t\022\023\n\013loser_stage\030\010 \001(\t\022\021\n\tteam"
  "1_tag\030\t \001(\t\022\021\n\tteam2_tag\030\n \001(\t\022\037\n\027team1_"
  "prev_opponent_tag\030\013 \001(\t\022\037\n\027team2_prev_op"
  "ponent_tag\030\014 \001(\t\022\022\n\nteam1_logo\030\r \001(\004\022\022\n\n"
  "team2_logo\030\016 \001(\004\022 \n\030team1_prev_opponent_"
  "logo\030\017 \001(\004\022 \n\030team2_prev_opponent_logo\030\020"
  " \001(\004\022\036\n\026team1_prev_opponent_id\030\021 \001(\r\022\036\n\026"
  "team2_prev_opponent_id\030\022 \001(\r\022\036\n\026team1_pr"
  "ev_match_score\030\023 \001(\r\022\'\n\037team1_prev_match"
  "_opponent_score\030\024 \001(\r\022\036\n\026team2_prev_matc"
  "h_score\030\025 \001(\r\022\'\n\037team2_prev_match_oppone"
  "nt_score\030\026 \001(\r\022\022\n\nphase_type\030\027 \001(\r\022\023\n\013te"
  "am1_score\030\030 \001(\r\022\023\n\013team2_score\030\031 \001(\r\022\020\n\010"
  "phase_id\030\032 \001(\r\032E\n\004News\022\014\n\004link\030\001 \001(\t\022\r\n\005"
  "title\030\002 \001(\t\022\r\n\005image\030\003 \001(\t\022\021\n\ttimestamp\030"
  "\004 \001(\r\"#\n!CMsgRequestWeekendTourneySchedu"
  "le\"\366\001\n\032CMsgWeekendTourneySchedule\0227\n\tdiv"
  "isions\030\001 \003(\0132$.CMsgWeekendTourneySchedul"
  "e.Division\032\236\001\n\010Division\022\025\n\rdivision_code"
  "\030\001 \001(\r\022\030\n\020time_window_open\030\002 \001(\r\022\031\n\021time"
  "_window_close\030\003 \001(\r\022\035\n\025time_window_open_"
  "next\030\004 \001(\r\022\021\n\ttrophy_id\030\005 \001(\r\022\024\n\014free_we"
  "ekend\030\006 \001(\010\"\303\001\n\026CMsgWeekendTourneyOpts\022\025"
  "\n\rparticipating\030\001 \001(\010\022\023\n\013division_id\030\002 \001"
  "(\r\022\r\n\005buyin\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\024"
  "\n\014match_groups\030\005 \001(\r\022\017\n\007team_id\030\006 \001(\r\022\030\n"
  "\020pickup_team_name\030\007 \001(\t\022\030\n\020pickup_team_l"
  "ogo\030\010 \001(\004\"\031\n\027CMsgWeekendTourneyLeave\"\315\007\n"
  "\022CMsgDOTATournament\022\025\n\rtournament_id\030\001 \001"
  "(\r\022\023\n\013division_id\030\002 \001(\r\022\025\n\rschedule_time"
  "\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022M\n\023tournamen"
  "t_template\030\005 \001(\0162\024.ETournamentTemplate:\032"
  "k_ETournamentTemplate_None\022<\n\005state\030\006 \001("
  "\0162\021.ETournamentState:\032k_ETournamentState"
  "_Unknown\022\025\n\rstate_seq_num\030\n \001(\r\022\030\n\020seaso"
  "n_trophy_id\030\013 \001(\r\022\'\n\005teams\030\007 \003(\0132\030.CMsgD"
  "OTATournament.Team\022\'\n\005games\030\010 \003(\0132\030.CMsg"
  "DOTATournament.Game\022\'\n\005nodes\030\t \003(\0132\030.CMs"
  "gDOTATournament.Node\032\352\001\n\004Team\022\020\n\010team_gi"
  "d\030\001 \001(\006\022\025\n\rnode_or_state\030\002 \001(\r\022\023\n\007player"
  "s\030\003 \003(\rB\002\020\001\022\030\n\014player_buyin\030\t \003(\rB\002\020\001\022\036\n"
  "\022player_skill_level\030\n \003(\rB\002\020\001\022\030\n\020match_g"
  "roup_mask\030\014 \001(\r\022\017\n\007team_id\030\004 \001(\r\022\021\n\tteam"
  "_name\030\005 \001(\t\022\026\n\016team_base_logo\030\007 \001(\004\022\024\n\014t"
  "eam_ui_logo\030\010 \001(\004\032\253\001\n\004Game\022\020\n\010node_idx\030\001"
  " \001(\r\022\020\n\010lobby_id\030\002 \001(\006\022\020\n\010match_id\030\003 \001(\004"
  "\022\023\n\013team_a_good\030\004 \001(\010\022D\n\005state\030\005 \001(\0162\025.E"
  "TournamentGameState:\036k_ETournamentGameSt"
  "ate_Unknown\022\022\n\nstart_time\030\006 \001(\r\032\212\001\n\004Node"
  "\022\017\n\007node_id\030\001 \001(\r\022\022\n\nteam_idx_a\030\002 \001(\r\022\022\n"
  "\nteam_idx_b\030\003 \001(\r\022I\n\nnode_state\030\004 \001(\0162\025."
  "ETournamentNodeState:\036k_ETournamentNodeS"
  "tate_Unknown\"\276\004\n\035CMsgDOTATournamentState"
  "Change\022\031\n\021new_tournament_id\030\001 \001(\r\0229\n\005eve"
  "nt\030\002 \001(\0162\021.ETournamentEvent:\027k_ETourname"
  "ntEvent_None\022K\n\024new_tournament_state\030\003 \001"
  "(\0162\021.ETournamentState:\032k_ETournamentStat"
  "e_Unknown\022\?\n\014game_changes\030\004 \003(\0132).CMsgDO"
  "TATournamentStateChange.GameChange\022\?\n\014te"
  "am_changes\030\005 \003(\0132).CMsgDOTATournamentSta"
  "teChange.TeamChange\022!\n\025merged_tournament"
  "_ids\030\006 \003(\rB\002\020\001\022\025\n\rstate_seq_num\030\007 \001(\r\032h\n"
  "\nGameChange\022\020\n\010match_id\030\001 \001(\004\022H\n\tnew_sta"
  "te\030\002 \001(\0162\025.ETournamentGameState:\036k_ETour"
  "namentGameState_Unknown\032T\n\nTeamChange\022\020\n"
  "\010team_gid\030\001 \001(\004\022\031\n\021new_node_or_state\030\002 \001"
  "(\r\022\031\n\021old_node_or_state\030\003 \001(\r\"Q\n\031CMsgDOT"
  "ATournamentRequest\022\025\n\rtournament_id\030\001 \001("
  "\r\022\035\n\025client_tournament_gid\030\002 \001(\004\"X\n\032CMsg"
  "DOTATournamentResponse\022\021\n\006result\030\001 \001(\r:\001"
  "2\022\'\n\ntournament\030\002 \001(\0132\023.CMsgDOTATourname"
  "nt\"E\n\033CMsgDOTAClearTournamentGame\022\025\n\rtou"
  "rnament_id\030\001 \001(\r\022\017\n\007game_id\030\002 \001(\r\"\222\002\n+CM"
  "sgDOTAWeekendTourneyPlayerSkillLevelStat"
  "s\022\023\n\013skill_level\030\001 \001(\r\022\023\n\013times_won_0\030\002 "
  "\001(\r\022\023\n\013times_won_1\030\003 \001(\r\022\023\n\013times_won_2\030"
  "\004 \001(\r\022\023\n\013times_won_3\030\005 \001(\r\022\032\n\022times_bye_"
  "and_lost\030\006 \001(\r\022\031\n\021times_bye_and_won\030\007 \001("
  "\r\022\033\n\023times_unusual_champ\030\n \001(\r\022\027\n\017total_"
  "games_won\030\010 \001(\r\022\r\n\005score\030\t \001(\r\"\253\001\n!CMsgD"
  "OTAWeekendTourneyPlayerStats\022\022\n\naccount_"
  "id\030\001 \001(\r\022\030\n\020season_trophy_id\030\002 \001(\r\022B\n\014sk"
  "ill_levels\030\003 \003(\0132,.CMsgDOTAWeekendTourne"
  "yPlayerSkillLevelStats\022\024\n\014current_tier\030\004"
  " \001(\r\"X\n(CMsgDOTAWeekendTourneyPlayerStat"
  "sRequest\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020season_t"
  "rophy_id\030\002 \001(\r\"Z\n*CMsgDOTAWeekendTourney"
  "PlayerHistoryRequest\022\022\n\naccount_id\030\001 \001(\r"
  "\022\030\n\020season_trophy_id\030\002 \001(\r\"\314\002\n#CMsgDOTAW"
  "eekendTourneyPlayerHistory\022\022\n\naccount_id"
  "\030\001 \001(\r\022D\n\013tournaments\030\003 \003(\0132/.CMsgDOTAWe"
  "ekendTourneyPlayerHistory.Tournament\032\312\001\n"
  "\nTournament\022\025\n\rtournament_id\030\001 \001(\r\022\022\n\nst"
  "art_time\030\002 \001(\r\022\027\n\017tournament_tier\030\003 \001(\r\022"
  "\017\n\007team_id\030\004 \001(\r\022\021\n\tteam_date\030\005 \001(\r\022\023\n\013t"
  "eam_result\030\006 \001(\r\022\022\n\naccount_id\030\007 \003(\r\022\021\n\t"
  "team_name\030\010 \001(\t\022\030\n\020season_trophy_id\030\t \001("
  "\r\"\244\003\n*CMsgDOTAWeekendTourneyParticipatio"
  "nDetails\022G\n\tdivisions\030\001 \003(\01324.CMsgDOTAWe"
  "ekendTourneyParticipationDetails.Divisio"
  "n\032\263\001\n\004Tier\022\014\n\004tier\030\001 \001(\r\022\017\n\007players\030\002 \001("
  "\r\022\r\n\005teams\030\003 \001(\r\022\025\n\rwinning_teams\030\004 \001(\r\022"
  "\030\n\020players_streak_2\030\005 \001(\r\022\030\n\020players_str"
  "eak_3\030\006 \001(\r\022\030\n\020players_streak_4\030\007 \001(\r\022\030\n"
  "\020players_streak_5\030\010 \001(\r\032w\n\010Division\022\023\n\013d"
  "ivision_id\030\001 \001(\r\022\025\n\rschedule_time\030\002 \001(\r\022"
  "\?\n\005tiers\030\003 \003(\01320.CMsgDOTAWeekendTourneyP"
  "articipationDetails.Tier*\266\004\n\020ETournament"
  "Event\022\033\n\027k_ETournamentEvent_None\020\000\022(\n$k_"
  "ETournamentEvent_TournamentCreated\020\001\022(\n$"
  "k_ETournamentEvent_TournamentsMerged\020\002\022\""
  "\n\036k_ETournamentEvent_GameOutcome\020\003\022#\n\037k_"
  "ETournamentEvent_TeamGivenBye\020\004\0220\n,k_ETo"
  "urnamentEvent_TournamentCanceledByAdmin\020"
  "\005\022$\n k_ETournamentEvent_TeamAbandoned\020\006\022"
  "+\n\'k_ETournamentEvent_ScheduledGameStart"
  "ed\020\007\022\037\n\033k_ETournamentEvent_Canceled\020\010\022\?\n"
  ";k_ETournamentEvent_TeamParticipationTim"
  "edOut_EntryFeeRefund\020\t\022@\n<k_ETournamentE"
  "vent_TeamParticipationTimedOut_EntryFeeF"
  "orfeit\020\n\022\?\n;k_ETournamentEvent_TeamParti"
  "cipationTimedOut_GrantedVictory\020\013B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto_deps[1] = {
  &::descriptor_table_dota_5fclient_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto = {
  false, false, 5680, descriptor_table_protodef_dota_5fgcmessages_5fclient_5ftournament_2eproto, "dota_gcmessages_client_tournament.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto_deps, 1, 30,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5ftournament_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto[0];
}
bool ETournamentEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTATournamentInfo_PhaseGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo_PhaseGroup>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo.PhaseGroup)
}
CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(const CMsgDOTATournamentInfo_PhaseGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_group_name()) {
    group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_name(), 
      GetArena());
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.PhaseGroup)
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedCtor() {
group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
group_id_ = 0u;
}

CMsgDOTATournamentInfo_PhaseGroup::~CMsgDOTATournamentInfo_PhaseGroup() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.PhaseGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_PhaseGroup::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo_PhaseGroup* _this = reinterpret_cast< CMsgDOTATournamentInfo_PhaseGroup* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo_PhaseGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo_PhaseGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo_PhaseGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo.PhaseGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_name_.ClearNonDefaultToEmpty();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo_PhaseGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.PhaseGroup.group_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo_PhaseGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.PhaseGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_group_id(), target);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.PhaseGroup.group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.PhaseGroup)
  return target;
}

size_t CMsgDOTATournamentInfo_PhaseGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo.PhaseGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string group_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

    // optional uint32 group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_group_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_PhaseGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo_PhaseGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo.PhaseGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo.PhaseGroup)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_group_name(from._internal_group_name());
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_PhaseGroup::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_PhaseGroup::InternalSwap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(group_id_, other->group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo_PhaseGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentInfo_Phase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo_Phase>()._has_bits_);
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phase_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  group_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo.Phase)
}
CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(const CMsgDOTATournamentInfo_Phase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      group_list_(from.group_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phase_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_phase_name()) {
    phase_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phase_name(), 
      GetArena());
  }
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_start_time_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.Phase)
}

void CMsgDOTATournamentInfo_Phase::SharedCtor() {
phase_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phase_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_start_time_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
}

CMsgDOTATournamentInfo_Phase::~CMsgDOTATournamentInfo_Phase() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.Phase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo_Phase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  phase_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Phase::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo_Phase* _this = reinterpret_cast< CMsgDOTATournamentInfo_Phase* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo_Phase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo_Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phase_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&phase_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_start_time_) -
        reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo_Phase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 phase_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phase_id(&has_bits);
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string phase_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_phase_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.Phase.phase_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 iterations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iterations(&has_bits);
          iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_start_time(&has_bits);
          min_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_start_time(&has_bits);
          max_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo_Phase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.Phase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phase_id(), target);
  }

  // optional string phase_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_phase_name().data(), static_cast<int>(this->_internal_phase_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.Phase.phase_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_phase_name(), target);
  }

  // optional uint32 type_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type_id(), target);
  }

  // optional uint32 iterations = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_iterations(), target);
  }

  // optional uint32 min_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_start_time(), target);
  }

  // optional uint32 max_start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_start_time(), target);
  }

  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_group_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_group_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.Phase)
  return target;
}

size_t CMsgDOTATournamentInfo_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo.Phase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  total_size += 1UL * this->_internal_group_list_size();
  for (const auto& msg : this->group_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string phase_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_phase_name());
    }

    // optional uint32 phase_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phase_id());
    }

    // optional uint32 type_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type_id());
    }

    // optional uint32 iterations = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_iterations());
    }

    // optional uint32 min_start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_start_time());
    }

    // optional uint32 max_start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_start_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Phase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo_Phase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo.Phase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo.Phase)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_list_.MergeFrom(from.group_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_phase_name(from._internal_phase_name());
    }
    if (cached_has_bits & 0x00000002u) {
      phase_id_ = from.phase_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      iterations_ = from.iterations_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_start_time_ = from.min_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_start_time_ = from.max_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Phase::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Phase::InternalSwap(CMsgDOTATournamentInfo_Phase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_list_.InternalSwap(&other->group_list_);
  phase_name_.Swap(&other->phase_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, max_start_time_)
      + sizeof(CMsgDOTATournamentInfo_Phase::max_start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, phase_id_)>(
          reinterpret_cast<char*>(&phase_id_),
          reinterpret_cast<char*>(&other->phase_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo_Phase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentInfo_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo_Team>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_eliminated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo.Team)
}
CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(const CMsgDOTATournamentInfo_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.Team)
}

void CMsgDOTATournamentInfo_Team::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
}

CMsgDOTATournamentInfo_Team::~CMsgDOTATournamentInfo_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Team::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo_Team* _this = reinterpret_cast< CMsgDOTATournamentInfo_Team* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_logo_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.Team.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.Team.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool eliminated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_eliminated(&has_bits);
          eliminated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.Team.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.Team.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_team_logo(), target);
  }

  // optional bool eliminated = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_eliminated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.Team)
  return target;
}

size_t CMsgDOTATournamentInfo_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional bool eliminated = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 team_logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_logo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      eliminated_ = from.eliminated_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Team::InternalSwap(CMsgDOTATournamentInfo_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_logo_)
      + sizeof(CMsgDOTATournamentInfo_Team::team_logo_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentInfo_UpcomingMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo_UpcomingMatch>()._has_bits_);
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team1_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_team2_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_stage_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_winner_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loser_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team1_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team2_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team1_prev_opponent_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team2_prev_opponent_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team1_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_team2_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_team1_prev_opponent_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_team2_prev_opponent_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_team1_prev_opponent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_team2_prev_opponent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_team1_prev_match_score(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_team1_prev_match_opponent_score(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_team2_prev_match_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_team2_prev_match_opponent_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_phase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_team1_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_team2_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_phase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
};

CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo.UpcomingMatch)
}
CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(const CMsgDOTATournamentInfo_UpcomingMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stage_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_stage_name()) {
    stage_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stage_name(), 
      GetArena());
  }
  winner_stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_winner_stage()) {
    winner_stage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_winner_stage(), 
      GetArena());
  }
  loser_stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_loser_stage()) {
    loser_stage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_loser_stage(), 
      GetArena());
  }
  team1_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team1_tag()) {
    team1_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team1_tag(), 
      GetArena());
  }
  team2_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team2_tag()) {
    team2_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team2_tag(), 
      GetArena());
  }
  team1_prev_opponent_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team1_prev_opponent_tag()) {
    team1_prev_opponent_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team1_prev_opponent_tag(), 
      GetArena());
  }
  team2_prev_opponent_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team2_prev_opponent_tag()) {
    team2_prev_opponent_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team2_prev_opponent_tag(), 
      GetArena());
  }
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.UpcomingMatch)
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedCtor() {
stage_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
winner_stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
loser_stage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team1_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team2_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team1_prev_opponent_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team2_prev_opponent_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&series_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(phase_id_));
}

CMsgDOTATournamentInfo_UpcomingMatch::~CMsgDOTATournamentInfo_UpcomingMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.UpcomingMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stage_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  winner_stage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loser_stage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team1_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team2_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_UpcomingMatch::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo_UpcomingMatch* _this = reinterpret_cast< CMsgDOTATournamentInfo_UpcomingMatch* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo_UpcomingMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo_UpcomingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo_UpcomingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo.UpcomingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      stage_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      winner_stage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      loser_stage_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      team1_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      team2_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      team1_prev_opponent_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      team2_prev_opponent_tag_.ClearNonDefaultToEmpty();
    }
  }
  series_id_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&team1_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team1_prev_opponent_logo_) -
        reinterpret_cast<char*>(&team1_id_)) + sizeof(team1_prev_opponent_logo_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&team2_prev_opponent_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team1_score_) -
        reinterpret_cast<char*>(&team2_prev_opponent_logo_)) + sizeof(team1_score_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&team2_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_id_) -
        reinterpret_cast<char*>(&team2_score_)) + sizeof(phase_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo_UpcomingMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team1_id(&has_bits);
          team1_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team2_id(&has_bits);
          team2_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bo(&has_bits);
          bo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string stage_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stage_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string winner_stage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_winner_stage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string loser_stage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_loser_stage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team1_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_team1_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team2_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_team2_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team1_prev_opponent_tag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_team1_prev_opponent_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team2_prev_opponent_tag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_team2_prev_opponent_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team1_logo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_team1_logo(&has_bits);
          team1_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team2_logo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_team2_logo(&has_bits);
          team2_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team1_prev_opponent_logo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_team1_prev_opponent_logo(&has_bits);
          team1_prev_opponent_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team2_prev_opponent_logo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_team2_prev_opponent_logo(&has_bits);
          team2_prev_opponent_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1_prev_opponent_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_team1_prev_opponent_id(&has_bits);
          team1_prev_opponent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2_prev_opponent_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_team2_prev_opponent_id(&has_bits);
          team2_prev_opponent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1_prev_match_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_team1_prev_match_score(&has_bits);
          team1_prev_match_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1_prev_match_opponent_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_team1_prev_match_opponent_score(&has_bits);
          team1_prev_match_opponent_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2_prev_match_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_team2_prev_match_score(&has_bits);
          team2_prev_match_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2_prev_match_opponent_score = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_team2_prev_match_opponent_score(&has_bits);
          team2_prev_match_opponent_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phase_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_phase_type(&has_bits);
          phase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1_score = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_team1_score(&has_bits);
          team1_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2_score = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_team2_score(&has_bits);
          team2_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phase_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_phase_id(&has_bits);
          phase_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo_UpcomingMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.UpcomingMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_series_id(), target);
  }

  // optional uint32 team1_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team1_id(), target);
  }

  // optional uint32 team2_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team2_id(), target);
  }

  // optional uint32 bo = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bo(), target);
  }

  // optional string stage_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stage_name().data(), static_cast<int>(this->_internal_stage_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stage_name(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_time(), target);
  }

  // optional string winner_stage = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_winner_stage().data(), static_cast<int>(this->_internal_winner_stage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_winner_stage(), target);
  }

  // optional string loser_stage = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loser_stage().data(), static_cast<int>(this->_internal_loser_stage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_loser_stage(), target);
  }

  // optional string team1_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team1_tag().data(), static_cast<int>(this->_internal_team1_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_team1_tag(), target);
  }

  // optional string team2_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team2_tag().data(), static_cast<int>(this->_internal_team2_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_team2_tag(), target);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team1_prev_opponent_tag().data(), static_cast<int>(this->_internal_team1_prev_opponent_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_team1_prev_opponent_tag(), target);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team2_prev_opponent_tag().data(), static_cast<int>(this->_internal_team2_prev_opponent_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_team2_prev_opponent_tag(), target);
  }

  // optional uint64 team1_logo = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_team1_logo(), target);
  }

  // optional uint64 team2_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_team2_logo(), target);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_team1_prev_opponent_logo(), target);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_team2_prev_opponent_logo(), target);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_team1_prev_opponent_id(), target);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_team2_prev_opponent_id(), target);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_team1_prev_match_score(), target);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_team1_prev_match_opponent_score(), target);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_team2_prev_match_score(), target);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_team2_prev_match_opponent_score(), target);
  }

  // optional uint32 phase_type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_phase_type(), target);
  }

  // optional uint32 team1_score = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_team1_score(), target);
  }

  // optional uint32 team2_score = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_team2_score(), target);
  }

  // optional uint32 phase_id = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_phase_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.UpcomingMatch)
  return target;
}

size_t CMsgDOTATournamentInfo_UpcomingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo.UpcomingMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stage_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stage_name());
    }

    // optional string winner_stage = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_winner_stage());
    }

    // optional string loser_stage = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loser_stage());
    }

    // optional string team1_tag = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team1_tag());
    }

    // optional string team2_tag = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team2_tag());
    }

    // optional string team1_prev_opponent_tag = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team1_prev_opponent_tag());
    }

    // optional string team2_prev_opponent_tag = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team2_prev_opponent_tag());
    }

    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 team1_id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1_id());
    }

    // optional uint32 team2_id = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2_id());
    }

    // optional uint32 bo = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bo());
    }

    // optional uint32 start_time = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 team1_prev_opponent_id = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1_prev_opponent_id());
    }

    // optional uint64 team1_logo = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team1_logo());
    }

    // optional uint64 team2_logo = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team2_logo());
    }

    // optional uint64 team1_prev_opponent_logo = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team1_prev_opponent_logo());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 team2_prev_opponent_logo = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team2_prev_opponent_logo());
    }

    // optional uint32 team2_prev_opponent_id = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2_prev_opponent_id());
    }

    // optional uint32 team1_prev_match_score = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1_prev_match_score());
    }

    // optional uint32 team1_prev_match_opponent_score = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1_prev_match_opponent_score());
    }

    // optional uint32 team2_prev_match_score = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2_prev_match_score());
    }

    // optional uint32 team2_prev_match_opponent_score = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2_prev_match_opponent_score());
    }

    // optional uint32 phase_type = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phase_type());
    }

    // optional uint32 team1_score = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1_score());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 team2_score = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2_score());
    }

    // optional uint32 phase_id = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phase_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_UpcomingMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo_UpcomingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo.UpcomingMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo.UpcomingMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stage_name(from._internal_stage_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_winner_stage(from._internal_winner_stage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_loser_stage(from._internal_loser_stage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_team1_tag(from._internal_team1_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_team2_tag(from._internal_team2_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_team1_prev_opponent_tag(from._internal_team1_prev_opponent_tag());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_team2_prev_opponent_tag(from._internal_team2_prev_opponent_tag());
    }
    if (cached_has_bits & 0x00000080u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      team1_id_ = from.team1_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      team2_id_ = from.team2_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      bo_ = from.bo_;
    }
    if (cached_has_bits & 0x00000800u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      team1_prev_opponent_id_ = from.team1_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      team1_logo_ = from.team1_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      team2_logo_ = from.team2_logo_;
    }
    if (cached_has_bits & 0x00008000u) {
      team1_prev_opponent_logo_ = from.team1_prev_opponent_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      team2_prev_opponent_logo_ = from.team2_prev_opponent_logo_;
    }
    if (cached_has_bits & 0x00020000u) {
      team2_prev_opponent_id_ = from.team2_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      team1_prev_match_score_ = from.team1_prev_match_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      team1_prev_match_opponent_score_ = from.team1_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      team2_prev_match_score_ = from.team2_prev_match_score_;
    }
    if (cached_has_bits & 0x00200000u) {
      team2_prev_match_opponent_score_ = from.team2_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00400000u) {
      phase_type_ = from.phase_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      team1_score_ = from.team1_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      team2_score_ = from.team2_score_;
    }
    if (cached_has_bits & 0x02000000u) {
      phase_id_ = from.phase_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_UpcomingMatch::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_UpcomingMatch::InternalSwap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_name_.Swap(&other->stage_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  winner_stage_.Swap(&other->winner_stage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  loser_stage_.Swap(&other->loser_stage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team1_tag_.Swap(&other->team1_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team2_tag_.Swap(&other->team2_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team1_prev_opponent_tag_.Swap(&other->team1_prev_opponent_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team2_prev_opponent_tag_.Swap(&other->team2_prev_opponent_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, phase_id_)
      + sizeof(CMsgDOTATournamentInfo_UpcomingMatch::phase_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, series_id_)>(
          reinterpret_cast<char*>(&series_id_),
          reinterpret_cast<char*>(&other->series_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo_UpcomingMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentInfo_News::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo_News>()._has_bits_);
  static void set_has_link(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo.News)
}
CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(const CMsgDOTATournamentInfo_News& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_link()) {
    link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link(), 
      GetArena());
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo.News)
}

void CMsgDOTATournamentInfo_News::SharedCtor() {
link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = 0u;
}

CMsgDOTATournamentInfo_News::~CMsgDOTATournamentInfo_News() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo.News)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo_News::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_News::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo_News* _this = reinterpret_cast< CMsgDOTATournamentInfo_News* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo_News::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo_News::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo_News::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo.News)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      link_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      image_.ClearNonDefaultToEmpty();
    }
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo_News::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.News.link");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.News.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournamentInfo.News.image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo_News::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo.News)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.News.link");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_link(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.News.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournamentInfo.News.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo.News)
  return target;
}

size_t CMsgDOTATournamentInfo_News::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo.News)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string link = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_link());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_News::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_News* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo_News>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo.News)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo.News)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_News::MergeFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_link(from._internal_link());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_News::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_News::CopyFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_News::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_News::InternalSwap(CMsgDOTATournamentInfo_News* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  link_.Swap(&other->link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo_News::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentInfo>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  phase_list_(arena),
  teams_list_(arena),
  upcoming_matches_list_(arena),
  news_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentInfo)
}
CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(const CMsgDOTATournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      phase_list_(from.phase_list_),
      teams_list_(from.teams_list_),
      upcoming_matches_list_(from.upcoming_matches_list_),
      news_list_(from.news_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentInfo)
}

void CMsgDOTATournamentInfo::SharedCtor() {
league_id_ = 0u;
}

CMsgDOTATournamentInfo::~CMsgDOTATournamentInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournamentInfo::ArenaDtor(void* object) {
  CMsgDOTATournamentInfo* _this = reinterpret_cast< CMsgDOTATournamentInfo* >(object);
  (void)_this;
}
void CMsgDOTATournamentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phase_list_.Clear();
  teams_list_.Clear();
  upcoming_matches_list_.Clear();
  news_list_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phase_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upcoming_matches_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentInfo.News news_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_news_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_phase_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_phase_list(i), target, stream);
  }

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_teams_list(i), target, stream);
  }

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upcoming_matches_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_upcoming_matches_list(i), target, stream);
  }

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_news_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_news_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentInfo)
  return target;
}

size_t CMsgDOTATournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATournamentInfo.Phase phase_list = 2;
  total_size += 1UL * this->_internal_phase_list_size();
  for (const auto& msg : this->phase_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournamentInfo.Team teams_list = 3;
  total_size += 1UL * this->_internal_teams_list_size();
  for (const auto& msg : this->teams_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  total_size += 1UL * this->_internal_upcoming_matches_list_size();
  for (const auto& msg : this->upcoming_matches_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournamentInfo.News news_list = 5;
  total_size += 1UL * this->_internal_news_list_size();
  for (const auto& msg : this->news_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo::MergeFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phase_list_.MergeFrom(from.phase_list_);
  teams_list_.MergeFrom(from.teams_list_);
  upcoming_matches_list_.MergeFrom(from.upcoming_matches_list_);
  news_list_.MergeFrom(from.news_list_);
  if (from._internal_has_league_id()) {
    _internal_set_league_id(from._internal_league_id());
  }
}

void CMsgDOTATournamentInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo::CopyFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo::InternalSwap(CMsgDOTATournamentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phase_list_.InternalSwap(&other->phase_list_);
  teams_list_.InternalSwap(&other->teams_list_);
  upcoming_matches_list_.InternalSwap(&other->upcoming_matches_list_);
  news_list_.InternalSwap(&other->news_list_);
  swap(league_id_, other->league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestWeekendTourneySchedule::_Internal {
 public:
};

CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestWeekendTourneySchedule)
}
CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgRequestWeekendTourneySchedule)
}

void CMsgRequestWeekendTourneySchedule::SharedCtor() {
}

CMsgRequestWeekendTourneySchedule::~CMsgRequestWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:CMsgRequestWeekendTourneySchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestWeekendTourneySchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestWeekendTourneySchedule::ArenaDtor(void* object) {
  CMsgRequestWeekendTourneySchedule* _this = reinterpret_cast< CMsgRequestWeekendTourneySchedule* >(object);
  (void)_this;
}
void CMsgRequestWeekendTourneySchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestWeekendTourneySchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestWeekendTourneySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestWeekendTourneySchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestWeekendTourneySchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestWeekendTourneySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestWeekendTourneySchedule)
  return target;
}

size_t CMsgRequestWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestWeekendTourneySchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestWeekendTourneySchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestWeekendTourneySchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestWeekendTourneySchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgRequestWeekendTourneySchedule::InternalSwap(CMsgRequestWeekendTourneySchedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestWeekendTourneySchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWeekendTourneySchedule_Division::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWeekendTourneySchedule_Division>()._has_bits_);
  static void set_has_division_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_window_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_window_close(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_window_open_next(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_free_weekend(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWeekendTourneySchedule.Division)
}
CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&division_code_, &from.division_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_weekend_) -
    reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneySchedule.Division)
}

void CMsgWeekendTourneySchedule_Division::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&division_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&free_weekend_) -
    reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
}

CMsgWeekendTourneySchedule_Division::~CMsgWeekendTourneySchedule_Division() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneySchedule.Division)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWeekendTourneySchedule_Division::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWeekendTourneySchedule_Division::ArenaDtor(void* object) {
  CMsgWeekendTourneySchedule_Division* _this = reinterpret_cast< CMsgWeekendTourneySchedule_Division* >(object);
  (void)_this;
}
void CMsgWeekendTourneySchedule_Division::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWeekendTourneySchedule_Division::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWeekendTourneySchedule_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWeekendTourneySchedule.Division)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&division_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_weekend_) -
        reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWeekendTourneySchedule_Division::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 division_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_division_code(&has_bits);
          division_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_window_open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_window_open(&has_bits);
          time_window_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_window_close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_window_close(&has_bits);
          time_window_close_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_window_open_next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_window_open_next(&has_bits);
          time_window_open_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trophy_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool free_weekend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_free_weekend(&has_bits);
          free_weekend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWeekendTourneySchedule_Division::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneySchedule.Division)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_division_code(), target);
  }

  // optional uint32 time_window_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_window_open(), target);
  }

  // optional uint32 time_window_close = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_window_close(), target);
  }

  // optional uint32 time_window_open_next = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_window_open_next(), target);
  }

  // optional uint32 trophy_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trophy_id(), target);
  }

  // optional bool free_weekend = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_free_weekend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneySchedule.Division)
  return target;
}

size_t CMsgWeekendTourneySchedule_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWeekendTourneySchedule.Division)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 division_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division_code());
    }

    // optional uint32 time_window_open = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_window_open());
    }

    // optional uint32 time_window_close = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_window_close());
    }

    // optional uint32 time_window_open_next = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_window_open_next());
    }

    // optional uint32 trophy_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trophy_id());
    }

    // optional bool free_weekend = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule_Division* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWeekendTourneySchedule_Division>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWeekendTourneySchedule.Division)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWeekendTourneySchedule.Division)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      division_code_ = from.division_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_window_open_ = from.time_window_open_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_window_close_ = from.time_window_close_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_window_open_next_ = from.time_window_open_next_;
    }
    if (cached_has_bits & 0x00000010u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_weekend_ = from.free_weekend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule_Division::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule_Division::InternalSwap(CMsgWeekendTourneySchedule_Division* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, free_weekend_)
      + sizeof(CMsgWeekendTourneySchedule_Division::free_weekend_)
      - PROTOBUF_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, division_code_)>(
          reinterpret_cast<char*>(&division_code_),
          reinterpret_cast<char*>(&other->division_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWeekendTourneySchedule_Division::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWeekendTourneySchedule::_Internal {
 public:
};

CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  divisions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWeekendTourneySchedule)
}
CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneySchedule)
}

void CMsgWeekendTourneySchedule::SharedCtor() {
}

CMsgWeekendTourneySchedule::~CMsgWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneySchedule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWeekendTourneySchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWeekendTourneySchedule::ArenaDtor(void* object) {
  CMsgWeekendTourneySchedule* _this = reinterpret_cast< CMsgWeekendTourneySchedule* >(object);
  (void)_this;
}
void CMsgWeekendTourneySchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWeekendTourneySchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWeekendTourneySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  divisions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWeekendTourneySchedule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_divisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWeekendTourneySchedule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneySchedule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_divisions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_divisions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneySchedule)
  return target;
}

size_t CMsgWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWeekendTourneySchedule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  total_size += 1UL * this->_internal_divisions_size();
  for (const auto& msg : this->divisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneySchedule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWeekendTourneySchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWeekendTourneySchedule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule::MergeFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgWeekendTourneySchedule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule::CopyFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule::InternalSwap(CMsgWeekendTourneySchedule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  divisions_.InternalSwap(&other->divisions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWeekendTourneySchedule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWeekendTourneyOpts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWeekendTourneyOpts>()._has_bits_);
  static void set_has_participating(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buyin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_match_groups(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pickup_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pickup_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWeekendTourneyOpts)
}
CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pickup_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pickup_team_name()) {
    pickup_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pickup_team_name(), 
      GetArena());
  }
  ::memcpy(&participating_, &from.participating_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_logo_) -
    reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneyOpts)
}

void CMsgWeekendTourneyOpts::SharedCtor() {
pickup_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&participating_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_logo_) -
    reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
}

CMsgWeekendTourneyOpts::~CMsgWeekendTourneyOpts() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneyOpts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWeekendTourneyOpts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pickup_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgWeekendTourneyOpts::ArenaDtor(void* object) {
  CMsgWeekendTourneyOpts* _this = reinterpret_cast< CMsgWeekendTourneyOpts* >(object);
  (void)_this;
}
void CMsgWeekendTourneyOpts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWeekendTourneyOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWeekendTourneyOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWeekendTourneyOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pickup_team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&participating_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pickup_team_logo_) -
        reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWeekendTourneyOpts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool participating = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_participating(&has_bits);
          participating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 division_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_division_id(&has_bits);
          division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 buyin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_buyin(&has_bits);
          buyin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skill_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_match_groups(&has_bits);
          match_groups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pickup_team_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pickup_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgWeekendTourneyOpts.pickup_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 pickup_team_logo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pickup_team_logo(&has_bits);
          pickup_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWeekendTourneyOpts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneyOpts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool participating = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_participating(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_division_id(), target);
  }

  // optional uint32 buyin = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_buyin(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_level(), target);
  }

  // optional uint32 match_groups = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_match_groups(), target);
  }

  // optional uint32 team_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_id(), target);
  }

  // optional string pickup_team_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pickup_team_name().data(), static_cast<int>(this->_internal_pickup_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWeekendTourneyOpts.pickup_team_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pickup_team_name(), target);
  }

  // optional uint64 pickup_team_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_pickup_team_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneyOpts)
  return target;
}

size_t CMsgWeekendTourneyOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWeekendTourneyOpts)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pickup_team_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pickup_team_name());
    }

    // optional bool participating = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 division_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division_id());
    }

    // optional uint32 buyin = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buyin());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skill_level());
    }

    // optional uint32 match_groups = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_groups());
    }

    // optional uint32 team_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint64 pickup_team_logo = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_pickup_team_logo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneyOpts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyOpts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWeekendTourneyOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWeekendTourneyOpts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWeekendTourneyOpts)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyOpts::MergeFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pickup_team_name(from._internal_pickup_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      participating_ = from.participating_;
    }
    if (cached_has_bits & 0x00000004u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      buyin_ = from.buyin_;
    }
    if (cached_has_bits & 0x00000010u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_groups_ = from.match_groups_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      pickup_team_logo_ = from.pickup_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneyOpts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyOpts::CopyFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyOpts::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyOpts::InternalSwap(CMsgWeekendTourneyOpts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pickup_team_name_.Swap(&other->pickup_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWeekendTourneyOpts, pickup_team_logo_)
      + sizeof(CMsgWeekendTourneyOpts::pickup_team_logo_)
      - PROTOBUF_FIELD_OFFSET(CMsgWeekendTourneyOpts, participating_)>(
          reinterpret_cast<char*>(&participating_),
          reinterpret_cast<char*>(&other->participating_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWeekendTourneyOpts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWeekendTourneyLeave::_Internal {
 public:
};

CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWeekendTourneyLeave)
}
CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgWeekendTourneyLeave)
}

void CMsgWeekendTourneyLeave::SharedCtor() {
}

CMsgWeekendTourneyLeave::~CMsgWeekendTourneyLeave() {
  // @@protoc_insertion_point(destructor:CMsgWeekendTourneyLeave)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWeekendTourneyLeave::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWeekendTourneyLeave::ArenaDtor(void* object) {
  CMsgWeekendTourneyLeave* _this = reinterpret_cast< CMsgWeekendTourneyLeave* >(object);
  (void)_this;
}
void CMsgWeekendTourneyLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWeekendTourneyLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWeekendTourneyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWeekendTourneyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWeekendTourneyLeave::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWeekendTourneyLeave::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWeekendTourneyLeave)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWeekendTourneyLeave)
  return target;
}

size_t CMsgWeekendTourneyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWeekendTourneyLeave)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneyLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyLeave* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWeekendTourneyLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWeekendTourneyLeave)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWeekendTourneyLeave)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyLeave::MergeFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgWeekendTourneyLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyLeave::CopyFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyLeave::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyLeave::InternalSwap(CMsgWeekendTourneyLeave* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWeekendTourneyLeave::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournament_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournament_Team>()._has_bits_);
  static void set_has_team_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_node_or_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_group_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_ui_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATournament_Team::CMsgDOTATournament_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  player_buyin_(arena),
  player_skill_level_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournament.Team)
}
CMsgDOTATournament_Team::CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      player_buyin_(from.player_buyin_),
      player_skill_level_(from.player_skill_level_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&team_gid_, &from.team_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_mask_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_group_mask_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
}

CMsgDOTATournament_Team::~CMsgDOTATournament_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournament_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournament_Team::ArenaDtor(void* object) {
  CMsgDOTATournament_Team* _this = reinterpret_cast< CMsgDOTATournament_Team* >(object);
  (void)_this;
}
void CMsgDOTATournament_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournament_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournament_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournament.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  player_buyin_.Clear();
  player_skill_level_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&team_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_group_mask_) -
        reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournament_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 team_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_team_gid(&has_bits);
          team_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_or_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_node_or_state(&has_bits);
          node_or_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 players = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_players(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_players(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATournament.Team.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_base_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_base_logo(&has_bits);
          team_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 team_ui_logo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team_ui_logo(&has_bits);
          team_ui_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_buyin = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_buyin(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_player_buyin(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 player_skill_level = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_player_skill_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_player_skill_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_group_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_match_group_mask(&has_bits);
          match_group_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournament_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 team_gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_team_gid(), target);
  }

  // optional uint32 node_or_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_node_or_state(), target);
  }

  // repeated uint32 players = 3 [packed = true];
  {
    int byte_size = _players_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_players(), byte_size, target);
    }
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATournament.Team.team_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_name(), target);
  }

  // optional uint64 team_base_logo = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_team_base_logo(), target);
  }

  // optional uint64 team_ui_logo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_team_ui_logo(), target);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  {
    int byte_size = _player_buyin_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_player_buyin(), byte_size, target);
    }
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  {
    int byte_size = _player_skill_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_player_skill_level(), byte_size, target);
    }
  }

  // optional uint32 match_group_mask = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_match_group_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Team)
  return target;
}

size_t CMsgDOTATournament_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournament.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 players = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->players_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _players_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_buyin_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_buyin_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->player_skill_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _player_skill_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string team_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional fixed64 team_gid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 node_or_state = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_or_state());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint64 team_base_logo = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_base_logo());
    }

    // optional uint64 team_ui_logo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_ui_logo());
    }

    // optional uint32 match_group_mask = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_group_mask());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournament_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournament.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournament.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Team::MergeFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  player_buyin_.MergeFrom(from.player_buyin_);
  player_skill_level_.MergeFrom(from.player_skill_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_or_state_ = from.node_or_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_group_mask_ = from.match_group_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Team::CopyFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Team::InternalSwap(CMsgDOTATournament_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  player_buyin_.InternalSwap(&other->player_buyin_);
  player_skill_level_.InternalSwap(&other->player_skill_level_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Team, match_group_mask_)
      + sizeof(CMsgDOTATournament_Team::match_group_mask_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Team, team_gid_)>(
          reinterpret_cast<char*>(&team_gid_),
          reinterpret_cast<char*>(&other->team_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournament_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournament_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournament_Game>()._has_bits_);
  static void set_has_node_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_a_good(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATournament_Game::CMsgDOTATournament_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournament.Game)
}
CMsgDOTATournament_Game::CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
}

CMsgDOTATournament_Game::~CMsgDOTATournament_Game() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Game)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournament_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournament_Game::ArenaDtor(void* object) {
  CMsgDOTATournament_Game* _this = reinterpret_cast< CMsgDOTATournament_Game* >(object);
  (void)_this;
}
void CMsgDOTATournament_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournament_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournament_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournament.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournament_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 node_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_idx(&has_bits);
          node_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool team_a_good = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_a_good(&has_bits);
          team_a_good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentGameState_IsValid(val))) {
            _internal_set_state(static_cast<::ETournamentGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournament_Game::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_idx(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional bool team_a_good = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_team_a_good(), target);
  }

  // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Game)
  return target;
}

size_t CMsgDOTATournament_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournament.Game)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 node_idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_idx());
    }

    // optional bool team_a_good = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Game* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournament_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournament.Game)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournament.Game)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Game::MergeFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_idx_ = from.node_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_a_good_ = from.team_a_good_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Game::CopyFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Game::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Game::InternalSwap(CMsgDOTATournament_Game* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Game, start_time_)
      + sizeof(CMsgDOTATournament_Game::start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Game, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournament_Game::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournament_Node::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournament_Node>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_idx_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_idx_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_node_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTATournament_Node::CMsgDOTATournament_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournament.Node)
}
CMsgDOTATournament_Node::CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_state_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&node_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_state_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
}

CMsgDOTATournament_Node::~CMsgDOTATournament_Node() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournament_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournament_Node::ArenaDtor(void* object) {
  CMsgDOTATournament_Node* _this = reinterpret_cast< CMsgDOTATournament_Node* >(object);
  (void)_this;
}
void CMsgDOTATournament_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournament_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournament_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournament.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_state_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournament_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_idx_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_idx_a(&has_bits);
          team_idx_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_idx_b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_idx_b(&has_bits);
          team_idx_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentNodeState_IsValid(val))) {
            _internal_set_node_state(static_cast<::ETournamentNodeState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournament_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // optional uint32 team_idx_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_idx_a(), target);
  }

  // optional uint32 team_idx_b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_idx_b(), target);
  }

  // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_node_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament.Node)
  return target;
}

size_t CMsgDOTATournament_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournament.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_id());
    }

    // optional uint32 team_idx_a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_idx_a());
    }

    // optional uint32 team_idx_b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_idx_b());
    }

    // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_node_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournament_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournament.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournament.Node)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Node::MergeFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_idx_a_ = from.team_idx_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_idx_b_ = from.team_idx_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      node_state_ = from.node_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Node::CopyFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Node::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Node::InternalSwap(CMsgDOTATournament_Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Node, node_state_)
      + sizeof(CMsgDOTATournament_Node::node_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournament_Node, node_id_)>(
          reinterpret_cast<char*>(&node_id_),
          reinterpret_cast<char*>(&other->node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournament_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournament::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournament>()._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schedule_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tournament_template(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_state_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTATournament::CMsgDOTATournament(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  games_(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournament)
}
CMsgDOTATournament::CMsgDOTATournament(const CMsgDOTATournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      games_(from.games_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournament)
}

void CMsgDOTATournament::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tournament_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTATournament::~CMsgDOTATournament() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournament)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournament::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournament::ArenaDtor(void* object) {
  CMsgDOTATournament* _this = reinterpret_cast< CMsgDOTATournament* >(object);
  (void)_this;
}
void CMsgDOTATournament::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournament::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  games_.Clear();
  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournament::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 division_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_division_id(&has_bits);
          division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 schedule_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_schedule_time(&has_bits);
          schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skill_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentTemplate_IsValid(val))) {
            _internal_set_tournament_template(static_cast<::ETournamentTemplate>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentState_IsValid(val))) {
            _internal_set_state(static_cast<::ETournamentState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournament.Team teams = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournament.Game games = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournament.Node nodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 state_seq_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_state_seq_num(&has_bits);
          state_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_trophy_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_season_trophy_id(&has_bits);
          season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournament::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_division_id(), target);
  }

  // optional uint32 schedule_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_schedule_time(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_level(), target);
  }

  // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_tournament_template(), target);
  }

  // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_state(), target);
  }

  // repeated .CMsgDOTATournament.Team teams = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_teams(i), target, stream);
  }

  // repeated .CMsgDOTATournament.Game games = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_games(i), target, stream);
  }

  // repeated .CMsgDOTATournament.Node nodes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_nodes(i), target, stream);
  }

  // optional uint32 state_seq_num = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_state_seq_num(), target);
  }

  // optional uint32 season_trophy_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_season_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournament)
  return target;
}

size_t CMsgDOTATournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournament)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATournament.Team teams = 7;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournament.Game games = 8;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournament.Node nodes = 9;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 division_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division_id());
    }

    // optional uint32 schedule_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_schedule_time());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skill_level());
    }

    // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tournament_template());
    }

    // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 state_seq_num = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state_seq_num());
    }

    // optional uint32 season_trophy_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_trophy_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournament)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournament)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament::MergeFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  games_.MergeFrom(from.games_);
  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      schedule_time_ = from.schedule_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_template_ = from.tournament_template_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_seq_num_ = from.state_seq_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament::CopyFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament::IsInitialized() const {
  return true;
}

void CMsgDOTATournament::InternalSwap(CMsgDOTATournament* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  games_.InternalSwap(&other->games_);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournament, season_trophy_id_)
      + sizeof(CMsgDOTATournament::season_trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournament, tournament_id_)>(
          reinterpret_cast<char*>(&tournament_id_),
          reinterpret_cast<char*>(&other->tournament_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournament::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentStateChange_GameChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentStateChange_GameChange>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentStateChange.GameChange)
}
CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange.GameChange)
}

void CMsgDOTATournamentStateChange_GameChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
}

CMsgDOTATournamentStateChange_GameChange::~CMsgDOTATournamentStateChange_GameChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange.GameChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentStateChange_GameChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournamentStateChange_GameChange::ArenaDtor(void* object) {
  CMsgDOTATournamentStateChange_GameChange* _this = reinterpret_cast< CMsgDOTATournamentStateChange_GameChange* >(object);
  (void)_this;
}
void CMsgDOTATournamentStateChange_GameChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentStateChange_GameChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentStateChange_GameChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentStateChange.GameChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_state_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentStateChange_GameChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentGameState_IsValid(val))) {
            _internal_set_new_state(static_cast<::ETournamentGameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentStateChange_GameChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange.GameChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_new_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange.GameChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_GameChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentStateChange.GameChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_GameChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentStateChange_GameChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentStateChange.GameChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentStateChange.GameChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_state_ = from.new_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_GameChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_GameChange::InternalSwap(CMsgDOTATournamentStateChange_GameChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, new_state_)
      + sizeof(CMsgDOTATournamentStateChange_GameChange::new_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentStateChange_GameChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentStateChange_TeamChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentStateChange_TeamChange>()._has_bits_);
  static void set_has_team_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_node_or_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_node_or_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentStateChange.TeamChange)
}
CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_gid_, &from.team_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_node_or_state_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange.TeamChange)
}

void CMsgDOTATournamentStateChange_TeamChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&old_node_or_state_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
}

CMsgDOTATournamentStateChange_TeamChange::~CMsgDOTATournamentStateChange_TeamChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange.TeamChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentStateChange_TeamChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournamentStateChange_TeamChange::ArenaDtor(void* object) {
  CMsgDOTATournamentStateChange_TeamChange* _this = reinterpret_cast< CMsgDOTATournamentStateChange_TeamChange* >(object);
  (void)_this;
}
void CMsgDOTATournamentStateChange_TeamChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentStateChange_TeamChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentStateChange_TeamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentStateChange.TeamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_node_or_state_) -
        reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentStateChange_TeamChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 team_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_gid(&has_bits);
          team_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 new_node_or_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_node_or_state(&has_bits);
          new_node_or_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 old_node_or_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_old_node_or_state(&has_bits);
          old_node_or_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentStateChange_TeamChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange.TeamChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 team_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_team_gid(), target);
  }

  // optional uint32 new_node_or_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_node_or_state(), target);
  }

  // optional uint32 old_node_or_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_old_node_or_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange.TeamChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_TeamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentStateChange.TeamChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 team_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_team_gid());
    }

    // optional uint32 new_node_or_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_node_or_state());
    }

    // optional uint32 old_node_or_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_old_node_or_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_TeamChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentStateChange_TeamChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentStateChange.TeamChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentStateChange.TeamChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_node_or_state_ = from.new_node_or_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_node_or_state_ = from.old_node_or_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_TeamChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_TeamChange::InternalSwap(CMsgDOTATournamentStateChange_TeamChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, old_node_or_state_)
      + sizeof(CMsgDOTATournamentStateChange_TeamChange::old_node_or_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, team_gid_)>(
          reinterpret_cast<char*>(&team_gid_),
          reinterpret_cast<char*>(&other->team_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentStateChange_TeamChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentStateChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentStateChange>()._has_bits_);
  static void set_has_new_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_tournament_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_changes_(arena),
  team_changes_(arena),
  merged_tournament_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentStateChange)
}
CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_changes_(from.game_changes_),
      team_changes_(from.team_changes_),
      merged_tournament_ids_(from.merged_tournament_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_tournament_id_, &from.new_tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_seq_num_) -
    reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentStateChange)
}

void CMsgDOTATournamentStateChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_tournament_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_seq_num_) -
    reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
}

CMsgDOTATournamentStateChange::~CMsgDOTATournamentStateChange() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentStateChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentStateChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournamentStateChange::ArenaDtor(void* object) {
  CMsgDOTATournamentStateChange* _this = reinterpret_cast< CMsgDOTATournamentStateChange* >(object);
  (void)_this;
}
void CMsgDOTATournamentStateChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentStateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_changes_.Clear();
  team_changes_.Clear();
  merged_tournament_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&new_tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_seq_num_) -
        reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentStateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 new_tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_tournament_id(&has_bits);
          new_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentEvent_IsValid(val))) {
            _internal_set_event(static_cast<::ETournamentEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETournamentState_IsValid(val))) {
            _internal_set_new_tournament_state(static_cast<::ETournamentState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 merged_tournament_ids = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_merged_tournament_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_merged_tournament_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state_seq_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_state_seq_num(&has_bits);
          state_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentStateChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_tournament_id(), target);
  }

  // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event(), target);
  }

  // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_tournament_state(), target);
  }

  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_game_changes(i), target, stream);
  }

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_team_changes(i), target, stream);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  {
    int byte_size = _merged_tournament_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_merged_tournament_ids(), byte_size, target);
    }
  }

  // optional uint32 state_seq_num = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_state_seq_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentStateChange)
  return target;
}

size_t CMsgDOTATournamentStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentStateChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  total_size += 1UL * this->_internal_game_changes_size();
  for (const auto& msg : this->game_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  total_size += 1UL * this->_internal_team_changes_size();
  for (const auto& msg : this->team_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->merged_tournament_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _merged_tournament_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 new_tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_tournament_id());
    }

    // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
    }

    // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_new_tournament_state());
    }

    // optional uint32 state_seq_num = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state_seq_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentStateChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentStateChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentStateChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange::MergeFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_changes_.MergeFrom(from.game_changes_);
  team_changes_.MergeFrom(from.team_changes_);
  merged_tournament_ids_.MergeFrom(from.merged_tournament_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      new_tournament_id_ = from.new_tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_tournament_state_ = from.new_tournament_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_seq_num_ = from.state_seq_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange::CopyFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange::InternalSwap(CMsgDOTATournamentStateChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_changes_.InternalSwap(&other->game_changes_);
  team_changes_.InternalSwap(&other->team_changes_);
  merged_tournament_ids_.InternalSwap(&other->merged_tournament_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange, state_seq_num_)
      + sizeof(CMsgDOTATournamentStateChange::state_seq_num_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentStateChange, new_tournament_id_)>(
          reinterpret_cast<char*>(&new_tournament_id_),
          reinterpret_cast<char*>(&other->new_tournament_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentStateChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentRequest>()._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_tournament_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentRequest)
}
CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_tournament_gid_, &from.client_tournament_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_tournament_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
}

CMsgDOTATournamentRequest::~CMsgDOTATournamentRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATournamentRequest::ArenaDtor(void* object) {
  CMsgDOTATournamentRequest* _this = reinterpret_cast< CMsgDOTATournamentRequest* >(object);
  (void)_this;
}
void CMsgDOTATournamentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_tournament_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_id_) -
        reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_tournament_gid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_tournament_gid(&has_bits);
          client_tournament_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint64 client_tournament_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_client_tournament_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentRequest)
  return target;
}

size_t CMsgDOTATournamentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_tournament_gid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_tournament_gid());
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentRequest::MergeFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_tournament_gid_ = from.client_tournament_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentRequest::CopyFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentRequest::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentRequest::InternalSwap(CMsgDOTATournamentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentRequest, tournament_id_)
      + sizeof(CMsgDOTATournamentRequest::tournament_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATournamentRequest, client_tournament_gid_)>(
          reinterpret_cast<char*>(&client_tournament_gid_),
          reinterpret_cast<char*>(&other->client_tournament_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATournamentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATournamentResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTATournament& tournament(const CMsgDOTATournamentResponse* msg);
  static void set_has_tournament(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTATournament&
CMsgDOTATournamentResponse::_Internal::tournament(const CMsgDOTATournamentResponse* msg) {
  return *msg->tournament_;
}
CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATournamentResponse)
}
CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tournament()) {
    tournament_ = new ::CMsgDOTATournament(*from.tournament_);
  } else {
    tournament_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::SharedCtor() {
tournament_ = nullptr;
result_ = 2u;
}

CMsgDOTATournamentResponse::~CMsgDOTATournamentResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATournamentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATournamentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tournament_;
}

void CMsgDOTATournamentResponse::ArenaDtor(void* object) {
  CMsgDOTATournamentResponse* _this = reinterpret_cast< CMsgDOTATournamentResponse* >(object);
  (void)_this;
}
void CMsgDOTATournamentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATournamentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATournamentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATournamentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tournament_ != nullptr);
      tournament_->Clear();
    }
    result_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATournamentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTATournament tournament = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATournamentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATournamentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional .CMsgDOTATournament tournament = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tournament(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATournamentResponse)
  return target;
}

size_t CMsgDOTATournamentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATournamentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTATournament tournament = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tournament_);
    }

    // optional uint32 result = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATournamentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATournamentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATournamentResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentResponse::MergeFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tournament()->::CMsgDOTATournament::MergeFrom(from._internal_tournament());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentResponse::CopyFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentResponse::InternalSwap(CMsgDOTATournamentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tournament_, other->tournament_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATournamentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAClearTournamentGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAClearTournamentGame>()._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAClearTournamentGame)
}
CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tournament_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
}

CMsgDOTAClearTournamentGame::~CMsgDOTAClearTournamentGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTAClearTournamentGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAClearTournamentGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAClearTournamentGame::ArenaDtor(void* object) {
  CMsgDOTAClearTournamentGame* _this = reinterpret_cast< CMsgDOTAClearTournamentGame* >(object);
  (void)_this;
}
void CMsgDOTAClearTournamentGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAClearTournamentGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAClearTournamentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAClearTournamentGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAClearTournamentGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAClearTournamentGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAClearTournamentGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint32 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAClearTournamentGame)
  return target;
}

size_t CMsgDOTAClearTournamentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAClearTournamentGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAClearTournamentGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClearTournamentGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAClearTournamentGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAClearTournamentGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAClearTournamentGame)
    MergeFrom(*source);
  }
}

void CMsgDOTAClearTournamentGame::MergeFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAClearTournamentGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClearTournamentGame::CopyFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClearTournamentGame::IsInitialized() const {
  return true;
}

void CMsgDOTAClearTournamentGame::InternalSwap(CMsgDOTAClearTournamentGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAClearTournamentGame, game_id_)
      + sizeof(CMsgDOTAClearTournamentGame::game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAClearTournamentGame, tournament_id_)>(
          reinterpret_cast<char*>(&tournament_id_),
          reinterpret_cast<char*>(&other->tournament_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAClearTournamentGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>()._has_bits_);
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times_won_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_times_won_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_times_won_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_times_won_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_times_bye_and_lost(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_times_bye_and_won(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_times_unusual_champ(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_games_won(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}
CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&skill_level_, &from.skill_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_unusual_champ_) -
    reinterpret_cast<char*>(&skill_level_)) + sizeof(times_unusual_champ_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&skill_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_unusual_champ_) -
    reinterpret_cast<char*>(&skill_level_)) + sizeof(times_unusual_champ_));
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::~CMsgDOTAWeekendTourneyPlayerSkillLevelStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerSkillLevelStats* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&skill_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_games_won_) -
        reinterpret_cast<char*>(&skill_level_)) + sizeof(total_games_won_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_unusual_champ_) -
        reinterpret_cast<char*>(&score_)) + sizeof(times_unusual_champ_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 skill_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_won_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times_won_0(&has_bits);
          times_won_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_won_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_times_won_1(&has_bits);
          times_won_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_won_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_times_won_2(&has_bits);
          times_won_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_won_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_times_won_3(&has_bits);
          times_won_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_bye_and_lost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_times_bye_and_lost(&has_bits);
          times_bye_and_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_bye_and_won = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_times_bye_and_won(&has_bits);
          times_bye_and_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_games_won = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_games_won(&has_bits);
          total_games_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_unusual_champ = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_times_unusual_champ(&has_bits);
          times_unusual_champ_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skill_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skill_level(), target);
  }

  // optional uint32 times_won_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times_won_0(), target);
  }

  // optional uint32 times_won_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_times_won_1(), target);
  }

  // optional uint32 times_won_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_times_won_2(), target);
  }

  // optional uint32 times_won_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_times_won_3(), target);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_times_bye_and_lost(), target);
  }

  // optional uint32 times_bye_and_won = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_times_bye_and_won(), target);
  }

  // optional uint32 total_games_won = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_total_games_won(), target);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_score(), target);
  }

  // optional uint32 times_unusual_champ = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_times_unusual_champ(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 skill_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skill_level());
    }

    // optional uint32 times_won_0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_won_0());
    }

    // optional uint32 times_won_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_won_1());
    }

    // optional uint32 times_won_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_won_2());
    }

    // optional uint32 times_won_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_won_3());
    }

    // optional uint32 times_bye_and_lost = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_bye_and_lost());
    }

    // optional uint32 times_bye_and_won = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_bye_and_won());
    }

    // optional uint32 total_games_won = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_games_won());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 score = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 times_unusual_champ = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_unusual_champ());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerSkillLevelStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_won_0_ = from.times_won_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_won_1_ = from.times_won_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      times_won_2_ = from.times_won_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      times_won_3_ = from.times_won_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      times_bye_and_lost_ = from.times_bye_and_lost_;
    }
    if (cached_has_bits & 0x00000040u) {
      times_bye_and_won_ = from.times_bye_and_won_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_games_won_ = from.total_games_won_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000200u) {
      times_unusual_champ_ = from.times_unusual_champ_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_unusual_champ_)
      + sizeof(CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_unusual_champ_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, skill_level_)>(
          reinterpret_cast<char*>(&skill_level_),
          reinterpret_cast<char*>(&other->skill_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerSkillLevelStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  skill_levels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerStats)
}
CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      skill_levels_(from.skill_levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_tier_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerStats)
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_tier_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
}

CMsgDOTAWeekendTourneyPlayerStats::~CMsgDOTAWeekendTourneyPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyPlayerStats::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerStats* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerStats* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_levels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_tier_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_trophy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_season_trophy_id(&has_bits);
          season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill_levels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 current_tier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_tier(&has_bits);
          current_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_season_trophy_id(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_levels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_skill_levels(i), target, stream);
  }

  // optional uint32 current_tier = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current_tier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  total_size += 1UL * this->_internal_skill_levels_size();
  for (const auto& msg : this->skill_levels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_trophy_id());
    }

    // optional uint32 current_tier = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_current_tier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_levels_.MergeFrom(from.skill_levels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_tier_ = from.current_tier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skill_levels_.InternalSwap(&other->skill_levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, current_tier_)
      + sizeof(CMsgDOTAWeekendTourneyPlayerStats::current_tier_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerStatsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerStatsRequest>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
}
CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerStatsRequest::~CMsgDOTAWeekendTourneyPlayerStatsRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerStatsRequest* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerStatsRequest* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_trophy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_season_trophy_id(&has_bits);
          season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_season_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_trophy_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, season_trophy_id_)
      + sizeof(CMsgDOTAWeekendTourneyPlayerStatsRequest::season_trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerHistoryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerHistoryRequest>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}
CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest::~CMsgDOTAWeekendTourneyPlayerHistoryRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerHistoryRequest* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerHistoryRequest* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerHistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_trophy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_season_trophy_id(&has_bits);
          season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerHistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_season_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_trophy_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, season_trophy_id_)
      + sizeof(CMsgDOTAWeekendTourneyPlayerHistoryRequest::season_trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerHistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerHistory_Tournament>()._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tournament_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tournament_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::~CMsgDOTAWeekendTourneyPlayerHistory_Tournament() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerHistory_Tournament* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_tier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tournament_tier(&has_bits);
          tournament_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_date(&has_bits);
          team_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_team_result(&has_bits);
          team_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 account_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_trophy_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_season_trophy_id(&has_bits);
          season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_time(), target);
  }

  // optional uint32 tournament_tier = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tournament_tier(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint32 team_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_date(), target);
  }

  // optional uint32 team_result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_result(), target);
  }

  // repeated uint32 account_id = 7;
  for (int i = 0, n = this->_internal_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_account_id(i), target);
  }

  // optional string team_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_team_name(), target);
  }

  // optional uint32 season_trophy_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_season_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 start_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 tournament_tier = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_tier());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 team_date = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_date());
    }

    // optional uint32 team_result = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_result());
    }

    // optional uint32 season_trophy_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_trophy_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory_Tournament* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistory_Tournament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_tier_ = from.tournament_tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_date_ = from.team_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_result_ = from.team_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_.InternalSwap(&other->account_id_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, season_trophy_id_)
      + sizeof(CMsgDOTAWeekendTourneyPlayerHistory_Tournament::season_trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_id_)>(
          reinterpret_cast<char*>(&tournament_id_),
          reinterpret_cast<char*>(&other->tournament_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerHistory_Tournament::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyPlayerHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyPlayerHistory>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tournaments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyPlayerHistory)
}
CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tournaments_(from.tournaments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyPlayerHistory)
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedCtor() {
account_id_ = 0u;
}

CMsgDOTAWeekendTourneyPlayerHistory::~CMsgDOTAWeekendTourneyPlayerHistory() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyPlayerHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyPlayerHistory::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyPlayerHistory* _this = reinterpret_cast< CMsgDOTAWeekendTourneyPlayerHistory* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyPlayerHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyPlayerHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyPlayerHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyPlayerHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournaments_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyPlayerHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tournaments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyPlayerHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyPlayerHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tournaments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tournaments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyPlayerHistory)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyPlayerHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  total_size += 1UL * this->_internal_tournaments_size();
  for (const auto& msg : this->tournaments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyPlayerHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyPlayerHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tournaments_.MergeFrom(from.tournaments_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tournaments_.InternalSwap(&other->tournaments_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyPlayerHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyParticipationDetails_Tier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyParticipationDetails_Tier>()._has_bits_);
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teams(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_winning_teams(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_players_streak_2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_players_streak_3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_players_streak_4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_players_streak_5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}
CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tier_, &from.tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_streak_5_) -
    reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&players_streak_5_) -
    reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier::~CMsgDOTAWeekendTourneyParticipationDetails_Tier() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyParticipationDetails_Tier* _this = reinterpret_cast< CMsgDOTAWeekendTourneyParticipationDetails_Tier* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_streak_5_) -
        reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyParticipationDetails_Tier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tier(&has_bits);
          tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_players(&has_bits);
          players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_teams(&has_bits);
          teams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winning_teams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_winning_teams(&has_bits);
          winning_teams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_streak_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_players_streak_2(&has_bits);
          players_streak_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_streak_3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_players_streak_3(&has_bits);
          players_streak_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_streak_4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_players_streak_4(&has_bits);
          players_streak_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 players_streak_5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_players_streak_5(&has_bits);
          players_streak_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Tier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tier(), target);
  }

  // optional uint32 players = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_players(), target);
  }

  // optional uint32 teams = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_teams(), target);
  }

  // optional uint32 winning_teams = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_winning_teams(), target);
  }

  // optional uint32 players_streak_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_players_streak_2(), target);
  }

  // optional uint32 players_streak_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_players_streak_3(), target);
  }

  // optional uint32 players_streak_4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_players_streak_4(), target);
  }

  // optional uint32 players_streak_5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_players_streak_5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tier());
    }

    // optional uint32 players = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players());
    }

    // optional uint32 teams = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teams());
    }

    // optional uint32 winning_teams = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winning_teams());
    }

    // optional uint32 players_streak_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_streak_2());
    }

    // optional uint32 players_streak_3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_streak_3());
    }

    // optional uint32 players_streak_4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_streak_4());
    }

    // optional uint32 players_streak_5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_players_streak_5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Tier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails_Tier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000004u) {
      teams_ = from.teams_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_teams_ = from.winning_teams_;
    }
    if (cached_has_bits & 0x00000010u) {
      players_streak_2_ = from.players_streak_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      players_streak_3_ = from.players_streak_3_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_streak_4_ = from.players_streak_4_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_streak_5_ = from.players_streak_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_5_)
      + sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_5_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, tier_)>(
          reinterpret_cast<char*>(&tier_),
          reinterpret_cast<char*>(&other->tier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Tier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyParticipationDetails_Division::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAWeekendTourneyParticipationDetails_Division>()._has_bits_);
  static void set_has_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_schedule_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
}
CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&division_id_, &from.division_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&schedule_time_) -
    reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&division_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&schedule_time_) -
    reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Division::~CMsgDOTAWeekendTourneyParticipationDetails_Division() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyParticipationDetails_Division* _this = reinterpret_cast< CMsgDOTAWeekendTourneyParticipationDetails_Division* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&division_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&schedule_time_) -
        reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyParticipationDetails_Division::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 division_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_division_id(&has_bits);
          division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 schedule_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_schedule_time(&has_bits);
          schedule_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Division::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_division_id(), target);
  }

  // optional uint32 schedule_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_schedule_time(), target);
  }

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tiers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 division_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division_id());
    }

    // optional uint32 schedule_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_schedule_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Division* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails_Division>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyParticipationDetails.Division)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyParticipationDetails.Division)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      schedule_time_ = from.schedule_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tiers_.InternalSwap(&other->tiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, schedule_time_)
      + sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Division::schedule_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, division_id_)>(
          reinterpret_cast<char*>(&division_id_),
          reinterpret_cast<char*>(&other->division_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Division::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAWeekendTourneyParticipationDetails::_Internal {
 public:
};

CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  divisions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAWeekendTourneyParticipationDetails)
}
CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAWeekendTourneyParticipationDetails)
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedCtor() {
}

CMsgDOTAWeekendTourneyParticipationDetails::~CMsgDOTAWeekendTourneyParticipationDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTAWeekendTourneyParticipationDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAWeekendTourneyParticipationDetails::ArenaDtor(void* object) {
  CMsgDOTAWeekendTourneyParticipationDetails* _this = reinterpret_cast< CMsgDOTAWeekendTourneyParticipationDetails* >(object);
  (void)_this;
}
void CMsgDOTAWeekendTourneyParticipationDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAWeekendTourneyParticipationDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAWeekendTourneyParticipationDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAWeekendTourneyParticipationDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  divisions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAWeekendTourneyParticipationDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_divisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAWeekendTourneyParticipationDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAWeekendTourneyParticipationDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_divisions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_divisions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAWeekendTourneyParticipationDetails)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAWeekendTourneyParticipationDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  total_size += 1UL * this->_internal_divisions_size();
  for (const auto& msg : this->divisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAWeekendTourneyParticipationDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAWeekendTourneyParticipationDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  divisions_.InternalSwap(&other->divisions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAWeekendTourneyParticipationDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo_PhaseGroup* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo_PhaseGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo_PhaseGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo_Phase* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo_Phase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo_Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo_Team* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo_UpcomingMatch* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo_UpcomingMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo_UpcomingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo_News* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo_News >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo_News >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentInfo* Arena::CreateMaybeMessage< ::CMsgDOTATournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestWeekendTourneySchedule* Arena::CreateMaybeMessage< ::CMsgRequestWeekendTourneySchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestWeekendTourneySchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWeekendTourneySchedule_Division* Arena::CreateMaybeMessage< ::CMsgWeekendTourneySchedule_Division >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWeekendTourneySchedule_Division >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWeekendTourneySchedule* Arena::CreateMaybeMessage< ::CMsgWeekendTourneySchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWeekendTourneySchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWeekendTourneyOpts* Arena::CreateMaybeMessage< ::CMsgWeekendTourneyOpts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWeekendTourneyOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWeekendTourneyLeave* Arena::CreateMaybeMessage< ::CMsgWeekendTourneyLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWeekendTourneyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournament_Team* Arena::CreateMaybeMessage< ::CMsgDOTATournament_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournament_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournament_Game* Arena::CreateMaybeMessage< ::CMsgDOTATournament_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournament_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournament_Node* Arena::CreateMaybeMessage< ::CMsgDOTATournament_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournament_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournament* Arena::CreateMaybeMessage< ::CMsgDOTATournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournament >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentStateChange_GameChange* Arena::CreateMaybeMessage< ::CMsgDOTATournamentStateChange_GameChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentStateChange_GameChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentStateChange_TeamChange* Arena::CreateMaybeMessage< ::CMsgDOTATournamentStateChange_TeamChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentStateChange_TeamChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentStateChange* Arena::CreateMaybeMessage< ::CMsgDOTATournamentStateChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentStateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentRequest* Arena::CreateMaybeMessage< ::CMsgDOTATournamentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATournamentResponse* Arena::CreateMaybeMessage< ::CMsgDOTATournamentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATournamentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAClearTournamentGame* Arena::CreateMaybeMessage< ::CMsgDOTAClearTournamentGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAClearTournamentGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerStats* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerStatsRequest* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerHistoryRequest* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyPlayerHistory* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyPlayerHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyPlayerHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyParticipationDetails_Division* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAWeekendTourneyParticipationDetails* Arena::CreateMaybeMessage< ::CMsgDOTAWeekendTourneyParticipationDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAWeekendTourneyParticipationDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
