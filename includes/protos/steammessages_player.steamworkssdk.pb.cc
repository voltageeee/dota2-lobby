// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamworkssdk.proto

#include "steammessages_player.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal {
  constexpr CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMutualFriendsForIncomingInvites_RequestDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_;
constexpr CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mutual_friend_account_ids_()
  , steamid_(PROTOBUF_ULONGLONG(0)){}
struct CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal {
  constexpr CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal() {}
  union {
    CPlayer_IncomingInviteMutualFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IncomingInviteMutualFriendListDefaultTypeInternal _CPlayer_IncomingInviteMutualFriendList_default_instance_;
constexpr CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : incoming_invite_mutual_friends_lists_(){}
struct CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetMutualFriendsForIncomingInvites_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetMutualFriendsForIncomingInvites_ResponseDefaultTypeInternal _CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_RequestDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Request_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , minutes_played_(0u)
  , minutes_played_forever_(0u){}
struct CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , minutes_played_(0u)
  , minutes_played_forever_(0u)
  , in_wishlist_(false)
  , owned_(false){}
struct CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfoDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_;
constexpr CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : in_game_()
  , played_recently_()
  , played_ever_()
  , owns_()
  , in_wishlist_()
  , your_info_(nullptr){}
struct CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetFriendsGameplayInfo_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetFriendsGameplayInfo_ResponseDefaultTypeInternal _CPlayer_GetFriendsGameplayInfo_Response_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0u){}
struct CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : level_(0)
  , series_(0)
  , border_color_(0u){}
struct CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response_Badge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
constexpr CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : badges_()
  , player_level_(0u){}
struct CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetGameBadgeLevels_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_last_played_(0u){}
struct CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : appid_(0)
  , last_playtime_(0u)
  , playtime_2weeks_(0)
  , playtime_forever_(0)
  , first_playtime_(0u){}
struct CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
constexpr CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetLastPlayedTimes_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
constexpr CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_AcceptSSA_RequestDefaultTypeInternal {
  constexpr CPlayer_AcceptSSA_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
constexpr CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_AcceptSSA_ResponseDefaultTypeInternal {
  constexpr CPlayer_AcceptSSA_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AcceptSSA_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AcceptSSA_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
constexpr CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetNicknameList_RequestDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
constexpr CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u){}
struct CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response_PlayerNickname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
constexpr CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nicknames_(){}
struct CPlayer_GetNicknameList_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetNicknameList_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNicknameList_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNicknameList_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
constexpr CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Request_default_instance_;
constexpr PerFriendPreferences::PerFriendPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , notifications_showingame_(0)

  , notifications_showonline_(0)

  , notifications_showmessages_(0)

  , sounds_showingame_(0)

  , sounds_showonline_(0)

  , sounds_showmessages_(0)

  , notifications_sendmobile_(0)
{}
struct PerFriendPreferencesDefaultTypeInternal {
  constexpr PerFriendPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerFriendPreferencesDefaultTypeInternal() {}
  union {
    PerFriendPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerFriendPreferencesDefaultTypeInternal _PerFriendPreferences_default_instance_;
constexpr CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(){}
struct CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_GetPerFriendPreferences_Response_default_instance_;
constexpr CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr){}
struct CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetPerFriendPreferences_RequestDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Request_default_instance_;
constexpr CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetPerFriendPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetPerFriendPreferences_ResponseDefaultTypeInternal _CPlayer_SetPerFriendPreferences_Response_default_instance_;
constexpr CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CPlayer_AddFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_AddFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AddFriend_RequestDefaultTypeInternal _CPlayer_AddFriend_Request_default_instance_;
constexpr CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invite_sent_(false)
  , friend_relationship_(0u){}
struct CPlayer_AddFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_AddFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_AddFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_AddFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_AddFriend_ResponseDefaultTypeInternal _CPlayer_AddFriend_Response_default_instance_;
constexpr CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CPlayer_RemoveFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_RemoveFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RemoveFriend_RequestDefaultTypeInternal _CPlayer_RemoveFriend_Request_default_instance_;
constexpr CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_relationship_(0u){}
struct CPlayer_RemoveFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_RemoveFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_RemoveFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_RemoveFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_RemoveFriend_ResponseDefaultTypeInternal _CPlayer_RemoveFriend_Response_default_instance_;
constexpr CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0))
  , unignore_(false){}
struct CPlayer_IgnoreFriend_RequestDefaultTypeInternal {
  constexpr CPlayer_IgnoreFriend_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_RequestDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IgnoreFriend_RequestDefaultTypeInternal _CPlayer_IgnoreFriend_Request_default_instance_;
constexpr CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : friend_relationship_(0u){}
struct CPlayer_IgnoreFriend_ResponseDefaultTypeInternal {
  constexpr CPlayer_IgnoreFriend_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_IgnoreFriend_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_IgnoreFriend_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_IgnoreFriend_ResponseDefaultTypeInternal _CPlayer_IgnoreFriend_Response_default_instance_;
constexpr CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_GetCommunityPreferences_Request_default_instance_;
constexpr CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_updated_(0u)
  , parenthesize_nicknames_(false)
  , hide_adult_content_violence_(true)
  , hide_adult_content_sex_(true){}
struct CPlayer_CommunityPreferencesDefaultTypeInternal {
  constexpr CPlayer_CommunityPreferencesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_CommunityPreferencesDefaultTypeInternal() {}
  union {
    CPlayer_CommunityPreferences _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_CommunityPreferencesDefaultTypeInternal _CPlayer_CommunityPreferences_default_instance_;
constexpr CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr){}
struct CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_GetCommunityPreferences_Response_default_instance_;
constexpr CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : preferences_(nullptr){}
struct CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal {
  constexpr CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetCommunityPreferences_RequestDefaultTypeInternal _CPlayer_SetCommunityPreferences_Request_default_instance_;
constexpr CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal {
  constexpr CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_SetCommunityPreferences_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_SetCommunityPreferences_ResponseDefaultTypeInternal _CPlayer_SetCommunityPreferences_Response_default_instance_;
constexpr CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : language_(0){}
struct CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal {
  constexpr CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNewSteamAnnouncementState_RequestDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Request_default_instance_;
constexpr CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_headline_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , announcement_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0)
  , time_posted_(0u)
  , announcement_gid_(PROTOBUF_ULONGLONG(0)){}
struct CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal {
  constexpr CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_GetNewSteamAnnouncementState_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_GetNewSteamAnnouncementState_ResponseDefaultTypeInternal _CPlayer_GetNewSteamAnnouncementState_Response_default_instance_;
constexpr CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : announcement_gid_(PROTOBUF_ULONGLONG(0))
  , time_posted_(0u){}
struct CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal {
  constexpr CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_UpdateSteamAnnouncementLastRead_RequestDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_;
constexpr CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal {
  constexpr CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal() {}
  union {
    CPlayer_UpdateSteamAnnouncementLastRead_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPlayer_UpdateSteamAnnouncementLastRead_ResponseDefaultTypeInternal _CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto[38];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fplayer_2esteamworkssdk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IncomingInviteMutualFriendList, mutual_friend_account_ids_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetMutualFriendsForIncomingInvites_Response, incoming_invite_mutual_friends_lists_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_forever_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, minutes_played_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, minutes_played_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, in_wishlist_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, owned_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, your_info_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, in_game_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, played_recently_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, played_ever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, owns_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetFriendsGameplayInfo_Response, in_wishlist_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Request, appid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, series_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response_Badge, border_color_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, player_level_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetGameBadgeLevels_Response, badges_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Request, min_last_played_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, appid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, last_playtime_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_2weeks_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, playtime_forever_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response_Game, first_playtime_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetLastPlayedTimes_Response, games_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AcceptSSA_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, accountid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response_PlayerNickname, nickname_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNicknameList_Response, nicknames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, accountid_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, nickname_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showingame_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showonline_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, sounds_showmessages_),
  PROTOBUF_FIELD_OFFSET(::PerFriendPreferences, notifications_sendmobile_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetPerFriendPreferences_Response, preferences_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Request, preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetPerFriendPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, invite_sent_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_AddFriend_Response, friend_relationship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_RemoveFriend_Response, friend_relationship_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Request, unignore_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_IgnoreFriend_Response, friend_relationship_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, hide_adult_content_violence_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, hide_adult_content_sex_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, parenthesize_nicknames_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_CommunityPreferences, timestamp_updated_),
  2,
  3,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetCommunityPreferences_Response, preferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Request, preferences_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_SetCommunityPreferences_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Request, language_),
  0,
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, state_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_headline_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_url_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, time_posted_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_GetNewSteamAnnouncementState_Response, announcement_gid_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, announcement_gid_),
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Request, time_posted_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CPlayer_UpdateSteamAnnouncementLastRead_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Request)},
  { 5, 12, sizeof(::CPlayer_IncomingInviteMutualFriendList)},
  { 14, -1, sizeof(::CPlayer_GetMutualFriendsForIncomingInvites_Response)},
  { 20, 26, sizeof(::CPlayer_GetFriendsGameplayInfo_Request)},
  { 27, 35, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo)},
  { 38, 48, sizeof(::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo)},
  { 53, 64, sizeof(::CPlayer_GetFriendsGameplayInfo_Response)},
  { 70, 76, sizeof(::CPlayer_GetGameBadgeLevels_Request)},
  { 77, 85, sizeof(::CPlayer_GetGameBadgeLevels_Response_Badge)},
  { 88, 95, sizeof(::CPlayer_GetGameBadgeLevels_Response)},
  { 97, 103, sizeof(::CPlayer_GetLastPlayedTimes_Request)},
  { 104, 114, sizeof(::CPlayer_GetLastPlayedTimes_Response_Game)},
  { 119, -1, sizeof(::CPlayer_GetLastPlayedTimes_Response)},
  { 125, -1, sizeof(::CPlayer_AcceptSSA_Request)},
  { 130, -1, sizeof(::CPlayer_AcceptSSA_Response)},
  { 135, -1, sizeof(::CPlayer_GetNicknameList_Request)},
  { 140, 147, sizeof(::CPlayer_GetNicknameList_Response_PlayerNickname)},
  { 149, -1, sizeof(::CPlayer_GetNicknameList_Response)},
  { 155, -1, sizeof(::CPlayer_GetPerFriendPreferences_Request)},
  { 160, 174, sizeof(::PerFriendPreferences)},
  { 183, -1, sizeof(::CPlayer_GetPerFriendPreferences_Response)},
  { 189, 195, sizeof(::CPlayer_SetPerFriendPreferences_Request)},
  { 196, -1, sizeof(::CPlayer_SetPerFriendPreferences_Response)},
  { 201, 207, sizeof(::CPlayer_AddFriend_Request)},
  { 208, 215, sizeof(::CPlayer_AddFriend_Response)},
  { 217, 223, sizeof(::CPlayer_RemoveFriend_Request)},
  { 224, 230, sizeof(::CPlayer_RemoveFriend_Response)},
  { 231, 238, sizeof(::CPlayer_IgnoreFriend_Request)},
  { 240, 246, sizeof(::CPlayer_IgnoreFriend_Response)},
  { 247, -1, sizeof(::CPlayer_GetCommunityPreferences_Request)},
  { 252, 261, sizeof(::CPlayer_CommunityPreferences)},
  { 265, 271, sizeof(::CPlayer_GetCommunityPreferences_Response)},
  { 272, 278, sizeof(::CPlayer_SetCommunityPreferences_Request)},
  { 279, -1, sizeof(::CPlayer_SetCommunityPreferences_Response)},
  { 284, 290, sizeof(::CPlayer_GetNewSteamAnnouncementState_Request)},
  { 291, 301, sizeof(::CPlayer_GetNewSteamAnnouncementState_Response)},
  { 306, 313, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Request)},
  { 315, -1, sizeof(::CPlayer_UpdateSteamAnnouncementLastRead_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMutualFriendsForIncomingInvites_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IncomingInviteMutualFriendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetMutualFriendsForIncomingInvites_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetFriendsGameplayInfo_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetGameBadgeLevels_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetLastPlayedTimes_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AcceptSSA_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AcceptSSA_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNicknameList_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PerFriendPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetPerFriendPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetPerFriendPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AddFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_AddFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RemoveFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_RemoveFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IgnoreFriend_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_IgnoreFriend_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_CommunityPreferences_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetCommunityPreferences_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_SetCommunityPreferences_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNewSteamAnnouncementState_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_GetNewSteamAnnouncementState_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_UpdateSteamAnnouncementLastRead_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPlayer_UpdateSteamAnnouncementLastRead_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fplayer_2esteamworkssdk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(steammessages_player.steamworkssdk.pro"
  "to\032.steammessages_unified_base.steamwork"
  "ssdk.proto\"4\n2CPlayer_GetMutualFriendsFo"
  "rIncomingInvites_Request\"\\\n&CPlayer_Inco"
  "mingInviteMutualFriendList\022\017\n\007steamid\030\001 "
  "\001(\006\022!\n\031mutual_friend_account_ids\030\002 \003(\r\"\214"
  "\001\n3CPlayer_GetMutualFriendsForIncomingIn"
  "vites_Response\022U\n$incoming_invite_mutual"
  "_friends_lists\030\001 \003(\0132\'.CPlayer_IncomingI"
  "nviteMutualFriendList\"7\n&CPlayer_GetFrie"
  "ndsGameplayInfo_Request\022\r\n\005appid\030\001 \001(\r\"\356"
  "\005\n\'CPlayer_GetFriendsGameplayInfo_Respon"
  "se\022K\n\tyour_info\030\001 \001(\01328.CPlayer_GetFrien"
  "dsGameplayInfo_Response.OwnGameplayInfo\022"
  "M\n\007in_game\030\002 \003(\0132<.CPlayer_GetFriendsGam"
  "eplayInfo_Response.FriendsGameplayInfo\022U"
  "\n\017played_recently\030\003 \003(\0132<.CPlayer_GetFri"
  "endsGameplayInfo_Response.FriendsGamepla"
  "yInfo\022Q\n\013played_ever\030\004 \003(\0132<.CPlayer_Get"
  "FriendsGameplayInfo_Response.FriendsGame"
  "playInfo\022J\n\004owns\030\005 \003(\0132<.CPlayer_GetFrie"
  "ndsGameplayInfo_Response.FriendsGameplay"
  "Info\022Q\n\013in_wishlist\030\006 \003(\0132<.CPlayer_GetF"
  "riendsGameplayInfo_Response.FriendsGamep"
  "layInfo\032^\n\023FriendsGameplayInfo\022\017\n\007steami"
  "d\030\001 \001(\006\022\026\n\016minutes_played\030\002 \001(\r\022\036\n\026minut"
  "es_played_forever\030\003 \001(\r\032~\n\017OwnGameplayIn"
  "fo\022\017\n\007steamid\030\001 \001(\006\022\026\n\016minutes_played\030\002 "
  "\001(\r\022\036\n\026minutes_played_forever\030\003 \001(\r\022\023\n\013i"
  "n_wishlist\030\004 \001(\010\022\r\n\005owned\030\005 \001(\010\"3\n\"CPlay"
  "er_GetGameBadgeLevels_Request\022\r\n\005appid\030\001"
  " \001(\r\"\265\001\n#CPlayer_GetGameBadgeLevels_Resp"
  "onse\022\024\n\014player_level\030\001 \001(\r\022:\n\006badges\030\002 \003"
  "(\0132*.CPlayer_GetGameBadgeLevels_Response"
  ".Badge\032<\n\005Badge\022\r\n\005level\030\001 \001(\005\022\016\n\006series"
  "\030\002 \001(\005\022\024\n\014border_color\030\003 \001(\r\"\202\001\n\"CPlayer"
  "_GetLastPlayedTimes_Request\022\\\n\017min_last_"
  "played\030\001 \001(\rBC\202\265\030\?The most recent last-p"
  "layed time the client already knows abou"
  "t\"\330\001\n#CPlayer_GetLastPlayedTimes_Respons"
  "e\0228\n\005games\030\001 \003(\0132).CPlayer_GetLastPlayed"
  "Times_Response.Game\032w\n\004Game\022\r\n\005appid\030\001 \001"
  "(\005\022\025\n\rlast_playtime\030\002 \001(\r\022\027\n\017playtime_2w"
  "eeks\030\003 \001(\005\022\030\n\020playtime_forever\030\004 \001(\005\022\026\n\016"
  "first_playtime\030\005 \001(\r\"\033\n\031CPlayer_AcceptSS"
  "A_Request\"\034\n\032CPlayer_AcceptSSA_Response\""
  "!\n\037CPlayer_GetNicknameList_Request\"\236\001\n C"
  "Player_GetNicknameList_Response\022C\n\tnickn"
  "ames\030\001 \003(\01320.CPlayer_GetNicknameList_Res"
  "ponse.PlayerNickname\0325\n\016PlayerNickname\022\021"
  "\n\taccountid\030\001 \001(\007\022\020\n\010nickname\030\002 \001(\t\")\n\'C"
  "Player_GetPerFriendPreferences_Request\"\321"
  "\005\n\024PerFriendPreferences\022\021\n\taccountid\030\001 \001"
  "(\007\022\020\n\010nickname\030\002 \001(\t\022_\n\030notifications_sh"
  "owingame\030\003 \001(\0162\025.ENotificationSetting:&k"
  "_ENotificationSettingNotifyUseDefault\022_\n"
  "\030notifications_showonline\030\004 \001(\0162\025.ENotif"
  "icationSetting:&k_ENotificationSettingNo"
  "tifyUseDefault\022a\n\032notifications_showmess"
  "ages\030\005 \001(\0162\025.ENotificationSetting:&k_ENo"
  "tificationSettingNotifyUseDefault\022X\n\021sou"
  "nds_showingame\030\006 \001(\0162\025.ENotificationSett"
  "ing:&k_ENotificationSettingNotifyUseDefa"
  "ult\022X\n\021sounds_showonline\030\007 \001(\0162\025.ENotifi"
  "cationSetting:&k_ENotificationSettingNot"
  "ifyUseDefault\022Z\n\023sounds_showmessages\030\010 \001"
  "(\0162\025.ENotificationSetting:&k_ENotificati"
  "onSettingNotifyUseDefault\022_\n\030notificatio"
  "ns_sendmobile\030\t \001(\0162\025.ENotificationSetti"
  "ng:&k_ENotificationSettingNotifyUseDefau"
  "lt\"V\n(CPlayer_GetPerFriendPreferences_Re"
  "sponse\022*\n\013preferences\030\001 \003(\0132\025.PerFriendP"
  "references\"U\n\'CPlayer_SetPerFriendPrefer"
  "ences_Request\022*\n\013preferences\030\001 \001(\0132\025.Per"
  "FriendPreferences\"*\n(CPlayer_SetPerFrien"
  "dPreferences_Response\"c\n\031CPlayer_AddFrie"
  "nd_Request\022F\n\007steamid\030\001 \001(\006B5\202\265\0301Steam I"
  "D of user to whom to send a friend invit"
  "e.\"\366\001\n\032CPlayer_AddFriend_Response\022O\n\013inv"
  "ite_sent\030\001 \001(\010B:\202\265\0306True if the operatio"
  "n was successful, false otherwise.\022\206\001\n\023f"
  "riend_relationship\030\002 \001(\rBi\202\265\030ethe result"
  "ing relationship.  Depending on state, m"
  "ay move directly to friends rather than "
  "invite sent\"R\n\034CPlayer_RemoveFriend_Requ"
  "est\0222\n\007steamid\030\001 \001(\006B!\202\265\030\035Steam ID of fr"
  "iend to remove.\"\\\n\035CPlayer_RemoveFriend_"
  "Response\022;\n\023friend_relationship\030\001 \001(\rB\036\202"
  "\265\030\032the resulting relationship\"\177\n\034CPlayer"
  "_IgnoreFriend_Request\022\017\n\007steamid\030\001 \001(\006\022N"
  "\n\010unignore\030\002 \001(\010B<\202\265\0308If set, remove fro"
  "m ignore/block list instead of adding \"\\"
  "\n\035CPlayer_IgnoreFriend_Response\022;\n\023frien"
  "d_relationship\030\001 \001(\rB\036\202\265\030\032the resulting "
  "relationship\")\n\'CPlayer_GetCommunityPref"
  "erences_Request\"\261\001\n\034CPlayer_CommunityPre"
  "ferences\022)\n\033hide_adult_content_violence\030"
  "\001 \001(\010:\004true\022$\n\026hide_adult_content_sex\030\002 "
  "\001(\010:\004true\022%\n\026parenthesize_nicknames\030\004 \001("
  "\010:\005false\022\031\n\021timestamp_updated\030\003 \001(\r\"^\n(C"
  "Player_GetCommunityPreferences_Response\022"
  "2\n\013preferences\030\001 \001(\0132\035.CPlayer_Community"
  "Preferences\"]\n\'CPlayer_SetCommunityPrefe"
  "rences_Request\0222\n\013preferences\030\001 \001(\0132\035.CP"
  "layer_CommunityPreferences\"*\n(CPlayer_Se"
  "tCommunityPreferences_Response\"@\n,CPlaye"
  "r_GetNewSteamAnnouncementState_Request\022\020"
  "\n\010language\030\001 \001(\005\"\246\001\n-CPlayer_GetNewSteam"
  "AnnouncementState_Response\022\r\n\005state\030\001 \001("
  "\005\022\035\n\025announcement_headline\030\002 \001(\t\022\030\n\020anno"
  "uncement_url\030\003 \001(\t\022\023\n\013time_posted\030\004 \001(\r\022"
  "\030\n\020announcement_gid\030\005 \001(\004\"`\n/CPlayer_Upd"
  "ateSteamAnnouncementLastRead_Request\022\030\n\020"
  "announcement_gid\030\001 \001(\004\022\023\n\013time_posted\030\002 "
  "\001(\r\"2\n0CPlayer_UpdateSteamAnnouncementLa"
  "stRead_Response*\205\001\n\024ENotificationSetting"
  "\022*\n&k_ENotificationSettingNotifyUseDefau"
  "lt\020\000\022 \n\034k_ENotificationSettingAlways\020\001\022\037"
  "\n\033k_ENotificationSettingNever\020\0022\255\024\n\006Play"
  "er\022\357\001\n\"GetMutualFriendsForIncomingInvite"
  "s\0223.CPlayer_GetMutualFriendsForIncomingI"
  "nvites_Request\0324.CPlayer_GetMutualFriend"
  "sForIncomingInvites_Response\"^\202\265\030ZGet me"
  " the mutual friends for each of my pendi"
  "ng incoming invites (individuals and cla"
  "ns).\022\270\001\n\026GetFriendsGameplayInfo\022\'.CPlaye"
  "r_GetFriendsGameplayInfo_Request\032(.CPlay"
  "er_GetFriendsGameplayInfo_Response\"K\202\265\030G"
  "Get a list of friends who are playing, h"
  "ave played, own, or want a game\022\266\001\n\022GetG"
  "ameBadgeLevels\022#.CPlayer_GetGameBadgeLev"
  "els_Request\032$.CPlayer_GetGameBadgeLevels"
  "_Response\"U\202\265\030QReturns the Steam Level o"
  "f a user, the Badge level for the game, "
  "and if it\'s foil\022\225\001\n\030ClientGetLastPlayed"
  "Times\022#.CPlayer_GetLastPlayedTimes_Reque"
  "st\032$.CPlayer_GetLastPlayedTimes_Response"
  "\".\202\265\030*Gets the last-played times for the"
  " account\022c\n\tAcceptSSA\022\032.CPlayer_AcceptSS"
  "A_Request\032\033.CPlayer_AcceptSSA_Response\"\035"
  "\202\265\030\031User is accepting the SSA\022\224\001\n\017GetNic"
  "knameList\022 .CPlayer_GetNicknameList_Requ"
  "est\032!.CPlayer_GetNicknameList_Response\"<"
  "\202\265\0308Gets the list of nicknames this user"
  " has for other users\022\275\001\n\027GetPerFriendPre"
  "ferences\022(.CPlayer_GetPerFriendPreferenc"
  "es_Request\032).CPlayer_GetPerFriendPrefere"
  "nces_Response\"M\202\265\030IGets the list of per-"
  "friend preferences this user has set for"
  " other users\022\267\001\n\027SetPerFriendPreferences"
  "\022(.CPlayer_SetPerFriendPreferences_Reque"
  "st\032).CPlayer_SetPerFriendPreferences_Res"
  "ponse\"G\202\265\030CSets the logged in user\'s per"
  "-friend preferences for the given user\022s"
  "\n\tAddFriend\022\032.CPlayer_AddFriend_Request\032"
  "\033.CPlayer_AddFriend_Response\"-\202\265\030)Invite"
  "s another Steam user to be a friend\022\202\001\n\014"
  "RemoveFriend\022\035.CPlayer_RemoveFriend_Requ"
  "est\032\036.CPlayer_RemoveFriend_Response\"3\202\265\030"
  "/Removes a friend or ignores a friend su"
  "ggestion\022\246\001\n\014IgnoreFriend\022\035.CPlayer_Igno"
  "reFriend_Request\032\036.CPlayer_IgnoreFriend_"
  "Response\"W\202\265\030SBlocks or unblocks communi"
  "cation with the user.  Despite name, can"
  " be a non-friend.\022\236\001\n\027GetCommunityPrefer"
  "ences\022(.CPlayer_GetCommunityPreferences_"
  "Request\032).CPlayer_GetCommunityPreference"
  "s_Response\".\202\265\030*Returns the player\'s com"
  "munity preferences\022\233\001\n\027SetCommunityPrefe"
  "rences\022(.CPlayer_SetCommunityPreferences"
  "_Request\032).CPlayer_SetCommunityPreferenc"
  "es_Response\"+\202\265\030\'Sets the player\'s commu"
  "nity preferences\022\336\001\n\034GetNewSteamAnnounce"
  "mentState\022-.CPlayer_GetNewSteamAnnouncem"
  "entState_Request\032..CPlayer_GetNewSteamAn"
  "nouncementState_Response\"_\202\265\030[Calculates"
  " and returns what to display for UI that"
  " renders new steam announcement availabl"
  "e\022\274\001\n\037UpdateSteamAnnouncementLastRead\0220."
  "CPlayer_UpdateSteamAnnouncementLastRead_"
  "Request\0321.CPlayer_UpdateSteamAnnouncemen"
  "tLastRead_Response\"4\202\265\0300Marks latest ann"
  "ouncement timestamp read by user\032-\202\265\030)A "
  "service for accessing Steam player dataB"
  "\003\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5funified_5fbase_2esteamworkssdk_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto = {
  false, false, 7364, descriptor_table_protodef_steammessages_5fplayer_2esteamworkssdk_2eproto, "steammessages_player.steamworkssdk.proto", 
  &descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_once, descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_deps, 1, 38,
  schemas, file_default_instances, TableStruct_steammessages_5fplayer_2esteamworkssdk_2eproto::offsets,
  file_level_metadata_steammessages_5fplayer_2esteamworkssdk_2eproto, file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto, file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
  return descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fplayer_2esteamworkssdk_2eproto(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENotificationSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
  return file_level_enum_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0];
}
bool ENotificationSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Request::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}
CPlayer_GetMutualFriendsForIncomingInvites_Request::CPlayer_GetMutualFriendsForIncomingInvites_Request(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SharedCtor() {
}

CPlayer_GetMutualFriendsForIncomingInvites_Request::~CPlayer_GetMutualFriendsForIncomingInvites_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::ArenaDtor(void* object) {
  CPlayer_GetMutualFriendsForIncomingInvites_Request* _this = reinterpret_cast< CPlayer_GetMutualFriendsForIncomingInvites_Request* >(object);
  (void)_this;
}
void CPlayer_GetMutualFriendsForIncomingInvites_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetMutualFriendsForIncomingInvites_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMutualFriendsForIncomingInvites_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetMutualFriendsForIncomingInvites_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetMutualFriendsForIncomingInvites_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetMutualFriendsForIncomingInvites_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetMutualFriendsForIncomingInvites_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetMutualFriendsForIncomingInvites_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Request::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_IncomingInviteMutualFriendList::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IncomingInviteMutualFriendList>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mutual_friend_account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IncomingInviteMutualFriendList)
}
CPlayer_IncomingInviteMutualFriendList::CPlayer_IncomingInviteMutualFriendList(const CPlayer_IncomingInviteMutualFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mutual_friend_account_ids_(from.mutual_friend_account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IncomingInviteMutualFriendList)
}

void CPlayer_IncomingInviteMutualFriendList::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_IncomingInviteMutualFriendList::~CPlayer_IncomingInviteMutualFriendList() {
  // @@protoc_insertion_point(destructor:CPlayer_IncomingInviteMutualFriendList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_IncomingInviteMutualFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_IncomingInviteMutualFriendList::ArenaDtor(void* object) {
  CPlayer_IncomingInviteMutualFriendList* _this = reinterpret_cast< CPlayer_IncomingInviteMutualFriendList* >(object);
  (void)_this;
}
void CPlayer_IncomingInviteMutualFriendList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IncomingInviteMutualFriendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IncomingInviteMutualFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IncomingInviteMutualFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutual_friend_account_ids_.Clear();
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IncomingInviteMutualFriendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mutual_friend_account_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mutual_friend_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mutual_friend_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_IncomingInviteMutualFriendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IncomingInviteMutualFriendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // repeated uint32 mutual_friend_account_ids = 2;
  for (int i = 0, n = this->_internal_mutual_friend_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mutual_friend_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IncomingInviteMutualFriendList)
  return target;
}

size_t CPlayer_IncomingInviteMutualFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IncomingInviteMutualFriendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mutual_friend_account_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mutual_friend_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mutual_friend_account_ids_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IncomingInviteMutualFriendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IncomingInviteMutualFriendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_IncomingInviteMutualFriendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_IncomingInviteMutualFriendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_IncomingInviteMutualFriendList)
    MergeFrom(*source);
  }
}

void CPlayer_IncomingInviteMutualFriendList::MergeFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IncomingInviteMutualFriendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutual_friend_account_ids_.MergeFrom(from.mutual_friend_account_ids_);
  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IncomingInviteMutualFriendList::CopyFrom(const CPlayer_IncomingInviteMutualFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IncomingInviteMutualFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IncomingInviteMutualFriendList::IsInitialized() const {
  return true;
}

void CPlayer_IncomingInviteMutualFriendList::InternalSwap(CPlayer_IncomingInviteMutualFriendList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mutual_friend_account_ids_.InternalSwap(&other->mutual_friend_account_ids_);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IncomingInviteMutualFriendList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetMutualFriendsForIncomingInvites_Response::_Internal {
 public:
};

CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  incoming_invite_mutual_friends_lists_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}
CPlayer_GetMutualFriendsForIncomingInvites_Response::CPlayer_GetMutualFriendsForIncomingInvites_Response(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      incoming_invite_mutual_friends_lists_(from.incoming_invite_mutual_friends_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedCtor() {
}

CPlayer_GetMutualFriendsForIncomingInvites_Response::~CPlayer_GetMutualFriendsForIncomingInvites_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::ArenaDtor(void* object) {
  CPlayer_GetMutualFriendsForIncomingInvites_Response* _this = reinterpret_cast< CPlayer_GetMutualFriendsForIncomingInvites_Response* >(object);
  (void)_this;
}
void CPlayer_GetMutualFriendsForIncomingInvites_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetMutualFriendsForIncomingInvites_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_invite_mutual_friends_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetMutualFriendsForIncomingInvites_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incoming_invite_mutual_friends_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_incoming_invite_mutual_friends_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  return target;
}

size_t CPlayer_GetMutualFriendsForIncomingInvites_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_IncomingInviteMutualFriendList incoming_invite_mutual_friends_lists = 1;
  total_size += 1UL * this->_internal_incoming_invite_mutual_friends_lists_size();
  for (const auto& msg : this->incoming_invite_mutual_friends_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetMutualFriendsForIncomingInvites_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetMutualFriendsForIncomingInvites_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetMutualFriendsForIncomingInvites_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetMutualFriendsForIncomingInvites_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::MergeFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_invite_mutual_friends_lists_.MergeFrom(from.incoming_invite_mutual_friends_lists_);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::CopyFrom(const CPlayer_GetMutualFriendsForIncomingInvites_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetMutualFriendsForIncomingInvites_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetMutualFriendsForIncomingInvites_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetMutualFriendsForIncomingInvites_Response::InternalSwap(CPlayer_GetMutualFriendsForIncomingInvites_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  incoming_invite_mutual_friends_lists_.InternalSwap(&other->incoming_invite_mutual_friends_lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetMutualFriendsForIncomingInvites_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}
CPlayer_GetFriendsGameplayInfo_Request::CPlayer_GetFriendsGameplayInfo_Request(const CPlayer_GetFriendsGameplayInfo_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Request)
}

void CPlayer_GetFriendsGameplayInfo_Request::SharedCtor() {
appid_ = 0u;
}

CPlayer_GetFriendsGameplayInfo_Request::~CPlayer_GetFriendsGameplayInfo_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetFriendsGameplayInfo_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Request::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Request* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Request* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetFriendsGameplayInfo_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Request)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetFriendsGameplayInfo_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetFriendsGameplayInfo_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetFriendsGameplayInfo_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetFriendsGameplayInfo_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetFriendsGameplayInfo_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetFriendsGameplayInfo_Request::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CPlayer_GetFriendsGameplayInfo_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetFriendsGameplayInfo_Request::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Request::InternalSwap(CPlayer_GetFriendsGameplayInfo_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&minutes_played_forever_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minutes_played_forever_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
}

CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minutes_played_forever_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(minutes_played_forever_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_played_forever());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
    MergeFrom(*source);
  }
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_played_ = from.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_played_forever_ = from.minutes_played_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, minutes_played_forever_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::minutes_played_forever_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minutes_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minutes_played_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_in_wishlist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}
CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owned_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
}

CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::~CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owned_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(owned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_played = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minutes_played(&has_bits);
          minutes_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minutes_played_forever = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_minutes_played_forever(&has_bits);
          minutes_played_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_wishlist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_in_wishlist(&has_bits);
          in_wishlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 minutes_played = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minutes_played(), target);
  }

  // optional uint32 minutes_played_forever = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_minutes_played_forever(), target);
  }

  // optional bool in_wishlist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_in_wishlist(), target);
  }

  // optional bool owned = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_owned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 minutes_played = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_played());
    }

    // optional uint32 minutes_played_forever = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minutes_played_forever());
    }

    // optional bool in_wishlist = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool owned = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
    MergeFrom(*source);
  }
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      minutes_played_ = from.minutes_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      minutes_played_forever_ = from.minutes_played_forever_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_wishlist_ = from.in_wishlist_;
    }
    if (cached_has_bits & 0x00000010u) {
      owned_ = from.owned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, owned_)
      + sizeof(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::owned_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetFriendsGameplayInfo_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetFriendsGameplayInfo_Response>()._has_bits_);
  static const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo& your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg);
  static void set_has_your_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo&
CPlayer_GetFriendsGameplayInfo_Response::_Internal::your_info(const CPlayer_GetFriendsGameplayInfo_Response* msg) {
  return *msg->your_info_;
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  in_game_(arena),
  played_recently_(arena),
  played_ever_(arena),
  owns_(arena),
  in_wishlist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}
CPlayer_GetFriendsGameplayInfo_Response::CPlayer_GetFriendsGameplayInfo_Response(const CPlayer_GetFriendsGameplayInfo_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      in_game_(from.in_game_),
      played_recently_(from.played_recently_),
      played_ever_(from.played_ever_),
      owns_(from.owns_),
      in_wishlist_(from.in_wishlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_your_info()) {
    your_info_ = new ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo(*from.your_info_);
  } else {
    your_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetFriendsGameplayInfo_Response)
}

void CPlayer_GetFriendsGameplayInfo_Response::SharedCtor() {
your_info_ = nullptr;
}

CPlayer_GetFriendsGameplayInfo_Response::~CPlayer_GetFriendsGameplayInfo_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetFriendsGameplayInfo_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetFriendsGameplayInfo_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete your_info_;
}

void CPlayer_GetFriendsGameplayInfo_Response::ArenaDtor(void* object) {
  CPlayer_GetFriendsGameplayInfo_Response* _this = reinterpret_cast< CPlayer_GetFriendsGameplayInfo_Response* >(object);
  (void)_this;
}
void CPlayer_GetFriendsGameplayInfo_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetFriendsGameplayInfo_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetFriendsGameplayInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetFriendsGameplayInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  in_game_.Clear();
  played_recently_.Clear();
  played_ever_.Clear();
  owns_.Clear();
  in_wishlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(your_info_ != nullptr);
    your_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetFriendsGameplayInfo_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_your_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_game(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_recently(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_ever(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_wishlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetFriendsGameplayInfo_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetFriendsGameplayInfo_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::your_info(this), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_game_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_in_game(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_played_recently_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_played_recently(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_played_ever_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_played_ever(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_owns(i), target, stream);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_wishlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_in_wishlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetFriendsGameplayInfo_Response)
  return target;
}

size_t CPlayer_GetFriendsGameplayInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetFriendsGameplayInfo_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_game = 2;
  total_size += 1UL * this->_internal_in_game_size();
  for (const auto& msg : this->in_game_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_recently = 3;
  total_size += 1UL * this->_internal_played_recently_size();
  for (const auto& msg : this->played_recently_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo played_ever = 4;
  total_size += 1UL * this->_internal_played_ever_size();
  for (const auto& msg : this->played_ever_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo owns = 5;
  total_size += 1UL * this->_internal_owns_size();
  for (const auto& msg : this->owns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CPlayer_GetFriendsGameplayInfo_Response.FriendsGameplayInfo in_wishlist = 6;
  total_size += 1UL * this->_internal_in_wishlist_size();
  for (const auto& msg : this->in_wishlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CPlayer_GetFriendsGameplayInfo_Response.OwnGameplayInfo your_info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *your_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetFriendsGameplayInfo_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetFriendsGameplayInfo_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetFriendsGameplayInfo_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetFriendsGameplayInfo_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetFriendsGameplayInfo_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetFriendsGameplayInfo_Response::MergeFrom(const CPlayer_GetFriendsGameplayInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  in_game_.MergeFrom(from.in_game_);
  played_recently_.MergeFrom(from.played_recently_);
  played_ever_.MergeFrom(from.played_ever_);
  owns_.MergeFrom(from.owns_);
  in_wishlist_.MergeFrom(from.in_wishlist_);
  if (from._internal_has_your_info()) {
    _internal_mutable_your_info()->::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo::MergeFrom(from._internal_your_info());
  }
}

void CPlayer_GetFriendsGameplayInfo_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetFriendsGameplayInfo_Response::CopyFrom(const CPlayer_GetFriendsGameplayInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetFriendsGameplayInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetFriendsGameplayInfo_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetFriendsGameplayInfo_Response::InternalSwap(CPlayer_GetFriendsGameplayInfo_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  in_game_.InternalSwap(&other->in_game_);
  played_recently_.InternalSwap(&other->played_recently_);
  played_ever_.InternalSwap(&other->played_ever_);
  owns_.InternalSwap(&other->owns_);
  in_wishlist_.InternalSwap(&other->in_wishlist_);
  swap(your_info_, other->your_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetFriendsGameplayInfo_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetGameBadgeLevels_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Request)
}
CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Request)
}

void CPlayer_GetGameBadgeLevels_Request::SharedCtor() {
appid_ = 0u;
}

CPlayer_GetGameBadgeLevels_Request::~CPlayer_GetGameBadgeLevels_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetGameBadgeLevels_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Request::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Request* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Request* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetGameBadgeLevels_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Request)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 appid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetGameBadgeLevels_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetGameBadgeLevels_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_appid()) {
    _internal_set_appid(from._internal_appid());
  }
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Request::InternalSwap(CPlayer_GetGameBadgeLevels_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(appid_, other->appid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetGameBadgeLevels_Response_Badge::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response_Badge>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_series(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_border_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}
CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response.Badge)
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
}

CPlayer_GetGameBadgeLevels_Response_Badge::~CPlayer_GetGameBadgeLevels_Response_Badge() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response.Badge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Response_Badge* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Response_Badge* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Response_Badge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&border_color_) -
        reinterpret_cast<char*>(&level_)) + sizeof(border_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_series(&has_bits);
          series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 border_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_border_color(&has_bits);
          border_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetGameBadgeLevels_Response_Badge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_level(), target);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_series(), target);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_border_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response.Badge)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response_Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional int32 series = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_series());
    }

    // optional uint32 border_color = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_border_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response_Badge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Response_Badge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetGameBadgeLevels_Response.Badge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetGameBadgeLevels_Response.Badge)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_ = from.series_;
    }
    if (cached_has_bits & 0x00000004u) {
      border_color_ = from.border_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, border_color_)
      + sizeof(CPlayer_GetGameBadgeLevels_Response_Badge::border_color_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response_Badge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetGameBadgeLevels_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetGameBadgeLevels_Response>()._has_bits_);
  static void set_has_player_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  badges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetGameBadgeLevels_Response)
}
CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      badges_(from.badges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_level_ = from.player_level_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetGameBadgeLevels_Response)
}

void CPlayer_GetGameBadgeLevels_Response::SharedCtor() {
player_level_ = 0u;
}

CPlayer_GetGameBadgeLevels_Response::~CPlayer_GetGameBadgeLevels_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetGameBadgeLevels_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetGameBadgeLevels_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetGameBadgeLevels_Response::ArenaDtor(void* object) {
  CPlayer_GetGameBadgeLevels_Response* _this = reinterpret_cast< CPlayer_GetGameBadgeLevels_Response* >(object);
  (void)_this;
}
void CPlayer_GetGameBadgeLevels_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetGameBadgeLevels_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetGameBadgeLevels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetGameBadgeLevels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  badges_.Clear();
  player_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetGameBadgeLevels_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_level(&has_bits);
          player_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_badges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetGameBadgeLevels_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetGameBadgeLevels_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_level(), target);
  }

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_badges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_badges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetGameBadgeLevels_Response)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetGameBadgeLevels_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  total_size += 1UL * this->_internal_badges_size();
  for (const auto& msg : this->badges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 player_level = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetGameBadgeLevels_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetGameBadgeLevels_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetGameBadgeLevels_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  badges_.MergeFrom(from.badges_);
  if (from._internal_has_player_level()) {
    _internal_set_player_level(from._internal_player_level());
  }
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response::InternalSwap(CPlayer_GetGameBadgeLevels_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  badges_.InternalSwap(&other->badges_);
  swap(player_level_, other->player_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetGameBadgeLevels_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetLastPlayedTimes_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Request>()._has_bits_);
  static void set_has_min_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Request)
}
CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_last_played_ = from.min_last_played_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Request)
}

void CPlayer_GetLastPlayedTimes_Request::SharedCtor() {
min_last_played_ = 0u;
}

CPlayer_GetLastPlayedTimes_Request::~CPlayer_GetLastPlayedTimes_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetLastPlayedTimes_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Request::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Request* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Request* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_last_played_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_min_last_played(&has_bits);
          min_last_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetLastPlayedTimes_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_last_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Request)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 min_last_played = 1 [(.description) = "The most recent last-played time the client already knows about"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_last_played());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetLastPlayedTimes_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetLastPlayedTimes_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_last_played()) {
    _internal_set_min_last_played(from._internal_min_last_played());
  }
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Request::InternalSwap(CPlayer_GetLastPlayedTimes_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_last_played_, other->min_last_played_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetLastPlayedTimes_Response_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetLastPlayedTimes_Response_Game>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playtime_2weeks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_playtime_forever(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_playtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}
CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_playtime_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response.Game)
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&appid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_playtime_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
}

CPlayer_GetLastPlayedTimes_Response_Game::~CPlayer_GetLastPlayedTimes_Response_Game() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response.Game)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Response_Game::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Response_Game* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Response_Game* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Response_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Response_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_playtime_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(first_playtime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_playtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_playtime(&has_bits);
          last_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 playtime_2weeks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_playtime_2weeks(&has_bits);
          playtime_2weeks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 playtime_forever = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_playtime_forever(&has_bits);
          playtime_forever_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_playtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_first_playtime(&has_bits);
          first_playtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetLastPlayedTimes_Response_Game::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_playtime(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_playtime_forever(), target);
  }

  // optional uint32 first_playtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_first_playtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response.Game)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response.Game)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 appid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_appid());
    }

    // optional uint32 last_playtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_playtime());
    }

    // optional int32 playtime_2weeks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_playtime_forever());
    }

    // optional uint32 first_playtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_playtime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response_Game* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Response_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetLastPlayedTimes_Response.Game)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetLastPlayedTimes_Response.Game)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_playtime_ = from.last_playtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      playtime_2weeks_ = from.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playtime_forever_ = from.playtime_forever_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_playtime_ = from.first_playtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response_Game::InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, first_playtime_)
      + sizeof(CPlayer_GetLastPlayedTimes_Response_Game::first_playtime_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, appid_)>(
          reinterpret_cast<char*>(&appid_),
          reinterpret_cast<char*>(&other->appid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response_Game::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetLastPlayedTimes_Response::_Internal {
 public:
};

CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetLastPlayedTimes_Response)
}
CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetLastPlayedTimes_Response)
}

void CPlayer_GetLastPlayedTimes_Response::SharedCtor() {
}

CPlayer_GetLastPlayedTimes_Response::~CPlayer_GetLastPlayedTimes_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetLastPlayedTimes_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetLastPlayedTimes_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetLastPlayedTimes_Response::ArenaDtor(void* object) {
  CPlayer_GetLastPlayedTimes_Response* _this = reinterpret_cast< CPlayer_GetLastPlayedTimes_Response* >(object);
  (void)_this;
}
void CPlayer_GetLastPlayedTimes_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetLastPlayedTimes_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetLastPlayedTimes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetLastPlayedTimes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetLastPlayedTimes_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetLastPlayedTimes_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetLastPlayedTimes_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetLastPlayedTimes_Response)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetLastPlayedTimes_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetLastPlayedTimes_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetLastPlayedTimes_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetLastPlayedTimes_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response::InternalSwap(CPlayer_GetLastPlayedTimes_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetLastPlayedTimes_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_AcceptSSA_Request::_Internal {
 public:
};

CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Request)
}
CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Request)
}

void CPlayer_AcceptSSA_Request::SharedCtor() {
}

CPlayer_AcceptSSA_Request::~CPlayer_AcceptSSA_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_AcceptSSA_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_AcceptSSA_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_AcceptSSA_Request::ArenaDtor(void* object) {
  CPlayer_AcceptSSA_Request* _this = reinterpret_cast< CPlayer_AcceptSSA_Request* >(object);
  (void)_this;
}
void CPlayer_AcceptSSA_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AcceptSSA_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AcceptSSA_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AcceptSSA_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AcceptSSA_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_AcceptSSA_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AcceptSSA_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AcceptSSA_Request)
  return target;
}

size_t CPlayer_AcceptSSA_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AcceptSSA_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AcceptSSA_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_AcceptSSA_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_AcceptSSA_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_AcceptSSA_Request)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Request::MergeFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Request::CopyFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Request::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Request::InternalSwap(CPlayer_AcceptSSA_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_AcceptSSA_Response::_Internal {
 public:
};

CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AcceptSSA_Response)
}
CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_AcceptSSA_Response)
}

void CPlayer_AcceptSSA_Response::SharedCtor() {
}

CPlayer_AcceptSSA_Response::~CPlayer_AcceptSSA_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_AcceptSSA_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_AcceptSSA_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_AcceptSSA_Response::ArenaDtor(void* object) {
  CPlayer_AcceptSSA_Response* _this = reinterpret_cast< CPlayer_AcceptSSA_Response* >(object);
  (void)_this;
}
void CPlayer_AcceptSSA_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AcceptSSA_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AcceptSSA_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AcceptSSA_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AcceptSSA_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_AcceptSSA_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AcceptSSA_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AcceptSSA_Response)
  return target;
}

size_t CPlayer_AcceptSSA_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AcceptSSA_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AcceptSSA_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_AcceptSSA_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_AcceptSSA_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_AcceptSSA_Response)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Response::MergeFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Response::CopyFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Response::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Response::InternalSwap(CPlayer_AcceptSSA_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AcceptSSA_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetNicknameList_Request::_Internal {
 public:
};

CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Request)
}
CPlayer_GetNicknameList_Request::CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Request)
}

void CPlayer_GetNicknameList_Request::SharedCtor() {
}

CPlayer_GetNicknameList_Request::~CPlayer_GetNicknameList_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetNicknameList_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetNicknameList_Request::ArenaDtor(void* object) {
  CPlayer_GetNicknameList_Request* _this = reinterpret_cast< CPlayer_GetNicknameList_Request* >(object);
  (void)_this;
}
void CPlayer_GetNicknameList_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNicknameList_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetNicknameList_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Request)
  return target;
}

size_t CPlayer_GetNicknameList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetNicknameList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetNicknameList_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetNicknameList_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetNicknameList_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Request::MergeFrom(const CPlayer_GetNicknameList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetNicknameList_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetNicknameList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Request::CopyFrom(const CPlayer_GetNicknameList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Request::InternalSwap(CPlayer_GetNicknameList_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetNicknameList_Response_PlayerNickname::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNicknameList_Response_PlayerNickname>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}
CPlayer_GetNicknameList_Response_PlayerNickname::CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response.PlayerNickname)
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accountid_ = 0u;
}

CPlayer_GetNicknameList_Response_PlayerNickname::~CPlayer_GetNicknameList_Response_PlayerNickname() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response.PlayerNickname)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetNicknameList_Response_PlayerNickname::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNicknameList_Response_PlayerNickname::ArenaDtor(void* object) {
  CPlayer_GetNicknameList_Response_PlayerNickname* _this = reinterpret_cast< CPlayer_GetNicknameList_Response_PlayerNickname* >(object);
  (void)_this;
}
void CPlayer_GetNicknameList_Response_PlayerNickname::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNicknameList_Response_PlayerNickname::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetNicknameList_Response_PlayerNickname::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNicknameList_Response.PlayerNickname.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response.PlayerNickname)
  return target;
}

size_t CPlayer_GetNicknameList_Response_PlayerNickname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Response_PlayerNickname* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetNicknameList_Response_PlayerNickname>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetNicknameList_Response.PlayerNickname)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetNicknameList_Response.PlayerNickname)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Response_PlayerNickname::MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Response_PlayerNickname::CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response.PlayerNickname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response_PlayerNickname::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response_PlayerNickname::InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(accountid_, other->accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response_PlayerNickname::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetNicknameList_Response::_Internal {
 public:
};

CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nicknames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNicknameList_Response)
}
CPlayer_GetNicknameList_Response::CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nicknames_(from.nicknames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNicknameList_Response)
}

void CPlayer_GetNicknameList_Response::SharedCtor() {
}

CPlayer_GetNicknameList_Response::~CPlayer_GetNicknameList_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNicknameList_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetNicknameList_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetNicknameList_Response::ArenaDtor(void* object) {
  CPlayer_GetNicknameList_Response* _this = reinterpret_cast< CPlayer_GetNicknameList_Response* >(object);
  (void)_this;
}
void CPlayer_GetNicknameList_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNicknameList_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNicknameList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNicknameList_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicknames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNicknameList_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nicknames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetNicknameList_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNicknameList_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nicknames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nicknames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNicknameList_Response)
  return target;
}

size_t CPlayer_GetNicknameList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNicknameList_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  total_size += 1UL * this->_internal_nicknames_size();
  for (const auto& msg : this->nicknames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNicknameList_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNicknameList_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetNicknameList_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetNicknameList_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetNicknameList_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetNicknameList_Response::MergeFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNicknameList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nicknames_.MergeFrom(from.nicknames_);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNicknameList_Response::CopyFrom(const CPlayer_GetNicknameList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNicknameList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNicknameList_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNicknameList_Response::InternalSwap(CPlayer_GetNicknameList_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nicknames_.InternalSwap(&other->nicknames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNicknameList_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetPerFriendPreferences_Request::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Request)
}
CPlayer_GetPerFriendPreferences_Request::CPlayer_GetPerFriendPreferences_Request(const CPlayer_GetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Request)
}

void CPlayer_GetPerFriendPreferences_Request::SharedCtor() {
}

CPlayer_GetPerFriendPreferences_Request::~CPlayer_GetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPerFriendPreferences_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetPerFriendPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetPerFriendPreferences_Request::ArenaDtor(void* object) {
  CPlayer_GetPerFriendPreferences_Request* _this = reinterpret_cast< CPlayer_GetPerFriendPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_GetPerFriendPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPerFriendPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPerFriendPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetPerFriendPreferences_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPerFriendPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPerFriendPreferences_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetPerFriendPreferences_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetPerFriendPreferences_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetPerFriendPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetPerFriendPreferences_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetPerFriendPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetPerFriendPreferences_Request::MergeFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetPerFriendPreferences_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetPerFriendPreferences_Request::CopyFrom(const CPlayer_GetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Request::InternalSwap(CPlayer_GetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PerFriendPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<PerFriendPreferences>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notifications_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notifications_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notifications_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sounds_showingame(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sounds_showonline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sounds_showmessages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_notifications_sendmobile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PerFriendPreferences::PerFriendPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:PerFriendPreferences)
}
PerFriendPreferences::PerFriendPreferences(const PerFriendPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nickname()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notifications_sendmobile_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(notifications_sendmobile_));
  // @@protoc_insertion_point(copy_constructor:PerFriendPreferences)
}

void PerFriendPreferences::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notifications_sendmobile_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(notifications_sendmobile_));
}

PerFriendPreferences::~PerFriendPreferences() {
  // @@protoc_insertion_point(destructor:PerFriendPreferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PerFriendPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerFriendPreferences::ArenaDtor(void* object) {
  PerFriendPreferences* _this = reinterpret_cast< PerFriendPreferences* >(object);
  (void)_this;
}
void PerFriendPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerFriendPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerFriendPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:PerFriendPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nickname_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sounds_showmessages_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(sounds_showmessages_));
  }
  notifications_sendmobile_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerFriendPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PerFriendPreferences.nickname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showingame(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showonline(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_sounds_showmessages(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENotificationSetting_IsValid(val))) {
            _internal_set_notifications_sendmobile(static_cast<::ENotificationSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerFriendPreferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PerFriendPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_accountid(), target);
  }

  // optional string nickname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PerFriendPreferences.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_notifications_showingame(), target);
  }

  // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_notifications_showonline(), target);
  }

  // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_notifications_showmessages(), target);
  }

  // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sounds_showingame(), target);
  }

  // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sounds_showonline(), target);
  }

  // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_sounds_showmessages(), target);
  }

  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_notifications_sendmobile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PerFriendPreferences)
  return target;
}

size_t PerFriendPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PerFriendPreferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string nickname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional fixed32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .ENotificationSetting notifications_showingame = 3 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showingame());
    }

    // optional .ENotificationSetting notifications_showonline = 4 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showonline());
    }

    // optional .ENotificationSetting notifications_showmessages = 5 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_showmessages());
    }

    // optional .ENotificationSetting sounds_showingame = 6 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showingame());
    }

    // optional .ENotificationSetting sounds_showonline = 7 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showonline());
    }

    // optional .ENotificationSetting sounds_showmessages = 8 [default = k_ENotificationSettingNotifyUseDefault];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sounds_showmessages());
    }

  }
  // optional .ENotificationSetting notifications_sendmobile = 9 [default = k_ENotificationSettingNotifyUseDefault];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_notifications_sendmobile());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerFriendPreferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const PerFriendPreferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PerFriendPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PerFriendPreferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PerFriendPreferences)
    MergeFrom(*source);
  }
}

void PerFriendPreferences::MergeFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PerFriendPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      notifications_showingame_ = from.notifications_showingame_;
    }
    if (cached_has_bits & 0x00000008u) {
      notifications_showonline_ = from.notifications_showonline_;
    }
    if (cached_has_bits & 0x00000010u) {
      notifications_showmessages_ = from.notifications_showmessages_;
    }
    if (cached_has_bits & 0x00000020u) {
      sounds_showingame_ = from.sounds_showingame_;
    }
    if (cached_has_bits & 0x00000040u) {
      sounds_showonline_ = from.sounds_showonline_;
    }
    if (cached_has_bits & 0x00000080u) {
      sounds_showmessages_ = from.sounds_showmessages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_notifications_sendmobile(from._internal_notifications_sendmobile());
  }
}

void PerFriendPreferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerFriendPreferences::CopyFrom(const PerFriendPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PerFriendPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerFriendPreferences::IsInitialized() const {
  return true;
}

void PerFriendPreferences::InternalSwap(PerFriendPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerFriendPreferences, notifications_sendmobile_)
      + sizeof(PerFriendPreferences::notifications_sendmobile_)
      - PROTOBUF_FIELD_OFFSET(PerFriendPreferences, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerFriendPreferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  preferences_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetPerFriendPreferences_Response)
}
CPlayer_GetPerFriendPreferences_Response::CPlayer_GetPerFriendPreferences_Response(const CPlayer_GetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      preferences_(from.preferences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetPerFriendPreferences_Response)
}

void CPlayer_GetPerFriendPreferences_Response::SharedCtor() {
}

CPlayer_GetPerFriendPreferences_Response::~CPlayer_GetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetPerFriendPreferences_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetPerFriendPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetPerFriendPreferences_Response::ArenaDtor(void* object) {
  CPlayer_GetPerFriendPreferences_Response* _this = reinterpret_cast< CPlayer_GetPerFriendPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_GetPerFriendPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetPerFriendPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferences_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetPerFriendPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preferences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetPerFriendPreferences_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetPerFriendPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preferences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_preferences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_GetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetPerFriendPreferences_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PerFriendPreferences preferences = 1;
  total_size += 1UL * this->_internal_preferences_size();
  for (const auto& msg : this->preferences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetPerFriendPreferences_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetPerFriendPreferences_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetPerFriendPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetPerFriendPreferences_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetPerFriendPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetPerFriendPreferences_Response::MergeFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferences_.MergeFrom(from.preferences_);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetPerFriendPreferences_Response::CopyFrom(const CPlayer_GetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetPerFriendPreferences_Response::InternalSwap(CPlayer_GetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  preferences_.InternalSwap(&other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetPerFriendPreferences_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_SetPerFriendPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetPerFriendPreferences_Request>()._has_bits_);
  static const ::PerFriendPreferences& preferences(const CPlayer_SetPerFriendPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PerFriendPreferences&
CPlayer_SetPerFriendPreferences_Request::_Internal::preferences(const CPlayer_SetPerFriendPreferences_Request* msg) {
  return *msg->preferences_;
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Request)
}
CPlayer_SetPerFriendPreferences_Request::CPlayer_SetPerFriendPreferences_Request(const CPlayer_SetPerFriendPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::PerFriendPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Request)
}

void CPlayer_SetPerFriendPreferences_Request::SharedCtor() {
preferences_ = nullptr;
}

CPlayer_SetPerFriendPreferences_Request::~CPlayer_SetPerFriendPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetPerFriendPreferences_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_SetPerFriendPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetPerFriendPreferences_Request::ArenaDtor(void* object) {
  CPlayer_SetPerFriendPreferences_Request* _this = reinterpret_cast< CPlayer_SetPerFriendPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_SetPerFriendPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetPerFriendPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetPerFriendPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetPerFriendPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetPerFriendPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PerFriendPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_SetPerFriendPreferences_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetPerFriendPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PerFriendPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetPerFriendPreferences_Request)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetPerFriendPreferences_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PerFriendPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetPerFriendPreferences_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetPerFriendPreferences_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_SetPerFriendPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_SetPerFriendPreferences_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_SetPerFriendPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_SetPerFriendPreferences_Request::MergeFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetPerFriendPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _internal_mutable_preferences()->::PerFriendPreferences::MergeFrom(from._internal_preferences());
  }
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetPerFriendPreferences_Request::CopyFrom(const CPlayer_SetPerFriendPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetPerFriendPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Request::InternalSwap(CPlayer_SetPerFriendPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_SetPerFriendPreferences_Response::_Internal {
 public:
};

CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetPerFriendPreferences_Response)
}
CPlayer_SetPerFriendPreferences_Response::CPlayer_SetPerFriendPreferences_Response(const CPlayer_SetPerFriendPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetPerFriendPreferences_Response)
}

void CPlayer_SetPerFriendPreferences_Response::SharedCtor() {
}

CPlayer_SetPerFriendPreferences_Response::~CPlayer_SetPerFriendPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_SetPerFriendPreferences_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_SetPerFriendPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_SetPerFriendPreferences_Response::ArenaDtor(void* object) {
  CPlayer_SetPerFriendPreferences_Response* _this = reinterpret_cast< CPlayer_SetPerFriendPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_SetPerFriendPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetPerFriendPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetPerFriendPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetPerFriendPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetPerFriendPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_SetPerFriendPreferences_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetPerFriendPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetPerFriendPreferences_Response)
  return target;
}

size_t CPlayer_SetPerFriendPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetPerFriendPreferences_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetPerFriendPreferences_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_SetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetPerFriendPreferences_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_SetPerFriendPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_SetPerFriendPreferences_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_SetPerFriendPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_SetPerFriendPreferences_Response::MergeFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetPerFriendPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_SetPerFriendPreferences_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_SetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetPerFriendPreferences_Response::CopyFrom(const CPlayer_SetPerFriendPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetPerFriendPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetPerFriendPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_SetPerFriendPreferences_Response::InternalSwap(CPlayer_SetPerFriendPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetPerFriendPreferences_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_AddFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Request)
}
CPlayer_AddFriend_Request::CPlayer_AddFriend_Request(const CPlayer_AddFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Request)
}

void CPlayer_AddFriend_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_AddFriend_Request::~CPlayer_AddFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_AddFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_AddFriend_Request::ArenaDtor(void* object) {
  CPlayer_AddFriend_Request* _this = reinterpret_cast< CPlayer_AddFriend_Request* >(object);
  (void)_this;
}
void CPlayer_AddFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AddFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AddFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_AddFriend_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Request)
  return target;
}

size_t CPlayer_AddFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of user to whom to send a friend invite."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AddFriend_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AddFriend_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_AddFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_AddFriend_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_AddFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_AddFriend_Request::MergeFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CPlayer_AddFriend_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AddFriend_Request::CopyFrom(const CPlayer_AddFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Request::InternalSwap(CPlayer_AddFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_AddFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_AddFriend_Response>()._has_bits_);
  static void set_has_invite_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_AddFriend_Response)
}
CPlayer_AddFriend_Response::CPlayer_AddFriend_Response(const CPlayer_AddFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&invite_sent_, &from.invite_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&friend_relationship_) -
    reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_AddFriend_Response)
}

void CPlayer_AddFriend_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invite_sent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&friend_relationship_) -
    reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
}

CPlayer_AddFriend_Response::~CPlayer_AddFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_AddFriend_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_AddFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_AddFriend_Response::ArenaDtor(void* object) {
  CPlayer_AddFriend_Response* _this = reinterpret_cast< CPlayer_AddFriend_Response* >(object);
  (void)_this;
}
void CPlayer_AddFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_AddFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_AddFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_AddFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&invite_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friend_relationship_) -
        reinterpret_cast<char*>(&invite_sent_)) + sizeof(friend_relationship_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_AddFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_invite_sent(&has_bits);
          invite_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_AddFriend_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_AddFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_invite_sent(), target);
  }

  // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_AddFriend_Response)
  return target;
}

size_t CPlayer_AddFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_AddFriend_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool invite_sent = 1 [(.description) = "True if the operation was successful, false otherwise."];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 friend_relationship = 2 [(.description) = "the resulting relationship.  Depending on state, may move directly to friends rather than invite sent"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friend_relationship());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_AddFriend_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AddFriend_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_AddFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_AddFriend_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_AddFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_AddFriend_Response::MergeFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_AddFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      invite_sent_ = from.invite_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      friend_relationship_ = from.friend_relationship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_AddFriend_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AddFriend_Response::CopyFrom(const CPlayer_AddFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_AddFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AddFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_AddFriend_Response::InternalSwap(CPlayer_AddFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, friend_relationship_)
      + sizeof(CPlayer_AddFriend_Response::friend_relationship_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_AddFriend_Response, invite_sent_)>(
          reinterpret_cast<char*>(&invite_sent_),
          reinterpret_cast<char*>(&other->invite_sent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_AddFriend_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_RemoveFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Request)
}
CPlayer_RemoveFriend_Request::CPlayer_RemoveFriend_Request(const CPlayer_RemoveFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Request)
}

void CPlayer_RemoveFriend_Request::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CPlayer_RemoveFriend_Request::~CPlayer_RemoveFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_RemoveFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_RemoveFriend_Request::ArenaDtor(void* object) {
  CPlayer_RemoveFriend_Request* _this = reinterpret_cast< CPlayer_RemoveFriend_Request* >(object);
  (void)_this;
}
void CPlayer_RemoveFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RemoveFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_RemoveFriend_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Request)
  return target;
}

size_t CPlayer_RemoveFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1 [(.description) = "Steam ID of friend to remove."];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_RemoveFriend_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_RemoveFriend_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_RemoveFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_RemoveFriend_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_RemoveFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_RemoveFriend_Request::MergeFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CPlayer_RemoveFriend_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_RemoveFriend_Request::CopyFrom(const CPlayer_RemoveFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Request::InternalSwap(CPlayer_RemoveFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_RemoveFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_RemoveFriend_Response>()._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_RemoveFriend_Response)
}
CPlayer_RemoveFriend_Response::CPlayer_RemoveFriend_Response(const CPlayer_RemoveFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_RemoveFriend_Response)
}

void CPlayer_RemoveFriend_Response::SharedCtor() {
friend_relationship_ = 0u;
}

CPlayer_RemoveFriend_Response::~CPlayer_RemoveFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_RemoveFriend_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_RemoveFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_RemoveFriend_Response::ArenaDtor(void* object) {
  CPlayer_RemoveFriend_Response* _this = reinterpret_cast< CPlayer_RemoveFriend_Response* >(object);
  (void)_this;
}
void CPlayer_RemoveFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_RemoveFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_RemoveFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_RemoveFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_RemoveFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_RemoveFriend_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_RemoveFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_RemoveFriend_Response)
  return target;
}

size_t CPlayer_RemoveFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_RemoveFriend_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_friend_relationship());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_RemoveFriend_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_RemoveFriend_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_RemoveFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_RemoveFriend_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_RemoveFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_RemoveFriend_Response::MergeFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_RemoveFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _internal_set_friend_relationship(from._internal_friend_relationship());
  }
}

void CPlayer_RemoveFriend_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_RemoveFriend_Response::CopyFrom(const CPlayer_RemoveFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_RemoveFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_RemoveFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_RemoveFriend_Response::InternalSwap(CPlayer_RemoveFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_RemoveFriend_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_IgnoreFriend_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unignore(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Request)
}
CPlayer_IgnoreFriend_Request::CPlayer_IgnoreFriend_Request(const CPlayer_IgnoreFriend_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unignore_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Request)
}

void CPlayer_IgnoreFriend_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unignore_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
}

CPlayer_IgnoreFriend_Request::~CPlayer_IgnoreFriend_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_IgnoreFriend_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_IgnoreFriend_Request::ArenaDtor(void* object) {
  CPlayer_IgnoreFriend_Request* _this = reinterpret_cast< CPlayer_IgnoreFriend_Request* >(object);
  (void)_this;
}
void CPlayer_IgnoreFriend_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IgnoreFriend_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unignore_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(unignore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unignore(&has_bits);
          unignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_IgnoreFriend_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_unignore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Request)
  return target;
}

size_t CPlayer_IgnoreFriend_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool unignore = 2 [(.description) = "If set, remove from ignore/block list instead of adding "];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IgnoreFriend_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IgnoreFriend_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_IgnoreFriend_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_IgnoreFriend_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_IgnoreFriend_Request)
    MergeFrom(*source);
  }
}

void CPlayer_IgnoreFriend_Request::MergeFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      unignore_ = from.unignore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IgnoreFriend_Request::CopyFrom(const CPlayer_IgnoreFriend_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Request::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Request::InternalSwap(CPlayer_IgnoreFriend_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, unignore_)
      + sizeof(CPlayer_IgnoreFriend_Request::unignore_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_IgnoreFriend_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_IgnoreFriend_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_IgnoreFriend_Response>()._has_bits_);
  static void set_has_friend_relationship(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_IgnoreFriend_Response)
}
CPlayer_IgnoreFriend_Response::CPlayer_IgnoreFriend_Response(const CPlayer_IgnoreFriend_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  friend_relationship_ = from.friend_relationship_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_IgnoreFriend_Response)
}

void CPlayer_IgnoreFriend_Response::SharedCtor() {
friend_relationship_ = 0u;
}

CPlayer_IgnoreFriend_Response::~CPlayer_IgnoreFriend_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_IgnoreFriend_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_IgnoreFriend_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_IgnoreFriend_Response::ArenaDtor(void* object) {
  CPlayer_IgnoreFriend_Response* _this = reinterpret_cast< CPlayer_IgnoreFriend_Response* >(object);
  (void)_this;
}
void CPlayer_IgnoreFriend_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_IgnoreFriend_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_IgnoreFriend_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_IgnoreFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friend_relationship_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_IgnoreFriend_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_friend_relationship(&has_bits);
          friend_relationship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_IgnoreFriend_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_IgnoreFriend_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friend_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_IgnoreFriend_Response)
  return target;
}

size_t CPlayer_IgnoreFriend_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_IgnoreFriend_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 friend_relationship = 1 [(.description) = "the resulting relationship"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_friend_relationship());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_IgnoreFriend_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_IgnoreFriend_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_IgnoreFriend_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_IgnoreFriend_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_IgnoreFriend_Response)
    MergeFrom(*source);
  }
}

void CPlayer_IgnoreFriend_Response::MergeFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_IgnoreFriend_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_friend_relationship()) {
    _internal_set_friend_relationship(from._internal_friend_relationship());
  }
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_IgnoreFriend_Response::CopyFrom(const CPlayer_IgnoreFriend_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_IgnoreFriend_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_IgnoreFriend_Response::IsInitialized() const {
  return true;
}

void CPlayer_IgnoreFriend_Response::InternalSwap(CPlayer_IgnoreFriend_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(friend_relationship_, other->friend_relationship_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_IgnoreFriend_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetCommunityPreferences_Request::_Internal {
 public:
};

CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Request)
}
CPlayer_GetCommunityPreferences_Request::CPlayer_GetCommunityPreferences_Request(const CPlayer_GetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Request)
}

void CPlayer_GetCommunityPreferences_Request::SharedCtor() {
}

CPlayer_GetCommunityPreferences_Request::~CPlayer_GetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetCommunityPreferences_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetCommunityPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetCommunityPreferences_Request::ArenaDtor(void* object) {
  CPlayer_GetCommunityPreferences_Request* _this = reinterpret_cast< CPlayer_GetCommunityPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_GetCommunityPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetCommunityPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetCommunityPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetCommunityPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetCommunityPreferences_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetCommunityPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetCommunityPreferences_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetCommunityPreferences_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetCommunityPreferences_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetCommunityPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetCommunityPreferences_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetCommunityPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetCommunityPreferences_Request::MergeFrom(const CPlayer_GetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_GetCommunityPreferences_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetCommunityPreferences_Request::CopyFrom(const CPlayer_GetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Request::InternalSwap(CPlayer_GetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_CommunityPreferences::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_CommunityPreferences>()._has_bits_);
  static void set_has_hide_adult_content_violence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hide_adult_content_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parenthesize_nicknames(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_CommunityPreferences)
}
CPlayer_CommunityPreferences::CPlayer_CommunityPreferences(const CPlayer_CommunityPreferences& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_updated_, &from.timestamp_updated_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_adult_content_sex_) -
    reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(hide_adult_content_sex_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_CommunityPreferences)
}

void CPlayer_CommunityPreferences::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_updated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parenthesize_nicknames_) -
    reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(parenthesize_nicknames_));
hide_adult_content_violence_ = true;
hide_adult_content_sex_ = true;
}

CPlayer_CommunityPreferences::~CPlayer_CommunityPreferences() {
  // @@protoc_insertion_point(destructor:CPlayer_CommunityPreferences)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_CommunityPreferences::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_CommunityPreferences::ArenaDtor(void* object) {
  CPlayer_CommunityPreferences* _this = reinterpret_cast< CPlayer_CommunityPreferences* >(object);
  (void)_this;
}
void CPlayer_CommunityPreferences::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_CommunityPreferences::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_CommunityPreferences::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_CommunityPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&timestamp_updated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parenthesize_nicknames_) -
        reinterpret_cast<char*>(&timestamp_updated_)) + sizeof(parenthesize_nicknames_));
    hide_adult_content_violence_ = true;
    hide_adult_content_sex_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_CommunityPreferences::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool hide_adult_content_violence = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hide_adult_content_violence(&has_bits);
          hide_adult_content_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hide_adult_content_sex = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hide_adult_content_sex(&has_bits);
          hide_adult_content_sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp_updated(&has_bits);
          timestamp_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool parenthesize_nicknames = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_parenthesize_nicknames(&has_bits);
          parenthesize_nicknames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_CommunityPreferences::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_CommunityPreferences)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hide_adult_content_violence = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_hide_adult_content_violence(), target);
  }

  // optional bool hide_adult_content_sex = 2 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_hide_adult_content_sex(), target);
  }

  // optional uint32 timestamp_updated = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp_updated(), target);
  }

  // optional bool parenthesize_nicknames = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parenthesize_nicknames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_CommunityPreferences)
  return target;
}

size_t CPlayer_CommunityPreferences::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_CommunityPreferences)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 timestamp_updated = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp_updated());
    }

    // optional bool parenthesize_nicknames = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_violence = 1 [default = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool hide_adult_content_sex = 2 [default = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_CommunityPreferences::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_CommunityPreferences* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_CommunityPreferences>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_CommunityPreferences)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_CommunityPreferences)
    MergeFrom(*source);
  }
}

void CPlayer_CommunityPreferences::MergeFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_CommunityPreferences)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_updated_ = from.timestamp_updated_;
    }
    if (cached_has_bits & 0x00000002u) {
      parenthesize_nicknames_ = from.parenthesize_nicknames_;
    }
    if (cached_has_bits & 0x00000004u) {
      hide_adult_content_violence_ = from.hide_adult_content_violence_;
    }
    if (cached_has_bits & 0x00000008u) {
      hide_adult_content_sex_ = from.hide_adult_content_sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_CommunityPreferences::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_CommunityPreferences::CopyFrom(const CPlayer_CommunityPreferences& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_CommunityPreferences)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_CommunityPreferences::IsInitialized() const {
  return true;
}

void CPlayer_CommunityPreferences::InternalSwap(CPlayer_CommunityPreferences* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, parenthesize_nicknames_)
      + sizeof(CPlayer_CommunityPreferences::parenthesize_nicknames_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_CommunityPreferences, timestamp_updated_)>(
          reinterpret_cast<char*>(&timestamp_updated_),
          reinterpret_cast<char*>(&other->timestamp_updated_));
  swap(hide_adult_content_violence_, other->hide_adult_content_violence_);
  swap(hide_adult_content_sex_, other->hide_adult_content_sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_CommunityPreferences::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetCommunityPreferences_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetCommunityPreferences_Response>()._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_GetCommunityPreferences_Response* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_GetCommunityPreferences_Response::_Internal::preferences(const CPlayer_GetCommunityPreferences_Response* msg) {
  return *msg->preferences_;
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetCommunityPreferences_Response)
}
CPlayer_GetCommunityPreferences_Response::CPlayer_GetCommunityPreferences_Response(const CPlayer_GetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetCommunityPreferences_Response)
}

void CPlayer_GetCommunityPreferences_Response::SharedCtor() {
preferences_ = nullptr;
}

CPlayer_GetCommunityPreferences_Response::~CPlayer_GetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetCommunityPreferences_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetCommunityPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_GetCommunityPreferences_Response::ArenaDtor(void* object) {
  CPlayer_GetCommunityPreferences_Response* _this = reinterpret_cast< CPlayer_GetCommunityPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_GetCommunityPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetCommunityPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetCommunityPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetCommunityPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetCommunityPreferences_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetCommunityPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_GetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetCommunityPreferences_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetCommunityPreferences_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetCommunityPreferences_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetCommunityPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetCommunityPreferences_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetCommunityPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetCommunityPreferences_Response::MergeFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(from._internal_preferences());
  }
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetCommunityPreferences_Response::CopyFrom(const CPlayer_GetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetCommunityPreferences_Response::InternalSwap(CPlayer_GetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetCommunityPreferences_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_SetCommunityPreferences_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_SetCommunityPreferences_Request>()._has_bits_);
  static const ::CPlayer_CommunityPreferences& preferences(const CPlayer_SetCommunityPreferences_Request* msg);
  static void set_has_preferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CPlayer_CommunityPreferences&
CPlayer_SetCommunityPreferences_Request::_Internal::preferences(const CPlayer_SetCommunityPreferences_Request* msg) {
  return *msg->preferences_;
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Request)
}
CPlayer_SetCommunityPreferences_Request::CPlayer_SetCommunityPreferences_Request(const CPlayer_SetCommunityPreferences_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_preferences()) {
    preferences_ = new ::CPlayer_CommunityPreferences(*from.preferences_);
  } else {
    preferences_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Request)
}

void CPlayer_SetCommunityPreferences_Request::SharedCtor() {
preferences_ = nullptr;
}

CPlayer_SetCommunityPreferences_Request::~CPlayer_SetCommunityPreferences_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_SetCommunityPreferences_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_SetCommunityPreferences_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete preferences_;
}

void CPlayer_SetCommunityPreferences_Request::ArenaDtor(void* object) {
  CPlayer_SetCommunityPreferences_Request* _this = reinterpret_cast< CPlayer_SetCommunityPreferences_Request* >(object);
  (void)_this;
}
void CPlayer_SetCommunityPreferences_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetCommunityPreferences_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetCommunityPreferences_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetCommunityPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preferences_ != nullptr);
    preferences_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetCommunityPreferences_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CPlayer_CommunityPreferences preferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_preferences(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_SetCommunityPreferences_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetCommunityPreferences_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CPlayer_CommunityPreferences preferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::preferences(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetCommunityPreferences_Request)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetCommunityPreferences_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CPlayer_CommunityPreferences preferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preferences_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetCommunityPreferences_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetCommunityPreferences_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_SetCommunityPreferences_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_SetCommunityPreferences_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_SetCommunityPreferences_Request)
    MergeFrom(*source);
  }
}

void CPlayer_SetCommunityPreferences_Request::MergeFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetCommunityPreferences_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_preferences()) {
    _internal_mutable_preferences()->::CPlayer_CommunityPreferences::MergeFrom(from._internal_preferences());
  }
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetCommunityPreferences_Request::CopyFrom(const CPlayer_SetCommunityPreferences_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetCommunityPreferences_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Request::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Request::InternalSwap(CPlayer_SetCommunityPreferences_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preferences_, other->preferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_SetCommunityPreferences_Response::_Internal {
 public:
};

CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_SetCommunityPreferences_Response)
}
CPlayer_SetCommunityPreferences_Response::CPlayer_SetCommunityPreferences_Response(const CPlayer_SetCommunityPreferences_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_SetCommunityPreferences_Response)
}

void CPlayer_SetCommunityPreferences_Response::SharedCtor() {
}

CPlayer_SetCommunityPreferences_Response::~CPlayer_SetCommunityPreferences_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_SetCommunityPreferences_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_SetCommunityPreferences_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_SetCommunityPreferences_Response::ArenaDtor(void* object) {
  CPlayer_SetCommunityPreferences_Response* _this = reinterpret_cast< CPlayer_SetCommunityPreferences_Response* >(object);
  (void)_this;
}
void CPlayer_SetCommunityPreferences_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_SetCommunityPreferences_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_SetCommunityPreferences_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_SetCommunityPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_SetCommunityPreferences_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_SetCommunityPreferences_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_SetCommunityPreferences_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_SetCommunityPreferences_Response)
  return target;
}

size_t CPlayer_SetCommunityPreferences_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_SetCommunityPreferences_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_SetCommunityPreferences_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_SetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_SetCommunityPreferences_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_SetCommunityPreferences_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_SetCommunityPreferences_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_SetCommunityPreferences_Response)
    MergeFrom(*source);
  }
}

void CPlayer_SetCommunityPreferences_Response::MergeFrom(const CPlayer_SetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_SetCommunityPreferences_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_SetCommunityPreferences_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_SetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_SetCommunityPreferences_Response::CopyFrom(const CPlayer_SetCommunityPreferences_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_SetCommunityPreferences_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_SetCommunityPreferences_Response::IsInitialized() const {
  return true;
}

void CPlayer_SetCommunityPreferences_Response::InternalSwap(CPlayer_SetCommunityPreferences_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_SetCommunityPreferences_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Request>()._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}
CPlayer_GetNewSteamAnnouncementState_Request::CPlayer_GetNewSteamAnnouncementState_Request(const CPlayer_GetNewSteamAnnouncementState_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Request)
}

void CPlayer_GetNewSteamAnnouncementState_Request::SharedCtor() {
language_ = 0;
}

CPlayer_GetNewSteamAnnouncementState_Request::~CPlayer_GetNewSteamAnnouncementState_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetNewSteamAnnouncementState_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_GetNewSteamAnnouncementState_Request::ArenaDtor(void* object) {
  CPlayer_GetNewSteamAnnouncementState_Request* _this = reinterpret_cast< CPlayer_GetNewSteamAnnouncementState_Request* >(object);
  (void)_this;
}
void CPlayer_GetNewSteamAnnouncementState_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNewSteamAnnouncementState_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetNewSteamAnnouncementState_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 language = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Request)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 language = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNewSteamAnnouncementState_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNewSteamAnnouncementState_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetNewSteamAnnouncementState_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetNewSteamAnnouncementState_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetNewSteamAnnouncementState_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetNewSteamAnnouncementState_Request::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_language()) {
    _internal_set_language(from._internal_language());
  }
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNewSteamAnnouncementState_Request::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Request::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(language_, other->language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_GetNewSteamAnnouncementState_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_GetNewSteamAnnouncementState_Response>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_announcement_headline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_announcement_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}
CPlayer_GetNewSteamAnnouncementState_Response::CPlayer_GetNewSteamAnnouncementState_Response(const CPlayer_GetNewSteamAnnouncementState_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_announcement_headline()) {
    announcement_headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_headline(), 
      GetArena());
  }
  announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_announcement_url()) {
    announcement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_announcement_url(), 
      GetArena());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_GetNewSteamAnnouncementState_Response)
}

void CPlayer_GetNewSteamAnnouncementState_Response::SharedCtor() {
announcement_headline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
announcement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&announcement_gid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
}

CPlayer_GetNewSteamAnnouncementState_Response::~CPlayer_GetNewSteamAnnouncementState_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_GetNewSteamAnnouncementState_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_GetNewSteamAnnouncementState_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  announcement_headline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  announcement_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPlayer_GetNewSteamAnnouncementState_Response::ArenaDtor(void* object) {
  CPlayer_GetNewSteamAnnouncementState_Response* _this = reinterpret_cast< CPlayer_GetNewSteamAnnouncementState_Response* >(object);
  (void)_this;
}
void CPlayer_GetNewSteamAnnouncementState_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_GetNewSteamAnnouncementState_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_GetNewSteamAnnouncementState_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_GetNewSteamAnnouncementState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_headline_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      announcement_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&announcement_gid_) -
        reinterpret_cast<char*>(&state_)) + sizeof(announcement_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_GetNewSteamAnnouncementState_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string announcement_headline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_announcement_headline();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string announcement_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_announcement_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_posted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_posted(&has_bits);
          time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 announcement_gid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_GetNewSteamAnnouncementState_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_GetNewSteamAnnouncementState_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // optional string announcement_headline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_headline().data(), static_cast<int>(this->_internal_announcement_headline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_headline");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_announcement_headline(), target);
  }

  // optional string announcement_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_announcement_url().data(), static_cast<int>(this->_internal_announcement_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CPlayer_GetNewSteamAnnouncementState_Response.announcement_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_announcement_url(), target);
  }

  // optional uint32 time_posted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_posted(), target);
  }

  // optional uint64 announcement_gid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_announcement_gid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_GetNewSteamAnnouncementState_Response)
  return target;
}

size_t CPlayer_GetNewSteamAnnouncementState_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_GetNewSteamAnnouncementState_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string announcement_headline = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_headline());
    }

    // optional string announcement_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_announcement_url());
    }

    // optional int32 state = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

    // optional uint32 time_posted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_posted());
    }

    // optional uint64 announcement_gid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_announcement_gid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_GetNewSteamAnnouncementState_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetNewSteamAnnouncementState_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_GetNewSteamAnnouncementState_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_GetNewSteamAnnouncementState_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_GetNewSteamAnnouncementState_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetNewSteamAnnouncementState_Response::MergeFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_announcement_headline(from._internal_announcement_headline());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_announcement_url(from._internal_announcement_url());
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_posted_ = from.time_posted_;
    }
    if (cached_has_bits & 0x00000010u) {
      announcement_gid_ = from.announcement_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetNewSteamAnnouncementState_Response::CopyFrom(const CPlayer_GetNewSteamAnnouncementState_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_GetNewSteamAnnouncementState_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetNewSteamAnnouncementState_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetNewSteamAnnouncementState_Response::InternalSwap(CPlayer_GetNewSteamAnnouncementState_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  announcement_headline_.Swap(&other->announcement_headline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  announcement_url_.Swap(&other->announcement_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, announcement_gid_)
      + sizeof(CPlayer_GetNewSteamAnnouncementState_Response::announcement_gid_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_GetNewSteamAnnouncementState_Response, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_GetNewSteamAnnouncementState_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CPlayer_UpdateSteamAnnouncementLastRead_Request>()._has_bits_);
  static void set_has_announcement_gid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_posted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}
CPlayer_UpdateSteamAnnouncementLastRead_Request::CPlayer_UpdateSteamAnnouncementLastRead_Request(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&announcement_gid_, &from.announcement_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_posted_) -
    reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&announcement_gid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_posted_) -
    reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
}

CPlayer_UpdateSteamAnnouncementLastRead_Request::~CPlayer_UpdateSteamAnnouncementLastRead_Request() {
  // @@protoc_insertion_point(destructor:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::ArenaDtor(void* object) {
  CPlayer_UpdateSteamAnnouncementLastRead_Request* _this = reinterpret_cast< CPlayer_UpdateSteamAnnouncementLastRead_Request* >(object);
  (void)_this;
}
void CPlayer_UpdateSteamAnnouncementLastRead_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_UpdateSteamAnnouncementLastRead_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&announcement_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_posted_) -
        reinterpret_cast<char*>(&announcement_gid_)) + sizeof(time_posted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 announcement_gid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_announcement_gid(&has_bits);
          announcement_gid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_posted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_posted(&has_bits);
          time_posted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_UpdateSteamAnnouncementLastRead_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 announcement_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_announcement_gid(), target);
  }

  // optional uint32 time_posted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_posted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 announcement_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_announcement_gid());
    }

    // optional uint32 time_posted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_posted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_UpdateSteamAnnouncementLastRead_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_UpdateSteamAnnouncementLastRead_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_UpdateSteamAnnouncementLastRead_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_UpdateSteamAnnouncementLastRead_Request)
    MergeFrom(*source);
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      announcement_gid_ = from.announcement_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_posted_ = from.time_posted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Request::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Request::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, time_posted_)
      + sizeof(CPlayer_UpdateSteamAnnouncementLastRead_Request::time_posted_)
      - PROTOBUF_FIELD_OFFSET(CPlayer_UpdateSteamAnnouncementLastRead_Request, announcement_gid_)>(
          reinterpret_cast<char*>(&announcement_gid_),
          reinterpret_cast<char*>(&other->announcement_gid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPlayer_UpdateSteamAnnouncementLastRead_Response::_Internal {
 public:
};

CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}
CPlayer_UpdateSteamAnnouncementLastRead_Response::CPlayer_UpdateSteamAnnouncementLastRead_Response(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SharedCtor() {
}

CPlayer_UpdateSteamAnnouncementLastRead_Response::~CPlayer_UpdateSteamAnnouncementLastRead_Response() {
  // @@protoc_insertion_point(destructor:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::ArenaDtor(void* object) {
  CPlayer_UpdateSteamAnnouncementLastRead_Response* _this = reinterpret_cast< CPlayer_UpdateSteamAnnouncementLastRead_Response* >(object);
  (void)_this;
}
void CPlayer_UpdateSteamAnnouncementLastRead_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPlayer_UpdateSteamAnnouncementLastRead_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPlayer_UpdateSteamAnnouncementLastRead_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPlayer_UpdateSteamAnnouncementLastRead_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  return target;
}

size_t CPlayer_UpdateSteamAnnouncementLastRead_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_UpdateSteamAnnouncementLastRead_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPlayer_UpdateSteamAnnouncementLastRead_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPlayer_UpdateSteamAnnouncementLastRead_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPlayer_UpdateSteamAnnouncementLastRead_Response)
    MergeFrom(*source);
  }
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::MergeFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::CopyFrom(const CPlayer_UpdateSteamAnnouncementLastRead_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPlayer_UpdateSteamAnnouncementLastRead_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_UpdateSteamAnnouncementLastRead_Response::IsInitialized() const {
  return true;
}

void CPlayer_UpdateSteamAnnouncementLastRead_Response::InternalSwap(CPlayer_UpdateSteamAnnouncementLastRead_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CPlayer_UpdateSteamAnnouncementLastRead_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Player::~Player() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fplayer_2esteamworkssdk_2eproto);
  return file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Player::GetDescriptor() {
  return descriptor();
}

void Player::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*,
                         ::CPlayer_GetMutualFriendsForIncomingInvites_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMutualFriendsForIncomingInvites() not implemented.");
  done->Run();
}

void Player::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetFriendsGameplayInfo_Request*,
                         ::CPlayer_GetFriendsGameplayInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFriendsGameplayInfo() not implemented.");
  done->Run();
}

void Player::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetGameBadgeLevels_Request*,
                         ::CPlayer_GetGameBadgeLevels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameBadgeLevels() not implemented.");
  done->Run();
}

void Player::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetLastPlayedTimes_Request*,
                         ::CPlayer_GetLastPlayedTimes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetLastPlayedTimes() not implemented.");
  done->Run();
}

void Player::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AcceptSSA_Request*,
                         ::CPlayer_AcceptSSA_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptSSA() not implemented.");
  done->Run();
}

void Player::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNicknameList_Request*,
                         ::CPlayer_GetNicknameList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNicknameList() not implemented.");
  done->Run();
}

void Player::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetPerFriendPreferences_Request*,
                         ::CPlayer_GetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetPerFriendPreferences_Request*,
                         ::CPlayer_SetPerFriendPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPerFriendPreferences() not implemented.");
  done->Run();
}

void Player::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_AddFriend_Request*,
                         ::CPlayer_AddFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddFriend() not implemented.");
  done->Run();
}

void Player::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_RemoveFriend_Request*,
                         ::CPlayer_RemoveFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveFriend() not implemented.");
  done->Run();
}

void Player::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_IgnoreFriend_Request*,
                         ::CPlayer_IgnoreFriend_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method IgnoreFriend() not implemented.");
  done->Run();
}

void Player::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetCommunityPreferences_Request*,
                         ::CPlayer_GetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_SetCommunityPreferences_Request*,
                         ::CPlayer_SetCommunityPreferences_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetCommunityPreferences() not implemented.");
  done->Run();
}

void Player::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_GetNewSteamAnnouncementState_Request*,
                         ::CPlayer_GetNewSteamAnnouncementState_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetNewSteamAnnouncementState() not implemented.");
  done->Run();
}

void Player::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*,
                         ::CPlayer_UpdateSteamAnnouncementLastRead_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UpdateSteamAnnouncementLastRead() not implemented.");
  done->Run();
}

void Player::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_steammessages_5fplayer_2esteamworkssdk_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetMutualFriendsForIncomingInvites(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetMutualFriendsForIncomingInvites_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetMutualFriendsForIncomingInvites_Response*>(
                 response),
             done);
      break;
    case 1:
      GetFriendsGameplayInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetFriendsGameplayInfo_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetFriendsGameplayInfo_Response*>(
                 response),
             done);
      break;
    case 2:
      GetGameBadgeLevels(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetGameBadgeLevels_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetGameBadgeLevels_Response*>(
                 response),
             done);
      break;
    case 3:
      ClientGetLastPlayedTimes(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetLastPlayedTimes_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetLastPlayedTimes_Response*>(
                 response),
             done);
      break;
    case 4:
      AcceptSSA(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AcceptSSA_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AcceptSSA_Response*>(
                 response),
             done);
      break;
    case 5:
      GetNicknameList(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNicknameList_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNicknameList_Response*>(
                 response),
             done);
      break;
    case 6:
      GetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 7:
      SetPerFriendPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetPerFriendPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetPerFriendPreferences_Response*>(
                 response),
             done);
      break;
    case 8:
      AddFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_AddFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_AddFriend_Response*>(
                 response),
             done);
      break;
    case 9:
      RemoveFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_RemoveFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_RemoveFriend_Response*>(
                 response),
             done);
      break;
    case 10:
      IgnoreFriend(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_IgnoreFriend_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_IgnoreFriend_Response*>(
                 response),
             done);
      break;
    case 11:
      GetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 12:
      SetCommunityPreferences(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_SetCommunityPreferences_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_SetCommunityPreferences_Response*>(
                 response),
             done);
      break;
    case 13:
      GetNewSteamAnnouncementState(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_GetNewSteamAnnouncementState_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_GetNewSteamAnnouncementState_Response*>(
                 response),
             done);
      break;
    case 14:
      UpdateSteamAnnouncementLastRead(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::CPlayer_UpdateSteamAnnouncementLastRead_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::CPlayer_UpdateSteamAnnouncementLastRead_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Request::default_instance();
    case 1:
      return ::CPlayer_GetFriendsGameplayInfo_Request::default_instance();
    case 2:
      return ::CPlayer_GetGameBadgeLevels_Request::default_instance();
    case 3:
      return ::CPlayer_GetLastPlayedTimes_Request::default_instance();
    case 4:
      return ::CPlayer_AcceptSSA_Request::default_instance();
    case 5:
      return ::CPlayer_GetNicknameList_Request::default_instance();
    case 6:
      return ::CPlayer_GetPerFriendPreferences_Request::default_instance();
    case 7:
      return ::CPlayer_SetPerFriendPreferences_Request::default_instance();
    case 8:
      return ::CPlayer_AddFriend_Request::default_instance();
    case 9:
      return ::CPlayer_RemoveFriend_Request::default_instance();
    case 10:
      return ::CPlayer_IgnoreFriend_Request::default_instance();
    case 11:
      return ::CPlayer_GetCommunityPreferences_Request::default_instance();
    case 12:
      return ::CPlayer_SetCommunityPreferences_Request::default_instance();
    case 13:
      return ::CPlayer_GetNewSteamAnnouncementState_Request::default_instance();
    case 14:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Player::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::CPlayer_GetMutualFriendsForIncomingInvites_Response::default_instance();
    case 1:
      return ::CPlayer_GetFriendsGameplayInfo_Response::default_instance();
    case 2:
      return ::CPlayer_GetGameBadgeLevels_Response::default_instance();
    case 3:
      return ::CPlayer_GetLastPlayedTimes_Response::default_instance();
    case 4:
      return ::CPlayer_AcceptSSA_Response::default_instance();
    case 5:
      return ::CPlayer_GetNicknameList_Response::default_instance();
    case 6:
      return ::CPlayer_GetPerFriendPreferences_Response::default_instance();
    case 7:
      return ::CPlayer_SetPerFriendPreferences_Response::default_instance();
    case 8:
      return ::CPlayer_AddFriend_Response::default_instance();
    case 9:
      return ::CPlayer_RemoveFriend_Response::default_instance();
    case 10:
      return ::CPlayer_IgnoreFriend_Response::default_instance();
    case 11:
      return ::CPlayer_GetCommunityPreferences_Response::default_instance();
    case 12:
      return ::CPlayer_SetCommunityPreferences_Response::default_instance();
    case 13:
      return ::CPlayer_GetNewSteamAnnouncementState_Response::default_instance();
    case 14:
      return ::CPlayer_UpdateSteamAnnouncementLastRead_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Player_Stub::Player_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Player_Stub::Player_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Player_Stub::~Player_Stub() {
  if (owns_channel_) delete channel_;
}

void Player_Stub::GetMutualFriendsForIncomingInvites(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetMutualFriendsForIncomingInvites_Request* request,
                              ::CPlayer_GetMutualFriendsForIncomingInvites_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Player_Stub::GetFriendsGameplayInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetFriendsGameplayInfo_Request* request,
                              ::CPlayer_GetFriendsGameplayInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Player_Stub::GetGameBadgeLevels(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetGameBadgeLevels_Request* request,
                              ::CPlayer_GetGameBadgeLevels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Player_Stub::ClientGetLastPlayedTimes(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetLastPlayedTimes_Request* request,
                              ::CPlayer_GetLastPlayedTimes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Player_Stub::AcceptSSA(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AcceptSSA_Request* request,
                              ::CPlayer_AcceptSSA_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Player_Stub::GetNicknameList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNicknameList_Request* request,
                              ::CPlayer_GetNicknameList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Player_Stub::GetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetPerFriendPreferences_Request* request,
                              ::CPlayer_GetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Player_Stub::SetPerFriendPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetPerFriendPreferences_Request* request,
                              ::CPlayer_SetPerFriendPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Player_Stub::AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_AddFriend_Request* request,
                              ::CPlayer_AddFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Player_Stub::RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_RemoveFriend_Request* request,
                              ::CPlayer_RemoveFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Player_Stub::IgnoreFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_IgnoreFriend_Request* request,
                              ::CPlayer_IgnoreFriend_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Player_Stub::GetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetCommunityPreferences_Request* request,
                              ::CPlayer_GetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Player_Stub::SetCommunityPreferences(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_SetCommunityPreferences_Request* request,
                              ::CPlayer_SetCommunityPreferences_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Player_Stub::GetNewSteamAnnouncementState(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_GetNewSteamAnnouncementState_Request* request,
                              ::CPlayer_GetNewSteamAnnouncementState_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void Player_Stub::UpdateSteamAnnouncementLastRead(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::CPlayer_UpdateSteamAnnouncementLastRead_Request* request,
                              ::CPlayer_UpdateSteamAnnouncementLastRead_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Request* Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IncomingInviteMutualFriendList* Arena::CreateMaybeMessage< ::CPlayer_IncomingInviteMutualFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IncomingInviteMutualFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetMutualFriendsForIncomingInvites_Response* Arena::CreateMaybeMessage< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetMutualFriendsForIncomingInvites_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Request* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_FriendsGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response_OwnGameplayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetFriendsGameplayInfo_Response* Arena::CreateMaybeMessage< ::CPlayer_GetFriendsGameplayInfo_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetFriendsGameplayInfo_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Request* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response_Badge* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response_Badge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response_Badge >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetGameBadgeLevels_Response* Arena::CreateMaybeMessage< ::CPlayer_GetGameBadgeLevels_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetGameBadgeLevels_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Request* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response_Game* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetLastPlayedTimes_Response* Arena::CreateMaybeMessage< ::CPlayer_GetLastPlayedTimes_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetLastPlayedTimes_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Request* Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AcceptSSA_Response* Arena::CreateMaybeMessage< ::CPlayer_AcceptSSA_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AcceptSSA_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Request* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response_PlayerNickname* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response_PlayerNickname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response_PlayerNickname >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNicknameList_Response* Arena::CreateMaybeMessage< ::CPlayer_GetNicknameList_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNicknameList_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::PerFriendPreferences* Arena::CreateMaybeMessage< ::PerFriendPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PerFriendPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_GetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetPerFriendPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_SetPerFriendPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetPerFriendPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_AddFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_AddFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_AddFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_RemoveFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_RemoveFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_RemoveFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Request* Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_IgnoreFriend_Response* Arena::CreateMaybeMessage< ::CPlayer_IgnoreFriend_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_IgnoreFriend_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_CommunityPreferences* Arena::CreateMaybeMessage< ::CPlayer_CommunityPreferences >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_CommunityPreferences >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_GetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Request* Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_SetCommunityPreferences_Response* Arena::CreateMaybeMessage< ::CPlayer_SetCommunityPreferences_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_SetCommunityPreferences_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Request* Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_GetNewSteamAnnouncementState_Response* Arena::CreateMaybeMessage< ::CPlayer_GetNewSteamAnnouncementState_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_GetNewSteamAnnouncementState_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Request* Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CPlayer_UpdateSteamAnnouncementLastRead_Response* Arena::CreateMaybeMessage< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPlayer_UpdateSteamAnnouncementLastRead_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
